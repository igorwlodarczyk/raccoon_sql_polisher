# Generated from PostgreSQLParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if "." in __name__:
    from .PostgreSQLParserBase import PostgreSQLParserBase
else:
    from PostgreSQLParserBase import PostgreSQLParserBase

def serializedATN():
    return [
        4,1,599,10503,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
        2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,
        7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,
        2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,
        7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,
        2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,
        7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,
        2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,
        7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,
        2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,
        7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
        2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
        7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,
        2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,
        103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,
        2,109,7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,
        7,114,2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,
        2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,
        7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,
        2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,
        7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
        2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,
        7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
        2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
        7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,
        2,164,7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,
        7,169,2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,
        2,175,7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,
        7,180,2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,
        2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,
        7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,
        2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,
        7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
        2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,
        7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
        2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,
        7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,
        2,230,7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,
        7,235,2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,
        2,241,7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,
        7,246,2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,
        2,252,7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,
        7,257,2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,
        2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,
        7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,
        2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,
        7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,
        2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,
        7,290,2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,
        2,296,7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,
        7,301,2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,
        2,307,7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,
        7,312,2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,
        2,318,7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,
        7,323,2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,
        2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,
        7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,
        2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,
        7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,
        2,351,7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,
        7,356,2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,
        2,362,7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,
        7,367,2,368,7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,
        2,373,7,373,2,374,7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,
        7,378,2,379,7,379,2,380,7,380,2,381,7,381,2,382,7,382,2,383,7,383,
        2,384,7,384,2,385,7,385,2,386,7,386,2,387,7,387,2,388,7,388,2,389,
        7,389,2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,2,394,7,394,
        2,395,7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,2,400,
        7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,
        2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,
        7,411,2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,
        2,417,7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,
        7,422,2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,
        2,428,7,428,2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,
        7,433,2,434,7,434,2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,
        2,439,7,439,2,440,7,440,2,441,7,441,2,442,7,442,2,443,7,443,2,444,
        7,444,2,445,7,445,2,446,7,446,2,447,7,447,2,448,7,448,2,449,7,449,
        2,450,7,450,2,451,7,451,2,452,7,452,2,453,7,453,2,454,7,454,2,455,
        7,455,2,456,7,456,2,457,7,457,2,458,7,458,2,459,7,459,2,460,7,460,
        2,461,7,461,2,462,7,462,2,463,7,463,2,464,7,464,2,465,7,465,2,466,
        7,466,2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,2,471,7,471,
        2,472,7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,2,477,
        7,477,2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,
        2,483,7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,
        7,488,2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,
        2,494,7,494,2,495,7,495,2,496,7,496,2,497,7,497,2,498,7,498,2,499,
        7,499,2,500,7,500,2,501,7,501,2,502,7,502,2,503,7,503,2,504,7,504,
        2,505,7,505,2,506,7,506,2,507,7,507,2,508,7,508,2,509,7,509,2,510,
        7,510,2,511,7,511,2,512,7,512,2,513,7,513,2,514,7,514,2,515,7,515,
        2,516,7,516,2,517,7,517,2,518,7,518,2,519,7,519,2,520,7,520,2,521,
        7,521,2,522,7,522,2,523,7,523,2,524,7,524,2,525,7,525,2,526,7,526,
        2,527,7,527,2,528,7,528,2,529,7,529,2,530,7,530,2,531,7,531,2,532,
        7,532,2,533,7,533,2,534,7,534,2,535,7,535,2,536,7,536,2,537,7,537,
        2,538,7,538,2,539,7,539,2,540,7,540,2,541,7,541,2,542,7,542,2,543,
        7,543,2,544,7,544,2,545,7,545,2,546,7,546,2,547,7,547,2,548,7,548,
        2,549,7,549,2,550,7,550,2,551,7,551,2,552,7,552,2,553,7,553,2,554,
        7,554,2,555,7,555,2,556,7,556,2,557,7,557,2,558,7,558,2,559,7,559,
        2,560,7,560,2,561,7,561,2,562,7,562,2,563,7,563,2,564,7,564,2,565,
        7,565,2,566,7,566,2,567,7,567,2,568,7,568,2,569,7,569,2,570,7,570,
        2,571,7,571,2,572,7,572,2,573,7,573,2,574,7,574,2,575,7,575,2,576,
        7,576,2,577,7,577,2,578,7,578,2,579,7,579,2,580,7,580,2,581,7,581,
        2,582,7,582,2,583,7,583,2,584,7,584,2,585,7,585,2,586,7,586,2,587,
        7,587,2,588,7,588,2,589,7,589,2,590,7,590,2,591,7,591,2,592,7,592,
        2,593,7,593,2,594,7,594,2,595,7,595,2,596,7,596,2,597,7,597,2,598,
        7,598,2,599,7,599,2,600,7,600,2,601,7,601,2,602,7,602,2,603,7,603,
        2,604,7,604,2,605,7,605,2,606,7,606,2,607,7,607,2,608,7,608,2,609,
        7,609,2,610,7,610,2,611,7,611,2,612,7,612,2,613,7,613,2,614,7,614,
        2,615,7,615,2,616,7,616,2,617,7,617,2,618,7,618,2,619,7,619,2,620,
        7,620,2,621,7,621,2,622,7,622,2,623,7,623,2,624,7,624,2,625,7,625,
        2,626,7,626,2,627,7,627,2,628,7,628,2,629,7,629,2,630,7,630,2,631,
        7,631,2,632,7,632,2,633,7,633,2,634,7,634,2,635,7,635,2,636,7,636,
        2,637,7,637,2,638,7,638,2,639,7,639,2,640,7,640,2,641,7,641,2,642,
        7,642,2,643,7,643,2,644,7,644,2,645,7,645,2,646,7,646,2,647,7,647,
        2,648,7,648,2,649,7,649,2,650,7,650,2,651,7,651,2,652,7,652,2,653,
        7,653,2,654,7,654,2,655,7,655,2,656,7,656,2,657,7,657,2,658,7,658,
        2,659,7,659,2,660,7,660,2,661,7,661,2,662,7,662,2,663,7,663,2,664,
        7,664,2,665,7,665,2,666,7,666,2,667,7,667,2,668,7,668,2,669,7,669,
        2,670,7,670,2,671,7,671,2,672,7,672,2,673,7,673,2,674,7,674,2,675,
        7,675,2,676,7,676,2,677,7,677,2,678,7,678,2,679,7,679,2,680,7,680,
        2,681,7,681,2,682,7,682,2,683,7,683,2,684,7,684,2,685,7,685,2,686,
        7,686,2,687,7,687,2,688,7,688,2,689,7,689,2,690,7,690,2,691,7,691,
        2,692,7,692,2,693,7,693,2,694,7,694,2,695,7,695,2,696,7,696,2,697,
        7,697,2,698,7,698,2,699,7,699,2,700,7,700,2,701,7,701,2,702,7,702,
        2,703,7,703,2,704,7,704,2,705,7,705,2,706,7,706,2,707,7,707,2,708,
        7,708,2,709,7,709,2,710,7,710,2,711,7,711,2,712,7,712,2,713,7,713,
        2,714,7,714,2,715,7,715,2,716,7,716,2,717,7,717,2,718,7,718,1,0,
        1,0,1,0,1,1,1,1,1,2,3,2,1445,8,2,1,2,1,2,3,2,1449,8,2,5,2,1451,8,
        2,10,2,12,2,1454,9,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,3,3,1580,8,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,3,5,1589,8,5,1,5,1,
        5,1,6,1,6,1,7,5,7,1596,8,7,10,7,12,7,1599,9,7,1,8,5,8,1602,8,8,10,
        8,12,8,1605,9,8,1,9,1,9,1,9,3,9,1610,8,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,1625,8,9,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,3,10,1637,8,10,1,11,1,11,1,11,1,11,3,11,
        1643,8,11,1,11,1,11,1,12,1,12,1,12,1,12,3,12,1651,8,12,1,12,1,12,
        1,13,1,13,1,13,1,13,1,14,1,14,1,14,3,14,1662,8,14,1,14,1,14,3,14,
        1666,8,14,1,14,1,14,1,15,1,15,1,15,1,15,3,15,1674,8,15,1,15,1,15,
        1,16,1,16,1,16,1,16,3,16,1682,8,16,1,16,1,16,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,1,19,3,19,1700,8,19,
        1,19,3,19,1703,8,19,1,19,1,19,1,19,3,19,1708,8,19,1,19,1,19,1,20,
        1,20,1,21,5,21,1715,8,21,10,21,12,21,1718,9,21,1,22,1,22,1,22,1,
        22,1,22,1,22,3,22,1726,8,22,1,23,1,23,3,23,1730,8,23,1,23,1,23,1,
        24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,1742,8,24,1,25,1,25,1,
        25,1,25,3,25,1748,8,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
        26,1,26,1,26,1,26,1,26,1,26,3,26,1764,8,26,1,26,1,26,1,26,1,26,1,
        26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,1777,8,26,1,27,1,27,1,27,5,
        27,1782,8,27,10,27,12,27,1785,9,27,1,28,1,28,1,28,5,28,1790,8,28,
        10,28,12,28,1793,9,28,1,29,1,29,3,29,1797,8,29,1,30,1,30,1,30,1,
        30,1,30,3,30,1804,8,30,1,31,1,31,1,31,1,31,3,31,1810,8,31,1,32,1,
        32,1,32,1,32,1,32,3,32,1817,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
        32,1,32,1,32,3,32,1828,8,32,1,33,1,33,3,33,1832,8,33,1,34,1,34,3,
        34,1836,8,34,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
        36,3,36,1849,8,36,1,37,1,37,3,37,1853,8,37,1,38,1,38,1,38,3,38,1858,
        8,38,1,39,1,39,1,39,3,39,1863,8,39,1,40,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,1,40,1,40,3,40,1875,8,40,1,41,1,41,1,41,1,41,1,41,1,42,
        1,42,3,42,1884,8,42,1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,46,1,46,
        1,46,1,46,3,46,1897,8,46,1,46,1,46,1,46,3,46,1902,8,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1913,8,46,1,46,1,46,1,46,
        1,46,3,46,1919,8,46,1,46,1,46,1,46,1,46,3,46,1925,8,46,1,46,1,46,
        1,46,3,46,1930,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        3,46,1941,8,46,1,46,1,46,1,46,1,46,3,46,1947,8,46,1,46,1,46,1,46,
        1,46,3,46,1953,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1962,
        8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1972,8,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,
        1987,8,46,1,46,1,46,1,46,1,46,3,46,1993,8,46,1,46,1,46,1,46,1,46,
        1,46,3,46,2000,8,46,1,46,1,46,1,46,3,46,2005,8,46,1,47,1,47,1,47,
        5,47,2010,8,47,10,47,12,47,2013,9,47,1,48,1,48,1,48,1,48,1,48,1,
        48,1,48,1,48,3,48,2023,8,48,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,
        50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
        50,1,50,3,50,2047,8,50,1,50,1,50,1,50,1,50,1,50,3,50,2054,8,50,1,
        50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,2063,8,50,1,50,1,50,1,50,1,
        50,1,50,1,50,1,50,3,50,2072,8,50,1,50,1,50,1,50,1,50,1,50,1,50,3,
        50,2080,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,2090,8,
        50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,2099,8,50,1,50,1,50,1,
        50,1,50,1,50,1,50,1,50,3,50,2108,8,50,1,50,1,50,1,50,1,50,1,50,1,
        50,3,50,2116,8,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,2124,8,50,1,
        50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,2133,8,50,1,50,1,50,1,50,1,
        50,1,50,1,50,1,50,3,50,2142,8,50,1,50,1,50,3,50,2146,8,50,1,50,1,
        50,1,50,1,50,1,50,3,50,2153,8,50,1,50,1,50,1,50,1,50,1,50,1,50,3,
        50,2161,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,2171,8,
        50,1,50,1,50,1,50,1,50,3,50,2177,8,50,1,50,1,50,3,50,2181,8,50,1,
        50,1,50,3,50,2185,8,50,1,50,1,50,3,50,2189,8,50,1,50,1,50,3,50,2193,
        8,50,1,50,1,50,1,50,3,50,2198,8,50,1,50,3,50,2201,8,50,1,50,1,50,
        3,50,2205,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,2226,8,50,1,50,
        1,50,1,50,1,50,3,50,2232,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,2327,8,50,1,51,1,51,
        1,51,1,51,1,51,3,51,2334,8,51,1,52,1,52,1,53,1,53,1,53,1,54,1,54,
        1,54,1,55,1,55,1,55,1,55,1,55,1,55,3,55,2350,8,55,1,56,1,56,1,56,
        1,56,1,57,1,57,1,57,1,58,1,58,1,58,5,58,2362,8,58,10,58,12,58,2365,
        9,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,2374,8,59,3,59,2376,
        8,59,1,60,4,60,2379,8,60,11,60,12,60,2380,1,61,1,61,3,61,2385,8,
        61,1,61,3,61,2388,8,61,1,61,1,61,1,61,1,61,3,61,2394,8,61,3,61,2396,
        8,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,3,62,2424,8,62,1,63,1,63,1,63,1,64,1,64,1,64,5,64,2432,8,64,
        10,64,12,64,2435,9,64,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,5,
        66,2445,8,66,10,66,12,66,2448,9,66,1,67,1,67,1,67,1,67,3,67,2454,
        8,67,1,67,1,67,1,67,1,67,3,67,2460,8,67,1,67,1,67,3,67,2464,8,67,
        1,67,1,67,1,67,1,67,3,67,2470,8,67,1,67,1,67,1,67,3,67,2475,8,67,
        1,67,3,67,2478,8,67,3,67,2480,8,67,1,68,1,68,1,68,3,68,2485,8,68,
        1,69,1,69,3,69,2489,8,69,1,69,1,69,3,69,2493,8,69,1,69,1,69,3,69,
        2497,8,69,1,69,1,69,3,69,2501,8,69,1,69,3,69,2504,8,69,1,69,1,69,
        3,69,2508,8,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,2516,8,69,1,69,
        1,69,3,69,2520,8,69,1,69,1,69,3,69,2524,8,69,1,70,1,70,1,71,1,71,
        1,72,1,72,1,72,3,72,2533,8,72,1,73,1,73,1,73,1,73,1,73,3,73,2540,
        8,73,1,74,5,74,2543,8,74,10,74,12,74,2546,9,74,1,75,1,75,1,75,1,
        75,3,75,2552,8,75,1,75,1,75,1,75,3,75,2557,8,75,1,75,1,75,1,75,1,
        75,1,75,3,75,2564,8,75,1,75,1,75,1,75,3,75,2569,8,75,1,75,1,75,1,
        75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,
        75,3,75,2587,8,75,1,76,1,76,1,77,3,77,2592,8,77,1,77,1,77,1,77,1,
        78,1,78,1,79,1,79,1,79,5,79,2602,8,79,10,79,12,79,2605,9,79,1,80,
        1,80,3,80,2609,8,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,2618,
        8,81,1,82,1,82,1,82,5,82,2623,8,82,10,82,12,82,2626,9,82,1,83,1,
        83,1,84,1,84,3,84,2632,8,84,1,84,1,84,1,84,1,84,3,84,2638,8,84,1,
        84,1,84,1,84,3,84,2643,8,84,1,84,1,84,3,84,2647,8,84,1,84,3,84,2650,
        8,84,1,84,3,84,2653,8,84,1,84,3,84,2656,8,84,1,84,3,84,2659,8,84,
        1,84,3,84,2662,8,84,1,84,1,84,1,84,3,84,2667,8,84,1,84,3,84,2670,
        8,84,1,84,3,84,2673,8,84,1,84,3,84,2676,8,84,1,84,3,84,2679,8,84,
        1,84,3,84,2682,8,84,1,84,1,84,1,84,1,84,3,84,2688,8,84,1,84,1,84,
        3,84,2692,8,84,1,84,3,84,2695,8,84,1,84,3,84,2698,8,84,1,84,3,84,
        2701,8,84,1,84,3,84,2704,8,84,3,84,2706,8,84,1,85,1,85,1,85,1,85,
        1,85,1,85,1,85,3,85,2715,8,85,1,86,1,86,1,87,1,87,1,87,1,87,1,88,
        1,88,1,88,5,88,2726,8,88,10,88,12,88,2729,9,88,1,89,1,89,1,89,5,
        89,2734,8,89,10,89,12,89,2737,9,89,1,90,1,90,1,90,3,90,2742,8,90,
        1,91,1,91,3,91,2746,8,91,1,92,1,92,1,92,3,92,2751,8,92,1,92,1,92,
        1,93,1,93,1,93,3,93,2758,8,93,1,93,1,93,1,94,5,94,2763,8,94,10,94,
        12,94,2766,9,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,2776,
        8,95,1,96,1,96,1,96,1,96,1,96,3,96,2783,8,96,1,96,3,96,2786,8,96,
        1,96,1,96,1,96,3,96,2791,8,96,1,96,3,96,2794,8,96,1,96,1,96,1,96,
        1,96,1,96,3,96,2801,8,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,
        2810,8,96,1,96,1,96,1,96,1,96,1,96,3,96,2817,8,96,1,96,1,96,1,96,
        3,96,2822,8,96,1,96,3,96,2825,8,96,1,96,3,96,2828,8,96,3,96,2830,
        8,96,1,97,1,97,1,97,3,97,2835,8,97,1,98,1,98,1,98,1,98,1,98,3,98,
        2842,8,98,1,99,1,99,1,99,1,99,1,100,1,100,5,100,2850,8,100,10,100,
        12,100,2853,9,100,1,101,1,101,1,102,1,102,1,102,1,102,1,102,3,102,
        2862,8,102,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
        1,103,1,103,3,103,2875,8,103,1,103,3,103,2878,8,103,1,103,3,103,
        2881,8,103,1,103,1,103,1,103,1,103,1,103,3,103,2888,8,103,1,103,
        1,103,1,103,1,103,1,103,1,103,3,103,2896,8,103,1,103,3,103,2899,
        8,103,1,103,3,103,2902,8,103,1,103,1,103,1,103,1,103,1,103,3,103,
        2909,8,103,1,103,1,103,3,103,2913,8,103,1,103,1,103,1,103,1,103,
        3,103,2919,8,103,1,103,3,103,2922,8,103,1,103,3,103,2925,8,103,1,
        103,3,103,2928,8,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,
        103,1,103,1,103,3,103,2940,8,103,1,103,3,103,2943,8,103,1,103,3,
        103,2946,8,103,1,103,1,103,3,103,2950,8,103,1,104,1,104,1,104,1,
        105,1,105,1,105,1,105,1,106,1,106,1,106,5,106,2962,8,106,10,106,
        12,106,2965,9,106,1,107,1,107,1,108,1,108,1,108,1,108,1,108,1,109,
        1,109,1,109,1,110,1,110,1,110,5,110,2980,8,110,10,110,12,110,2983,
        9,110,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,3,111,2993,
        8,111,1,112,1,112,1,112,1,112,1,112,1,113,1,113,1,113,1,113,1,113,
        1,113,1,113,1,113,3,113,3008,8,113,1,114,1,114,1,114,1,114,1,115,
        1,115,1,115,1,115,1,116,1,116,1,116,1,116,1,116,1,116,3,116,3024,
        8,116,1,117,1,117,1,117,1,117,1,117,1,118,1,118,1,119,1,119,1,119,
        1,119,1,119,1,119,1,119,1,120,1,120,1,120,5,120,3043,8,120,10,120,
        12,120,3046,9,120,1,121,1,121,3,121,3050,8,121,1,121,3,121,3053,
        8,121,1,121,1,121,3,121,3057,8,121,1,121,3,121,3060,8,121,1,121,
        1,121,1,121,1,121,3,121,3066,8,121,1,121,3,121,3069,8,121,3,121,
        3071,8,121,1,122,1,122,1,122,1,123,1,123,1,123,1,123,3,123,3080,
        8,123,1,124,1,124,1,124,1,124,1,124,1,124,1,124,3,124,3089,8,124,
        1,125,1,125,1,125,1,126,1,126,1,126,1,126,1,126,1,127,1,127,1,127,
        1,127,1,128,1,128,1,128,1,128,1,128,3,128,3108,8,128,1,128,1,128,
        3,128,3112,8,128,1,128,1,128,1,128,1,128,1,128,1,129,1,129,1,129,
        1,129,3,129,3123,8,129,1,129,1,129,1,129,1,129,1,129,1,130,1,130,
        3,130,3132,8,130,1,130,1,130,1,130,1,130,3,130,3138,8,130,1,130,
        1,130,1,130,1,130,3,130,3144,8,130,1,131,1,131,3,131,3148,8,131,
        1,131,3,131,3151,8,131,1,131,3,131,3154,8,131,1,131,3,131,3157,8,
        131,1,131,3,131,3160,8,131,1,132,1,132,1,132,1,132,3,132,3166,8,
        132,1,133,1,133,3,133,3170,8,133,1,133,1,133,1,133,1,133,1,133,3,
        133,3177,8,133,1,133,1,133,1,133,1,133,3,133,3183,8,133,1,134,1,
        134,3,134,3187,8,134,1,134,3,134,3190,8,134,1,134,3,134,3193,8,134,
        1,134,3,134,3196,8,134,1,135,1,135,1,136,1,136,1,136,1,136,3,136,
        3204,8,136,1,136,1,136,3,136,3208,8,136,1,137,1,137,3,137,3212,8,
        137,1,137,1,137,1,137,1,137,3,137,3218,8,137,1,137,1,137,3,137,3222,
        8,137,1,138,1,138,1,138,1,138,3,138,3228,8,138,1,138,1,138,1,138,
        1,139,1,139,1,140,1,140,1,140,1,140,1,141,4,141,3240,8,141,11,141,
        12,141,3241,1,142,1,142,1,142,1,142,1,142,1,142,1,142,3,142,3251,
        8,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,
        1,142,1,142,1,142,1,142,1,142,3,142,3268,8,142,1,142,1,142,1,142,
        3,142,3273,8,142,1,142,3,142,3276,8,142,3,142,3278,8,142,1,143,1,
        143,1,144,1,144,1,144,1,144,1,144,1,144,3,144,3288,8,144,1,145,1,
        145,1,145,5,145,3293,8,145,10,145,12,145,3296,9,145,1,146,1,146,
        3,146,3300,8,146,1,146,3,146,3303,8,146,1,146,3,146,3306,8,146,1,
        146,1,146,1,146,1,146,1,146,3,146,3313,8,146,1,146,3,146,3316,8,
        146,3,146,3318,8,146,1,147,1,147,1,148,1,148,3,148,3324,8,148,1,
        149,1,149,1,149,1,150,1,150,1,150,1,150,3,150,3333,8,150,1,151,1,
        151,1,152,1,152,1,153,1,153,1,153,1,153,3,153,3343,8,153,1,153,1,
        153,1,153,3,153,3348,8,153,1,154,1,154,1,154,1,155,1,155,1,155,1,
        155,3,155,3357,8,155,1,155,1,155,1,156,1,156,1,156,1,156,1,156,3,
        156,3366,8,156,1,156,1,156,3,156,3370,8,156,1,156,1,156,1,157,5,
        157,3375,8,157,10,157,12,157,3378,9,157,1,158,1,158,1,158,1,158,
        1,158,1,158,1,158,3,158,3387,8,158,1,159,1,159,1,159,1,159,1,159,
        1,159,1,160,5,160,3396,8,160,10,160,12,160,3399,9,160,1,161,1,161,
        1,161,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
        1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
        1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
        1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
        1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
        1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
        1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
        1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
        1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
        1,162,1,162,1,162,1,162,1,162,1,162,3,162,3508,8,162,1,163,1,163,
        1,163,1,163,1,163,1,163,3,163,3516,8,163,1,163,3,163,3519,8,163,
        1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,3,164,3529,8,164,
        1,165,4,165,3532,8,165,11,165,12,165,3533,1,166,1,166,1,167,1,167,
        1,167,1,167,1,167,1,167,3,167,3544,8,167,1,167,1,167,1,167,1,167,
        1,167,1,167,1,167,1,167,1,167,3,167,3555,8,167,1,168,1,168,1,168,
        1,168,1,168,1,169,1,169,1,169,5,169,3565,8,169,10,169,12,169,3568,
        9,169,1,170,1,170,1,170,1,170,1,170,1,171,1,171,1,171,5,171,3578,
        8,171,10,171,12,171,3581,9,171,1,172,1,172,1,172,1,172,1,172,1,172,
        1,172,3,172,3590,8,172,1,173,1,173,1,173,1,174,1,174,1,175,1,175,
        1,176,1,176,1,176,1,176,3,176,3603,8,176,1,176,3,176,3606,8,176,
        1,176,1,176,1,176,1,176,1,176,3,176,3613,8,176,1,176,1,176,1,176,
        1,176,1,176,1,176,1,176,3,176,3622,8,176,1,176,3,176,3625,8,176,
        1,176,1,176,1,176,1,176,1,176,3,176,3632,8,176,3,176,3634,8,176,
        1,177,1,177,1,177,1,178,1,178,1,178,3,178,3642,8,178,1,179,1,179,
        1,180,1,180,1,180,1,180,1,180,1,180,3,180,3652,8,180,3,180,3654,
        8,180,1,181,1,181,1,181,1,181,1,181,1,181,3,181,3662,8,181,1,181,
        1,181,3,181,3666,8,181,1,181,1,181,1,181,3,181,3671,8,181,1,181,
        1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,3,181,3682,8,181,
        1,181,1,181,3,181,3686,8,181,1,181,1,181,1,181,3,181,3691,8,181,
        1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,3,181,3701,8,181,
        1,181,1,181,1,181,1,181,3,181,3707,8,181,1,181,1,181,1,181,1,181,
        1,181,1,181,1,181,1,181,1,181,1,181,1,181,3,181,3720,8,181,1,181,
        1,181,1,181,1,181,3,181,3726,8,181,3,181,3728,8,181,1,182,1,182,
        1,182,1,182,1,182,3,182,3735,8,182,1,182,1,182,1,182,1,182,1,182,
        1,182,3,182,3743,8,182,1,183,1,183,1,183,3,183,3748,8,183,1,184,
        1,184,1,184,1,184,1,184,1,185,1,185,1,185,1,185,1,185,1,185,1,185,
        1,185,3,185,3763,8,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,
        1,185,1,185,1,185,1,185,3,185,3776,8,185,3,185,3778,8,185,1,186,
        1,186,3,186,3782,8,186,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
        3,187,3802,8,187,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,
        1,188,1,189,1,189,1,189,1,189,1,189,1,189,3,189,3819,8,189,1,189,
        3,189,3822,8,189,1,189,3,189,3825,8,189,1,189,3,189,3828,8,189,1,
        189,3,189,3831,8,189,1,190,1,190,1,190,1,190,1,190,1,190,3,190,3839,
        8,190,1,190,3,190,3842,8,190,1,190,3,190,3845,8,190,1,191,1,191,
        1,191,1,191,1,191,1,192,1,192,1,192,1,192,1,192,1,192,1,193,1,193,
        1,193,1,194,1,194,1,194,1,195,1,195,1,195,1,196,1,196,1,196,1,197,
        1,197,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,199,
        1,199,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,3,200,3891,
        8,200,1,200,3,200,3894,8,200,1,200,3,200,3897,8,200,1,200,1,200,
        1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,
        1,200,1,200,1,200,3,200,3915,8,200,1,200,1,200,1,200,1,200,1,200,
        3,200,3922,8,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,3,200,
        3931,8,200,1,201,1,201,1,201,1,201,3,201,3937,8,201,1,202,1,202,
        1,202,5,202,3942,8,202,10,202,12,202,3945,9,202,1,203,1,203,1,203,
        1,203,1,203,1,203,1,203,3,203,3954,8,203,1,204,1,204,1,204,1,205,
        4,205,3960,8,205,11,205,12,205,3961,1,206,1,206,1,206,3,206,3967,
        8,206,1,206,1,206,1,207,1,207,1,208,1,208,1,209,1,209,1,210,1,210,
        3,210,3979,8,210,1,210,1,210,1,211,1,211,1,212,1,212,1,213,1,213,
        1,213,1,213,1,213,1,214,1,214,1,215,1,215,3,215,3996,8,215,1,215,
        1,215,5,215,4000,8,215,10,215,12,215,4003,9,215,1,216,1,216,1,216,
        1,216,3,216,4009,8,216,1,217,1,217,1,217,1,218,5,218,4015,8,218,
        10,218,12,218,4018,9,218,1,219,1,219,1,219,1,219,1,219,1,219,1,219,
        1,219,1,219,1,219,1,219,3,219,4031,8,219,1,220,1,220,1,220,1,220,
        1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,
        1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,
        3,220,4059,8,220,1,221,1,221,1,221,5,221,4064,8,221,10,221,12,221,
        4067,9,221,1,222,1,222,1,222,1,222,1,222,1,222,1,223,1,223,1,223,
        5,223,4078,8,223,10,223,12,223,4081,9,223,1,224,1,224,1,224,1,224,
        1,224,1,224,1,225,1,225,1,225,1,225,1,225,1,225,3,225,4095,8,225,
        1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,227,1,227,
        3,227,4108,8,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,3,227,
        4117,8,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
        1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
        1,227,1,227,1,227,3,227,4142,8,227,1,227,1,227,1,227,1,227,1,227,
        1,227,1,227,1,227,1,227,3,227,4153,8,227,1,227,1,227,1,227,1,227,
        1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
        1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
        1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
        1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
        1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
        1,227,1,227,1,227,1,227,1,227,1,227,3,227,4220,8,227,1,228,1,228,
        1,228,1,228,1,229,1,229,1,229,5,229,4229,8,229,10,229,12,229,4232,
        9,229,1,230,1,230,1,230,3,230,4237,8,230,1,231,1,231,1,231,1,231,
        1,231,1,231,3,231,4245,8,231,1,232,1,232,1,232,1,232,1,233,1,233,
        1,233,5,233,4254,8,233,10,233,12,233,4257,9,233,1,234,1,234,1,234,
        1,234,1,235,1,235,1,236,1,236,1,236,5,236,4268,8,236,10,236,12,236,
        4271,9,236,1,237,1,237,1,237,1,237,1,237,1,237,3,237,4279,8,237,
        1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,3,237,4289,8,237,
        1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,3,237,
        4301,8,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,
        1,237,1,237,1,237,1,237,3,237,4316,8,237,1,238,1,238,1,238,1,238,
        1,239,1,239,1,239,1,239,1,239,3,239,4327,8,239,1,239,1,239,1,239,
        1,239,1,239,1,239,3,239,4335,8,239,1,239,1,239,1,239,1,240,1,240,
        1,240,5,240,4343,8,240,10,240,12,240,4346,9,240,1,241,1,241,1,241,
        1,241,3,241,4352,8,241,1,241,3,241,4355,8,241,1,241,1,241,1,241,
        1,241,3,241,4361,8,241,1,241,3,241,4364,8,241,1,241,1,241,1,241,
        1,241,1,241,1,241,1,241,1,241,1,241,1,241,1,241,1,241,1,241,3,241,
        4379,8,241,1,242,1,242,1,243,1,243,1,243,1,244,1,244,1,244,1,244,
        1,244,1,244,3,244,4392,8,244,1,245,1,245,1,246,1,246,1,246,1,246,
        1,246,1,246,1,246,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,
        1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,3,247,
        4421,8,247,1,248,1,248,1,248,5,248,4426,8,248,10,248,12,248,4429,
        9,248,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,
        1,249,1,249,3,249,4443,8,249,1,250,1,250,1,250,1,250,1,250,1,250,
        1,250,3,250,4452,8,250,1,250,1,250,1,250,1,250,1,250,1,250,1,250,
        1,250,1,250,3,250,4463,8,250,3,250,4465,8,250,1,251,1,251,1,251,
        1,251,1,251,1,251,1,251,3,251,4474,8,251,1,251,1,251,1,251,1,251,
        1,251,1,251,1,251,1,251,1,251,3,251,4485,8,251,3,251,4487,8,251,
        1,252,1,252,1,252,1,252,1,252,3,252,4494,8,252,1,253,1,253,1,253,
        1,253,1,253,1,253,1,253,1,254,1,254,1,254,1,254,1,254,1,254,3,254,
        4509,8,254,1,254,1,254,1,254,1,254,3,254,4515,8,254,1,254,1,254,
        1,254,1,254,1,254,1,254,3,254,4523,8,254,1,254,1,254,1,254,1,254,
        3,254,4529,8,254,1,254,1,254,1,254,1,254,1,254,1,254,3,254,4537,
        8,254,1,254,1,254,1,254,1,254,1,254,1,254,1,254,1,254,3,254,4547,
        8,254,1,254,1,254,1,254,1,254,3,254,4553,8,254,1,254,1,254,1,254,
        1,254,1,254,1,254,3,254,4561,8,254,1,254,1,254,1,254,1,254,3,254,
        4567,8,254,1,254,1,254,1,254,1,254,1,254,1,254,3,254,4575,8,254,
        1,254,1,254,1,254,1,254,1,254,3,254,4582,8,254,1,254,1,254,1,254,
        1,254,1,254,1,254,1,254,3,254,4591,8,254,3,254,4593,8,254,1,255,
        1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,
        1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,
        3,255,4618,8,255,1,256,1,256,1,256,1,256,1,256,3,256,4625,8,256,
        1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,3,257,4636,
        8,257,1,257,1,257,1,257,1,257,3,257,4642,8,257,1,258,1,258,1,259,
        1,259,1,259,5,259,4649,8,259,10,259,12,259,4652,9,259,1,260,1,260,
        3,260,4656,8,260,1,261,1,261,4,261,4660,8,261,11,261,12,261,4661,
        1,262,1,262,1,262,5,262,4667,8,262,10,262,12,262,4670,9,262,1,263,
        1,263,3,263,4674,8,263,1,263,1,263,3,263,4678,8,263,1,263,3,263,
        4681,8,263,1,264,1,264,1,264,1,264,3,264,4687,8,264,1,265,1,265,
        1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
        1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
        1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
        1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
        1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
        1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
        1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
        1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
        1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
        1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
        1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
        1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
        1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
        1,265,1,265,3,265,4836,8,265,1,266,1,266,3,266,4840,8,266,1,267,
        1,267,1,267,3,267,4845,8,267,1,267,1,267,1,267,1,267,1,267,1,267,
        1,267,1,267,1,267,3,267,4856,8,267,1,267,1,267,1,267,1,267,1,267,
        1,267,1,267,1,267,1,267,3,267,4867,8,267,1,267,1,267,1,267,1,267,
        1,267,1,267,1,267,1,267,1,267,3,267,4878,8,267,1,267,1,267,1,267,
        1,267,1,267,1,267,1,267,1,267,1,267,3,267,4889,8,267,1,267,1,267,
        1,267,1,267,1,267,1,267,1,267,1,267,1,267,3,267,4900,8,267,1,267,
        1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,3,267,4911,8,267,
        1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,3,267,4922,
        8,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
        3,267,4934,8,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
        1,267,3,267,4945,8,267,1,267,1,267,1,267,1,267,1,267,1,267,3,267,
        4953,8,267,1,268,1,268,1,268,1,269,1,269,3,269,4960,8,269,1,270,
        1,270,1,270,1,270,3,270,4966,8,270,1,271,1,271,1,271,1,271,1,271,
        1,271,3,271,4974,8,271,1,271,1,271,1,271,3,271,4979,8,271,1,271,
        1,271,1,271,3,271,4984,8,271,1,271,1,271,1,271,3,271,4989,8,271,
        1,271,1,271,1,271,1,271,3,271,4995,8,271,1,271,1,271,1,271,1,271,
        1,271,3,271,5002,8,271,1,271,1,271,1,271,1,271,3,271,5008,8,271,
        1,271,1,271,1,271,1,271,3,271,5014,8,271,1,271,1,271,1,271,3,271,
        5019,8,271,1,271,1,271,1,271,1,271,3,271,5025,8,271,1,271,1,271,
        1,271,1,271,1,271,3,271,5032,8,271,1,271,1,271,1,271,3,271,5037,
        8,271,1,271,1,271,1,271,1,271,3,271,5043,8,271,1,271,1,271,1,271,
        1,271,1,271,3,271,5050,8,271,1,271,3,271,5053,8,271,1,272,1,272,
        1,273,1,273,1,274,1,274,1,274,1,274,1,274,1,274,1,274,3,274,5066,
        8,274,1,275,1,275,1,275,1,275,1,275,1,275,1,275,3,275,5075,8,275,
        1,275,1,275,1,275,1,275,1,275,1,275,1,275,1,275,1,275,1,275,3,275,
        5087,8,275,3,275,5089,8,275,1,276,1,276,1,276,1,276,1,276,1,276,
        1,276,1,276,1,276,1,276,1,276,1,276,1,276,1,276,1,276,3,276,5106,
        8,276,1,277,1,277,1,277,5,277,5111,8,277,10,277,12,277,5114,9,277,
        1,278,1,278,3,278,5118,8,278,1,278,1,278,3,278,5122,8,278,1,278,
        1,278,3,278,5126,8,278,1,278,1,278,3,278,5130,8,278,3,278,5132,8,
        278,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,
        1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,
        1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,
        1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,
        1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,
        1,279,1,279,1,279,1,279,3,279,5192,8,279,1,280,1,280,1,280,5,280,
        5197,8,280,10,280,12,280,5200,9,280,1,281,1,281,1,281,3,281,5205,
        8,281,1,282,1,282,1,282,1,282,1,283,1,283,1,283,1,283,1,283,3,283,
        5216,8,283,1,283,3,283,5219,8,283,1,284,1,284,1,284,1,284,1,284,
        3,284,5226,8,284,1,284,3,284,5229,8,284,1,284,1,284,1,284,1,284,
        1,284,1,284,1,284,1,284,3,284,5239,8,284,1,284,3,284,5242,8,284,
        3,284,5244,8,284,1,285,1,285,1,285,1,285,1,286,1,286,1,286,1,286,
        1,287,1,287,1,287,1,287,1,287,1,287,1,288,5,288,5261,8,288,10,288,
        12,288,5264,9,288,1,289,1,289,1,289,1,289,1,289,1,289,1,289,1,289,
        1,289,3,289,5275,8,289,1,290,1,290,1,290,1,290,1,290,1,290,1,290,
        3,290,5284,8,290,1,290,1,290,1,290,1,290,1,290,1,290,1,290,3,290,
        5293,8,290,1,290,1,290,1,290,1,290,1,290,1,290,1,290,1,290,1,290,
        1,290,3,290,5305,8,290,3,290,5307,8,290,1,291,1,291,1,292,1,292,
        3,292,5313,8,292,1,292,1,292,3,292,5317,8,292,1,292,3,292,5320,8,
        292,1,292,1,292,1,292,3,292,5325,8,292,1,292,1,292,1,292,1,292,3,
        292,5331,8,292,1,292,3,292,5334,8,292,1,292,3,292,5337,8,292,1,292,
        3,292,5340,8,292,1,292,1,292,3,292,5344,8,292,1,292,1,292,3,292,
        5348,8,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,3,292,5357,
        8,292,1,292,1,292,1,292,1,292,3,292,5363,8,292,1,292,3,292,5366,
        8,292,1,292,3,292,5369,8,292,1,292,3,292,5372,8,292,3,292,5374,8,
        292,1,293,1,293,1,294,1,294,1,295,1,295,1,296,1,296,1,297,1,297,
        1,297,1,298,1,298,1,298,5,298,5390,8,298,10,298,12,298,5393,9,298,
        1,299,3,299,5396,8,299,1,299,3,299,5399,8,299,1,299,3,299,5402,8,
        299,1,299,3,299,5405,8,299,1,299,3,299,5408,8,299,1,299,1,299,1,
        299,3,299,5413,8,299,1,299,3,299,5416,8,299,3,299,5418,8,299,1,300,
        1,300,1,300,1,300,1,300,1,300,1,300,1,300,1,300,1,300,1,300,3,300,
        5431,8,300,1,301,1,301,1,301,1,301,1,301,1,302,1,302,1,302,5,302,
        5441,8,302,10,302,12,302,5444,9,302,1,303,1,303,1,303,1,304,1,304,
        1,305,1,305,1,306,1,306,1,306,1,306,3,306,5457,8,306,1,307,1,307,
        3,307,5461,8,307,1,307,1,307,1,307,1,307,1,307,1,307,1,307,1,307,
        1,307,1,307,3,307,5473,8,307,3,307,5475,8,307,1,307,1,307,1,308,
        1,308,1,308,1,309,1,309,3,309,5484,8,309,1,309,1,309,1,310,1,310,
        1,310,5,310,5491,8,310,10,310,12,310,5494,9,310,1,311,1,311,1,311,
        5,311,5499,8,311,10,311,12,311,5502,9,311,1,312,1,312,1,312,1,312,
        1,312,1,312,3,312,5510,8,312,3,312,5512,8,312,1,313,1,313,3,313,
        5516,8,313,1,313,1,313,1,314,1,314,1,314,5,314,5523,8,314,10,314,
        12,314,5526,9,314,1,315,1,315,3,315,5530,8,315,1,315,1,315,1,315,
        1,315,3,315,5536,8,315,1,315,1,315,1,315,3,315,5541,8,315,1,316,
        1,316,3,316,5545,8,316,1,316,1,316,1,316,3,316,5550,8,316,1,317,
        1,317,1,318,1,318,1,319,1,319,3,319,5558,8,319,1,319,1,319,1,319,
        1,319,1,319,3,319,5565,8,319,1,320,1,320,1,320,3,320,5570,8,320,
        1,321,1,321,1,322,1,322,1,322,1,322,1,322,1,322,1,322,1,322,1,322,
        1,322,1,322,3,322,5585,8,322,1,322,1,322,1,323,1,323,1,323,5,323,
        5592,8,323,10,323,12,323,5595,9,323,1,324,1,324,1,324,1,325,1,325,
        1,325,5,325,5603,8,325,10,325,12,325,5606,9,325,1,326,4,326,5609,
        8,326,11,326,12,326,5610,1,326,1,326,1,327,1,327,1,327,1,327,1,327,
        1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,
        1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,
        1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,3,327,5650,8,327,
        1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,3,328,5660,8,328,
        1,329,1,329,1,329,1,329,1,329,3,329,5667,8,329,1,330,1,330,1,330,
        1,330,1,330,1,330,1,330,5,330,5676,8,330,10,330,12,330,5679,9,330,
        1,331,1,331,1,331,1,332,1,332,1,332,1,333,1,333,1,333,5,333,5690,
        8,333,10,333,12,333,5693,9,333,1,334,1,334,1,334,1,334,1,334,3,334,
        5700,8,334,1,335,4,335,5703,8,335,11,335,12,335,5704,1,336,1,336,
        1,337,1,337,1,337,1,337,3,337,5713,8,337,1,337,1,337,1,337,1,337,
        1,337,1,337,3,337,5721,8,337,1,337,1,337,1,337,1,337,3,337,5727,
        8,337,1,337,1,337,1,337,1,337,1,337,1,337,3,337,5735,8,337,1,337,
        1,337,1,337,1,337,3,337,5741,8,337,1,337,1,337,1,337,1,337,1,337,
        1,337,3,337,5749,8,337,3,337,5751,8,337,1,338,1,338,1,338,1,338,
        3,338,5757,8,338,1,338,1,338,1,338,1,338,1,338,1,338,3,338,5765,
        8,338,3,338,5767,8,338,1,339,1,339,1,339,1,339,3,339,5773,8,339,
        1,339,1,339,1,339,1,339,1,339,1,339,3,339,5781,8,339,3,339,5783,
        8,339,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,
        1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,
        1,340,3,340,5807,8,340,1,341,1,341,1,341,5,341,5812,8,341,10,341,
        12,341,5815,9,341,1,341,1,341,1,342,1,342,1,342,5,342,5822,8,342,
        10,342,12,342,5825,9,342,1,343,1,343,1,343,1,344,1,344,1,344,1,345,
        4,345,5834,8,345,11,345,12,345,5835,1,346,1,346,1,346,3,346,5841,
        8,346,1,347,1,347,1,347,1,347,1,347,1,347,1,347,1,347,1,347,1,347,
        1,347,3,347,5854,8,347,1,347,1,347,1,347,1,347,1,347,1,347,1,347,
        1,347,1,347,1,347,3,347,5866,8,347,1,347,1,347,1,347,1,347,1,347,
        1,347,1,347,1,347,1,347,1,347,3,347,5878,8,347,3,347,5880,8,347,
        1,348,1,348,1,348,1,348,3,348,5886,8,348,1,349,1,349,1,349,3,349,
        5891,8,349,1,349,1,349,1,349,1,349,1,349,1,349,3,349,5899,8,349,
        1,350,1,350,1,350,1,351,1,351,3,351,5906,8,351,1,351,1,351,1,351,
        1,351,1,351,1,351,1,351,1,351,1,351,1,352,1,352,1,352,1,352,1,352,
        1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,
        1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,
        1,352,1,352,1,352,1,352,1,352,1,352,1,352,3,352,5951,8,352,1,353,
        1,353,1,353,3,353,5956,8,353,1,353,1,353,1,353,1,353,1,353,3,353,
        5963,8,353,1,354,1,354,3,354,5967,8,354,1,354,1,354,3,354,5971,8,
        354,1,354,1,354,1,354,1,354,3,354,5977,8,354,1,354,1,354,3,354,5981,
        8,354,1,354,1,354,1,354,3,354,5986,8,354,1,354,1,354,3,354,5990,
        8,354,1,354,3,354,5993,8,354,3,354,5995,8,354,1,355,1,355,1,356,
        1,356,1,357,1,357,1,357,1,357,1,358,1,358,1,358,1,358,1,358,1,358,
        1,358,1,358,1,358,1,358,1,358,1,358,3,358,6017,8,358,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,3,359,6088,8,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,3,359,
        6283,8,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,3,359,6296,8,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,3,359,6307,8,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,3,359,6320,8,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,3,359,6332,8,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,3,359,6346,8,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,3,359,6378,8,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,3,359,6392,8,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,3,359,6504,8,359,
        3,359,6506,8,359,1,360,1,360,1,361,1,361,1,361,1,362,1,362,1,362,
        1,362,3,362,6517,8,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,
        1,362,1,362,3,362,6528,8,362,1,362,1,362,1,362,1,362,1,362,1,362,
        1,362,1,362,1,362,3,362,6539,8,362,1,362,1,362,1,362,1,362,1,362,
        1,362,1,362,1,362,1,362,1,362,1,362,3,362,6552,8,362,1,362,1,362,
        1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,3,362,6564,8,362,
        1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,3,362,6575,
        8,362,1,362,1,362,1,362,1,362,1,362,3,362,6582,8,362,1,363,1,363,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,3,364,6803,8,364,
        1,365,1,365,1,365,1,365,1,365,1,365,1,365,1,365,1,366,1,366,1,366,
        5,366,6816,8,366,10,366,12,366,6819,9,366,1,367,1,367,1,367,1,367,
        1,367,1,367,1,367,1,367,3,367,6829,8,367,1,368,1,368,1,368,1,368,
        1,368,3,368,6836,8,368,1,369,1,369,1,369,1,369,1,369,1,369,1,369,
        1,369,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,3,370,6890,8,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        3,370,7031,8,370,1,371,1,371,1,371,1,371,3,371,7037,8,371,1,371,
        3,371,7040,8,371,1,372,1,372,1,373,1,373,1,373,1,373,1,373,1,373,
        3,373,7050,8,373,1,374,1,374,1,374,1,374,1,374,1,374,1,374,1,374,
        1,374,1,374,1,374,1,374,1,374,1,374,1,374,1,374,1,374,1,374,1,374,
        1,374,1,374,1,374,1,374,1,374,1,374,1,374,1,374,3,374,7079,8,374,
        1,375,1,375,1,375,1,375,1,375,1,375,1,375,1,375,3,375,7089,8,375,
        1,376,1,376,1,376,5,376,7094,8,376,10,376,12,376,7097,9,376,1,377,
        1,377,1,378,1,378,1,378,1,378,1,378,1,378,1,378,1,378,1,378,1,378,
        1,378,1,378,1,378,1,378,1,378,1,378,1,378,1,378,3,378,7119,8,378,
        1,378,1,378,1,378,1,378,1,378,1,378,1,378,3,378,7128,8,378,1,378,
        1,378,1,378,1,378,1,378,1,378,1,378,1,378,1,378,1,378,3,378,7140,
        8,378,1,379,1,379,1,379,1,379,3,379,7146,8,379,1,379,1,379,1,379,
        1,379,1,379,1,379,3,379,7154,8,379,3,379,7156,8,379,1,380,1,380,
        3,380,7160,8,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,
        3,380,7170,8,380,1,380,1,380,3,380,7174,8,380,1,380,1,380,1,381,
        1,381,1,381,1,381,1,381,1,381,3,381,7184,8,381,1,382,3,382,7187,
        8,382,1,382,1,382,3,382,7191,8,382,5,382,7193,8,382,10,382,12,382,
        7196,9,382,1,383,1,383,1,383,1,383,1,383,3,383,7203,8,383,1,384,
        1,384,1,385,1,385,1,386,1,386,1,387,1,387,1,387,3,387,7214,8,387,
        1,388,1,388,1,388,1,389,1,389,1,389,1,390,1,390,1,390,1,390,3,390,
        7226,8,390,1,391,1,391,3,391,7230,8,391,1,391,3,391,7233,8,391,1,
        391,1,391,3,391,7237,8,391,1,391,3,391,7240,8,391,1,391,1,391,1,
        391,3,391,7245,8,391,1,391,1,391,3,391,7249,8,391,1,391,3,391,7252,
        8,391,1,391,1,391,3,391,7256,8,391,1,391,3,391,7259,8,391,1,391,
        1,391,3,391,7263,8,391,1,391,3,391,7266,8,391,1,391,1,391,1,391,
        1,391,1,391,1,391,1,391,1,391,1,391,3,391,7277,8,391,1,391,1,391,
        1,391,1,391,1,391,3,391,7284,8,391,1,391,1,391,1,391,1,391,1,391,
        1,391,1,391,1,391,1,391,1,391,1,391,3,391,7297,8,391,1,392,1,392,
        1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,3,393,
        7311,8,393,1,394,1,394,3,394,7315,8,394,1,394,5,394,7318,8,394,10,
        394,12,394,7321,9,394,1,395,1,395,1,396,1,396,3,396,7327,8,396,1,
        396,1,396,1,397,1,397,1,397,3,397,7334,8,397,1,397,3,397,7337,8,
        397,1,397,1,397,1,397,3,397,7342,8,397,1,397,3,397,7345,8,397,1,
        397,1,397,1,397,1,397,1,397,1,397,1,397,3,397,7354,8,397,3,397,7356,
        8,397,1,397,1,397,1,397,3,397,7361,8,397,1,398,1,398,3,398,7365,
        8,398,1,398,1,398,1,398,1,399,1,399,1,399,1,400,1,400,1,400,1,400,
        3,400,7377,8,400,1,400,3,400,7380,8,400,1,401,1,401,1,402,4,402,
        7385,8,402,11,402,12,402,7386,1,403,1,403,3,403,7391,8,403,1,403,
        1,403,1,403,3,403,7396,8,403,1,404,1,404,1,404,1,404,1,404,1,404,
        1,404,1,404,3,404,7406,8,404,1,405,1,405,1,406,1,406,1,406,1,406,
        1,406,3,406,7415,8,406,1,406,3,406,7418,8,406,1,406,1,406,1,406,
        3,406,7423,8,406,1,407,1,407,1,407,1,407,1,407,1,408,1,408,1,408,
        1,408,3,408,7434,8,408,1,408,1,408,3,408,7438,8,408,1,408,1,408,
        1,408,1,408,3,408,7444,8,408,1,409,1,409,1,409,5,409,7449,8,409,
        10,409,12,409,7452,9,409,1,410,1,410,1,411,1,411,1,411,1,411,1,411,
        1,411,1,412,1,412,1,412,1,412,1,412,1,413,1,413,1,413,1,413,3,413,
        7471,8,413,1,413,1,413,1,413,1,414,1,414,1,414,1,414,1,414,1,414,
        1,414,1,414,1,414,1,414,1,414,1,414,1,414,1,414,1,414,1,414,3,414,
        7492,8,414,1,414,1,414,3,414,7496,8,414,1,414,1,414,1,414,3,414,
        7501,8,414,1,415,1,415,1,416,1,416,1,416,1,416,1,416,1,416,1,416,
        1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,
        1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,
        1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,
        1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,
        1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,
        1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,
        1,417,1,417,1,417,1,417,1,417,1,417,3,417,7584,8,417,1,418,1,418,
        1,419,1,419,3,419,7590,8,419,1,419,1,419,1,419,1,419,1,419,1,419,
        1,419,1,419,1,419,1,420,1,420,3,420,7603,8,420,1,420,1,420,3,420,
        7607,8,420,1,420,1,420,3,420,7611,8,420,1,420,1,420,3,420,7615,8,
        420,1,420,1,420,1,420,1,420,3,420,7621,8,420,1,421,1,421,1,421,1,
        422,1,422,3,422,7628,8,422,1,422,3,422,7631,8,422,1,422,3,422,7634,
        8,422,1,422,3,422,7637,8,422,1,422,3,422,7640,8,422,1,422,1,422,
        1,422,1,422,1,422,3,422,7647,8,422,3,422,7649,8,422,1,423,1,423,
        3,423,7653,8,423,1,423,3,423,7656,8,423,1,423,1,423,1,423,1,423,
        1,423,3,423,7663,8,423,3,423,7665,8,423,1,424,1,424,1,424,5,424,
        7670,8,424,10,424,12,424,7673,9,424,1,425,1,425,1,425,5,425,7678,
        8,425,10,425,12,425,7681,9,425,1,426,1,426,1,427,1,427,3,427,7687,
        8,427,1,428,1,428,1,428,3,428,7692,8,428,1,429,1,429,3,429,7696,
        8,429,1,430,1,430,3,430,7700,8,430,1,431,1,431,3,431,7704,8,431,
        1,432,1,432,3,432,7708,8,432,1,433,1,433,1,434,1,434,1,435,1,435,
        1,436,1,436,1,437,1,437,1,437,1,437,1,438,1,438,3,438,7724,8,438,
        1,439,1,439,1,439,5,439,7729,8,439,10,439,12,439,7732,9,439,1,440,
        1,440,1,441,1,441,1,441,1,441,1,441,3,441,7741,8,441,1,441,1,441,
        1,441,1,441,1,441,1,441,1,441,1,441,1,441,1,441,1,441,3,441,7754,
        8,441,1,442,1,442,1,442,1,442,1,442,1,442,1,442,1,442,1,442,3,442,
        7765,8,442,1,443,1,443,1,443,5,443,7770,8,443,10,443,12,443,7773,
        9,443,1,444,1,444,3,444,7777,8,444,1,445,1,445,3,445,7781,8,445,
        1,446,1,446,3,446,7785,8,446,1,447,1,447,1,447,3,447,7790,8,447,
        1,447,1,447,1,447,1,448,1,448,1,448,1,448,1,449,1,449,1,449,1,449,
        3,449,7803,8,449,1,450,1,450,1,450,3,450,7808,8,450,1,450,1,450,
        3,450,7812,8,450,1,450,1,450,1,450,1,450,1,450,1,450,3,450,7820,
        8,450,1,450,3,450,7823,8,450,1,450,1,450,3,450,7827,8,450,1,450,
        1,450,1,450,1,450,1,450,1,450,1,450,1,450,1,450,3,450,7838,8,450,
        1,450,3,450,7841,8,450,3,450,7843,8,450,1,451,1,451,1,451,1,451,
        1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,3,452,
        7859,8,452,1,453,3,453,7862,8,453,1,453,1,453,1,453,1,453,1,453,
        3,453,7869,8,453,1,453,3,453,7872,8,453,1,454,1,454,1,454,3,454,
        7877,8,454,1,455,1,455,1,455,1,455,1,455,1,455,1,455,1,455,1,455,
        1,455,1,455,1,455,1,455,3,455,7892,8,455,1,455,1,455,1,455,1,455,
        3,455,7898,8,455,1,456,1,456,1,457,1,457,1,457,5,457,7905,8,457,
        10,457,12,457,7908,9,457,1,458,1,458,1,458,1,459,1,459,1,459,3,459,
        7916,8,459,1,459,1,459,1,459,1,459,1,459,3,459,7923,8,459,1,459,
        3,459,7926,8,459,1,460,1,460,1,460,1,460,3,460,7932,8,460,1,460,
        1,460,1,460,3,460,7937,8,460,1,461,1,461,1,461,1,462,1,462,3,462,
        7944,8,462,1,462,1,462,3,462,7948,8,462,1,462,1,462,1,462,3,462,
        7953,8,462,1,462,3,462,7956,8,462,1,462,1,462,1,462,1,462,3,462,
        7962,8,462,1,462,1,462,3,462,7966,8,462,3,462,7968,8,462,1,462,3,
        462,7971,8,462,1,463,1,463,1,463,1,463,1,463,3,463,7978,8,463,1,
        463,3,463,7981,8,463,1,463,1,463,1,463,1,463,1,463,3,463,7988,8,
        463,1,463,1,463,1,464,1,464,1,464,1,464,3,464,7996,8,464,1,464,3,
        464,7999,8,464,1,464,1,464,1,464,1,464,1,465,1,465,1,465,3,465,8008,
        8,465,1,465,1,465,1,466,3,466,8013,8,466,1,466,1,466,1,466,1,466,
        3,466,8019,8,466,1,466,3,466,8022,8,466,1,466,3,466,8025,8,466,1,
        467,1,467,1,467,1,468,1,468,3,468,8032,8,468,1,468,1,468,3,468,8036,
        8,468,1,468,3,468,8039,8,468,1,469,1,469,1,469,1,469,1,470,1,470,
        1,470,1,470,1,470,1,470,1,470,1,470,1,470,3,470,8054,8,470,1,470,
        3,470,8057,8,470,1,471,1,471,1,472,1,472,1,472,3,472,8064,8,472,
        1,473,3,473,8067,8,473,1,473,1,473,1,473,1,473,1,473,3,473,8074,
        8,473,1,473,3,473,8077,8,473,1,473,3,473,8080,8,473,1,474,1,474,
        1,474,5,474,8085,8,474,10,474,12,474,8088,9,474,1,475,1,475,1,475,
        1,475,1,475,1,475,1,475,1,475,1,475,1,475,3,475,8100,8,475,1,476,
        1,476,1,476,1,477,1,477,1,477,5,477,8108,8,477,10,477,12,477,8111,
        9,477,1,478,1,478,1,478,1,478,1,478,3,478,8118,8,478,1,478,1,478,
        1,478,1,479,1,479,1,480,1,480,1,480,1,480,1,480,5,480,8130,8,480,
        10,480,12,480,8133,9,480,1,481,1,481,1,481,1,481,3,481,8139,8,481,
        1,482,1,482,3,482,8143,8,482,1,483,1,483,1,483,1,483,1,483,1,483,
        1,483,1,483,3,483,8153,8,483,1,484,1,484,3,484,8157,8,484,1,484,
        1,484,3,484,8161,8,484,1,484,1,484,3,484,8165,8,484,3,484,8167,8,
        484,1,484,1,484,1,484,3,484,8172,8,484,1,484,1,484,3,484,8176,8,
        484,1,484,1,484,3,484,8180,8,484,3,484,8182,8,484,3,484,8184,8,484,
        1,485,1,485,1,485,3,485,8189,8,485,1,485,5,485,8192,8,485,10,485,
        12,485,8195,9,485,1,486,1,486,1,486,3,486,8200,8,486,1,486,5,486,
        8203,8,486,10,486,12,486,8206,9,486,1,487,1,487,3,487,8210,8,487,
        1,487,3,487,8213,8,487,1,487,3,487,8216,8,487,1,487,3,487,8219,8,
        487,1,487,3,487,8222,8,487,1,487,3,487,8225,8,487,1,487,3,487,8228,
        8,487,1,487,3,487,8231,8,487,1,487,1,487,1,487,3,487,8236,8,487,
        1,487,3,487,8239,8,487,1,487,3,487,8242,8,487,1,487,3,487,8245,8,
        487,1,487,3,487,8248,8,487,1,487,3,487,8251,8,487,3,487,8253,8,487,
        1,487,1,487,1,487,1,487,3,487,8259,8,487,1,488,1,488,3,488,8263,
        8,488,1,488,1,488,1,489,1,489,1,489,5,489,8270,8,489,10,489,12,489,
        8273,9,489,1,490,1,490,3,490,8277,8,490,1,490,1,490,3,490,8281,8,
        490,1,490,1,490,1,490,1,490,1,491,1,491,1,491,3,491,8290,8,491,1,
        492,1,492,1,493,1,493,1,493,1,494,1,494,1,495,3,495,8300,8,495,1,
        495,1,495,3,495,8304,8,495,1,495,1,495,1,495,3,495,8309,8,495,1,
        495,1,495,1,495,1,495,3,495,8315,8,495,1,496,1,496,1,497,1,497,1,
        498,1,498,1,498,1,498,1,498,1,498,3,498,8327,8,498,1,499,1,499,1,
        500,1,500,1,501,1,501,1,501,1,501,1,502,1,502,1,502,5,502,8340,8,
        502,10,502,12,502,8343,9,502,1,503,1,503,1,503,1,503,3,503,8349,
        8,503,3,503,8351,8,503,1,503,3,503,8354,8,503,1,504,1,504,3,504,
        8358,8,504,1,504,1,504,3,504,8362,8,504,3,504,8364,8,504,1,505,1,
        505,1,506,1,506,1,506,1,506,3,506,8372,8,506,1,506,1,506,1,506,1,
        506,1,506,1,506,1,506,3,506,8381,8,506,1,506,1,506,1,506,1,506,3,
        506,8387,8,506,3,506,8389,8,506,3,506,8391,8,506,1,507,1,507,1,507,
        1,507,1,507,3,507,8398,8,507,1,508,1,508,3,508,8402,8,508,1,509,
        1,509,1,510,1,510,1,510,1,510,1,510,3,510,8411,8,510,1,511,1,511,
        3,511,8415,8,511,1,512,1,512,1,513,1,513,1,514,1,514,1,514,1,514,
        1,515,1,515,1,515,5,515,8428,8,515,10,515,12,515,8431,9,515,1,516,
        1,516,1,516,1,516,1,516,3,516,8438,8,516,1,517,1,517,1,517,1,518,
        1,518,1,518,1,518,1,518,1,519,1,519,1,519,1,519,1,519,1,520,1,520,
        1,520,1,520,1,520,1,520,1,521,1,521,1,521,1,522,1,522,1,522,1,522,
        3,522,8466,8,522,1,523,1,523,1,524,4,524,8471,8,524,11,524,12,524,
        8472,1,525,1,525,3,525,8477,8,525,1,525,3,525,8480,8,525,1,526,1,
        526,1,526,3,526,8485,8,526,1,526,1,526,3,526,8489,8,526,1,526,3,
        526,8492,8,526,1,527,1,527,1,527,1,528,1,528,1,528,1,528,1,528,1,
        528,1,528,1,528,1,528,5,528,8506,8,528,10,528,12,528,8509,9,528,
        1,529,1,529,1,529,1,530,1,530,1,530,5,530,8517,8,530,10,530,12,530,
        8520,9,530,1,531,1,531,3,531,8524,8,531,1,531,3,531,8527,8,531,1,
        531,1,531,3,531,8531,8,531,1,531,1,531,3,531,8535,8,531,1,531,1,
        531,3,531,8539,8,531,1,531,1,531,1,531,3,531,8544,8,531,1,531,1,
        531,3,531,8548,8,531,1,531,1,531,3,531,8552,8,531,3,531,8554,8,531,
        1,531,1,531,1,531,1,531,1,531,1,531,1,531,3,531,8563,8,531,1,531,
        1,531,1,531,3,531,8568,8,531,1,531,1,531,1,531,1,531,3,531,8574,
        8,531,1,531,1,531,3,531,8578,8,531,3,531,8580,8,531,1,531,1,531,
        1,531,1,531,1,531,3,531,8587,8,531,1,531,1,531,1,531,3,531,8592,
        8,531,1,531,1,531,1,531,1,531,5,531,8598,8,531,10,531,12,531,8601,
        9,531,1,532,3,532,8604,8,532,1,532,1,532,1,532,1,532,1,532,3,532,
        8611,8,532,1,533,1,533,1,533,3,533,8616,8,533,1,533,3,533,8619,8,
        533,1,533,1,533,1,533,1,533,3,533,8625,8,533,1,534,1,534,3,534,8629,
        8,534,1,535,1,535,1,535,1,535,1,535,1,535,1,535,3,535,8638,8,535,
        1,536,1,536,3,536,8642,8,536,1,536,1,536,1,536,1,536,1,536,1,536,
        3,536,8650,8,536,3,536,8652,8,536,1,537,1,537,1,537,5,537,8657,8,
        537,10,537,12,537,8660,9,537,1,538,1,538,3,538,8664,8,538,1,538,
        3,538,8667,8,538,1,539,1,539,1,539,1,539,1,539,1,539,3,539,8675,
        8,539,1,540,1,540,1,540,1,540,1,540,1,541,1,541,3,541,8684,8,541,
        1,541,1,541,1,541,1,541,1,541,1,541,3,541,8692,8,541,3,541,8694,
        8,541,1,542,1,542,3,542,8698,8,542,1,543,1,543,1,543,5,543,8703,
        8,543,10,543,12,543,8706,9,543,1,544,1,544,1,544,1,544,1,544,1,545,
        1,545,1,545,1,546,1,546,1,546,1,547,1,547,1,547,1,547,1,547,3,547,
        8724,8,547,1,548,1,548,1,549,1,549,1,549,5,549,8731,8,549,10,549,
        12,549,8734,9,549,1,550,1,550,1,550,3,550,8739,8,550,1,551,1,551,
        1,551,1,551,1,551,1,551,1,551,1,551,1,551,1,551,1,551,1,551,1,551,
        1,551,1,551,1,551,1,551,3,551,8758,8,551,1,551,1,551,1,552,1,552,
        1,552,5,552,8765,8,552,10,552,12,552,8768,9,552,1,553,1,553,1,553,
        3,553,8773,8,553,1,553,1,553,3,553,8777,8,553,1,554,4,554,8780,8,
        554,11,554,12,554,8781,1,555,1,555,1,555,1,555,1,555,1,555,1,555,
        1,555,3,555,8792,8,555,1,556,1,556,1,556,5,556,8797,8,556,10,556,
        12,556,8800,9,556,1,557,1,557,1,557,1,557,1,557,1,557,3,557,8808,
        8,557,1,558,3,558,8811,8,558,1,558,1,558,1,558,1,558,1,558,1,558,
        1,558,3,558,8820,8,558,3,558,8822,8,558,1,559,1,559,3,559,8826,8,
        559,1,559,5,559,8829,8,559,10,559,12,559,8832,9,559,1,560,1,560,
        1,560,1,560,1,560,1,560,1,560,3,560,8841,8,560,1,560,1,560,1,560,
        1,560,3,560,8847,8,560,1,560,3,560,8850,8,560,1,561,1,561,1,561,
        1,561,1,561,3,561,8857,8,561,1,562,1,562,3,562,8861,8,562,1,562,
        3,562,8864,8,562,1,563,1,563,1,563,1,563,1,564,1,564,1,564,1,564,
        1,564,1,564,1,564,3,564,8877,8,564,1,564,1,564,1,564,1,564,3,564,
        8883,8,564,1,564,1,564,3,564,8887,8,564,1,564,1,564,3,564,8891,8,
        564,1,564,3,564,8894,8,564,1,565,1,565,1,565,1,565,1,566,1,566,3,
        566,8902,8,566,1,567,1,567,3,567,8906,8,567,1,568,1,568,3,568,8910,
        8,568,1,568,1,568,1,568,1,568,1,569,1,569,3,569,8918,8,569,1,570,
        1,570,1,570,1,570,1,570,3,570,8925,8,570,1,571,1,571,1,571,1,571,
        1,571,3,571,8932,8,571,1,572,1,572,3,572,8936,8,572,1,572,1,572,
        1,572,1,572,3,572,8942,8,572,3,572,8944,8,572,1,573,1,573,1,574,
        1,574,1,574,1,574,1,574,3,574,8953,8,574,1,574,3,574,8956,8,574,
        1,575,1,575,1,576,1,576,1,576,1,576,1,576,1,576,3,576,8966,8,576,
        1,577,1,577,1,577,1,577,1,577,1,577,1,577,1,577,1,577,1,577,1,577,
        1,577,1,577,1,577,3,577,8982,8,577,1,577,1,577,1,577,1,577,3,577,
        8988,8,577,1,577,1,577,1,577,3,577,8993,8,577,1,578,1,578,1,578,
        1,578,1,578,3,578,9000,8,578,1,579,1,579,1,580,1,580,1,580,1,581,
        1,581,1,582,1,582,1,582,1,582,3,582,9013,8,582,1,583,1,583,1,583,
        5,583,9018,8,583,10,583,12,583,9021,9,583,1,584,1,584,1,584,5,584,
        9026,8,584,10,584,12,584,9029,9,584,1,585,1,585,1,585,5,585,9034,
        8,585,10,585,12,585,9037,9,585,1,586,1,586,3,586,9041,8,586,1,586,
        1,586,3,586,9045,8,586,1,586,1,586,1,586,1,586,3,586,9051,8,586,
        1,587,1,587,3,587,9055,8,587,1,587,1,587,3,587,9059,8,587,1,588,
        3,588,9062,8,588,1,588,1,588,1,589,1,589,3,589,9068,8,589,1,590,
        1,590,1,590,3,590,9073,8,590,1,590,1,590,1,590,1,590,1,590,1,590,
        1,590,1,590,1,590,1,590,1,590,1,590,1,590,1,590,3,590,9089,8,590,
        1,590,3,590,9092,8,590,3,590,9094,8,590,1,591,1,591,1,591,1,591,
        1,591,1,591,1,591,1,591,1,591,1,591,3,591,9106,8,591,3,591,9108,
        8,591,1,592,1,592,3,592,9112,8,592,1,592,1,592,1,592,1,592,3,592,
        9118,8,592,1,592,1,592,3,592,9122,8,592,3,592,9124,8,592,1,593,1,
        593,1,593,1,593,5,593,9130,8,593,10,593,12,593,9133,9,593,1,594,
        3,594,9136,8,594,1,594,1,594,1,595,1,595,1,595,5,595,9143,8,595,
        10,595,12,595,9146,9,595,1,596,1,596,1,596,5,596,9151,8,596,10,596,
        12,596,9154,9,596,1,597,1,597,1,597,3,597,9159,8,597,1,598,3,598,
        9162,8,598,1,598,1,598,1,599,1,599,1,599,1,599,1,599,3,599,9171,
        8,599,1,600,1,600,1,600,3,600,9176,8,600,1,601,1,601,1,601,5,601,
        9181,8,601,10,601,12,601,9184,9,601,1,602,1,602,1,602,1,602,1,602,
        1,602,1,602,3,602,9193,8,602,1,602,1,602,1,602,1,602,1,602,1,602,
        1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,
        1,602,1,602,1,602,1,602,1,602,1,602,1,602,3,602,9219,8,602,1,602,
        1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,3,602,9230,8,602,
        5,602,9232,8,602,10,602,12,602,9235,9,602,1,603,1,603,1,603,1,603,
        1,603,3,603,9242,8,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,
        1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,
        1,603,1,603,3,603,9264,8,603,1,603,1,603,1,603,1,603,1,603,1,603,
        1,603,3,603,9273,8,603,1,604,1,604,1,605,1,605,1,605,1,605,1,605,
        1,605,3,605,9283,8,605,1,605,3,605,9286,8,605,1,605,1,605,1,605,
        3,605,9291,8,605,1,605,1,605,1,605,3,605,9296,8,605,1,605,1,605,
        3,605,9300,8,605,1,605,1,605,1,606,1,606,3,606,9306,8,606,1,606,
        3,606,9309,8,606,1,606,3,606,9312,8,606,1,606,3,606,9315,8,606,1,
        607,1,607,3,607,9319,8,607,1,608,1,608,1,608,1,608,1,608,1,608,1,
        608,1,608,1,608,1,608,1,608,1,608,3,608,9333,8,608,1,608,1,608,1,
        608,1,608,1,608,3,608,9340,8,608,1,608,1,608,1,608,1,608,1,608,3,
        608,9347,8,608,1,608,1,608,1,608,1,608,1,608,3,608,9354,8,608,1,
        608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
        1,608,1,608,1,608,1,608,1,608,1,608,3,608,9373,8,608,1,608,1,608,
        1,608,1,608,1,608,1,608,3,608,9381,8,608,1,608,1,608,1,608,1,608,
        1,608,1,608,3,608,9389,8,608,3,608,9391,8,608,1,608,1,608,1,608,
        1,608,3,608,9397,8,608,1,608,1,608,1,608,1,608,1,608,3,608,9404,
        8,608,3,608,9406,8,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
        1,608,1,608,1,608,1,608,3,608,9419,8,608,1,608,1,608,1,608,1,608,
        1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
        1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
        1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
        3,608,9458,8,608,3,608,9460,8,608,1,608,1,608,1,608,1,608,1,608,
        1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
        1,608,1,608,3,608,9480,8,608,1,608,1,608,1,608,1,608,1,608,1,608,
        1,608,1,608,3,608,9490,8,608,1,608,1,608,1,608,1,608,1,608,1,608,
        1,608,1,608,1,608,3,608,9501,8,608,1,608,1,608,1,608,1,608,1,608,
        1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,3,608,
        9518,8,608,1,608,3,608,9521,8,608,1,608,3,608,9524,8,608,1,608,3,
        608,9527,8,608,3,608,9529,8,608,1,608,1,608,1,608,1,608,1,608,3,
        608,9536,8,608,1,608,3,608,9539,8,608,1,608,1,608,3,608,9543,8,608,
        1,608,3,608,9546,8,608,1,608,3,608,9549,8,608,3,608,9551,8,608,1,
        608,1,608,1,608,1,608,1,608,3,608,9558,8,608,1,608,1,608,1,608,1,
        608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,3,608,9571,8,608,1,
        608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
        3,608,9584,8,608,1,608,3,608,9587,8,608,1,608,1,608,3,608,9591,8,
        608,1,608,3,608,9594,8,608,1,608,1,608,1,608,1,608,1,608,1,608,1,
        608,1,608,3,608,9604,8,608,1,608,3,608,9607,8,608,1,608,1,608,1,
        608,1,608,1,608,1,608,1,608,1,608,3,608,9617,8,608,1,608,3,608,9620,
        8,608,1,608,3,608,9623,8,608,1,608,1,608,3,608,9627,8,608,1,609,
        1,609,1,609,1,609,1,609,3,609,9634,8,609,1,610,1,610,1,610,1,610,
        1,610,1,610,1,610,1,610,1,610,1,610,3,610,9646,8,610,1,611,1,611,
        1,611,1,611,1,611,1,612,1,612,1,612,5,612,9656,8,612,10,612,12,612,
        9659,9,612,1,613,1,613,1,613,3,613,9664,8,613,1,614,1,614,1,615,
        1,615,1,615,1,615,3,615,9672,8,615,1,616,1,616,1,616,1,616,1,616,
        1,616,1,616,1,616,1,616,1,616,1,616,1,616,1,616,1,616,1,616,3,616,
        9689,8,616,1,617,1,617,1,617,1,618,1,618,1,618,1,618,1,618,1,618,
        1,619,1,619,1,619,1,619,1,619,1,619,1,620,1,620,1,620,1,621,1,621,
        1,621,5,621,9712,8,621,10,621,12,621,9715,9,621,1,622,1,622,1,622,
        1,622,1,623,1,623,1,623,3,623,9724,8,623,1,624,1,624,3,624,9728,
        8,624,1,624,3,624,9731,8,624,1,624,3,624,9734,8,624,1,624,3,624,
        9737,8,624,1,624,1,624,1,625,1,625,1,626,1,626,1,626,1,626,1,627,
        1,627,1,627,3,627,9750,8,627,1,627,1,627,1,627,3,627,9755,8,627,
        1,627,1,627,1,627,3,627,9760,8,627,3,627,9762,8,627,1,628,1,628,
        1,628,1,628,1,628,1,628,3,628,9770,8,628,1,629,1,629,1,629,1,629,
        1,629,1,629,1,629,3,629,9779,8,629,1,630,1,630,1,630,1,630,1,630,
        1,630,1,630,3,630,9788,8,630,1,631,1,631,1,631,3,631,9793,8,631,
        1,631,1,631,1,631,1,631,1,631,1,631,1,631,3,631,9802,8,631,1,632,
        1,632,1,632,3,632,9807,8,632,1,632,1,632,1,633,1,633,1,633,1,633,
        1,633,1,633,1,634,1,634,1,635,1,635,3,635,9821,8,635,1,636,1,636,
        1,637,1,637,1,637,1,637,1,637,1,637,3,637,9831,8,637,1,638,1,638,
        1,638,1,638,1,638,1,638,3,638,9839,8,638,1,639,1,639,1,639,1,639,
        1,639,1,639,1,639,1,639,1,639,1,639,1,639,1,639,3,639,9853,8,639,
        1,640,1,640,1,640,5,640,9858,8,640,10,640,12,640,9861,9,640,1,641,
        1,641,1,641,5,641,9866,8,641,10,641,12,641,9869,9,641,1,642,1,642,
        1,642,1,642,1,642,3,642,9876,8,642,1,643,1,643,1,643,5,643,9881,
        8,643,10,643,12,643,9884,9,643,1,644,1,644,1,644,3,644,9889,8,644,
        1,644,1,644,1,645,1,645,1,645,5,645,9896,8,645,10,645,12,645,9899,
        9,645,1,646,1,646,1,646,1,646,1,647,1,647,1,647,1,647,1,647,1,647,
        1,647,1,647,3,647,9913,8,647,1,648,1,648,1,649,1,649,1,649,1,649,
        1,649,1,649,1,649,3,649,9924,8,649,1,650,1,650,1,650,1,650,1,651,
        1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,
        1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,
        1,651,1,651,1,651,3,651,9956,8,651,1,652,1,652,1,652,1,652,1,652,
        1,652,1,652,3,652,9965,8,652,1,653,1,653,1,653,1,653,1,653,3,653,
        9972,8,653,1,654,1,654,3,654,9976,8,654,1,654,1,654,3,654,9980,8,
        654,1,654,1,654,1,655,4,655,9985,8,655,11,655,12,655,9986,1,656,
        1,656,1,656,1,656,1,656,1,657,1,657,1,657,1,658,1,658,1,659,1,659,
        3,659,10001,8,659,1,660,1,660,1,660,3,660,10006,8,660,1,660,1,660,
        1,660,3,660,10011,8,660,1,660,1,660,3,660,10015,8,660,3,660,10017,
        8,660,1,660,3,660,10020,8,660,1,661,1,661,1,662,4,662,10025,8,662,
        11,662,12,662,10026,1,663,5,663,10030,8,663,10,663,12,663,10033,
        9,663,1,664,1,664,1,664,1,665,1,665,1,665,1,665,1,665,1,665,5,665,
        10044,8,665,10,665,12,665,10047,9,665,1,666,1,666,1,666,1,666,1,
        667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,
        1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,
        1,667,1,667,1,667,3,667,10078,8,667,1,668,1,668,1,668,3,668,10083,
        8,668,1,669,1,669,1,669,1,669,1,669,1,669,1,669,1,669,1,669,1,669,
        3,669,10095,8,669,1,670,1,670,1,670,1,670,1,670,1,670,1,670,1,670,
        1,670,1,670,1,670,1,670,1,670,1,670,1,670,3,670,10112,8,670,1,671,
        1,671,1,671,1,671,1,672,1,672,3,672,10120,8,672,1,673,1,673,1,673,
        1,673,1,673,1,673,3,673,10128,8,673,1,674,1,674,1,674,1,674,1,674,
        1,674,1,674,1,674,1,674,1,674,1,674,1,674,1,674,1,674,3,674,10144,
        8,674,1,675,1,675,1,675,3,675,10149,8,675,1,676,1,676,1,676,1,676,
        1,676,1,676,1,676,1,676,1,676,3,676,10160,8,676,1,677,1,677,1,677,
        1,677,1,677,1,677,1,677,1,677,1,677,1,677,3,677,10172,8,677,1,678,
        1,678,1,678,1,678,1,678,1,678,5,678,10180,8,678,10,678,12,678,10183,
        9,678,1,679,1,679,1,679,1,679,1,679,1,679,1,679,1,679,3,679,10193,
        8,679,1,680,1,680,1,680,1,680,1,680,1,680,3,680,10201,8,680,1,681,
        1,681,1,681,1,681,1,681,1,681,3,681,10209,8,681,1,682,1,682,1,682,
        1,682,1,682,1,682,5,682,10217,8,682,10,682,12,682,10220,9,682,1,
        683,1,683,1,683,1,683,3,683,10226,8,683,1,683,3,683,10229,8,683,
        1,683,1,683,1,683,1,683,1,683,1,683,1,683,3,683,10238,8,683,1,683,
        3,683,10241,8,683,1,683,1,683,1,683,3,683,10246,8,683,1,684,1,684,
        1,684,1,684,1,685,1,685,1,686,1,686,1,686,5,686,10257,8,686,10,686,
        12,686,10260,9,686,1,687,1,687,1,687,1,687,1,687,3,687,10267,8,687,
        1,687,3,687,10270,8,687,1,688,1,688,1,688,5,688,10275,8,688,10,688,
        12,688,10278,9,688,1,689,1,689,3,689,10282,8,689,1,690,1,690,1,690,
        5,690,10287,8,690,10,690,12,690,10290,9,690,1,691,1,691,1,692,1,
        692,1,693,1,693,1,694,1,694,1,694,1,694,3,694,10302,8,694,1,695,
        1,695,1,695,1,695,1,695,1,695,1,695,1,695,1,695,1,695,3,695,10314,
        8,695,1,695,1,695,1,695,3,695,10319,8,695,1,695,1,695,1,695,1,695,
        1,695,1,695,3,695,10327,8,695,1,695,1,695,1,695,1,695,1,695,3,695,
        10334,8,695,1,695,1,695,1,695,3,695,10339,8,695,1,696,1,696,1,697,
        1,697,1,698,1,698,1,699,1,699,1,700,1,700,3,700,10351,8,700,1,701,
        1,701,1,701,1,701,5,701,10357,8,701,10,701,12,701,10360,9,701,1,
        701,1,701,3,701,10364,8,701,1,702,1,702,1,702,1,703,1,703,1,703,
        1,703,1,703,3,703,10374,8,703,1,704,1,704,1,705,1,705,1,705,3,705,
        10381,8,705,1,706,1,706,1,706,5,706,10386,8,706,10,706,12,706,10389,
        9,706,1,707,1,707,1,707,3,707,10394,8,707,1,708,1,708,1,708,3,708,
        10399,8,708,1,709,1,709,1,709,1,709,3,709,10405,8,709,1,710,1,710,
        1,710,1,710,1,710,1,710,3,710,10413,8,710,1,711,1,711,3,711,10417,
        8,711,1,712,1,712,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,
        1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,
        1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,
        1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,
        1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,
        1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,
        3,713,10484,8,713,1,714,1,714,1,715,1,715,1,716,1,716,1,717,1,717,
        1,718,1,718,3,718,10496,8,718,1,718,1,718,1,718,3,718,10501,8,718,
        1,718,0,4,1204,1330,1356,1364,719,0,2,4,6,8,10,12,14,16,18,20,22,
        24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
        68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
        140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
        172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
        204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,
        236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,
        268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,
        300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,
        332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,
        364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,
        396,398,400,402,404,406,408,410,412,414,416,418,420,422,424,426,
        428,430,432,434,436,438,440,442,444,446,448,450,452,454,456,458,
        460,462,464,466,468,470,472,474,476,478,480,482,484,486,488,490,
        492,494,496,498,500,502,504,506,508,510,512,514,516,518,520,522,
        524,526,528,530,532,534,536,538,540,542,544,546,548,550,552,554,
        556,558,560,562,564,566,568,570,572,574,576,578,580,582,584,586,
        588,590,592,594,596,598,600,602,604,606,608,610,612,614,616,618,
        620,622,624,626,628,630,632,634,636,638,640,642,644,646,648,650,
        652,654,656,658,660,662,664,666,668,670,672,674,676,678,680,682,
        684,686,688,690,692,694,696,698,700,702,704,706,708,710,712,714,
        716,718,720,722,724,726,728,730,732,734,736,738,740,742,744,746,
        748,750,752,754,756,758,760,762,764,766,768,770,772,774,776,778,
        780,782,784,786,788,790,792,794,796,798,800,802,804,806,808,810,
        812,814,816,818,820,822,824,826,828,830,832,834,836,838,840,842,
        844,846,848,850,852,854,856,858,860,862,864,866,868,870,872,874,
        876,878,880,882,884,886,888,890,892,894,896,898,900,902,904,906,
        908,910,912,914,916,918,920,922,924,926,928,930,932,934,936,938,
        940,942,944,946,948,950,952,954,956,958,960,962,964,966,968,970,
        972,974,976,978,980,982,984,986,988,990,992,994,996,998,1000,1002,
        1004,1006,1008,1010,1012,1014,1016,1018,1020,1022,1024,1026,1028,
        1030,1032,1034,1036,1038,1040,1042,1044,1046,1048,1050,1052,1054,
        1056,1058,1060,1062,1064,1066,1068,1070,1072,1074,1076,1078,1080,
        1082,1084,1086,1088,1090,1092,1094,1096,1098,1100,1102,1104,1106,
        1108,1110,1112,1114,1116,1118,1120,1122,1124,1126,1128,1130,1132,
        1134,1136,1138,1140,1142,1144,1146,1148,1150,1152,1154,1156,1158,
        1160,1162,1164,1166,1168,1170,1172,1174,1176,1178,1180,1182,1184,
        1186,1188,1190,1192,1194,1196,1198,1200,1202,1204,1206,1208,1210,
        1212,1214,1216,1218,1220,1222,1224,1226,1228,1230,1232,1234,1236,
        1238,1240,1242,1244,1246,1248,1250,1252,1254,1256,1258,1260,1262,
        1264,1266,1268,1270,1272,1274,1276,1278,1280,1282,1284,1286,1288,
        1290,1292,1294,1296,1298,1300,1302,1304,1306,1308,1310,1312,1314,
        1316,1318,1320,1322,1324,1326,1328,1330,1332,1334,1336,1338,1340,
        1342,1344,1346,1348,1350,1352,1354,1356,1358,1360,1362,1364,1366,
        1368,1370,1372,1374,1376,1378,1380,1382,1384,1386,1388,1390,1392,
        1394,1396,1398,1400,1402,1404,1406,1408,1410,1412,1414,1416,1418,
        1420,1422,1424,1426,1428,1430,1432,1434,1436,0,66,2,0,233,233,395,
        395,2,0,104,104,349,349,2,0,137,137,349,349,3,0,104,104,137,137,
        349,349,2,0,171,171,229,229,2,0,283,283,363,363,2,0,10,10,132,132,
        2,0,200,200,394,394,2,0,218,218,259,259,5,0,68,68,319,319,360,360,
        383,383,385,385,2,0,188,188,346,346,2,0,102,102,132,132,2,0,383,
        383,385,385,2,0,238,238,262,262,9,0,68,68,198,198,203,203,217,217,
        257,257,265,265,373,373,376,376,476,476,3,0,151,151,315,315,367,
        367,2,0,91,91,116,116,3,0,211,211,290,290,293,293,5,0,68,68,126,
        126,220,220,270,270,400,400,2,0,130,130,264,264,1,0,486,487,2,0,
        130,130,445,445,2,0,372,372,445,445,2,0,249,249,327,327,3,0,352,
        352,388,388,483,483,2,0,102,102,106,106,5,0,250,250,360,360,381,
        381,392,392,493,494,2,0,75,75,93,93,2,0,10,10,91,91,3,0,249,249,
        327,327,480,480,2,0,213,213,380,380,4,0,126,126,220,220,270,270,
        400,400,2,0,175,175,271,271,2,0,387,387,411,411,2,0,189,189,283,
        283,2,0,344,344,364,364,1,0,69,70,2,0,137,137,380,380,2,0,239,239,
        365,365,2,0,97,97,135,135,2,0,251,251,283,283,2,0,68,68,94,94,2,
        0,351,351,445,445,2,0,245,245,299,299,4,0,151,151,153,153,157,157,
        164,164,2,0,422,423,437,437,1,0,422,423,1,0,449,450,1,0,18,19,2,
        0,155,155,160,160,5,0,10,10,16,17,21,21,23,23,25,25,1,0,12,13,3,
        0,9,9,14,14,27,27,3,0,77,77,111,111,133,133,2,0,204,204,226,226,
        2,0,335,335,488,488,2,0,246,246,320,320,3,0,68,68,72,72,128,128,
        6,0,9,10,12,17,21,21,23,23,25,25,27,27,2,0,20,20,22,22,1,0,521,524,
        1,0,576,579,13,0,43,66,162,162,167,332,334,417,471,490,493,507,509,
        509,511,511,513,513,516,526,529,529,542,542,553,553,3,0,144,161,
        163,166,510,510,3,0,42,42,68,143,492,492,35,0,30,66,68,72,75,83,
        85,96,98,98,101,101,106,107,110,111,113,116,119,120,122,124,126,
        131,133,134,136,140,144,154,156,159,161,161,164,213,215,255,257,
        291,293,294,296,332,334,356,358,404,406,409,411,414,416,421,424,
        442,444,455,463,514,516,516,519,527,529,529,542,542,553,553,11703,
        0,1438,1,0,0,0,2,1441,1,0,0,0,4,1444,1,0,0,0,6,1579,1,0,0,0,8,1581,
        1,0,0,0,10,1584,1,0,0,0,12,1592,1,0,0,0,14,1597,1,0,0,0,16,1603,
        1,0,0,0,18,1624,1,0,0,0,20,1636,1,0,0,0,22,1638,1,0,0,0,24,1646,
        1,0,0,0,26,1654,1,0,0,0,28,1658,1,0,0,0,30,1669,1,0,0,0,32,1677,
        1,0,0,0,34,1685,1,0,0,0,36,1692,1,0,0,0,38,1694,1,0,0,0,40,1711,
        1,0,0,0,42,1716,1,0,0,0,44,1725,1,0,0,0,46,1727,1,0,0,0,48,1741,
        1,0,0,0,50,1743,1,0,0,0,52,1776,1,0,0,0,54,1778,1,0,0,0,56,1786,
        1,0,0,0,58,1796,1,0,0,0,60,1803,1,0,0,0,62,1809,1,0,0,0,64,1827,
        1,0,0,0,66,1831,1,0,0,0,68,1835,1,0,0,0,70,1837,1,0,0,0,72,1848,
        1,0,0,0,74,1852,1,0,0,0,76,1857,1,0,0,0,78,1862,1,0,0,0,80,1864,
        1,0,0,0,82,1876,1,0,0,0,84,1883,1,0,0,0,86,1885,1,0,0,0,88,1887,
        1,0,0,0,90,1889,1,0,0,0,92,2004,1,0,0,0,94,2006,1,0,0,0,96,2022,
        1,0,0,0,98,2024,1,0,0,0,100,2326,1,0,0,0,102,2333,1,0,0,0,104,2335,
        1,0,0,0,106,2337,1,0,0,0,108,2340,1,0,0,0,110,2349,1,0,0,0,112,2351,
        1,0,0,0,114,2355,1,0,0,0,116,2358,1,0,0,0,118,2366,1,0,0,0,120,2378,
        1,0,0,0,122,2395,1,0,0,0,124,2423,1,0,0,0,126,2425,1,0,0,0,128,2428,
        1,0,0,0,130,2436,1,0,0,0,132,2441,1,0,0,0,134,2479,1,0,0,0,136,2481,
        1,0,0,0,138,2523,1,0,0,0,140,2525,1,0,0,0,142,2527,1,0,0,0,144,2532,
        1,0,0,0,146,2539,1,0,0,0,148,2544,1,0,0,0,150,2586,1,0,0,0,152,2588,
        1,0,0,0,154,2591,1,0,0,0,156,2596,1,0,0,0,158,2598,1,0,0,0,160,2606,
        1,0,0,0,162,2617,1,0,0,0,164,2619,1,0,0,0,166,2627,1,0,0,0,168,2629,
        1,0,0,0,170,2714,1,0,0,0,172,2716,1,0,0,0,174,2718,1,0,0,0,176,2722,
        1,0,0,0,178,2730,1,0,0,0,180,2741,1,0,0,0,182,2745,1,0,0,0,184,2747,
        1,0,0,0,186,2754,1,0,0,0,188,2764,1,0,0,0,190,2775,1,0,0,0,192,2829,
        1,0,0,0,194,2834,1,0,0,0,196,2841,1,0,0,0,198,2843,1,0,0,0,200,2851,
        1,0,0,0,202,2854,1,0,0,0,204,2861,1,0,0,0,206,2949,1,0,0,0,208,2951,
        1,0,0,0,210,2954,1,0,0,0,212,2958,1,0,0,0,214,2966,1,0,0,0,216,2968,
        1,0,0,0,218,2973,1,0,0,0,220,2976,1,0,0,0,222,2984,1,0,0,0,224,2994,
        1,0,0,0,226,3007,1,0,0,0,228,3009,1,0,0,0,230,3013,1,0,0,0,232,3023,
        1,0,0,0,234,3025,1,0,0,0,236,3030,1,0,0,0,238,3032,1,0,0,0,240,3039,
        1,0,0,0,242,3070,1,0,0,0,244,3072,1,0,0,0,246,3079,1,0,0,0,248,3081,
        1,0,0,0,250,3090,1,0,0,0,252,3093,1,0,0,0,254,3098,1,0,0,0,256,3102,
        1,0,0,0,258,3118,1,0,0,0,260,3129,1,0,0,0,262,3145,1,0,0,0,264,3161,
        1,0,0,0,266,3167,1,0,0,0,268,3184,1,0,0,0,270,3197,1,0,0,0,272,3199,
        1,0,0,0,274,3209,1,0,0,0,276,3223,1,0,0,0,278,3232,1,0,0,0,280,3234,
        1,0,0,0,282,3239,1,0,0,0,284,3277,1,0,0,0,286,3279,1,0,0,0,288,3287,
        1,0,0,0,290,3289,1,0,0,0,292,3297,1,0,0,0,294,3319,1,0,0,0,296,3321,
        1,0,0,0,298,3325,1,0,0,0,300,3332,1,0,0,0,302,3334,1,0,0,0,304,3336,
        1,0,0,0,306,3338,1,0,0,0,308,3349,1,0,0,0,310,3352,1,0,0,0,312,3360,
        1,0,0,0,314,3376,1,0,0,0,316,3386,1,0,0,0,318,3388,1,0,0,0,320,3397,
        1,0,0,0,322,3400,1,0,0,0,324,3507,1,0,0,0,326,3509,1,0,0,0,328,3528,
        1,0,0,0,330,3531,1,0,0,0,332,3535,1,0,0,0,334,3554,1,0,0,0,336,3556,
        1,0,0,0,338,3561,1,0,0,0,340,3569,1,0,0,0,342,3574,1,0,0,0,344,3589,
        1,0,0,0,346,3591,1,0,0,0,348,3594,1,0,0,0,350,3596,1,0,0,0,352,3633,
        1,0,0,0,354,3635,1,0,0,0,356,3638,1,0,0,0,358,3643,1,0,0,0,360,3645,
        1,0,0,0,362,3727,1,0,0,0,364,3729,1,0,0,0,366,3747,1,0,0,0,368,3749,
        1,0,0,0,370,3777,1,0,0,0,372,3781,1,0,0,0,374,3801,1,0,0,0,376,3803,
        1,0,0,0,378,3812,1,0,0,0,380,3832,1,0,0,0,382,3846,1,0,0,0,384,3851,
        1,0,0,0,386,3857,1,0,0,0,388,3860,1,0,0,0,390,3863,1,0,0,0,392,3866,
        1,0,0,0,394,3869,1,0,0,0,396,3871,1,0,0,0,398,3880,1,0,0,0,400,3930,
        1,0,0,0,402,3936,1,0,0,0,404,3938,1,0,0,0,406,3953,1,0,0,0,408,3955,
        1,0,0,0,410,3959,1,0,0,0,412,3963,1,0,0,0,414,3970,1,0,0,0,416,3972,
        1,0,0,0,418,3974,1,0,0,0,420,3976,1,0,0,0,422,3982,1,0,0,0,424,3984,
        1,0,0,0,426,3986,1,0,0,0,428,3991,1,0,0,0,430,3995,1,0,0,0,432,4008,
        1,0,0,0,434,4010,1,0,0,0,436,4016,1,0,0,0,438,4030,1,0,0,0,440,4058,
        1,0,0,0,442,4060,1,0,0,0,444,4068,1,0,0,0,446,4074,1,0,0,0,448,4082,
        1,0,0,0,450,4094,1,0,0,0,452,4096,1,0,0,0,454,4219,1,0,0,0,456,4221,
        1,0,0,0,458,4225,1,0,0,0,460,4233,1,0,0,0,462,4244,1,0,0,0,464,4246,
        1,0,0,0,466,4250,1,0,0,0,468,4258,1,0,0,0,470,4262,1,0,0,0,472,4264,
        1,0,0,0,474,4315,1,0,0,0,476,4317,1,0,0,0,478,4321,1,0,0,0,480,4339,
        1,0,0,0,482,4378,1,0,0,0,484,4380,1,0,0,0,486,4382,1,0,0,0,488,4391,
        1,0,0,0,490,4393,1,0,0,0,492,4395,1,0,0,0,494,4420,1,0,0,0,496,4422,
        1,0,0,0,498,4442,1,0,0,0,500,4464,1,0,0,0,502,4486,1,0,0,0,504,4488,
        1,0,0,0,506,4495,1,0,0,0,508,4592,1,0,0,0,510,4617,1,0,0,0,512,4624,
        1,0,0,0,514,4641,1,0,0,0,516,4643,1,0,0,0,518,4645,1,0,0,0,520,4653,
        1,0,0,0,522,4659,1,0,0,0,524,4663,1,0,0,0,526,4671,1,0,0,0,528,4686,
        1,0,0,0,530,4835,1,0,0,0,532,4839,1,0,0,0,534,4952,1,0,0,0,536,4954,
        1,0,0,0,538,4959,1,0,0,0,540,4965,1,0,0,0,542,5052,1,0,0,0,544,5054,
        1,0,0,0,546,5056,1,0,0,0,548,5058,1,0,0,0,550,5088,1,0,0,0,552,5105,
        1,0,0,0,554,5107,1,0,0,0,556,5131,1,0,0,0,558,5191,1,0,0,0,560,5193,
        1,0,0,0,562,5204,1,0,0,0,564,5206,1,0,0,0,566,5210,1,0,0,0,568,5243,
        1,0,0,0,570,5245,1,0,0,0,572,5249,1,0,0,0,574,5253,1,0,0,0,576,5262,
        1,0,0,0,578,5274,1,0,0,0,580,5306,1,0,0,0,582,5308,1,0,0,0,584,5373,
        1,0,0,0,586,5375,1,0,0,0,588,5377,1,0,0,0,590,5379,1,0,0,0,592,5381,
        1,0,0,0,594,5383,1,0,0,0,596,5386,1,0,0,0,598,5417,1,0,0,0,600,5430,
        1,0,0,0,602,5432,1,0,0,0,604,5437,1,0,0,0,606,5445,1,0,0,0,608,5448,
        1,0,0,0,610,5450,1,0,0,0,612,5456,1,0,0,0,614,5458,1,0,0,0,616,5478,
        1,0,0,0,618,5481,1,0,0,0,620,5487,1,0,0,0,622,5495,1,0,0,0,624,5511,
        1,0,0,0,626,5513,1,0,0,0,628,5519,1,0,0,0,630,5540,1,0,0,0,632,5549,
        1,0,0,0,634,5551,1,0,0,0,636,5553,1,0,0,0,638,5564,1,0,0,0,640,5566,
        1,0,0,0,642,5571,1,0,0,0,644,5573,1,0,0,0,646,5588,1,0,0,0,648,5596,
        1,0,0,0,650,5599,1,0,0,0,652,5608,1,0,0,0,654,5649,1,0,0,0,656,5659,
        1,0,0,0,658,5666,1,0,0,0,660,5668,1,0,0,0,662,5680,1,0,0,0,664,5683,
        1,0,0,0,666,5686,1,0,0,0,668,5694,1,0,0,0,670,5702,1,0,0,0,672,5706,
        1,0,0,0,674,5750,1,0,0,0,676,5766,1,0,0,0,678,5782,1,0,0,0,680,5806,
        1,0,0,0,682,5813,1,0,0,0,684,5818,1,0,0,0,686,5826,1,0,0,0,688,5829,
        1,0,0,0,690,5833,1,0,0,0,692,5840,1,0,0,0,694,5879,1,0,0,0,696,5885,
        1,0,0,0,698,5887,1,0,0,0,700,5900,1,0,0,0,702,5903,1,0,0,0,704,5950,
        1,0,0,0,706,5952,1,0,0,0,708,5994,1,0,0,0,710,5996,1,0,0,0,712,5998,
        1,0,0,0,714,6000,1,0,0,0,716,6016,1,0,0,0,718,6505,1,0,0,0,720,6507,
        1,0,0,0,722,6509,1,0,0,0,724,6581,1,0,0,0,726,6583,1,0,0,0,728,6802,
        1,0,0,0,730,6804,1,0,0,0,732,6812,1,0,0,0,734,6828,1,0,0,0,736,6835,
        1,0,0,0,738,6837,1,0,0,0,740,7030,1,0,0,0,742,7032,1,0,0,0,744,7041,
        1,0,0,0,746,7049,1,0,0,0,748,7078,1,0,0,0,750,7080,1,0,0,0,752,7090,
        1,0,0,0,754,7098,1,0,0,0,756,7139,1,0,0,0,758,7155,1,0,0,0,760,7157,
        1,0,0,0,762,7183,1,0,0,0,764,7186,1,0,0,0,766,7202,1,0,0,0,768,7204,
        1,0,0,0,770,7206,1,0,0,0,772,7208,1,0,0,0,774,7210,1,0,0,0,776,7215,
        1,0,0,0,778,7218,1,0,0,0,780,7225,1,0,0,0,782,7296,1,0,0,0,784,7298,
        1,0,0,0,786,7310,1,0,0,0,788,7312,1,0,0,0,790,7322,1,0,0,0,792,7324,
        1,0,0,0,794,7330,1,0,0,0,796,7362,1,0,0,0,798,7369,1,0,0,0,800,7372,
        1,0,0,0,802,7381,1,0,0,0,804,7384,1,0,0,0,806,7388,1,0,0,0,808,7405,
        1,0,0,0,810,7407,1,0,0,0,812,7409,1,0,0,0,814,7424,1,0,0,0,816,7429,
        1,0,0,0,818,7445,1,0,0,0,820,7453,1,0,0,0,822,7455,1,0,0,0,824,7461,
        1,0,0,0,826,7466,1,0,0,0,828,7475,1,0,0,0,830,7502,1,0,0,0,832,7504,
        1,0,0,0,834,7583,1,0,0,0,836,7585,1,0,0,0,838,7587,1,0,0,0,840,7620,
        1,0,0,0,842,7622,1,0,0,0,844,7648,1,0,0,0,846,7664,1,0,0,0,848,7666,
        1,0,0,0,850,7674,1,0,0,0,852,7682,1,0,0,0,854,7684,1,0,0,0,856,7691,
        1,0,0,0,858,7695,1,0,0,0,860,7697,1,0,0,0,862,7703,1,0,0,0,864,7707,
        1,0,0,0,866,7709,1,0,0,0,868,7711,1,0,0,0,870,7713,1,0,0,0,872,7715,
        1,0,0,0,874,7717,1,0,0,0,876,7721,1,0,0,0,878,7725,1,0,0,0,880,7733,
        1,0,0,0,882,7753,1,0,0,0,884,7764,1,0,0,0,886,7766,1,0,0,0,888,7774,
        1,0,0,0,890,7780,1,0,0,0,892,7784,1,0,0,0,894,7786,1,0,0,0,896,7794,
        1,0,0,0,898,7802,1,0,0,0,900,7842,1,0,0,0,902,7844,1,0,0,0,904,7858,
        1,0,0,0,906,7861,1,0,0,0,908,7873,1,0,0,0,910,7897,1,0,0,0,912,7899,
        1,0,0,0,914,7901,1,0,0,0,916,7909,1,0,0,0,918,7912,1,0,0,0,920,7936,
        1,0,0,0,922,7938,1,0,0,0,924,7941,1,0,0,0,926,7972,1,0,0,0,928,7991,
        1,0,0,0,930,8004,1,0,0,0,932,8012,1,0,0,0,934,8026,1,0,0,0,936,8029,
        1,0,0,0,938,8040,1,0,0,0,940,8056,1,0,0,0,942,8058,1,0,0,0,944,8063,
        1,0,0,0,946,8066,1,0,0,0,948,8081,1,0,0,0,950,8099,1,0,0,0,952,8101,
        1,0,0,0,954,8104,1,0,0,0,956,8112,1,0,0,0,958,8122,1,0,0,0,960,8131,
        1,0,0,0,962,8138,1,0,0,0,964,8142,1,0,0,0,966,8152,1,0,0,0,968,8183,
        1,0,0,0,970,8185,1,0,0,0,972,8196,1,0,0,0,974,8258,1,0,0,0,976,8260,
        1,0,0,0,978,8266,1,0,0,0,980,8274,1,0,0,0,982,8289,1,0,0,0,984,8291,
        1,0,0,0,986,8293,1,0,0,0,988,8296,1,0,0,0,990,8314,1,0,0,0,992,8316,
        1,0,0,0,994,8318,1,0,0,0,996,8320,1,0,0,0,998,8328,1,0,0,0,1000,
        8330,1,0,0,0,1002,8332,1,0,0,0,1004,8336,1,0,0,0,1006,8344,1,0,0,
        0,1008,8363,1,0,0,0,1010,8365,1,0,0,0,1012,8390,1,0,0,0,1014,8392,
        1,0,0,0,1016,8401,1,0,0,0,1018,8403,1,0,0,0,1020,8410,1,0,0,0,1022,
        8414,1,0,0,0,1024,8416,1,0,0,0,1026,8418,1,0,0,0,1028,8420,1,0,0,
        0,1030,8424,1,0,0,0,1032,8437,1,0,0,0,1034,8439,1,0,0,0,1036,8442,
        1,0,0,0,1038,8447,1,0,0,0,1040,8452,1,0,0,0,1042,8458,1,0,0,0,1044,
        8465,1,0,0,0,1046,8467,1,0,0,0,1048,8470,1,0,0,0,1050,8474,1,0,0,
        0,1052,8481,1,0,0,0,1054,8493,1,0,0,0,1056,8496,1,0,0,0,1058,8510,
        1,0,0,0,1060,8513,1,0,0,0,1062,8579,1,0,0,0,1064,8603,1,0,0,0,1066,
        8624,1,0,0,0,1068,8626,1,0,0,0,1070,8637,1,0,0,0,1072,8651,1,0,0,
        0,1074,8653,1,0,0,0,1076,8661,1,0,0,0,1078,8668,1,0,0,0,1080,8676,
        1,0,0,0,1082,8693,1,0,0,0,1084,8695,1,0,0,0,1086,8699,1,0,0,0,1088,
        8707,1,0,0,0,1090,8712,1,0,0,0,1092,8715,1,0,0,0,1094,8718,1,0,0,
        0,1096,8725,1,0,0,0,1098,8727,1,0,0,0,1100,8735,1,0,0,0,1102,8740,
        1,0,0,0,1104,8761,1,0,0,0,1106,8769,1,0,0,0,1108,8779,1,0,0,0,1110,
        8791,1,0,0,0,1112,8793,1,0,0,0,1114,8807,1,0,0,0,1116,8810,1,0,0,
        0,1118,8830,1,0,0,0,1120,8849,1,0,0,0,1122,8856,1,0,0,0,1124,8858,
        1,0,0,0,1126,8865,1,0,0,0,1128,8893,1,0,0,0,1130,8895,1,0,0,0,1132,
        8901,1,0,0,0,1134,8905,1,0,0,0,1136,8907,1,0,0,0,1138,8915,1,0,0,
        0,1140,8919,1,0,0,0,1142,8926,1,0,0,0,1144,8943,1,0,0,0,1146,8945,
        1,0,0,0,1148,8947,1,0,0,0,1150,8957,1,0,0,0,1152,8965,1,0,0,0,1154,
        8992,1,0,0,0,1156,8994,1,0,0,0,1158,9001,1,0,0,0,1160,9003,1,0,0,
        0,1162,9006,1,0,0,0,1164,9008,1,0,0,0,1166,9014,1,0,0,0,1168,9022,
        1,0,0,0,1170,9030,1,0,0,0,1172,9038,1,0,0,0,1174,9052,1,0,0,0,1176,
        9061,1,0,0,0,1178,9065,1,0,0,0,1180,9069,1,0,0,0,1182,9095,1,0,0,
        0,1184,9109,1,0,0,0,1186,9125,1,0,0,0,1188,9135,1,0,0,0,1190,9139,
        1,0,0,0,1192,9147,1,0,0,0,1194,9155,1,0,0,0,1196,9161,1,0,0,0,1198,
        9165,1,0,0,0,1200,9172,1,0,0,0,1202,9177,1,0,0,0,1204,9192,1,0,0,
        0,1206,9272,1,0,0,0,1208,9274,1,0,0,0,1210,9276,1,0,0,0,1212,9314,
        1,0,0,0,1214,9318,1,0,0,0,1216,9626,1,0,0,0,1218,9633,1,0,0,0,1220,
        9645,1,0,0,0,1222,9647,1,0,0,0,1224,9652,1,0,0,0,1226,9660,1,0,0,
        0,1228,9665,1,0,0,0,1230,9671,1,0,0,0,1232,9688,1,0,0,0,1234,9690,
        1,0,0,0,1236,9693,1,0,0,0,1238,9699,1,0,0,0,1240,9705,1,0,0,0,1242,
        9708,1,0,0,0,1244,9716,1,0,0,0,1246,9720,1,0,0,0,1248,9725,1,0,0,
        0,1250,9740,1,0,0,0,1252,9742,1,0,0,0,1254,9761,1,0,0,0,1256,9769,
        1,0,0,0,1258,9778,1,0,0,0,1260,9780,1,0,0,0,1262,9801,1,0,0,0,1264,
        9803,1,0,0,0,1266,9810,1,0,0,0,1268,9816,1,0,0,0,1270,9820,1,0,0,
        0,1272,9822,1,0,0,0,1274,9830,1,0,0,0,1276,9838,1,0,0,0,1278,9852,
        1,0,0,0,1280,9854,1,0,0,0,1282,9862,1,0,0,0,1284,9875,1,0,0,0,1286,
        9877,1,0,0,0,1288,9885,1,0,0,0,1290,9892,1,0,0,0,1292,9900,1,0,0,
        0,1294,9912,1,0,0,0,1296,9914,1,0,0,0,1298,9916,1,0,0,0,1300,9925,
        1,0,0,0,1302,9955,1,0,0,0,1304,9964,1,0,0,0,1306,9971,1,0,0,0,1308,
        9973,1,0,0,0,1310,9984,1,0,0,0,1312,9988,1,0,0,0,1314,9993,1,0,0,
        0,1316,9996,1,0,0,0,1318,9998,1,0,0,0,1320,10019,1,0,0,0,1322,10021,
        1,0,0,0,1324,10024,1,0,0,0,1326,10031,1,0,0,0,1328,10034,1,0,0,0,
        1330,10037,1,0,0,0,1332,10048,1,0,0,0,1334,10077,1,0,0,0,1336,10082,
        1,0,0,0,1338,10094,1,0,0,0,1340,10111,1,0,0,0,1342,10113,1,0,0,0,
        1344,10117,1,0,0,0,1346,10127,1,0,0,0,1348,10143,1,0,0,0,1350,10145,
        1,0,0,0,1352,10159,1,0,0,0,1354,10171,1,0,0,0,1356,10173,1,0,0,0,
        1358,10192,1,0,0,0,1360,10200,1,0,0,0,1362,10208,1,0,0,0,1364,10210,
        1,0,0,0,1366,10245,1,0,0,0,1368,10247,1,0,0,0,1370,10251,1,0,0,0,
        1372,10253,1,0,0,0,1374,10269,1,0,0,0,1376,10271,1,0,0,0,1378,10279,
        1,0,0,0,1380,10283,1,0,0,0,1382,10291,1,0,0,0,1384,10293,1,0,0,0,
        1386,10295,1,0,0,0,1388,10301,1,0,0,0,1390,10338,1,0,0,0,1392,10340,
        1,0,0,0,1394,10342,1,0,0,0,1396,10344,1,0,0,0,1398,10346,1,0,0,0,
        1400,10348,1,0,0,0,1402,10363,1,0,0,0,1404,10365,1,0,0,0,1406,10373,
        1,0,0,0,1408,10375,1,0,0,0,1410,10380,1,0,0,0,1412,10382,1,0,0,0,
        1414,10393,1,0,0,0,1416,10398,1,0,0,0,1418,10404,1,0,0,0,1420,10412,
        1,0,0,0,1422,10416,1,0,0,0,1424,10418,1,0,0,0,1426,10483,1,0,0,0,
        1428,10485,1,0,0,0,1430,10487,1,0,0,0,1432,10489,1,0,0,0,1434,10491,
        1,0,0,0,1436,10500,1,0,0,0,1438,1439,3,2,1,0,1439,1440,5,0,0,1,1440,
        1,1,0,0,0,1441,1442,3,4,2,0,1442,3,1,0,0,0,1443,1445,3,6,3,0,1444,
        1443,1,0,0,0,1444,1445,1,0,0,0,1445,1452,1,0,0,0,1446,1448,5,7,0,
        0,1447,1449,3,6,3,0,1448,1447,1,0,0,0,1448,1449,1,0,0,0,1449,1451,
        1,0,0,0,1450,1446,1,0,0,0,1451,1454,1,0,0,0,1452,1450,1,0,0,0,1452,
        1453,1,0,0,0,1453,5,1,0,0,0,1454,1452,1,0,0,0,1455,1580,3,448,224,
        0,1456,1580,3,822,411,0,1457,1580,3,812,406,0,1458,1580,3,814,407,
        0,1459,1580,3,574,287,0,1460,1580,3,828,414,0,1461,1580,3,474,237,
        0,1462,1580,3,318,159,0,1463,1580,3,324,162,0,1464,1580,3,334,167,
        0,1465,1580,3,360,180,0,1466,1580,3,668,334,0,1467,1580,3,34,17,
        0,1468,1580,3,724,362,0,1469,1580,3,728,364,0,1470,1580,3,740,370,
        0,1471,1580,3,730,365,0,1472,1580,3,738,369,0,1473,1580,3,380,190,
        0,1474,1580,3,276,138,0,1475,1580,3,824,412,0,1476,1580,3,92,46,
        0,1477,1580,3,716,358,0,1478,1580,3,130,65,0,1479,1580,3,748,374,
        0,1480,1580,3,28,14,0,1481,1580,3,24,12,0,1482,1580,3,756,378,0,
        1483,1580,3,258,129,0,1484,1580,3,834,417,0,1485,1580,3,832,416,
        0,1486,1580,3,376,188,0,1487,1580,3,846,423,0,1488,1580,3,8,4,0,
        1489,1580,3,88,44,0,1490,1580,3,136,68,0,1491,1580,3,840,420,0,1492,
        1580,3,530,265,0,1493,1580,3,82,41,0,1494,1580,3,138,69,0,1495,1580,
        3,396,198,0,1496,1580,3,260,130,0,1497,1580,3,452,226,0,1498,1580,
        3,694,347,0,1499,1580,3,838,419,0,1500,1580,3,826,413,0,1501,1580,
        3,312,156,0,1502,1580,3,326,163,0,1503,1580,3,352,176,0,1504,1580,
        3,362,181,0,1505,1580,3,614,307,0,1506,1580,3,32,16,0,1507,1580,
        3,266,133,0,1508,1580,3,478,239,0,1509,1580,3,492,246,0,1510,1580,
        3,742,371,0,1511,1580,3,494,247,0,1512,1580,3,378,189,0,1513,1580,
        3,292,146,0,1514,1580,3,38,19,0,1515,1580,3,274,137,0,1516,1580,
        3,168,84,0,1517,1580,3,750,375,0,1518,1580,3,256,128,0,1519,1580,
        3,306,153,0,1520,1580,3,702,351,0,1521,1580,3,400,200,0,1522,1580,
        3,440,220,0,1523,1580,3,10,5,0,1524,1580,3,22,11,0,1525,1580,3,370,
        185,0,1526,1580,3,800,400,0,1527,1580,3,904,452,0,1528,1580,3,956,
        478,0,1529,1580,3,454,227,0,1530,1580,3,932,466,0,1531,1580,3,90,
        45,0,1532,1580,3,688,344,0,1533,1580,3,698,349,0,1534,1580,3,500,
        250,0,1535,1580,3,502,251,0,1536,1580,3,504,252,0,1537,1580,3,508,
        254,0,1538,1580,3,758,379,0,1539,1580,3,310,155,0,1540,1580,3,706,
        353,0,1541,1580,3,30,15,0,1542,1580,3,374,187,0,1543,1580,3,816,
        408,0,1544,1580,3,900,450,0,1545,1580,3,882,441,0,1546,1580,3,540,
        270,0,1547,1580,3,548,274,0,1548,1580,3,566,283,0,1549,1580,3,364,
        182,0,1550,1580,3,584,292,0,1551,1580,3,906,453,0,1552,1580,3,924,
        462,0,1553,1580,3,778,389,0,1554,1580,3,272,136,0,1555,1580,3,798,
        399,0,1556,1580,3,936,468,0,1557,1580,3,774,387,0,1558,1580,3,894,
        447,0,1559,1580,3,506,253,0,1560,1580,3,708,354,0,1561,1580,3,676,
        338,0,1562,1580,3,674,337,0,1563,1580,3,678,339,0,1564,1580,3,718,
        359,0,1565,1580,3,550,275,0,1566,1580,3,568,284,0,1567,1580,3,760,
        380,0,1568,1580,3,534,267,0,1569,1580,3,964,482,0,1570,1580,3,782,
        391,0,1571,1580,3,526,263,0,1572,1580,3,780,390,0,1573,1580,3,946,
        473,0,1574,1580,3,844,422,0,1575,1580,3,70,35,0,1576,1580,3,46,23,
        0,1577,1580,3,80,40,0,1578,1580,3,794,397,0,1579,1455,1,0,0,0,1579,
        1456,1,0,0,0,1579,1457,1,0,0,0,1579,1458,1,0,0,0,1579,1459,1,0,0,
        0,1579,1460,1,0,0,0,1579,1461,1,0,0,0,1579,1462,1,0,0,0,1579,1463,
        1,0,0,0,1579,1464,1,0,0,0,1579,1465,1,0,0,0,1579,1466,1,0,0,0,1579,
        1467,1,0,0,0,1579,1468,1,0,0,0,1579,1469,1,0,0,0,1579,1470,1,0,0,
        0,1579,1471,1,0,0,0,1579,1472,1,0,0,0,1579,1473,1,0,0,0,1579,1474,
        1,0,0,0,1579,1475,1,0,0,0,1579,1476,1,0,0,0,1579,1477,1,0,0,0,1579,
        1478,1,0,0,0,1579,1479,1,0,0,0,1579,1480,1,0,0,0,1579,1481,1,0,0,
        0,1579,1482,1,0,0,0,1579,1483,1,0,0,0,1579,1484,1,0,0,0,1579,1485,
        1,0,0,0,1579,1486,1,0,0,0,1579,1487,1,0,0,0,1579,1488,1,0,0,0,1579,
        1489,1,0,0,0,1579,1490,1,0,0,0,1579,1491,1,0,0,0,1579,1492,1,0,0,
        0,1579,1493,1,0,0,0,1579,1494,1,0,0,0,1579,1495,1,0,0,0,1579,1496,
        1,0,0,0,1579,1497,1,0,0,0,1579,1498,1,0,0,0,1579,1499,1,0,0,0,1579,
        1500,1,0,0,0,1579,1501,1,0,0,0,1579,1502,1,0,0,0,1579,1503,1,0,0,
        0,1579,1504,1,0,0,0,1579,1505,1,0,0,0,1579,1506,1,0,0,0,1579,1507,
        1,0,0,0,1579,1508,1,0,0,0,1579,1509,1,0,0,0,1579,1510,1,0,0,0,1579,
        1511,1,0,0,0,1579,1512,1,0,0,0,1579,1513,1,0,0,0,1579,1514,1,0,0,
        0,1579,1515,1,0,0,0,1579,1516,1,0,0,0,1579,1517,1,0,0,0,1579,1518,
        1,0,0,0,1579,1519,1,0,0,0,1579,1520,1,0,0,0,1579,1521,1,0,0,0,1579,
        1522,1,0,0,0,1579,1523,1,0,0,0,1579,1524,1,0,0,0,1579,1525,1,0,0,
        0,1579,1526,1,0,0,0,1579,1527,1,0,0,0,1579,1528,1,0,0,0,1579,1529,
        1,0,0,0,1579,1530,1,0,0,0,1579,1531,1,0,0,0,1579,1532,1,0,0,0,1579,
        1533,1,0,0,0,1579,1534,1,0,0,0,1579,1535,1,0,0,0,1579,1536,1,0,0,
        0,1579,1537,1,0,0,0,1579,1538,1,0,0,0,1579,1539,1,0,0,0,1579,1540,
        1,0,0,0,1579,1541,1,0,0,0,1579,1542,1,0,0,0,1579,1543,1,0,0,0,1579,
        1544,1,0,0,0,1579,1545,1,0,0,0,1579,1546,1,0,0,0,1579,1547,1,0,0,
        0,1579,1548,1,0,0,0,1579,1549,1,0,0,0,1579,1550,1,0,0,0,1579,1551,
        1,0,0,0,1579,1552,1,0,0,0,1579,1553,1,0,0,0,1579,1554,1,0,0,0,1579,
        1555,1,0,0,0,1579,1556,1,0,0,0,1579,1557,1,0,0,0,1579,1558,1,0,0,
        0,1579,1559,1,0,0,0,1579,1560,1,0,0,0,1579,1561,1,0,0,0,1579,1562,
        1,0,0,0,1579,1563,1,0,0,0,1579,1564,1,0,0,0,1579,1565,1,0,0,0,1579,
        1566,1,0,0,0,1579,1567,1,0,0,0,1579,1568,1,0,0,0,1579,1569,1,0,0,
        0,1579,1570,1,0,0,0,1579,1571,1,0,0,0,1579,1572,1,0,0,0,1579,1573,
        1,0,0,0,1579,1574,1,0,0,0,1579,1575,1,0,0,0,1579,1576,1,0,0,0,1579,
        1577,1,0,0,0,1579,1578,1,0,0,0,1580,7,1,0,0,0,1581,1582,5,471,0,
        0,1582,1583,3,1210,605,0,1583,9,1,0,0,0,1584,1585,5,84,0,0,1585,
        1586,5,349,0,0,1586,1588,3,1408,704,0,1587,1589,3,12,6,0,1588,1587,
        1,0,0,0,1588,1589,1,0,0,0,1589,1590,1,0,0,0,1590,1591,3,14,7,0,1591,
        11,1,0,0,0,1592,1593,5,143,0,0,1593,13,1,0,0,0,1594,1596,3,20,10,
        0,1595,1594,1,0,0,0,1596,1599,1,0,0,0,1597,1595,1,0,0,0,1597,1598,
        1,0,0,0,1598,15,1,0,0,0,1599,1597,1,0,0,0,1600,1602,3,18,9,0,1601,
        1600,1,0,0,0,1602,1605,1,0,0,0,1603,1601,1,0,0,0,1603,1604,1,0,0,
        0,1604,17,1,0,0,0,1605,1603,1,0,0,0,1606,1609,5,318,0,0,1607,1610,
        3,1400,700,0,1608,1610,5,116,0,0,1609,1607,1,0,0,0,1609,1608,1,0,
        0,0,1610,1625,1,0,0,0,1611,1612,7,0,0,0,1612,1613,5,318,0,0,1613,
        1625,3,1400,700,0,1614,1625,5,266,0,0,1615,1616,5,202,0,0,1616,1617,
        5,112,0,0,1617,1625,3,1406,703,0,1618,1619,5,402,0,0,1619,1620,5,
        399,0,0,1620,1625,3,1400,700,0,1621,1622,5,137,0,0,1622,1625,3,1412,
        706,0,1623,1625,3,1436,718,0,1624,1606,1,0,0,0,1624,1611,1,0,0,0,
        1624,1614,1,0,0,0,1624,1615,1,0,0,0,1624,1618,1,0,0,0,1624,1621,
        1,0,0,0,1624,1623,1,0,0,0,1625,19,1,0,0,0,1626,1637,3,18,9,0,1627,
        1628,5,379,0,0,1628,1637,3,1398,699,0,1629,1630,5,172,0,0,1630,1637,
        3,1412,706,0,1631,1632,5,349,0,0,1632,1637,3,1412,706,0,1633,1634,
        5,106,0,0,1634,1635,7,1,0,0,1635,1637,3,1412,706,0,1636,1626,1,0,
        0,0,1636,1627,1,0,0,0,1636,1629,1,0,0,0,1636,1631,1,0,0,0,1636,1633,
        1,0,0,0,1637,21,1,0,0,0,1638,1639,5,84,0,0,1639,1640,5,137,0,0,1640,
        1642,3,1408,704,0,1641,1643,3,12,6,0,1642,1641,1,0,0,0,1642,1643,
        1,0,0,0,1643,1644,1,0,0,0,1644,1645,3,14,7,0,1645,23,1,0,0,0,1646,
        1647,5,176,0,0,1647,1648,7,2,0,0,1648,1650,3,1410,705,0,1649,1651,
        3,12,6,0,1650,1649,1,0,0,0,1650,1651,1,0,0,0,1651,1652,1,0,0,0,1652,
        1653,3,16,8,0,1653,25,1,0,0,0,1654,1655,5,106,0,0,1655,1656,5,213,
        0,0,1656,1657,3,1382,691,0,1657,27,1,0,0,0,1658,1659,5,176,0,0,1659,
        1661,7,2,0,0,1660,1662,5,68,0,0,1661,1660,1,0,0,0,1661,1662,1,0,
        0,0,1662,1663,1,0,0,0,1663,1665,3,1410,705,0,1664,1666,3,26,13,0,
        1665,1664,1,0,0,0,1665,1666,1,0,0,0,1666,1667,1,0,0,0,1667,1668,
        3,76,38,0,1668,29,1,0,0,0,1669,1670,5,229,0,0,1670,1673,7,3,0,0,
        1671,1672,5,258,0,0,1672,1674,5,427,0,0,1673,1671,1,0,0,0,1673,1674,
        1,0,0,0,1674,1675,1,0,0,0,1675,1676,3,1412,706,0,1676,31,1,0,0,0,
        1677,1678,5,84,0,0,1678,1679,5,104,0,0,1679,1681,3,1408,704,0,1680,
        1682,3,12,6,0,1681,1680,1,0,0,0,1681,1682,1,0,0,0,1682,1683,1,0,
        0,0,1683,1684,3,14,7,0,1684,33,1,0,0,0,1685,1686,5,176,0,0,1686,
        1687,5,104,0,0,1687,1688,3,1410,705,0,1688,1689,3,36,18,0,1689,1690,
        5,137,0,0,1690,1691,3,1412,706,0,1691,35,1,0,0,0,1692,1693,7,4,0,
        0,1693,37,1,0,0,0,1694,1695,5,84,0,0,1695,1699,5,354,0,0,1696,1697,
        5,258,0,0,1697,1698,5,115,0,0,1698,1700,5,427,0,0,1699,1696,1,0,
        0,0,1699,1700,1,0,0,0,1700,1707,1,0,0,0,1701,1703,3,40,20,0,1702,
        1701,1,0,0,0,1702,1703,1,0,0,0,1703,1704,1,0,0,0,1704,1705,5,144,
        0,0,1705,1708,3,1410,705,0,1706,1708,3,1414,707,0,1707,1702,1,0,
        0,0,1707,1706,1,0,0,0,1708,1709,1,0,0,0,1709,1710,3,42,21,0,1710,
        39,1,0,0,0,1711,1712,3,1414,707,0,1712,41,1,0,0,0,1713,1715,3,44,
        22,0,1714,1713,1,0,0,0,1715,1718,1,0,0,0,1716,1714,1,0,0,0,1716,
        1717,1,0,0,0,1717,43,1,0,0,0,1718,1716,1,0,0,0,1719,1726,3,168,84,
        0,1720,1726,3,584,292,0,1721,1726,3,274,137,0,1722,1726,3,400,200,
        0,1723,1726,3,548,274,0,1724,1726,3,794,397,0,1725,1719,1,0,0,0,
        1725,1720,1,0,0,0,1725,1721,1,0,0,0,1725,1722,1,0,0,0,1725,1723,
        1,0,0,0,1725,1724,1,0,0,0,1726,45,1,0,0,0,1727,1729,5,364,0,0,1728,
        1730,7,5,0,0,1729,1728,1,0,0,0,1729,1730,1,0,0,0,1730,1731,1,0,0,
        0,1731,1732,3,48,24,0,1732,47,1,0,0,0,1733,1734,5,387,0,0,1734,1742,
        3,788,394,0,1735,1736,5,363,0,0,1736,1737,5,192,0,0,1737,1738,5,
        74,0,0,1738,1739,5,387,0,0,1739,1742,3,788,394,0,1740,1742,3,52,
        26,0,1741,1733,1,0,0,0,1741,1735,1,0,0,0,1741,1740,1,0,0,0,1742,
        49,1,0,0,0,1743,1744,3,54,27,0,1744,1747,7,6,0,0,1745,1748,3,56,
        28,0,1746,1748,5,91,0,0,1747,1745,1,0,0,0,1747,1746,1,0,0,0,1748,
        51,1,0,0,0,1749,1777,3,50,25,0,1750,1751,3,54,27,0,1751,1752,5,102,
        0,0,1752,1753,5,472,0,0,1753,1777,1,0,0,0,1754,1755,5,449,0,0,1755,
        1756,5,417,0,0,1756,1777,3,64,32,0,1757,1758,5,190,0,0,1758,1777,
        3,1400,700,0,1759,1760,5,354,0,0,1760,1777,3,1400,700,0,1761,1763,
        5,298,0,0,1762,1764,3,66,33,0,1763,1762,1,0,0,0,1763,1764,1,0,0,
        0,1764,1777,1,0,0,0,1765,1766,5,349,0,0,1766,1777,3,68,34,0,1767,
        1768,5,363,0,0,1768,1769,5,144,0,0,1769,1777,3,68,34,0,1770,1771,
        5,414,0,0,1771,1772,5,310,0,0,1772,1777,3,1228,614,0,1773,1774,5,
        387,0,0,1774,1775,5,368,0,0,1775,1777,3,1400,700,0,1776,1749,1,0,
        0,0,1776,1750,1,0,0,0,1776,1754,1,0,0,0,1776,1757,1,0,0,0,1776,1759,
        1,0,0,0,1776,1761,1,0,0,0,1776,1765,1,0,0,0,1776,1767,1,0,0,0,1776,
        1770,1,0,0,0,1776,1773,1,0,0,0,1777,53,1,0,0,0,1778,1783,3,1414,
        707,0,1779,1780,5,11,0,0,1780,1782,3,1414,707,0,1781,1779,1,0,0,
        0,1782,1785,1,0,0,0,1783,1781,1,0,0,0,1783,1784,1,0,0,0,1784,55,
        1,0,0,0,1785,1783,1,0,0,0,1786,1791,3,58,29,0,1787,1788,5,6,0,0,
        1788,1790,3,58,29,0,1789,1787,1,0,0,0,1790,1793,1,0,0,0,1791,1789,
        1,0,0,0,1791,1792,1,0,0,0,1792,57,1,0,0,0,1793,1791,1,0,0,0,1794,
        1797,3,62,31,0,1795,1797,3,288,144,0,1796,1794,1,0,0,0,1796,1795,
        1,0,0,0,1797,59,1,0,0,0,1798,1799,5,331,0,0,1799,1804,7,7,0,0,1800,
        1801,5,341,0,0,1801,1804,5,331,0,0,1802,1804,5,361,0,0,1803,1798,
        1,0,0,0,1803,1800,1,0,0,0,1803,1802,1,0,0,0,1804,61,1,0,0,0,1805,
        1810,5,134,0,0,1806,1810,5,98,0,0,1807,1810,5,118,0,0,1808,1810,
        3,68,34,0,1809,1805,1,0,0,0,1809,1806,1,0,0,0,1809,1807,1,0,0,0,
        1809,1808,1,0,0,0,1810,63,1,0,0,0,1811,1828,3,1400,700,0,1812,1828,
        3,1436,718,0,1813,1814,3,1150,575,0,1814,1816,3,1400,700,0,1815,
        1817,3,1154,577,0,1816,1815,1,0,0,0,1816,1817,1,0,0,0,1817,1828,
        1,0,0,0,1818,1819,3,1150,575,0,1819,1820,5,2,0,0,1820,1821,3,1398,
        699,0,1821,1822,5,3,0,0,1822,1823,3,1400,700,0,1823,1828,1,0,0,0,
        1824,1828,3,288,144,0,1825,1828,5,91,0,0,1826,1828,5,283,0,0,1827,
        1811,1,0,0,0,1827,1812,1,0,0,0,1827,1813,1,0,0,0,1827,1818,1,0,0,
        0,1827,1824,1,0,0,0,1827,1825,1,0,0,0,1827,1826,1,0,0,0,1828,65,
        1,0,0,0,1829,1832,3,1400,700,0,1830,1832,5,91,0,0,1831,1829,1,0,
        0,0,1831,1830,1,0,0,0,1832,67,1,0,0,0,1833,1836,3,1418,709,0,1834,
        1836,3,1400,700,0,1835,1833,1,0,0,0,1835,1834,1,0,0,0,1836,69,1,
        0,0,0,1837,1838,5,344,0,0,1838,1839,3,72,36,0,1839,71,1,0,0,0,1840,
        1849,3,74,37,0,1841,1842,5,449,0,0,1842,1849,5,417,0,0,1843,1844,
        5,387,0,0,1844,1845,5,273,0,0,1845,1849,5,280,0,0,1846,1847,5,363,
        0,0,1847,1849,5,144,0,0,1848,1840,1,0,0,0,1848,1841,1,0,0,0,1848,
        1843,1,0,0,0,1848,1846,1,0,0,0,1849,73,1,0,0,0,1850,1853,3,54,27,
        0,1851,1853,5,68,0,0,1852,1850,1,0,0,0,1852,1851,1,0,0,0,1853,75,
        1,0,0,0,1854,1855,5,364,0,0,1855,1858,3,48,24,0,1856,1858,3,70,35,
        0,1857,1854,1,0,0,0,1857,1856,1,0,0,0,1858,77,1,0,0,0,1859,1860,
        5,364,0,0,1860,1863,3,52,26,0,1861,1863,3,70,35,0,1862,1859,1,0,
        0,0,1862,1861,1,0,0,0,1863,79,1,0,0,0,1864,1874,5,366,0,0,1865,1875,
        3,54,27,0,1866,1867,5,449,0,0,1867,1875,5,417,0,0,1868,1869,5,387,
        0,0,1869,1870,5,273,0,0,1870,1875,5,280,0,0,1871,1872,5,363,0,0,
        1872,1875,5,144,0,0,1873,1875,5,68,0,0,1874,1865,1,0,0,0,1874,1866,
        1,0,0,0,1874,1868,1,0,0,0,1874,1871,1,0,0,0,1874,1873,1,0,0,0,1875,
        81,1,0,0,0,1876,1877,5,364,0,0,1877,1878,5,203,0,0,1878,1879,3,84,
        42,0,1879,1880,3,86,43,0,1880,83,1,0,0,0,1881,1884,5,68,0,0,1882,
        1884,3,1376,688,0,1883,1881,1,0,0,0,1883,1882,1,0,0,0,1884,85,1,
        0,0,0,1885,1886,7,8,0,0,1886,87,1,0,0,0,1887,1888,5,193,0,0,1888,
        89,1,0,0,0,1889,1890,5,225,0,0,1890,1891,7,9,0,0,1891,91,1,0,0,0,
        1892,1893,5,176,0,0,1893,1896,5,130,0,0,1894,1895,5,258,0,0,1895,
        1897,5,427,0,0,1896,1894,1,0,0,0,1896,1897,1,0,0,0,1897,1898,1,0,
        0,0,1898,1901,3,1072,536,0,1899,1902,3,94,47,0,1900,1902,3,96,48,
        0,1901,1899,1,0,0,0,1901,1900,1,0,0,0,1902,2005,1,0,0,0,1903,1904,
        5,176,0,0,1904,1905,5,130,0,0,1905,1906,5,68,0,0,1906,1907,5,106,
        0,0,1907,1908,5,382,0,0,1908,1912,3,1382,691,0,1909,1910,5,312,0,
        0,1910,1911,5,185,0,0,1911,1913,3,1412,706,0,1912,1909,1,0,0,0,1912,
        1913,1,0,0,0,1913,1914,1,0,0,0,1914,1915,5,364,0,0,1915,1916,5,382,
        0,0,1916,1918,3,1382,691,0,1917,1919,3,942,471,0,1918,1917,1,0,0,
        0,1918,1919,1,0,0,0,1919,2005,1,0,0,0,1920,1921,5,176,0,0,1921,1924,
        5,264,0,0,1922,1923,5,258,0,0,1923,1925,5,427,0,0,1924,1922,1,0,
        0,0,1924,1925,1,0,0,0,1925,1926,1,0,0,0,1926,1929,3,1378,689,0,1927,
        1930,3,94,47,0,1928,1930,3,98,49,0,1929,1927,1,0,0,0,1929,1928,1,
        0,0,0,1930,2005,1,0,0,0,1931,1932,5,176,0,0,1932,1933,5,264,0,0,
        1933,1934,5,68,0,0,1934,1935,5,106,0,0,1935,1936,5,382,0,0,1936,
        1940,3,1382,691,0,1937,1938,5,312,0,0,1938,1939,5,185,0,0,1939,1941,
        3,1412,706,0,1940,1937,1,0,0,0,1940,1941,1,0,0,0,1941,1942,1,0,0,
        0,1942,1943,5,364,0,0,1943,1944,5,382,0,0,1944,1946,3,1382,691,0,
        1945,1947,3,942,471,0,1946,1945,1,0,0,0,1946,1947,1,0,0,0,1947,2005,
        1,0,0,0,1948,1949,5,176,0,0,1949,1952,5,359,0,0,1950,1951,5,258,
        0,0,1951,1953,5,427,0,0,1952,1950,1,0,0,0,1952,1953,1,0,0,0,1953,
        1954,1,0,0,0,1954,1955,3,1378,689,0,1955,1956,3,94,47,0,1956,2005,
        1,0,0,0,1957,1958,5,176,0,0,1958,1961,5,407,0,0,1959,1960,5,258,
        0,0,1960,1962,5,427,0,0,1961,1959,1,0,0,0,1961,1962,1,0,0,0,1962,
        1963,1,0,0,0,1963,1964,3,1378,689,0,1964,1965,3,94,47,0,1965,2005,
        1,0,0,0,1966,1967,5,176,0,0,1967,1968,5,289,0,0,1968,1971,5,407,
        0,0,1969,1970,5,258,0,0,1970,1972,5,427,0,0,1971,1969,1,0,0,0,1971,
        1972,1,0,0,0,1972,1973,1,0,0,0,1973,1974,3,1378,689,0,1974,1975,
        3,94,47,0,1975,2005,1,0,0,0,1976,1977,5,176,0,0,1977,1978,5,289,
        0,0,1978,1979,5,407,0,0,1979,1980,5,68,0,0,1980,1981,5,106,0,0,1981,
        1982,5,382,0,0,1982,1986,3,1382,691,0,1983,1984,5,312,0,0,1984,1985,
        5,185,0,0,1985,1987,3,1412,706,0,1986,1983,1,0,0,0,1986,1987,1,0,
        0,0,1987,1988,1,0,0,0,1988,1989,5,364,0,0,1989,1990,5,382,0,0,1990,
        1992,3,1382,691,0,1991,1993,3,942,471,0,1992,1991,1,0,0,0,1992,1993,
        1,0,0,0,1993,2005,1,0,0,0,1994,1995,5,176,0,0,1995,1996,5,101,0,
        0,1996,1999,5,130,0,0,1997,1998,5,258,0,0,1998,2000,5,427,0,0,1999,
        1997,1,0,0,0,1999,2000,1,0,0,0,2000,2001,1,0,0,0,2001,2002,3,1072,
        536,0,2002,2003,3,94,47,0,2003,2005,1,0,0,0,2004,1892,1,0,0,0,2004,
        1903,1,0,0,0,2004,1920,1,0,0,0,2004,1931,1,0,0,0,2004,1948,1,0,0,
        0,2004,1957,1,0,0,0,2004,1966,1,0,0,0,2004,1976,1,0,0,0,2004,1994,
        1,0,0,0,2005,93,1,0,0,0,2006,2011,3,100,50,0,2007,2008,5,6,0,0,2008,
        2010,3,100,50,0,2009,2007,1,0,0,0,2010,2013,1,0,0,0,2011,2009,1,
        0,0,0,2011,2012,1,0,0,0,2012,95,1,0,0,0,2013,2011,1,0,0,0,2014,2015,
        5,473,0,0,2015,2016,5,316,0,0,2016,2017,3,1378,689,0,2017,2018,3,
        124,62,0,2018,2023,1,0,0,0,2019,2020,5,474,0,0,2020,2021,5,316,0,
        0,2021,2023,3,1378,689,0,2022,2014,1,0,0,0,2022,2019,1,0,0,0,2023,
        97,1,0,0,0,2024,2025,5,473,0,0,2025,2026,5,316,0,0,2026,2027,3,1378,
        689,0,2027,99,1,0,0,0,2028,2029,5,171,0,0,2029,2327,3,184,92,0,2030,
        2031,5,171,0,0,2031,2032,5,258,0,0,2032,2033,5,115,0,0,2033,2034,
        5,427,0,0,2034,2327,3,184,92,0,2035,2036,5,171,0,0,2036,2037,5,82,
        0,0,2037,2327,3,184,92,0,2038,2039,5,171,0,0,2039,2040,5,82,0,0,
        2040,2041,5,258,0,0,2041,2042,5,115,0,0,2042,2043,5,427,0,0,2043,
        2327,3,184,92,0,2044,2046,5,176,0,0,2045,2047,3,720,360,0,2046,2045,
        1,0,0,0,2046,2047,1,0,0,0,2047,2048,1,0,0,0,2048,2049,3,1414,707,
        0,2049,2050,3,102,51,0,2050,2327,1,0,0,0,2051,2053,5,176,0,0,2052,
        2054,3,720,360,0,2053,2052,1,0,0,0,2053,2054,1,0,0,0,2054,2055,1,
        0,0,0,2055,2056,3,1414,707,0,2056,2057,5,229,0,0,2057,2058,5,115,
        0,0,2058,2059,5,116,0,0,2059,2327,1,0,0,0,2060,2062,5,176,0,0,2061,
        2063,3,720,360,0,2062,2061,1,0,0,0,2062,2063,1,0,0,0,2063,2064,1,
        0,0,0,2064,2065,3,1414,707,0,2065,2066,5,364,0,0,2066,2067,5,115,
        0,0,2067,2068,5,116,0,0,2068,2327,1,0,0,0,2069,2071,5,176,0,0,2070,
        2072,3,720,360,0,2071,2070,1,0,0,0,2071,2072,1,0,0,0,2072,2073,1,
        0,0,0,2073,2074,3,1414,707,0,2074,2075,5,229,0,0,2075,2076,5,475,
        0,0,2076,2327,1,0,0,0,2077,2079,5,176,0,0,2078,2080,3,720,360,0,
        2079,2078,1,0,0,0,2079,2080,1,0,0,0,2080,2081,1,0,0,0,2081,2082,
        3,1414,707,0,2082,2083,5,229,0,0,2083,2084,5,475,0,0,2084,2085,5,
        258,0,0,2085,2086,5,427,0,0,2086,2327,1,0,0,0,2087,2089,5,176,0,
        0,2088,2090,3,720,360,0,2089,2088,1,0,0,0,2089,2090,1,0,0,0,2090,
        2091,1,0,0,0,2091,2092,3,1414,707,0,2092,2093,5,364,0,0,2093,2094,
        5,373,0,0,2094,2095,3,1406,703,0,2095,2327,1,0,0,0,2096,2098,5,176,
        0,0,2097,2099,3,720,360,0,2098,2097,1,0,0,0,2098,2099,1,0,0,0,2099,
        2100,1,0,0,0,2100,2101,3,1398,699,0,2101,2102,5,364,0,0,2102,2103,
        5,373,0,0,2103,2104,3,1406,703,0,2104,2327,1,0,0,0,2105,2107,5,176,
        0,0,2106,2108,3,720,360,0,2107,2106,1,0,0,0,2107,2108,1,0,0,0,2108,
        2109,1,0,0,0,2109,2110,3,1414,707,0,2110,2111,5,364,0,0,2111,2112,
        3,112,56,0,2112,2327,1,0,0,0,2113,2115,5,176,0,0,2114,2116,3,720,
        360,0,2115,2114,1,0,0,0,2115,2116,1,0,0,0,2116,2117,1,0,0,0,2117,
        2118,3,1414,707,0,2118,2119,5,344,0,0,2119,2120,3,112,56,0,2120,
        2327,1,0,0,0,2121,2123,5,176,0,0,2122,2124,3,720,360,0,2123,2122,
        1,0,0,0,2123,2124,1,0,0,0,2124,2125,1,0,0,0,2125,2126,3,1414,707,
        0,2126,2127,5,364,0,0,2127,2128,5,376,0,0,2128,2129,3,1414,707,0,
        2129,2327,1,0,0,0,2130,2132,5,176,0,0,2131,2133,3,720,360,0,2132,
        2131,1,0,0,0,2132,2133,1,0,0,0,2133,2134,1,0,0,0,2134,2135,3,1414,
        707,0,2135,2136,5,171,0,0,2136,2137,5,476,0,0,2137,2138,3,194,97,
        0,2138,2139,5,74,0,0,2139,2141,5,257,0,0,2140,2142,3,280,140,0,2141,
        2140,1,0,0,0,2141,2142,1,0,0,0,2142,2327,1,0,0,0,2143,2145,5,176,
        0,0,2144,2146,3,720,360,0,2145,2144,1,0,0,0,2145,2146,1,0,0,0,2146,
        2147,1,0,0,0,2147,2148,3,1414,707,0,2148,2149,3,120,60,0,2149,2327,
        1,0,0,0,2150,2152,5,176,0,0,2151,2153,3,720,360,0,2152,2151,1,0,
        0,0,2152,2153,1,0,0,0,2153,2154,1,0,0,0,2154,2155,3,1414,707,0,2155,
        2156,5,229,0,0,2156,2157,5,257,0,0,2157,2327,1,0,0,0,2158,2160,5,
        176,0,0,2159,2161,3,720,360,0,2160,2159,1,0,0,0,2160,2161,1,0,0,
        0,2161,2162,1,0,0,0,2162,2163,3,1414,707,0,2163,2164,5,229,0,0,2164,
        2165,5,257,0,0,2165,2166,5,258,0,0,2166,2167,5,427,0,0,2167,2327,
        1,0,0,0,2168,2170,5,229,0,0,2169,2171,3,720,360,0,2170,2169,1,0,
        0,0,2170,2171,1,0,0,0,2171,2172,1,0,0,0,2172,2173,5,258,0,0,2173,
        2174,5,427,0,0,2174,2176,3,1414,707,0,2175,2177,3,104,52,0,2176,
        2175,1,0,0,0,2176,2177,1,0,0,0,2177,2327,1,0,0,0,2178,2180,5,229,
        0,0,2179,2181,3,720,360,0,2180,2179,1,0,0,0,2180,2181,1,0,0,0,2181,
        2182,1,0,0,0,2182,2184,3,1414,707,0,2183,2185,3,104,52,0,2184,2183,
        1,0,0,0,2184,2185,1,0,0,0,2185,2327,1,0,0,0,2186,2188,5,176,0,0,
        2187,2189,3,720,360,0,2188,2187,1,0,0,0,2188,2189,1,0,0,0,2189,2190,
        1,0,0,0,2190,2192,3,1414,707,0,2191,2193,3,722,361,0,2192,2191,1,
        0,0,0,2192,2193,1,0,0,0,2193,2194,1,0,0,0,2194,2195,5,391,0,0,2195,
        2197,3,1116,558,0,2196,2198,3,106,53,0,2197,2196,1,0,0,0,2197,2198,
        1,0,0,0,2198,2200,1,0,0,0,2199,2201,3,108,54,0,2200,2199,1,0,0,0,
        2200,2201,1,0,0,0,2201,2327,1,0,0,0,2202,2204,5,176,0,0,2203,2205,
        3,720,360,0,2204,2203,1,0,0,0,2204,2205,1,0,0,0,2205,2206,1,0,0,
        0,2206,2207,3,1414,707,0,2207,2208,3,340,170,0,2208,2327,1,0,0,0,
        2209,2210,5,171,0,0,2210,2327,3,204,102,0,2211,2212,5,176,0,0,2212,
        2213,5,83,0,0,2213,2214,3,1382,691,0,2214,2215,3,436,218,0,2215,
        2327,1,0,0,0,2216,2217,5,403,0,0,2217,2218,5,83,0,0,2218,2327,3,
        1382,691,0,2219,2220,5,229,0,0,2220,2221,5,83,0,0,2221,2222,5,258,
        0,0,2222,2223,5,427,0,0,2223,2225,3,1382,691,0,2224,2226,3,104,52,
        0,2225,2224,1,0,0,0,2225,2226,1,0,0,0,2226,2327,1,0,0,0,2227,2228,
        5,229,0,0,2228,2229,5,83,0,0,2229,2231,3,1382,691,0,2230,2232,3,
        104,52,0,2231,2230,1,0,0,0,2231,2232,1,0,0,0,2232,2327,1,0,0,0,2233,
        2234,5,364,0,0,2234,2235,5,410,0,0,2235,2327,5,308,0,0,2236,2237,
        5,196,0,0,2237,2238,5,118,0,0,2238,2327,3,1382,691,0,2239,2240,5,
        364,0,0,2240,2241,5,410,0,0,2241,2327,5,196,0,0,2242,2243,5,364,
        0,0,2243,2327,5,477,0,0,2244,2245,5,364,0,0,2245,2327,5,398,0,0,
        2246,2247,5,231,0,0,2247,2248,5,388,0,0,2248,2327,3,1382,691,0,2249,
        2250,5,231,0,0,2250,2251,5,177,0,0,2251,2252,5,388,0,0,2252,2327,
        3,1382,691,0,2253,2254,5,231,0,0,2254,2255,5,343,0,0,2255,2256,5,
        388,0,0,2256,2327,3,1382,691,0,2257,2258,5,231,0,0,2258,2259,5,388,
        0,0,2259,2327,5,68,0,0,2260,2261,5,231,0,0,2261,2262,5,388,0,0,2262,
        2327,5,137,0,0,2263,2264,5,224,0,0,2264,2265,5,388,0,0,2265,2327,
        3,1382,691,0,2266,2267,5,224,0,0,2267,2268,5,388,0,0,2268,2327,5,
        68,0,0,2269,2270,5,224,0,0,2270,2271,5,388,0,0,2271,2327,5,137,0,
        0,2272,2273,5,231,0,0,2273,2274,5,352,0,0,2274,2327,3,1382,691,0,
        2275,2276,5,231,0,0,2276,2277,5,177,0,0,2277,2278,5,352,0,0,2278,
        2327,3,1382,691,0,2279,2280,5,231,0,0,2280,2281,5,343,0,0,2281,2282,
        5,352,0,0,2282,2327,3,1382,691,0,2283,2284,5,224,0,0,2284,2285,5,
        352,0,0,2285,2327,3,1382,691,0,2286,2287,5,266,0,0,2287,2327,3,1378,
        689,0,2288,2289,5,300,0,0,2289,2290,5,266,0,0,2290,2327,3,1378,689,
        0,2291,2292,5,306,0,0,2292,2327,3,520,260,0,2293,2294,5,115,0,0,
        2294,2327,5,306,0,0,2295,2296,5,313,0,0,2296,2297,5,132,0,0,2297,
        2327,3,1410,705,0,2298,2299,5,364,0,0,2299,2300,5,382,0,0,2300,2327,
        3,1382,691,0,2301,2302,5,364,0,0,2302,2327,3,112,56,0,2303,2304,
        5,344,0,0,2304,2327,3,112,56,0,2305,2306,5,343,0,0,2306,2307,5,257,
        0,0,2307,2327,3,110,55,0,2308,2309,5,231,0,0,2309,2310,5,445,0,0,
        2310,2311,5,280,0,0,2311,2327,5,358,0,0,2312,2313,5,224,0,0,2313,
        2314,5,445,0,0,2314,2315,5,280,0,0,2315,2327,5,358,0,0,2316,2317,
        5,247,0,0,2317,2318,5,445,0,0,2318,2319,5,280,0,0,2319,2327,5,358,
        0,0,2320,2321,5,300,0,0,2321,2322,5,247,0,0,2322,2323,5,445,0,0,
        2323,2324,5,280,0,0,2324,2327,5,358,0,0,2325,2327,3,340,170,0,2326,
        2028,1,0,0,0,2326,2030,1,0,0,0,2326,2035,1,0,0,0,2326,2038,1,0,0,
        0,2326,2044,1,0,0,0,2326,2051,1,0,0,0,2326,2060,1,0,0,0,2326,2069,
        1,0,0,0,2326,2077,1,0,0,0,2326,2087,1,0,0,0,2326,2096,1,0,0,0,2326,
        2105,1,0,0,0,2326,2113,1,0,0,0,2326,2121,1,0,0,0,2326,2130,1,0,0,
        0,2326,2143,1,0,0,0,2326,2150,1,0,0,0,2326,2158,1,0,0,0,2326,2168,
        1,0,0,0,2326,2178,1,0,0,0,2326,2186,1,0,0,0,2326,2202,1,0,0,0,2326,
        2209,1,0,0,0,2326,2211,1,0,0,0,2326,2216,1,0,0,0,2326,2219,1,0,0,
        0,2326,2227,1,0,0,0,2326,2233,1,0,0,0,2326,2236,1,0,0,0,2326,2239,
        1,0,0,0,2326,2242,1,0,0,0,2326,2244,1,0,0,0,2326,2246,1,0,0,0,2326,
        2249,1,0,0,0,2326,2253,1,0,0,0,2326,2257,1,0,0,0,2326,2260,1,0,0,
        0,2326,2263,1,0,0,0,2326,2266,1,0,0,0,2326,2269,1,0,0,0,2326,2272,
        1,0,0,0,2326,2275,1,0,0,0,2326,2279,1,0,0,0,2326,2283,1,0,0,0,2326,
        2286,1,0,0,0,2326,2288,1,0,0,0,2326,2291,1,0,0,0,2326,2293,1,0,0,
        0,2326,2295,1,0,0,0,2326,2298,1,0,0,0,2326,2301,1,0,0,0,2326,2303,
        1,0,0,0,2326,2305,1,0,0,0,2326,2308,1,0,0,0,2326,2312,1,0,0,0,2326,
        2316,1,0,0,0,2326,2320,1,0,0,0,2326,2325,1,0,0,0,2327,101,1,0,0,
        0,2328,2329,5,364,0,0,2329,2330,5,91,0,0,2330,2334,3,1162,581,0,
        2331,2332,5,229,0,0,2332,2334,5,91,0,0,2333,2328,1,0,0,0,2333,2331,
        1,0,0,0,2334,103,1,0,0,0,2335,2336,7,10,0,0,2336,105,1,0,0,0,2337,
        2338,5,81,0,0,2338,2339,3,520,260,0,2339,107,1,0,0,0,2340,2341,5,
        138,0,0,2341,2342,3,1162,581,0,2342,109,1,0,0,0,2343,2350,5,301,
        0,0,2344,2350,5,151,0,0,2345,2350,5,91,0,0,2346,2347,5,138,0,0,2347,
        2348,5,264,0,0,2348,2350,3,1382,691,0,2349,2343,1,0,0,0,2349,2344,
        1,0,0,0,2349,2345,1,0,0,0,2349,2346,1,0,0,0,2350,111,1,0,0,0,2351,
        2352,5,2,0,0,2352,2353,3,116,58,0,2353,2354,5,3,0,0,2354,113,1,0,
        0,0,2355,2356,5,143,0,0,2356,2357,3,112,56,0,2357,115,1,0,0,0,2358,
        2363,3,118,59,0,2359,2360,5,6,0,0,2360,2362,3,118,59,0,2361,2359,
        1,0,0,0,2362,2365,1,0,0,0,2363,2361,1,0,0,0,2363,2364,1,0,0,0,2364,
        117,1,0,0,0,2365,2363,1,0,0,0,2366,2375,3,1420,710,0,2367,2368,5,
        10,0,0,2368,2376,3,462,231,0,2369,2370,5,11,0,0,2370,2373,3,1420,
        710,0,2371,2372,5,10,0,0,2372,2374,3,462,231,0,2373,2371,1,0,0,0,
        2373,2374,1,0,0,0,2374,2376,1,0,0,0,2375,2367,1,0,0,0,2375,2369,
        1,0,0,0,2375,2376,1,0,0,0,2376,119,1,0,0,0,2377,2379,3,122,61,0,
        2378,2377,1,0,0,0,2379,2380,1,0,0,0,2380,2378,1,0,0,0,2380,2381,
        1,0,0,0,2381,121,1,0,0,0,2382,2387,5,345,0,0,2383,2385,3,12,6,0,
        2384,2383,1,0,0,0,2384,2385,1,0,0,0,2385,2386,1,0,0,0,2386,2388,
        3,288,144,0,2387,2384,1,0,0,0,2387,2388,1,0,0,0,2388,2396,1,0,0,
        0,2389,2393,5,364,0,0,2390,2394,3,284,142,0,2391,2392,5,476,0,0,
        2392,2394,3,194,97,0,2393,2390,1,0,0,0,2393,2391,1,0,0,0,2394,2396,
        1,0,0,0,2395,2382,1,0,0,0,2395,2389,1,0,0,0,2396,123,1,0,0,0,2397,
        2398,5,100,0,0,2398,2399,5,453,0,0,2399,2400,5,143,0,0,2400,2401,
        5,2,0,0,2401,2402,3,128,64,0,2402,2403,5,3,0,0,2403,2424,1,0,0,0,
        2404,2405,5,100,0,0,2405,2406,5,453,0,0,2406,2407,5,106,0,0,2407,
        2408,5,2,0,0,2408,2409,3,1280,640,0,2409,2410,5,3,0,0,2410,2424,
        1,0,0,0,2411,2412,5,100,0,0,2412,2413,5,453,0,0,2413,2414,5,102,
        0,0,2414,2415,5,2,0,0,2415,2416,3,1280,640,0,2416,2417,5,3,0,0,2417,
        2418,5,132,0,0,2418,2419,5,2,0,0,2419,2420,3,1280,640,0,2420,2421,
        5,3,0,0,2421,2424,1,0,0,0,2422,2424,5,91,0,0,2423,2397,1,0,0,0,2423,
        2404,1,0,0,0,2423,2411,1,0,0,0,2423,2422,1,0,0,0,2424,125,1,0,0,
        0,2425,2426,3,1418,709,0,2426,2427,3,1398,699,0,2427,127,1,0,0,0,
        2428,2433,3,126,63,0,2429,2430,5,6,0,0,2430,2432,3,126,63,0,2431,
        2429,1,0,0,0,2432,2435,1,0,0,0,2433,2431,1,0,0,0,2433,2434,1,0,0,
        0,2434,129,1,0,0,0,2435,2433,1,0,0,0,2436,2437,5,176,0,0,2437,2438,
        5,391,0,0,2438,2439,3,520,260,0,2439,2440,3,132,66,0,2440,131,1,
        0,0,0,2441,2446,3,134,67,0,2442,2443,5,6,0,0,2443,2445,3,134,67,
        0,2444,2442,1,0,0,0,2445,2448,1,0,0,0,2446,2444,1,0,0,0,2446,2447,
        1,0,0,0,2447,133,1,0,0,0,2448,2446,1,0,0,0,2449,2450,5,171,0,0,2450,
        2451,5,181,0,0,2451,2453,3,1100,550,0,2452,2454,3,104,52,0,2453,
        2452,1,0,0,0,2453,2454,1,0,0,0,2454,2480,1,0,0,0,2455,2456,5,229,
        0,0,2456,2459,5,181,0,0,2457,2458,5,258,0,0,2458,2460,5,427,0,0,
        2459,2457,1,0,0,0,2459,2460,1,0,0,0,2460,2461,1,0,0,0,2461,2463,
        3,1414,707,0,2462,2464,3,104,52,0,2463,2462,1,0,0,0,2463,2464,1,
        0,0,0,2464,2480,1,0,0,0,2465,2466,5,176,0,0,2466,2467,5,181,0,0,
        2467,2469,3,1414,707,0,2468,2470,3,722,361,0,2469,2468,1,0,0,0,2469,
        2470,1,0,0,0,2470,2471,1,0,0,0,2471,2472,5,391,0,0,2472,2474,3,1116,
        558,0,2473,2475,3,106,53,0,2474,2473,1,0,0,0,2474,2475,1,0,0,0,2475,
        2477,1,0,0,0,2476,2478,3,104,52,0,2477,2476,1,0,0,0,2477,2478,1,
        0,0,0,2478,2480,1,0,0,0,2479,2449,1,0,0,0,2479,2455,1,0,0,0,2479,
        2465,1,0,0,0,2480,135,1,0,0,0,2481,2484,5,195,0,0,2482,2485,3,958,
        479,0,2483,2485,5,68,0,0,2484,2482,1,0,0,0,2484,2483,1,0,0,0,2485,
        137,1,0,0,0,2486,2488,5,207,0,0,2487,2489,3,152,76,0,2488,2487,1,
        0,0,0,2488,2489,1,0,0,0,2489,2490,1,0,0,0,2490,2492,3,1378,689,0,
        2491,2493,3,210,105,0,2492,2491,1,0,0,0,2492,2493,1,0,0,0,2493,2494,
        1,0,0,0,2494,2496,3,140,70,0,2495,2497,3,142,71,0,2496,2495,1,0,
        0,0,2496,2497,1,0,0,0,2497,2498,1,0,0,0,2498,2500,3,144,72,0,2499,
        2501,3,154,77,0,2500,2499,1,0,0,0,2500,2501,1,0,0,0,2501,2503,1,
        0,0,0,2502,2504,3,12,6,0,2503,2502,1,0,0,0,2503,2504,1,0,0,0,2504,
        2505,1,0,0,0,2505,2507,3,146,73,0,2506,2508,3,1092,546,0,2507,2506,
        1,0,0,0,2507,2508,1,0,0,0,2508,2524,1,0,0,0,2509,2510,5,207,0,0,
        2510,2511,5,2,0,0,2511,2512,3,898,449,0,2512,2513,5,3,0,0,2513,2515,
        5,132,0,0,2514,2516,3,142,71,0,2515,2514,1,0,0,0,2515,2516,1,0,0,
        0,2516,2517,1,0,0,0,2517,2519,3,144,72,0,2518,2520,3,12,6,0,2519,
        2518,1,0,0,0,2519,2520,1,0,0,0,2520,2521,1,0,0,0,2521,2522,3,146,
        73,0,2522,2524,1,0,0,0,2523,2486,1,0,0,0,2523,2509,1,0,0,0,2524,
        139,1,0,0,0,2525,2526,7,11,0,0,2526,141,1,0,0,0,2527,2528,5,328,
        0,0,2528,143,1,0,0,0,2529,2533,3,1400,700,0,2530,2533,5,374,0,0,
        2531,2533,5,375,0,0,2532,2529,1,0,0,0,2532,2530,1,0,0,0,2532,2531,
        1,0,0,0,2533,145,1,0,0,0,2534,2540,3,148,74,0,2535,2536,5,2,0,0,
        2536,2537,3,158,79,0,2537,2538,5,3,0,0,2538,2540,1,0,0,0,2539,2534,
        1,0,0,0,2539,2535,1,0,0,0,2540,147,1,0,0,0,2541,2543,3,150,75,0,
        2542,2541,1,0,0,0,2543,2546,1,0,0,0,2544,2542,1,0,0,0,2544,2545,
        1,0,0,0,2545,149,1,0,0,0,2546,2544,1,0,0,0,2547,2587,5,145,0,0,2548,
        2587,5,150,0,0,2549,2551,5,221,0,0,2550,2552,3,830,415,0,2551,2550,
        1,0,0,0,2551,2552,1,0,0,0,2552,2553,1,0,0,0,2553,2587,3,1400,700,
        0,2554,2556,5,116,0,0,2555,2557,3,830,415,0,2556,2555,1,0,0,0,2556,
        2557,1,0,0,0,2557,2558,1,0,0,0,2558,2587,3,1400,700,0,2559,2587,
        5,209,0,0,2560,2587,5,254,0,0,2561,2563,5,329,0,0,2562,2564,3,830,
        415,0,2563,2562,1,0,0,0,2563,2564,1,0,0,0,2564,2565,1,0,0,0,2565,
        2587,3,1400,700,0,2566,2568,5,235,0,0,2567,2569,3,830,415,0,2568,
        2567,1,0,0,0,2568,2569,1,0,0,0,2569,2570,1,0,0,0,2570,2587,3,1400,
        700,0,2571,2572,5,247,0,0,2572,2573,5,329,0,0,2573,2587,3,212,106,
        0,2574,2575,5,247,0,0,2575,2576,5,329,0,0,2576,2587,5,9,0,0,2577,
        2578,5,247,0,0,2578,2579,5,115,0,0,2579,2580,5,116,0,0,2580,2587,
        3,212,106,0,2581,2582,5,247,0,0,2582,2583,5,116,0,0,2583,2587,3,
        212,106,0,2584,2585,5,232,0,0,2585,2587,3,1400,700,0,2586,2547,1,
        0,0,0,2586,2548,1,0,0,0,2586,2549,1,0,0,0,2586,2554,1,0,0,0,2586,
        2559,1,0,0,0,2586,2560,1,0,0,0,2586,2561,1,0,0,0,2586,2566,1,0,0,
        0,2586,2571,1,0,0,0,2586,2574,1,0,0,0,2586,2577,1,0,0,0,2586,2581,
        1,0,0,0,2586,2584,1,0,0,0,2587,151,1,0,0,0,2588,2589,5,145,0,0,2589,
        153,1,0,0,0,2590,2592,3,156,78,0,2591,2590,1,0,0,0,2591,2592,1,0,
        0,0,2592,2593,1,0,0,0,2593,2594,5,222,0,0,2594,2595,3,1400,700,0,
        2595,155,1,0,0,0,2596,2597,5,138,0,0,2597,157,1,0,0,0,2598,2603,
        3,160,80,0,2599,2600,5,6,0,0,2600,2602,3,160,80,0,2601,2599,1,0,
        0,0,2602,2605,1,0,0,0,2603,2601,1,0,0,0,2603,2604,1,0,0,0,2604,159,
        1,0,0,0,2605,2603,1,0,0,0,2606,2608,3,1420,710,0,2607,2609,3,162,
        81,0,2608,2607,1,0,0,0,2608,2609,1,0,0,0,2609,161,1,0,0,0,2610,2618,
        3,62,31,0,2611,2618,3,288,144,0,2612,2618,5,9,0,0,2613,2614,5,2,
        0,0,2614,2615,3,164,82,0,2615,2616,5,3,0,0,2616,2618,1,0,0,0,2617,
        2610,1,0,0,0,2617,2611,1,0,0,0,2617,2612,1,0,0,0,2617,2613,1,0,0,
        0,2618,163,1,0,0,0,2619,2624,3,166,83,0,2620,2621,5,6,0,0,2621,2623,
        3,166,83,0,2622,2620,1,0,0,0,2623,2626,1,0,0,0,2624,2622,1,0,0,0,
        2624,2625,1,0,0,0,2625,165,1,0,0,0,2626,2624,1,0,0,0,2627,2628,3,
        62,31,0,2628,167,1,0,0,0,2629,2631,5,84,0,0,2630,2632,3,170,85,0,
        2631,2630,1,0,0,0,2631,2632,1,0,0,0,2632,2633,1,0,0,0,2633,2637,
        5,130,0,0,2634,2635,5,258,0,0,2635,2636,5,115,0,0,2636,2638,5,427,
        0,0,2637,2634,1,0,0,0,2637,2638,1,0,0,0,2638,2639,1,0,0,0,2639,2705,
        3,1378,689,0,2640,2642,5,2,0,0,2641,2643,3,172,86,0,2642,2641,1,
        0,0,0,2642,2643,1,0,0,0,2643,2644,1,0,0,0,2644,2646,5,3,0,0,2645,
        2647,3,234,117,0,2646,2645,1,0,0,0,2646,2647,1,0,0,0,2647,2649,1,
        0,0,0,2648,2650,3,236,118,0,2649,2648,1,0,0,0,2649,2650,1,0,0,0,
        2650,2652,1,0,0,0,2651,2653,3,244,122,0,2652,2651,1,0,0,0,2652,2653,
        1,0,0,0,2653,2655,1,0,0,0,2654,2656,3,246,123,0,2655,2654,1,0,0,
        0,2655,2656,1,0,0,0,2656,2658,1,0,0,0,2657,2659,3,248,124,0,2658,
        2657,1,0,0,0,2658,2659,1,0,0,0,2659,2661,1,0,0,0,2660,2662,3,250,
        125,0,2661,2660,1,0,0,0,2661,2662,1,0,0,0,2662,2706,1,0,0,0,2663,
        2664,5,306,0,0,2664,2666,3,520,260,0,2665,2667,3,174,87,0,2666,2665,
        1,0,0,0,2666,2667,1,0,0,0,2667,2669,1,0,0,0,2668,2670,3,236,118,
        0,2669,2668,1,0,0,0,2669,2670,1,0,0,0,2670,2672,1,0,0,0,2671,2673,
        3,244,122,0,2672,2671,1,0,0,0,2672,2673,1,0,0,0,2673,2675,1,0,0,
        0,2674,2676,3,246,123,0,2675,2674,1,0,0,0,2675,2676,1,0,0,0,2676,
        2678,1,0,0,0,2677,2679,3,248,124,0,2678,2677,1,0,0,0,2678,2679,1,
        0,0,0,2679,2681,1,0,0,0,2680,2682,3,250,125,0,2681,2680,1,0,0,0,
        2681,2682,1,0,0,0,2682,2706,1,0,0,0,2683,2684,5,316,0,0,2684,2685,
        5,306,0,0,2685,2687,3,1378,689,0,2686,2688,3,174,87,0,2687,2686,
        1,0,0,0,2687,2688,1,0,0,0,2688,2689,1,0,0,0,2689,2691,3,124,62,0,
        2690,2692,3,236,118,0,2691,2690,1,0,0,0,2691,2692,1,0,0,0,2692,2694,
        1,0,0,0,2693,2695,3,244,122,0,2694,2693,1,0,0,0,2694,2695,1,0,0,
        0,2695,2697,1,0,0,0,2696,2698,3,246,123,0,2697,2696,1,0,0,0,2697,
        2698,1,0,0,0,2698,2700,1,0,0,0,2699,2701,3,248,124,0,2700,2699,1,
        0,0,0,2700,2701,1,0,0,0,2701,2703,1,0,0,0,2702,2704,3,250,125,0,
        2703,2702,1,0,0,0,2703,2704,1,0,0,0,2704,2706,1,0,0,0,2705,2640,
        1,0,0,0,2705,2663,1,0,0,0,2705,2683,1,0,0,0,2706,169,1,0,0,0,2707,
        2715,5,385,0,0,2708,2715,5,383,0,0,2709,2710,5,283,0,0,2710,2715,
        7,12,0,0,2711,2712,5,251,0,0,2712,2715,7,12,0,0,2713,2715,5,398,
        0,0,2714,2707,1,0,0,0,2714,2708,1,0,0,0,2714,2709,1,0,0,0,2714,2711,
        1,0,0,0,2714,2713,1,0,0,0,2715,171,1,0,0,0,2716,2717,3,176,88,0,
        2717,173,1,0,0,0,2718,2719,5,2,0,0,2719,2720,3,178,89,0,2720,2721,
        5,3,0,0,2721,175,1,0,0,0,2722,2727,3,180,90,0,2723,2724,5,6,0,0,
        2724,2726,3,180,90,0,2725,2723,1,0,0,0,2726,2729,1,0,0,0,2727,2725,
        1,0,0,0,2727,2728,1,0,0,0,2728,177,1,0,0,0,2729,2727,1,0,0,0,2730,
        2735,3,182,91,0,2731,2732,5,6,0,0,2732,2734,3,182,91,0,2733,2731,
        1,0,0,0,2734,2737,1,0,0,0,2735,2733,1,0,0,0,2735,2736,1,0,0,0,2736,
        179,1,0,0,0,2737,2735,1,0,0,0,2738,2742,3,204,102,0,2739,2742,3,
        198,99,0,2740,2742,3,184,92,0,2741,2738,1,0,0,0,2741,2739,1,0,0,
        0,2741,2740,1,0,0,0,2742,181,1,0,0,0,2743,2746,3,186,93,0,2744,2746,
        3,204,102,0,2745,2743,1,0,0,0,2745,2744,1,0,0,0,2746,183,1,0,0,0,
        2747,2748,3,1414,707,0,2748,2750,3,1116,558,0,2749,2751,3,336,168,
        0,2750,2749,1,0,0,0,2750,2751,1,0,0,0,2751,2752,1,0,0,0,2752,2753,
        3,188,94,0,2753,185,1,0,0,0,2754,2757,3,1414,707,0,2755,2756,5,143,
        0,0,2756,2758,5,311,0,0,2757,2755,1,0,0,0,2757,2758,1,0,0,0,2758,
        2759,1,0,0,0,2759,2760,3,188,94,0,2760,187,1,0,0,0,2761,2763,3,190,
        95,0,2762,2761,1,0,0,0,2763,2766,1,0,0,0,2764,2762,1,0,0,0,2764,
        2765,1,0,0,0,2765,189,1,0,0,0,2766,2764,1,0,0,0,2767,2768,5,83,0,
        0,2768,2769,3,1382,691,0,2769,2770,3,192,96,0,2770,2776,1,0,0,0,
        2771,2776,3,192,96,0,2772,2776,3,196,98,0,2773,2774,5,81,0,0,2774,
        2776,3,520,260,0,2775,2767,1,0,0,0,2775,2771,1,0,0,0,2775,2772,1,
        0,0,0,2775,2773,1,0,0,0,2776,191,1,0,0,0,2777,2778,5,115,0,0,2778,
        2830,5,116,0,0,2779,2830,5,116,0,0,2780,2782,5,136,0,0,2781,2783,
        3,662,331,0,2782,2781,1,0,0,0,2782,2783,1,0,0,0,2783,2785,1,0,0,
        0,2784,2786,3,252,126,0,2785,2784,1,0,0,0,2785,2786,1,0,0,0,2786,
        2830,1,0,0,0,2787,2788,5,123,0,0,2788,2790,5,274,0,0,2789,2791,3,
        662,331,0,2790,2789,1,0,0,0,2790,2791,1,0,0,0,2791,2793,1,0,0,0,
        2792,2794,3,252,126,0,2793,2792,1,0,0,0,2793,2794,1,0,0,0,2794,2830,
        1,0,0,0,2795,2796,5,80,0,0,2796,2797,5,2,0,0,2797,2798,3,1162,581,
        0,2798,2800,5,3,0,0,2799,2801,3,208,104,0,2800,2799,1,0,0,0,2800,
        2801,1,0,0,0,2801,2830,1,0,0,0,2802,2803,5,91,0,0,2803,2830,3,1204,
        602,0,2804,2805,5,476,0,0,2805,2806,3,194,97,0,2806,2816,5,74,0,
        0,2807,2809,5,257,0,0,2808,2810,3,280,140,0,2809,2808,1,0,0,0,2809,
        2810,1,0,0,0,2810,2817,1,0,0,0,2811,2812,5,2,0,0,2812,2813,3,1162,
        581,0,2813,2814,5,3,0,0,2814,2815,5,478,0,0,2815,2817,1,0,0,0,2816,
        2807,1,0,0,0,2816,2811,1,0,0,0,2817,2830,1,0,0,0,2818,2819,5,124,
        0,0,2819,2821,3,1378,689,0,2820,2822,3,210,105,0,2821,2820,1,0,0,
        0,2821,2822,1,0,0,0,2822,2824,1,0,0,0,2823,2825,3,218,109,0,2824,
        2823,1,0,0,0,2824,2825,1,0,0,0,2825,2827,1,0,0,0,2826,2828,3,226,
        113,0,2827,2826,1,0,0,0,2827,2828,1,0,0,0,2828,2830,1,0,0,0,2829,
        2777,1,0,0,0,2829,2779,1,0,0,0,2829,2780,1,0,0,0,2829,2787,1,0,0,
        0,2829,2795,1,0,0,0,2829,2802,1,0,0,0,2829,2804,1,0,0,0,2829,2818,
        1,0,0,0,2830,193,1,0,0,0,2831,2835,5,177,0,0,2832,2833,5,185,0,0,
        2833,2835,5,91,0,0,2834,2831,1,0,0,0,2834,2832,1,0,0,0,2835,195,
        1,0,0,0,2836,2842,5,92,0,0,2837,2838,5,115,0,0,2838,2842,5,92,0,
        0,2839,2840,5,107,0,0,2840,2842,7,8,0,0,2841,2836,1,0,0,0,2841,2837,
        1,0,0,0,2841,2839,1,0,0,0,2842,197,1,0,0,0,2843,2844,5,158,0,0,2844,
        2845,3,1378,689,0,2845,2846,3,200,100,0,2846,199,1,0,0,0,2847,2848,
        7,13,0,0,2848,2850,3,202,101,0,2849,2847,1,0,0,0,2850,2853,1,0,0,
        0,2851,2849,1,0,0,0,2851,2852,1,0,0,0,2852,201,1,0,0,0,2853,2851,
        1,0,0,0,2854,2855,7,14,0,0,2855,203,1,0,0,0,2856,2857,5,83,0,0,2857,
        2858,3,1382,691,0,2858,2859,3,206,103,0,2859,2862,1,0,0,0,2860,2862,
        3,206,103,0,2861,2856,1,0,0,0,2861,2860,1,0,0,0,2862,205,1,0,0,0,
        2863,2864,5,80,0,0,2864,2865,5,2,0,0,2865,2866,3,1162,581,0,2866,
        2867,5,3,0,0,2867,2868,3,436,218,0,2868,2950,1,0,0,0,2869,2887,5,
        136,0,0,2870,2871,5,2,0,0,2871,2872,3,212,106,0,2872,2874,5,3,0,
        0,2873,2875,3,216,108,0,2874,2873,1,0,0,0,2874,2875,1,0,0,0,2875,
        2877,1,0,0,0,2876,2878,3,662,331,0,2877,2876,1,0,0,0,2877,2878,1,
        0,0,0,2878,2880,1,0,0,0,2879,2881,3,252,126,0,2880,2879,1,0,0,0,
        2880,2881,1,0,0,0,2881,2882,1,0,0,0,2882,2883,3,436,218,0,2883,2888,
        1,0,0,0,2884,2885,3,254,127,0,2885,2886,3,436,218,0,2886,2888,1,
        0,0,0,2887,2870,1,0,0,0,2887,2884,1,0,0,0,2888,2950,1,0,0,0,2889,
        2890,5,123,0,0,2890,2908,5,274,0,0,2891,2892,5,2,0,0,2892,2893,3,
        212,106,0,2893,2895,5,3,0,0,2894,2896,3,216,108,0,2895,2894,1,0,
        0,0,2895,2896,1,0,0,0,2896,2898,1,0,0,0,2897,2899,3,662,331,0,2898,
        2897,1,0,0,0,2898,2899,1,0,0,0,2899,2901,1,0,0,0,2900,2902,3,252,
        126,0,2901,2900,1,0,0,0,2901,2902,1,0,0,0,2902,2903,1,0,0,0,2903,
        2904,3,436,218,0,2904,2909,1,0,0,0,2905,2906,3,254,127,0,2906,2907,
        3,436,218,0,2907,2909,1,0,0,0,2908,2891,1,0,0,0,2908,2905,1,0,0,
        0,2909,2950,1,0,0,0,2910,2912,5,237,0,0,2911,2913,3,594,297,0,2912,
        2911,1,0,0,0,2912,2913,1,0,0,0,2913,2914,1,0,0,0,2914,2915,5,2,0,
        0,2915,2916,3,220,110,0,2916,2918,5,3,0,0,2917,2919,3,216,108,0,
        2918,2917,1,0,0,0,2918,2919,1,0,0,0,2919,2921,1,0,0,0,2920,2922,
        3,662,331,0,2921,2920,1,0,0,0,2921,2922,1,0,0,0,2922,2924,1,0,0,
        0,2923,2925,3,252,126,0,2924,2923,1,0,0,0,2924,2925,1,0,0,0,2925,
        2927,1,0,0,0,2926,2928,3,224,112,0,2927,2926,1,0,0,0,2927,2928,1,
        0,0,0,2928,2929,1,0,0,0,2929,2930,3,436,218,0,2930,2950,1,0,0,0,
        2931,2932,5,101,0,0,2932,2933,5,274,0,0,2933,2934,5,2,0,0,2934,2935,
        3,212,106,0,2935,2936,5,3,0,0,2936,2937,5,124,0,0,2937,2939,3,1378,
        689,0,2938,2940,3,210,105,0,2939,2938,1,0,0,0,2939,2940,1,0,0,0,
        2940,2942,1,0,0,0,2941,2943,3,218,109,0,2942,2941,1,0,0,0,2942,2943,
        1,0,0,0,2943,2945,1,0,0,0,2944,2946,3,226,113,0,2945,2944,1,0,0,
        0,2945,2946,1,0,0,0,2946,2947,1,0,0,0,2947,2948,3,436,218,0,2948,
        2950,1,0,0,0,2949,2863,1,0,0,0,2949,2869,1,0,0,0,2949,2889,1,0,0,
        0,2949,2910,1,0,0,0,2949,2931,1,0,0,0,2950,207,1,0,0,0,2951,2952,
        5,300,0,0,2952,2953,5,266,0,0,2953,209,1,0,0,0,2954,2955,5,2,0,0,
        2955,2956,3,212,106,0,2956,2957,5,3,0,0,2957,211,1,0,0,0,2958,2963,
        3,214,107,0,2959,2960,5,6,0,0,2960,2962,3,214,107,0,2961,2959,1,
        0,0,0,2962,2965,1,0,0,0,2963,2961,1,0,0,0,2963,2964,1,0,0,0,2964,
        213,1,0,0,0,2965,2963,1,0,0,0,2966,2967,3,1414,707,0,2967,215,1,
        0,0,0,2968,2969,5,479,0,0,2969,2970,5,2,0,0,2970,2971,3,212,106,
        0,2971,2972,5,3,0,0,2972,217,1,0,0,0,2973,2974,5,287,0,0,2974,2975,
        7,15,0,0,2975,219,1,0,0,0,2976,2981,3,222,111,0,2977,2978,5,6,0,
        0,2978,2980,3,222,111,0,2979,2977,1,0,0,0,2980,2983,1,0,0,0,2981,
        2979,1,0,0,0,2981,2982,1,0,0,0,2982,221,1,0,0,0,2983,2981,1,0,0,
        0,2984,2985,3,600,300,0,2985,2992,5,143,0,0,2986,2993,3,682,341,
        0,2987,2988,5,309,0,0,2988,2989,5,2,0,0,2989,2990,3,682,341,0,2990,
        2991,5,3,0,0,2991,2993,1,0,0,0,2992,2986,1,0,0,0,2992,2987,1,0,0,
        0,2993,223,1,0,0,0,2994,2995,5,141,0,0,2995,2996,5,2,0,0,2996,2997,
        3,1162,581,0,2997,2998,5,3,0,0,2998,225,1,0,0,0,2999,3008,3,228,
        114,0,3000,3008,3,230,115,0,3001,3002,3,228,114,0,3002,3003,3,230,
        115,0,3003,3008,1,0,0,0,3004,3005,3,230,115,0,3005,3006,3,228,114,
        0,3006,3008,1,0,0,0,3007,2999,1,0,0,0,3007,3000,1,0,0,0,3007,3001,
        1,0,0,0,3007,3004,1,0,0,0,3008,227,1,0,0,0,3009,3010,5,118,0,0,3010,
        3011,5,400,0,0,3011,3012,3,232,116,0,3012,229,1,0,0,0,3013,3014,
        5,118,0,0,3014,3015,5,220,0,0,3015,3016,3,232,116,0,3016,231,1,0,
        0,0,3017,3018,5,300,0,0,3018,3024,5,170,0,0,3019,3024,5,346,0,0,
        3020,3024,5,188,0,0,3021,3022,5,364,0,0,3022,3024,7,16,0,0,3023,
        3017,1,0,0,0,3023,3019,1,0,0,0,3023,3020,1,0,0,0,3023,3021,1,0,0,
        0,3024,233,1,0,0,0,3025,3026,5,267,0,0,3026,3027,5,2,0,0,3027,3028,
        3,1376,688,0,3028,3029,5,3,0,0,3029,235,1,0,0,0,3030,3031,3,238,
        119,0,3031,237,1,0,0,0,3032,3033,5,316,0,0,3033,3034,5,185,0,0,3034,
        3035,3,1414,707,0,3035,3036,5,2,0,0,3036,3037,3,240,120,0,3037,3038,
        5,3,0,0,3038,239,1,0,0,0,3039,3044,3,242,121,0,3040,3041,5,6,0,0,
        3041,3043,3,242,121,0,3042,3040,1,0,0,0,3043,3046,1,0,0,0,3044,3042,
        1,0,0,0,3044,3045,1,0,0,0,3045,241,1,0,0,0,3046,3044,1,0,0,0,3047,
        3049,3,1414,707,0,3048,3050,3,606,303,0,3049,3048,1,0,0,0,3049,3050,
        1,0,0,0,3050,3052,1,0,0,0,3051,3053,3,608,304,0,3052,3051,1,0,0,
        0,3052,3053,1,0,0,0,3053,3071,1,0,0,0,3054,3056,3,1214,607,0,3055,
        3057,3,606,303,0,3056,3055,1,0,0,0,3056,3057,1,0,0,0,3057,3059,1,
        0,0,0,3058,3060,3,608,304,0,3059,3058,1,0,0,0,3059,3060,1,0,0,0,
        3060,3071,1,0,0,0,3061,3062,5,2,0,0,3062,3063,3,1162,581,0,3063,
        3065,5,3,0,0,3064,3066,3,606,303,0,3065,3064,1,0,0,0,3065,3066,1,
        0,0,0,3066,3068,1,0,0,0,3067,3069,3,608,304,0,3068,3067,1,0,0,0,
        3068,3069,1,0,0,0,3069,3071,1,0,0,0,3070,3047,1,0,0,0,3070,3054,
        1,0,0,0,3070,3061,1,0,0,0,3071,243,1,0,0,0,3072,3073,5,138,0,0,3073,
        3074,3,1382,691,0,3074,245,1,0,0,0,3075,3076,5,143,0,0,3076,3080,
        3,112,56,0,3077,3078,5,410,0,0,3078,3080,5,308,0,0,3079,3075,1,0,
        0,0,3079,3077,1,0,0,0,3080,247,1,0,0,0,3081,3082,5,118,0,0,3082,
        3088,5,199,0,0,3083,3089,5,229,0,0,3084,3085,5,220,0,0,3085,3089,
        5,351,0,0,3086,3087,5,323,0,0,3087,3089,5,351,0,0,3088,3083,1,0,
        0,0,3088,3084,1,0,0,0,3088,3086,1,0,0,0,3089,249,1,0,0,0,3090,3091,
        5,382,0,0,3091,3092,3,1382,691,0,3092,251,1,0,0,0,3093,3094,5,138,
        0,0,3094,3095,5,264,0,0,3095,3096,5,382,0,0,3096,3097,3,1382,691,
        0,3097,253,1,0,0,0,3098,3099,5,138,0,0,3099,3100,5,264,0,0,3100,
        3101,3,1382,691,0,3101,255,1,0,0,0,3102,3103,5,84,0,0,3103,3107,
        5,373,0,0,3104,3105,5,258,0,0,3105,3106,5,115,0,0,3106,3108,5,427,
        0,0,3107,3104,1,0,0,0,3107,3108,1,0,0,0,3108,3109,1,0,0,0,3109,3111,
        3,520,260,0,3110,3112,3,874,437,0,3111,3110,1,0,0,0,3111,3112,1,
        0,0,0,3112,3113,1,0,0,0,3113,3114,5,118,0,0,3114,3115,3,1280,640,
        0,3115,3116,5,102,0,0,3116,3117,3,1060,530,0,3117,257,1,0,0,0,3118,
        3119,5,176,0,0,3119,3122,5,373,0,0,3120,3121,5,258,0,0,3121,3123,
        5,427,0,0,3122,3120,1,0,0,0,3122,3123,1,0,0,0,3123,3124,1,0,0,0,
        3124,3125,3,520,260,0,3125,3126,5,364,0,0,3126,3127,5,373,0,0,3127,
        3128,3,1406,703,0,3128,259,1,0,0,0,3129,3131,5,84,0,0,3130,3132,
        3,170,85,0,3131,3130,1,0,0,0,3131,3132,1,0,0,0,3132,3133,1,0,0,0,
        3133,3137,5,130,0,0,3134,3135,5,258,0,0,3135,3136,5,115,0,0,3136,
        3138,5,427,0,0,3137,3134,1,0,0,0,3137,3138,1,0,0,0,3138,3139,1,0,
        0,0,3139,3140,3,262,131,0,3140,3141,5,74,0,0,3141,3143,3,964,482,
        0,3142,3144,3,264,132,0,3143,3142,1,0,0,0,3143,3144,1,0,0,0,3144,
        261,1,0,0,0,3145,3147,3,1378,689,0,3146,3148,3,210,105,0,3147,3146,
        1,0,0,0,3147,3148,1,0,0,0,3148,3150,1,0,0,0,3149,3151,3,244,122,
        0,3150,3149,1,0,0,0,3150,3151,1,0,0,0,3151,3153,1,0,0,0,3152,3154,
        3,246,123,0,3153,3152,1,0,0,0,3153,3154,1,0,0,0,3154,3156,1,0,0,
        0,3155,3157,3,248,124,0,3156,3155,1,0,0,0,3156,3157,1,0,0,0,3157,
        3159,1,0,0,0,3158,3160,3,250,125,0,3159,3158,1,0,0,0,3159,3160,1,
        0,0,0,3160,263,1,0,0,0,3161,3165,5,143,0,0,3162,3166,5,212,0,0,3163,
        3164,5,300,0,0,3164,3166,5,212,0,0,3165,3162,1,0,0,0,3165,3163,1,
        0,0,0,3166,265,1,0,0,0,3167,3169,5,84,0,0,3168,3170,3,270,135,0,
        3169,3168,1,0,0,0,3169,3170,1,0,0,0,3170,3171,1,0,0,0,3171,3172,
        5,289,0,0,3172,3176,5,407,0,0,3173,3174,5,258,0,0,3174,3175,5,115,
        0,0,3175,3177,5,427,0,0,3176,3173,1,0,0,0,3176,3177,1,0,0,0,3177,
        3178,1,0,0,0,3178,3179,3,268,134,0,3179,3180,5,74,0,0,3180,3182,
        3,964,482,0,3181,3183,3,264,132,0,3182,3181,1,0,0,0,3182,3183,1,
        0,0,0,3183,267,1,0,0,0,3184,3186,3,1378,689,0,3185,3187,3,210,105,
        0,3186,3185,1,0,0,0,3186,3187,1,0,0,0,3187,3189,1,0,0,0,3188,3190,
        3,244,122,0,3189,3188,1,0,0,0,3189,3190,1,0,0,0,3190,3192,1,0,0,
        0,3191,3193,3,114,57,0,3192,3191,1,0,0,0,3192,3193,1,0,0,0,3193,
        3195,1,0,0,0,3194,3196,3,250,125,0,3195,3194,1,0,0,0,3195,3196,1,
        0,0,0,3196,269,1,0,0,0,3197,3198,5,398,0,0,3198,271,1,0,0,0,3199,
        3200,5,336,0,0,3200,3201,5,289,0,0,3201,3203,5,407,0,0,3202,3204,
        3,590,295,0,3203,3202,1,0,0,0,3203,3204,1,0,0,0,3204,3205,1,0,0,
        0,3205,3207,3,1378,689,0,3206,3208,3,264,132,0,3207,3206,1,0,0,0,
        3207,3208,1,0,0,0,3208,273,1,0,0,0,3209,3211,5,84,0,0,3210,3212,
        3,170,85,0,3211,3210,1,0,0,0,3211,3212,1,0,0,0,3212,3213,1,0,0,0,
        3213,3217,5,359,0,0,3214,3215,5,258,0,0,3215,3216,5,115,0,0,3216,
        3218,5,427,0,0,3217,3214,1,0,0,0,3217,3218,1,0,0,0,3218,3219,1,0,
        0,0,3219,3221,3,1378,689,0,3220,3222,3,278,139,0,3221,3220,1,0,0,
        0,3221,3222,1,0,0,0,3222,275,1,0,0,0,3223,3224,5,176,0,0,3224,3227,
        5,359,0,0,3225,3226,5,258,0,0,3226,3228,5,427,0,0,3227,3225,1,0,
        0,0,3227,3228,1,0,0,0,3228,3229,1,0,0,0,3229,3230,3,1378,689,0,3230,
        3231,3,282,141,0,3231,277,1,0,0,0,3232,3233,3,282,141,0,3233,279,
        1,0,0,0,3234,3235,5,2,0,0,3235,3236,3,282,141,0,3236,3237,5,3,0,
        0,3237,281,1,0,0,0,3238,3240,3,284,142,0,3239,3238,1,0,0,0,3240,
        3241,1,0,0,0,3241,3239,1,0,0,0,3241,3242,1,0,0,0,3242,283,1,0,0,
        0,3243,3244,5,74,0,0,3244,3278,3,1120,560,0,3245,3246,5,186,0,0,
        3246,3278,3,288,144,0,3247,3278,5,211,0,0,3248,3250,5,263,0,0,3249,
        3251,3,286,143,0,3250,3249,1,0,0,0,3250,3251,1,0,0,0,3251,3252,1,
        0,0,0,3252,3278,3,288,144,0,3253,3254,5,290,0,0,3254,3278,3,288,
        144,0,3255,3256,5,293,0,0,3256,3278,3,288,144,0,3257,3258,5,300,
        0,0,3258,3278,7,17,0,0,3259,3260,5,312,0,0,3260,3261,5,185,0,0,3261,
        3278,3,520,260,0,3262,3263,5,359,0,0,3263,3264,5,297,0,0,3264,3278,
        3,520,260,0,3265,3267,5,371,0,0,3266,3268,3,12,6,0,3267,3266,1,0,
        0,0,3267,3268,1,0,0,0,3268,3269,1,0,0,0,3269,3278,3,288,144,0,3270,
        3272,5,345,0,0,3271,3273,3,12,6,0,3272,3271,1,0,0,0,3272,3273,1,
        0,0,0,3273,3275,1,0,0,0,3274,3276,3,288,144,0,3275,3274,1,0,0,0,
        3275,3276,1,0,0,0,3276,3278,1,0,0,0,3277,3243,1,0,0,0,3277,3245,
        1,0,0,0,3277,3247,1,0,0,0,3277,3248,1,0,0,0,3277,3253,1,0,0,0,3277,
        3255,1,0,0,0,3277,3257,1,0,0,0,3277,3259,1,0,0,0,3277,3262,1,0,0,
        0,3277,3265,1,0,0,0,3277,3270,1,0,0,0,3278,285,1,0,0,0,3279,3280,
        5,185,0,0,3280,287,1,0,0,0,3281,3288,3,1396,698,0,3282,3283,5,12,
        0,0,3283,3288,3,1396,698,0,3284,3285,5,13,0,0,3285,3288,3,1396,698,
        0,3286,3288,3,1406,703,0,3287,3281,1,0,0,0,3287,3282,1,0,0,0,3287,
        3284,1,0,0,0,3287,3286,1,0,0,0,3288,289,1,0,0,0,3289,3294,3,288,
        144,0,3290,3291,5,6,0,0,3291,3293,3,288,144,0,3292,3290,1,0,0,0,
        3293,3296,1,0,0,0,3294,3292,1,0,0,0,3294,3295,1,0,0,0,3295,291,1,
        0,0,0,3296,3294,1,0,0,0,3297,3299,5,84,0,0,3298,3300,3,616,308,0,
        3299,3298,1,0,0,0,3299,3300,1,0,0,0,3300,3302,1,0,0,0,3301,3303,
        3,294,147,0,3302,3301,1,0,0,0,3302,3303,1,0,0,0,3303,3305,1,0,0,
        0,3304,3306,3,304,152,0,3305,3304,1,0,0,0,3305,3306,1,0,0,0,3306,
        3307,1,0,0,0,3307,3308,5,276,0,0,3308,3317,3,1382,691,0,3309,3310,
        5,253,0,0,3310,3312,3,296,148,0,3311,3313,3,298,149,0,3312,3311,
        1,0,0,0,3312,3313,1,0,0,0,3313,3315,1,0,0,0,3314,3316,3,302,151,
        0,3315,3314,1,0,0,0,3315,3316,1,0,0,0,3316,3318,1,0,0,0,3317,3309,
        1,0,0,0,3317,3318,1,0,0,0,3318,293,1,0,0,0,3319,3320,5,390,0,0,3320,
        295,1,0,0,0,3321,3323,3,1382,691,0,3322,3324,3,522,261,0,3323,3322,
        1,0,0,0,3323,3324,1,0,0,0,3324,297,1,0,0,0,3325,3326,5,268,0,0,3326,
        3327,3,296,148,0,3327,299,1,0,0,0,3328,3329,5,404,0,0,3329,3333,
        3,296,148,0,3330,3331,5,300,0,0,3331,3333,5,404,0,0,3332,3328,1,
        0,0,0,3332,3330,1,0,0,0,3333,301,1,0,0,0,3334,3335,3,300,150,0,3335,
        303,1,0,0,0,3336,3337,5,326,0,0,3337,305,1,0,0,0,3338,3339,5,84,
        0,0,3339,3340,5,382,0,0,3340,3342,3,1382,691,0,3341,3343,3,308,154,
        0,3342,3341,1,0,0,0,3342,3343,1,0,0,0,3343,3344,1,0,0,0,3344,3345,
        5,284,0,0,3345,3347,3,1400,700,0,3346,3348,3,114,57,0,3347,3346,
        1,0,0,0,3347,3348,1,0,0,0,3348,307,1,0,0,0,3349,3350,5,313,0,0,3350,
        3351,3,1410,705,0,3351,309,1,0,0,0,3352,3353,5,229,0,0,3353,3356,
        5,382,0,0,3354,3355,5,258,0,0,3355,3357,5,427,0,0,3356,3354,1,0,
        0,0,3356,3357,1,0,0,0,3357,3358,1,0,0,0,3358,3359,3,1382,691,0,3359,
        311,1,0,0,0,3360,3361,5,84,0,0,3361,3365,5,242,0,0,3362,3363,5,258,
        0,0,3363,3364,5,115,0,0,3364,3366,5,427,0,0,3365,3362,1,0,0,0,3365,
        3366,1,0,0,0,3366,3367,1,0,0,0,3367,3369,3,1382,691,0,3368,3370,
        3,12,6,0,3369,3368,1,0,0,0,3369,3370,1,0,0,0,3370,3371,1,0,0,0,3371,
        3372,3,314,157,0,3372,313,1,0,0,0,3373,3375,3,316,158,0,3374,3373,
        1,0,0,0,3375,3378,1,0,0,0,3376,3374,1,0,0,0,3376,3377,1,0,0,0,3377,
        315,1,0,0,0,3378,3376,1,0,0,0,3379,3380,5,354,0,0,3380,3387,3,1382,
        691,0,3381,3382,5,406,0,0,3382,3387,3,68,34,0,3383,3384,5,102,0,
        0,3384,3387,3,68,34,0,3385,3387,5,188,0,0,3386,3379,1,0,0,0,3386,
        3381,1,0,0,0,3386,3383,1,0,0,0,3386,3385,1,0,0,0,3387,317,1,0,0,
        0,3388,3389,5,176,0,0,3389,3390,5,242,0,0,3390,3391,3,1382,691,0,
        3391,3392,5,400,0,0,3392,3393,3,320,160,0,3393,319,1,0,0,0,3394,
        3396,3,322,161,0,3395,3394,1,0,0,0,3396,3399,1,0,0,0,3397,3395,1,
        0,0,0,3397,3398,1,0,0,0,3398,321,1,0,0,0,3399,3397,1,0,0,0,3400,
        3401,5,132,0,0,3401,3402,3,68,34,0,3402,323,1,0,0,0,3403,3404,5,
        176,0,0,3404,3405,5,242,0,0,3405,3406,3,1382,691,0,3406,3407,3,36,
        18,0,3407,3408,3,512,256,0,3408,3409,3,1382,691,0,3409,3508,1,0,
        0,0,3410,3411,5,176,0,0,3411,3412,5,242,0,0,3412,3413,3,1382,691,
        0,3413,3414,3,36,18,0,3414,3415,3,510,255,0,3415,3416,3,520,260,
        0,3416,3508,1,0,0,0,3417,3418,5,176,0,0,3418,3419,5,242,0,0,3419,
        3420,3,1382,691,0,3420,3421,3,36,18,0,3421,3422,5,174,0,0,3422,3423,
        3,648,324,0,3423,3508,1,0,0,0,3424,3425,5,176,0,0,3425,3426,5,242,
        0,0,3426,3427,3,1382,691,0,3427,3428,3,36,18,0,3428,3429,5,79,0,
        0,3429,3430,5,2,0,0,3430,3431,3,1116,558,0,3431,3432,5,74,0,0,3432,
        3433,3,1116,558,0,3433,3434,5,3,0,0,3434,3508,1,0,0,0,3435,3436,
        5,176,0,0,3436,3437,5,242,0,0,3437,3438,3,1382,691,0,3438,3439,3,
        36,18,0,3439,3440,5,227,0,0,3440,3441,3,1116,558,0,3441,3508,1,0,
        0,0,3442,3443,5,176,0,0,3443,3444,5,242,0,0,3444,3445,3,1382,691,
        0,3445,3446,3,36,18,0,3446,3447,5,249,0,0,3447,3448,3,624,312,0,
        3448,3508,1,0,0,0,3449,3450,5,176,0,0,3450,3451,5,242,0,0,3451,3452,
        3,1382,691,0,3452,3453,3,36,18,0,3453,3454,5,309,0,0,3454,3455,3,
        686,343,0,3455,3508,1,0,0,0,3456,3457,5,176,0,0,3457,3458,5,242,
        0,0,3458,3459,3,1382,691,0,3459,3460,3,36,18,0,3460,3461,5,309,0,
        0,3461,3462,5,194,0,0,3462,3463,3,520,260,0,3463,3464,5,138,0,0,
        3464,3465,3,1382,691,0,3465,3508,1,0,0,0,3466,3467,5,176,0,0,3467,
        3468,5,242,0,0,3468,3469,3,1382,691,0,3469,3470,3,36,18,0,3470,3471,
        5,309,0,0,3471,3472,5,244,0,0,3472,3473,3,520,260,0,3473,3474,5,
        138,0,0,3474,3475,3,1382,691,0,3475,3508,1,0,0,0,3476,3477,5,176,
        0,0,3477,3478,5,242,0,0,3478,3479,3,1382,691,0,3479,3480,3,36,18,
        0,3480,3481,5,327,0,0,3481,3482,3,624,312,0,3482,3508,1,0,0,0,3483,
        3484,5,176,0,0,3484,3485,5,242,0,0,3485,3486,3,1382,691,0,3486,3487,
        3,36,18,0,3487,3488,5,480,0,0,3488,3489,3,624,312,0,3489,3508,1,
        0,0,0,3490,3491,5,176,0,0,3491,3492,5,242,0,0,3492,3493,3,1382,691,
        0,3493,3494,3,36,18,0,3494,3495,5,481,0,0,3495,3496,5,100,0,0,3496,
        3497,3,1116,558,0,3497,3498,5,276,0,0,3498,3499,3,1382,691,0,3499,
        3508,1,0,0,0,3500,3501,5,176,0,0,3501,3502,5,242,0,0,3502,3503,3,
        1382,691,0,3503,3504,3,36,18,0,3504,3505,5,391,0,0,3505,3506,3,1116,
        558,0,3506,3508,1,0,0,0,3507,3403,1,0,0,0,3507,3410,1,0,0,0,3507,
        3417,1,0,0,0,3507,3424,1,0,0,0,3507,3435,1,0,0,0,3507,3442,1,0,0,
        0,3507,3449,1,0,0,0,3507,3456,1,0,0,0,3507,3466,1,0,0,0,3507,3476,
        1,0,0,0,3507,3483,1,0,0,0,3507,3490,1,0,0,0,3507,3500,1,0,0,0,3508,
        325,1,0,0,0,3509,3510,5,84,0,0,3510,3511,5,101,0,0,3511,3512,5,212,
        0,0,3512,3513,5,412,0,0,3513,3515,3,1382,691,0,3514,3516,3,332,166,
        0,3515,3514,1,0,0,0,3515,3516,1,0,0,0,3516,3518,1,0,0,0,3517,3519,
        3,336,168,0,3518,3517,1,0,0,0,3518,3519,1,0,0,0,3519,327,1,0,0,0,
        3520,3521,5,253,0,0,3521,3529,3,296,148,0,3522,3523,5,300,0,0,3523,
        3529,5,253,0,0,3524,3525,5,404,0,0,3525,3529,3,296,148,0,3526,3527,
        5,300,0,0,3527,3529,5,404,0,0,3528,3520,1,0,0,0,3528,3522,1,0,0,
        0,3528,3524,1,0,0,0,3528,3526,1,0,0,0,3529,329,1,0,0,0,3530,3532,
        3,328,164,0,3531,3530,1,0,0,0,3532,3533,1,0,0,0,3533,3531,1,0,0,
        0,3533,3534,1,0,0,0,3534,331,1,0,0,0,3535,3536,3,330,165,0,3536,
        333,1,0,0,0,3537,3538,5,176,0,0,3538,3539,5,101,0,0,3539,3540,5,
        212,0,0,3540,3541,5,412,0,0,3541,3543,3,1382,691,0,3542,3544,3,332,
        166,0,3543,3542,1,0,0,0,3543,3544,1,0,0,0,3544,3545,1,0,0,0,3545,
        3546,3,340,170,0,3546,3555,1,0,0,0,3547,3548,5,176,0,0,3548,3549,
        5,101,0,0,3549,3550,5,212,0,0,3550,3551,5,412,0,0,3551,3552,3,1382,
        691,0,3552,3553,3,330,165,0,3553,3555,1,0,0,0,3554,3537,1,0,0,0,
        3554,3547,1,0,0,0,3555,335,1,0,0,0,3556,3557,5,311,0,0,3557,3558,
        5,2,0,0,3558,3559,3,338,169,0,3559,3560,5,3,0,0,3560,337,1,0,0,0,
        3561,3566,3,346,173,0,3562,3563,5,6,0,0,3563,3565,3,346,173,0,3564,
        3562,1,0,0,0,3565,3568,1,0,0,0,3566,3564,1,0,0,0,3566,3567,1,0,0,
        0,3567,339,1,0,0,0,3568,3566,1,0,0,0,3569,3570,5,311,0,0,3570,3571,
        5,2,0,0,3571,3572,3,342,171,0,3572,3573,5,3,0,0,3573,341,1,0,0,0,
        3574,3579,3,344,172,0,3575,3576,5,6,0,0,3576,3578,3,344,172,0,3577,
        3575,1,0,0,0,3578,3581,1,0,0,0,3579,3577,1,0,0,0,3579,3580,1,0,0,
        0,3580,343,1,0,0,0,3581,3579,1,0,0,0,3582,3590,3,346,173,0,3583,
        3584,5,364,0,0,3584,3590,3,346,173,0,3585,3586,5,171,0,0,3586,3590,
        3,346,173,0,3587,3588,5,229,0,0,3588,3590,3,348,174,0,3589,3582,
        1,0,0,0,3589,3583,1,0,0,0,3589,3585,1,0,0,0,3589,3587,1,0,0,0,3590,
        345,1,0,0,0,3591,3592,3,348,174,0,3592,3593,3,350,175,0,3593,347,
        1,0,0,0,3594,3595,3,1420,710,0,3595,349,1,0,0,0,3596,3597,3,1400,
        700,0,3597,351,1,0,0,0,3598,3599,5,84,0,0,3599,3600,5,362,0,0,3600,
        3602,3,1382,691,0,3601,3603,3,354,177,0,3602,3601,1,0,0,0,3602,3603,
        1,0,0,0,3603,3605,1,0,0,0,3604,3606,3,358,179,0,3605,3604,1,0,0,
        0,3605,3606,1,0,0,0,3606,3607,1,0,0,0,3607,3608,5,101,0,0,3608,3609,
        5,212,0,0,3609,3610,5,412,0,0,3610,3612,3,1382,691,0,3611,3613,3,
        336,168,0,3612,3611,1,0,0,0,3612,3613,1,0,0,0,3613,3634,1,0,0,0,
        3614,3615,5,84,0,0,3615,3616,5,362,0,0,3616,3617,5,258,0,0,3617,
        3618,5,115,0,0,3618,3619,5,427,0,0,3619,3621,3,1382,691,0,3620,3622,
        3,354,177,0,3621,3620,1,0,0,0,3621,3622,1,0,0,0,3622,3624,1,0,0,
        0,3623,3625,3,358,179,0,3624,3623,1,0,0,0,3624,3625,1,0,0,0,3625,
        3626,1,0,0,0,3626,3627,5,101,0,0,3627,3628,5,212,0,0,3628,3629,5,
        412,0,0,3629,3631,3,1382,691,0,3630,3632,3,336,168,0,3631,3630,1,
        0,0,0,3631,3632,1,0,0,0,3632,3634,1,0,0,0,3633,3598,1,0,0,0,3633,
        3614,1,0,0,0,3634,353,1,0,0,0,3635,3636,5,391,0,0,3636,3637,3,1400,
        700,0,3637,355,1,0,0,0,3638,3641,5,406,0,0,3639,3642,3,1400,700,
        0,3640,3642,5,116,0,0,3641,3639,1,0,0,0,3641,3640,1,0,0,0,3642,357,
        1,0,0,0,3643,3644,3,356,178,0,3644,359,1,0,0,0,3645,3646,5,176,0,
        0,3646,3647,5,362,0,0,3647,3653,3,1382,691,0,3648,3654,3,340,170,
        0,3649,3651,3,356,178,0,3650,3652,3,340,170,0,3651,3650,1,0,0,0,
        3651,3652,1,0,0,0,3652,3654,1,0,0,0,3653,3648,1,0,0,0,3653,3649,
        1,0,0,0,3654,361,1,0,0,0,3655,3656,5,84,0,0,3656,3657,5,101,0,0,
        3657,3658,5,130,0,0,3658,3659,3,1378,689,0,3659,3661,5,2,0,0,3660,
        3662,3,172,86,0,3661,3660,1,0,0,0,3661,3662,1,0,0,0,3662,3663,1,
        0,0,0,3663,3665,5,3,0,0,3664,3666,3,234,117,0,3665,3664,1,0,0,0,
        3665,3666,1,0,0,0,3666,3667,1,0,0,0,3667,3668,5,362,0,0,3668,3670,
        3,1382,691,0,3669,3671,3,336,168,0,3670,3669,1,0,0,0,3670,3671,1,
        0,0,0,3671,3728,1,0,0,0,3672,3673,5,84,0,0,3673,3674,5,101,0,0,3674,
        3675,5,130,0,0,3675,3676,5,258,0,0,3676,3677,5,115,0,0,3677,3678,
        5,427,0,0,3678,3679,3,1378,689,0,3679,3681,5,2,0,0,3680,3682,3,172,
        86,0,3681,3680,1,0,0,0,3681,3682,1,0,0,0,3682,3683,1,0,0,0,3683,
        3685,5,3,0,0,3684,3686,3,234,117,0,3685,3684,1,0,0,0,3685,3686,1,
        0,0,0,3686,3687,1,0,0,0,3687,3688,5,362,0,0,3688,3690,3,1382,691,
        0,3689,3691,3,336,168,0,3690,3689,1,0,0,0,3690,3691,1,0,0,0,3691,
        3728,1,0,0,0,3692,3693,5,84,0,0,3693,3694,5,101,0,0,3694,3695,5,
        130,0,0,3695,3696,3,1378,689,0,3696,3697,5,316,0,0,3697,3698,5,306,
        0,0,3698,3700,3,1378,689,0,3699,3701,3,174,87,0,3700,3699,1,0,0,
        0,3700,3701,1,0,0,0,3701,3702,1,0,0,0,3702,3703,3,124,62,0,3703,
        3704,5,362,0,0,3704,3706,3,1382,691,0,3705,3707,3,336,168,0,3706,
        3705,1,0,0,0,3706,3707,1,0,0,0,3707,3728,1,0,0,0,3708,3709,5,84,
        0,0,3709,3710,5,101,0,0,3710,3711,5,130,0,0,3711,3712,5,258,0,0,
        3712,3713,5,115,0,0,3713,3714,5,427,0,0,3714,3715,3,1378,689,0,3715,
        3716,5,316,0,0,3716,3717,5,306,0,0,3717,3719,3,1378,689,0,3718,3720,
        3,174,87,0,3719,3718,1,0,0,0,3719,3720,1,0,0,0,3720,3721,1,0,0,0,
        3721,3722,3,124,62,0,3722,3723,5,362,0,0,3723,3725,3,1382,691,0,
        3724,3726,3,336,168,0,3725,3724,1,0,0,0,3725,3726,1,0,0,0,3726,3728,
        1,0,0,0,3727,3655,1,0,0,0,3727,3672,1,0,0,0,3727,3692,1,0,0,0,3727,
        3708,1,0,0,0,3728,363,1,0,0,0,3729,3730,5,482,0,0,3730,3731,5,101,
        0,0,3731,3732,5,354,0,0,3732,3734,3,1382,691,0,3733,3735,3,368,184,
        0,3734,3733,1,0,0,0,3734,3735,1,0,0,0,3735,3736,1,0,0,0,3736,3737,
        5,102,0,0,3737,3738,5,362,0,0,3738,3739,3,1382,691,0,3739,3740,5,
        109,0,0,3740,3742,3,1382,691,0,3741,3743,3,336,168,0,3742,3741,1,
        0,0,0,3742,3743,1,0,0,0,3743,365,1,0,0,0,3744,3745,5,112,0,0,3745,
        3748,5,132,0,0,3746,3748,5,97,0,0,3747,3744,1,0,0,0,3747,3746,1,
        0,0,0,3748,367,1,0,0,0,3749,3750,3,366,183,0,3750,3751,5,2,0,0,3751,
        3752,3,1074,537,0,3752,3753,5,3,0,0,3753,369,1,0,0,0,3754,3755,5,
        84,0,0,3755,3756,5,137,0,0,3756,3757,5,286,0,0,3757,3758,5,100,0,
        0,3758,3759,3,372,186,0,3759,3760,5,362,0,0,3760,3762,3,1382,691,
        0,3761,3763,3,336,168,0,3762,3761,1,0,0,0,3762,3763,1,0,0,0,3763,
        3778,1,0,0,0,3764,3765,5,84,0,0,3765,3766,5,137,0,0,3766,3767,5,
        286,0,0,3767,3768,5,258,0,0,3768,3769,5,115,0,0,3769,3770,5,427,
        0,0,3770,3771,5,100,0,0,3771,3772,3,372,186,0,3772,3773,5,362,0,
        0,3773,3775,3,1382,691,0,3774,3776,3,336,168,0,3775,3774,1,0,0,0,
        3775,3776,1,0,0,0,3776,3778,1,0,0,0,3777,3754,1,0,0,0,3777,3764,
        1,0,0,0,3778,371,1,0,0,0,3779,3782,3,1410,705,0,3780,3782,5,137,
        0,0,3781,3779,1,0,0,0,3781,3780,1,0,0,0,3782,373,1,0,0,0,3783,3784,
        5,229,0,0,3784,3785,5,137,0,0,3785,3786,5,286,0,0,3786,3787,5,100,
        0,0,3787,3788,3,372,186,0,3788,3789,5,362,0,0,3789,3790,3,1382,691,
        0,3790,3802,1,0,0,0,3791,3792,5,229,0,0,3792,3793,5,137,0,0,3793,
        3794,5,286,0,0,3794,3795,5,258,0,0,3795,3796,5,427,0,0,3796,3797,
        5,100,0,0,3797,3798,3,372,186,0,3798,3799,5,362,0,0,3799,3800,3,
        1382,691,0,3800,3802,1,0,0,0,3801,3783,1,0,0,0,3801,3791,1,0,0,0,
        3802,375,1,0,0,0,3803,3804,5,176,0,0,3804,3805,5,137,0,0,3805,3806,
        5,286,0,0,3806,3807,5,100,0,0,3807,3808,3,372,186,0,3808,3809,5,
        362,0,0,3809,3810,3,1382,691,0,3810,3811,3,340,170,0,3811,377,1,
        0,0,0,3812,3813,5,84,0,0,3813,3814,5,483,0,0,3814,3815,3,1382,691,
        0,3815,3816,5,118,0,0,3816,3818,3,1378,689,0,3817,3819,3,390,195,
        0,3818,3817,1,0,0,0,3818,3819,1,0,0,0,3819,3821,1,0,0,0,3820,3822,
        3,392,196,0,3821,3820,1,0,0,0,3821,3822,1,0,0,0,3822,3824,1,0,0,
        0,3823,3825,3,386,193,0,3824,3823,1,0,0,0,3824,3825,1,0,0,0,3825,
        3827,1,0,0,0,3826,3828,3,382,191,0,3827,3826,1,0,0,0,3827,3828,1,
        0,0,0,3828,3830,1,0,0,0,3829,3831,3,384,192,0,3830,3829,1,0,0,0,
        3830,3831,1,0,0,0,3831,379,1,0,0,0,3832,3833,5,176,0,0,3833,3834,
        5,483,0,0,3834,3835,3,1382,691,0,3835,3836,5,118,0,0,3836,3838,3,
        1378,689,0,3837,3839,3,388,194,0,3838,3837,1,0,0,0,3838,3839,1,0,
        0,0,3839,3841,1,0,0,0,3840,3842,3,382,191,0,3841,3840,1,0,0,0,3841,
        3842,1,0,0,0,3842,3844,1,0,0,0,3843,3845,3,384,192,0,3844,3843,1,
        0,0,0,3844,3845,1,0,0,0,3845,381,1,0,0,0,3846,3847,5,138,0,0,3847,
        3848,5,2,0,0,3848,3849,3,1162,581,0,3849,3850,5,3,0,0,3850,383,1,
        0,0,0,3851,3852,5,143,0,0,3852,3853,5,80,0,0,3853,3854,5,2,0,0,3854,
        3855,3,1162,581,0,3855,3856,5,3,0,0,3856,385,1,0,0,0,3857,3858,5,
        132,0,0,3858,3859,3,1412,706,0,3859,387,1,0,0,0,3860,3861,5,132,
        0,0,3861,3862,3,1412,706,0,3862,389,1,0,0,0,3863,3864,5,74,0,0,3864,
        3865,3,1436,718,0,3865,391,1,0,0,0,3866,3867,5,100,0,0,3867,3868,
        3,394,197,0,3868,393,1,0,0,0,3869,3870,7,18,0,0,3870,395,1,0,0,0,
        3871,3872,5,84,0,0,3872,3873,5,169,0,0,3873,3874,5,484,0,0,3874,
        3875,3,1382,691,0,3875,3876,5,391,0,0,3876,3877,3,398,199,0,3877,
        3878,5,253,0,0,3878,3879,3,296,148,0,3879,397,1,0,0,0,3880,3881,
        7,19,0,0,3881,399,1,0,0,0,3882,3883,5,84,0,0,3883,3884,5,388,0,0,
        3884,3885,3,1382,691,0,3885,3886,3,402,201,0,3886,3887,3,404,202,
        0,3887,3888,5,118,0,0,3888,3890,3,1378,689,0,3889,3891,3,408,204,
        0,3890,3889,1,0,0,0,3890,3891,1,0,0,0,3891,3893,1,0,0,0,3892,3894,
        3,420,210,0,3893,3892,1,0,0,0,3893,3894,1,0,0,0,3894,3896,1,0,0,
        0,3895,3897,3,426,213,0,3896,3895,1,0,0,0,3896,3897,1,0,0,0,3897,
        3898,1,0,0,0,3898,3899,5,240,0,0,3899,3900,3,428,214,0,3900,3901,
        3,1388,694,0,3901,3902,5,2,0,0,3902,3903,3,430,215,0,3903,3904,5,
        3,0,0,3904,3931,1,0,0,0,3905,3906,5,84,0,0,3906,3907,5,83,0,0,3907,
        3908,5,388,0,0,3908,3909,3,1382,691,0,3909,3910,5,173,0,0,3910,3911,
        3,404,202,0,3911,3912,5,118,0,0,3912,3914,3,1378,689,0,3913,3915,
        3,434,217,0,3914,3913,1,0,0,0,3914,3915,1,0,0,0,3915,3916,1,0,0,
        0,3916,3917,3,436,218,0,3917,3918,5,100,0,0,3918,3919,5,230,0,0,
        3919,3921,5,445,0,0,3920,3922,3,426,213,0,3921,3920,1,0,0,0,3921,
        3922,1,0,0,0,3922,3923,1,0,0,0,3923,3924,5,240,0,0,3924,3925,3,428,
        214,0,3925,3926,3,1388,694,0,3926,3927,5,2,0,0,3927,3928,3,430,215,
        0,3928,3929,5,3,0,0,3929,3931,1,0,0,0,3930,3882,1,0,0,0,3930,3905,
        1,0,0,0,3931,401,1,0,0,0,3932,3937,5,183,0,0,3933,3937,5,173,0,0,
        3934,3935,5,271,0,0,3935,3937,5,306,0,0,3936,3932,1,0,0,0,3936,3933,
        1,0,0,0,3936,3934,1,0,0,0,3937,403,1,0,0,0,3938,3943,3,406,203,0,
        3939,3940,5,120,0,0,3940,3942,3,406,203,0,3941,3939,1,0,0,0,3942,
        3945,1,0,0,0,3943,3941,1,0,0,0,3943,3944,1,0,0,0,3944,405,1,0,0,
        0,3945,3943,1,0,0,0,3946,3954,5,270,0,0,3947,3954,5,220,0,0,3948,
        3954,5,400,0,0,3949,3950,5,400,0,0,3950,3951,5,306,0,0,3951,3954,
        3,212,106,0,3952,3954,5,389,0,0,3953,3946,1,0,0,0,3953,3947,1,0,
        0,0,3953,3948,1,0,0,0,3953,3949,1,0,0,0,3953,3952,1,0,0,0,3954,407,
        1,0,0,0,3955,3956,5,485,0,0,3956,3957,3,410,205,0,3957,409,1,0,0,
        0,3958,3960,3,412,206,0,3959,3958,1,0,0,0,3960,3961,1,0,0,0,3961,
        3959,1,0,0,0,3961,3962,1,0,0,0,3962,411,1,0,0,0,3963,3964,3,414,
        207,0,3964,3966,3,416,208,0,3965,3967,3,830,415,0,3966,3965,1,0,
        0,0,3966,3967,1,0,0,0,3967,3968,1,0,0,0,3968,3969,3,418,209,0,3969,
        413,1,0,0,0,3970,3971,7,20,0,0,3971,415,1,0,0,0,3972,3973,7,21,0,
        0,3973,417,1,0,0,0,3974,3975,3,1414,707,0,3975,419,1,0,0,0,3976,
        3978,5,100,0,0,3977,3979,3,422,211,0,3978,3977,1,0,0,0,3978,3979,
        1,0,0,0,3979,3980,1,0,0,0,3980,3981,3,424,212,0,3981,421,1,0,0,0,
        3982,3983,5,230,0,0,3983,423,1,0,0,0,3984,3985,7,22,0,0,3985,425,
        1,0,0,0,3986,3987,5,140,0,0,3987,3988,5,2,0,0,3988,3989,3,1162,581,
        0,3989,3990,5,3,0,0,3990,427,1,0,0,0,3991,3992,7,23,0,0,3992,429,
        1,0,0,0,3993,3996,3,432,216,0,3994,3996,1,0,0,0,3995,3993,1,0,0,
        0,3995,3994,1,0,0,0,3996,4001,1,0,0,0,3997,3998,5,6,0,0,3998,4000,
        3,432,216,0,3999,3997,1,0,0,0,4000,4003,1,0,0,0,4001,3999,1,0,0,
        0,4001,4002,1,0,0,0,4002,431,1,0,0,0,4003,4001,1,0,0,0,4004,4009,
        3,1398,699,0,4005,4009,3,1396,698,0,4006,4009,3,1400,700,0,4007,
        4009,3,1420,710,0,4008,4004,1,0,0,0,4008,4005,1,0,0,0,4008,4006,
        1,0,0,0,4008,4007,1,0,0,0,4009,433,1,0,0,0,4010,4011,5,102,0,0,4011,
        4012,3,1378,689,0,4012,435,1,0,0,0,4013,4015,3,438,219,0,4014,4013,
        1,0,0,0,4015,4018,1,0,0,0,4016,4014,1,0,0,0,4016,4017,1,0,0,0,4017,
        437,1,0,0,0,4018,4016,1,0,0,0,4019,4020,5,115,0,0,4020,4031,5,92,
        0,0,4021,4031,5,92,0,0,4022,4023,5,107,0,0,4023,4031,5,259,0,0,4024,
        4025,5,107,0,0,4025,4031,5,218,0,0,4026,4027,5,115,0,0,4027,4031,
        5,402,0,0,4028,4029,5,300,0,0,4029,4031,5,266,0,0,4030,4019,1,0,
        0,0,4030,4021,1,0,0,0,4030,4022,1,0,0,0,4030,4024,1,0,0,0,4030,4026,
        1,0,0,0,4030,4028,1,0,0,0,4031,439,1,0,0,0,4032,4033,5,84,0,0,4033,
        4034,5,236,0,0,4034,4035,5,388,0,0,4035,4036,3,1382,691,0,4036,4037,
        5,118,0,0,4037,4038,3,1420,710,0,4038,4039,5,240,0,0,4039,4040,3,
        428,214,0,4040,4041,3,1388,694,0,4041,4042,5,2,0,0,4042,4043,5,3,
        0,0,4043,4059,1,0,0,0,4044,4045,5,84,0,0,4045,4046,5,236,0,0,4046,
        4047,5,388,0,0,4047,4048,3,1382,691,0,4048,4049,5,118,0,0,4049,4050,
        3,1420,710,0,4050,4051,5,140,0,0,4051,4052,3,442,221,0,4052,4053,
        5,240,0,0,4053,4054,3,428,214,0,4054,4055,3,1388,694,0,4055,4056,
        5,2,0,0,4056,4057,5,3,0,0,4057,4059,1,0,0,0,4058,4032,1,0,0,0,4058,
        4044,1,0,0,0,4059,441,1,0,0,0,4060,4065,3,444,222,0,4061,4062,5,
        71,0,0,4062,4064,3,444,222,0,4063,4061,1,0,0,0,4064,4067,1,0,0,0,
        4065,4063,1,0,0,0,4065,4066,1,0,0,0,4066,443,1,0,0,0,4067,4065,1,
        0,0,0,4068,4069,3,1414,707,0,4069,4070,5,106,0,0,4070,4071,5,2,0,
        0,4071,4072,3,446,223,0,4072,4073,5,3,0,0,4073,445,1,0,0,0,4074,
        4079,3,1400,700,0,4075,4076,5,6,0,0,4076,4078,3,1400,700,0,4077,
        4075,1,0,0,0,4078,4081,1,0,0,0,4079,4077,1,0,0,0,4079,4080,1,0,0,
        0,4080,447,1,0,0,0,4081,4079,1,0,0,0,4082,4083,5,176,0,0,4083,4084,
        5,236,0,0,4084,4085,5,388,0,0,4085,4086,3,1382,691,0,4086,4087,3,
        450,225,0,4087,449,1,0,0,0,4088,4095,5,231,0,0,4089,4090,5,231,0,
        0,4090,4095,5,343,0,0,4091,4092,5,231,0,0,4092,4095,5,177,0,0,4093,
        4095,5,224,0,0,4094,4088,1,0,0,0,4094,4089,1,0,0,0,4094,4091,1,0,
        0,0,4094,4093,1,0,0,0,4095,451,1,0,0,0,4096,4097,5,84,0,0,4097,4098,
        5,178,0,0,4098,4099,3,520,260,0,4099,4100,5,80,0,0,4100,4101,5,2,
        0,0,4101,4102,3,1162,581,0,4102,4103,5,3,0,0,4103,4104,3,436,218,
        0,4104,453,1,0,0,0,4105,4107,5,84,0,0,4106,4108,3,616,308,0,4107,
        4106,1,0,0,0,4107,4108,1,0,0,0,4108,4109,1,0,0,0,4109,4110,5,174,
        0,0,4110,4111,3,1388,694,0,4111,4112,3,644,322,0,4112,4113,3,456,
        228,0,4113,4220,1,0,0,0,4114,4116,5,84,0,0,4115,4117,3,616,308,0,
        4116,4115,1,0,0,0,4116,4117,1,0,0,0,4117,4118,1,0,0,0,4118,4119,
        5,174,0,0,4119,4120,3,1388,694,0,4120,4121,3,464,232,0,4121,4220,
        1,0,0,0,4122,4123,5,84,0,0,4123,4124,5,309,0,0,4124,4125,3,682,341,
        0,4125,4126,3,456,228,0,4126,4220,1,0,0,0,4127,4128,5,84,0,0,4128,
        4129,5,391,0,0,4129,4130,3,520,260,0,4130,4131,3,456,228,0,4131,
        4220,1,0,0,0,4132,4133,5,84,0,0,4133,4134,5,391,0,0,4134,4220,3,
        520,260,0,4135,4136,5,84,0,0,4136,4137,5,391,0,0,4137,4138,3,520,
        260,0,4138,4139,5,74,0,0,4139,4141,5,2,0,0,4140,4142,3,1096,548,
        0,4141,4140,1,0,0,0,4141,4142,1,0,0,0,4142,4143,1,0,0,0,4143,4144,
        5,3,0,0,4144,4220,1,0,0,0,4145,4146,5,84,0,0,4146,4147,5,391,0,0,
        4147,4148,3,520,260,0,4148,4149,5,74,0,0,4149,4150,5,234,0,0,4150,
        4152,5,2,0,0,4151,4153,3,470,235,0,4152,4151,1,0,0,0,4152,4153,1,
        0,0,0,4153,4154,1,0,0,0,4154,4155,5,3,0,0,4155,4220,1,0,0,0,4156,
        4157,5,84,0,0,4157,4158,5,391,0,0,4158,4159,3,520,260,0,4159,4160,
        5,74,0,0,4160,4161,5,330,0,0,4161,4162,3,456,228,0,4162,4220,1,0,
        0,0,4163,4164,5,84,0,0,4164,4165,5,386,0,0,4165,4166,5,356,0,0,4166,
        4167,5,314,0,0,4167,4168,3,520,260,0,4168,4169,3,456,228,0,4169,
        4220,1,0,0,0,4170,4171,5,84,0,0,4171,4172,5,386,0,0,4172,4173,5,
        356,0,0,4173,4174,5,223,0,0,4174,4175,3,520,260,0,4175,4176,3,456,
        228,0,4176,4220,1,0,0,0,4177,4178,5,84,0,0,4178,4179,5,386,0,0,4179,
        4180,5,356,0,0,4180,4181,5,384,0,0,4181,4182,3,520,260,0,4182,4183,
        3,456,228,0,4183,4220,1,0,0,0,4184,4185,5,84,0,0,4185,4186,5,386,
        0,0,4186,4187,5,356,0,0,4187,4188,5,201,0,0,4188,4189,3,520,260,
        0,4189,4190,3,456,228,0,4190,4220,1,0,0,0,4191,4192,5,84,0,0,4192,
        4193,5,146,0,0,4193,4194,3,520,260,0,4194,4195,3,456,228,0,4195,
        4220,1,0,0,0,4196,4197,5,84,0,0,4197,4198,5,146,0,0,4198,4199,5,
        258,0,0,4199,4200,5,115,0,0,4200,4201,5,427,0,0,4201,4202,3,520,
        260,0,4202,4203,3,456,228,0,4203,4220,1,0,0,0,4204,4205,5,84,0,0,
        4205,4206,5,146,0,0,4206,4207,3,520,260,0,4207,4208,5,102,0,0,4208,
        4209,3,520,260,0,4209,4220,1,0,0,0,4210,4211,5,84,0,0,4211,4212,
        5,146,0,0,4212,4213,5,258,0,0,4213,4214,5,115,0,0,4214,4215,5,427,
        0,0,4215,4216,3,520,260,0,4216,4217,5,102,0,0,4217,4218,3,520,260,
        0,4218,4220,1,0,0,0,4219,4105,1,0,0,0,4219,4114,1,0,0,0,4219,4122,
        1,0,0,0,4219,4127,1,0,0,0,4219,4132,1,0,0,0,4219,4135,1,0,0,0,4219,
        4145,1,0,0,0,4219,4156,1,0,0,0,4219,4163,1,0,0,0,4219,4170,1,0,0,
        0,4219,4177,1,0,0,0,4219,4184,1,0,0,0,4219,4191,1,0,0,0,4219,4196,
        1,0,0,0,4219,4204,1,0,0,0,4219,4210,1,0,0,0,4220,455,1,0,0,0,4221,
        4222,5,2,0,0,4222,4223,3,458,229,0,4223,4224,5,3,0,0,4224,457,1,
        0,0,0,4225,4230,3,460,230,0,4226,4227,5,6,0,0,4227,4229,3,460,230,
        0,4228,4226,1,0,0,0,4229,4232,1,0,0,0,4230,4228,1,0,0,0,4230,4231,
        1,0,0,0,4231,459,1,0,0,0,4232,4230,1,0,0,0,4233,4236,3,1420,710,
        0,4234,4235,5,10,0,0,4235,4237,3,462,231,0,4236,4234,1,0,0,0,4236,
        4237,1,0,0,0,4237,461,1,0,0,0,4238,4245,3,638,319,0,4239,4245,3,
        1430,715,0,4240,4245,3,1276,638,0,4241,4245,3,288,144,0,4242,4245,
        3,1400,700,0,4243,4245,5,438,0,0,4244,4238,1,0,0,0,4244,4239,1,0,
        0,0,4244,4240,1,0,0,0,4244,4241,1,0,0,0,4244,4242,1,0,0,0,4244,4243,
        1,0,0,0,4245,463,1,0,0,0,4246,4247,5,2,0,0,4247,4248,3,466,233,0,
        4248,4249,5,3,0,0,4249,465,1,0,0,0,4250,4255,3,468,234,0,4251,4252,
        5,6,0,0,4252,4254,3,468,234,0,4253,4251,1,0,0,0,4254,4257,1,0,0,
        0,4255,4253,1,0,0,0,4255,4256,1,0,0,0,4256,467,1,0,0,0,4257,4255,
        1,0,0,0,4258,4259,3,1436,718,0,4259,4260,5,10,0,0,4260,4261,3,462,
        231,0,4261,469,1,0,0,0,4262,4263,3,472,236,0,4263,471,1,0,0,0,4264,
        4269,3,1400,700,0,4265,4266,5,6,0,0,4266,4268,3,1400,700,0,4267,
        4265,1,0,0,0,4268,4271,1,0,0,0,4269,4267,1,0,0,0,4269,4270,1,0,0,
        0,4270,473,1,0,0,0,4271,4269,1,0,0,0,4272,4273,5,176,0,0,4273,4274,
        5,391,0,0,4274,4275,3,520,260,0,4275,4276,5,171,0,0,4276,4278,5,
        488,0,0,4277,4279,3,476,238,0,4278,4277,1,0,0,0,4278,4279,1,0,0,
        0,4279,4280,1,0,0,0,4280,4281,3,1400,700,0,4281,4316,1,0,0,0,4282,
        4283,5,176,0,0,4283,4284,5,391,0,0,4284,4285,3,520,260,0,4285,4286,
        5,171,0,0,4286,4288,5,488,0,0,4287,4289,3,476,238,0,4288,4287,1,
        0,0,0,4288,4289,1,0,0,0,4289,4290,1,0,0,0,4290,4291,3,1400,700,0,
        4291,4292,5,183,0,0,4292,4293,3,1400,700,0,4293,4316,1,0,0,0,4294,
        4295,5,176,0,0,4295,4296,5,391,0,0,4296,4297,3,520,260,0,4297,4298,
        5,171,0,0,4298,4300,5,488,0,0,4299,4301,3,476,238,0,4300,4299,1,
        0,0,0,4300,4301,1,0,0,0,4301,4302,1,0,0,0,4302,4303,3,1400,700,0,
        4303,4304,5,173,0,0,4304,4305,3,1400,700,0,4305,4316,1,0,0,0,4306,
        4307,5,176,0,0,4307,4308,5,391,0,0,4308,4309,3,520,260,0,4309,4310,
        5,340,0,0,4310,4311,5,488,0,0,4311,4312,3,1400,700,0,4312,4313,5,
        132,0,0,4313,4314,3,1400,700,0,4314,4316,1,0,0,0,4315,4272,1,0,0,
        0,4315,4282,1,0,0,0,4315,4294,1,0,0,0,4315,4306,1,0,0,0,4316,475,
        1,0,0,0,4317,4318,5,258,0,0,4318,4319,5,115,0,0,4319,4320,5,427,
        0,0,4320,477,1,0,0,0,4321,4322,5,84,0,0,4322,4323,5,309,0,0,4323,
        4324,5,194,0,0,4324,4326,3,520,260,0,4325,4327,3,484,242,0,4326,
        4325,1,0,0,0,4326,4327,1,0,0,0,4327,4328,1,0,0,0,4328,4329,5,100,
        0,0,4329,4330,5,391,0,0,4330,4331,3,1116,558,0,4331,4332,5,138,0,
        0,4332,4334,3,1382,691,0,4333,4335,3,486,243,0,4334,4333,1,0,0,0,
        4334,4335,1,0,0,0,4335,4336,1,0,0,0,4336,4337,5,74,0,0,4337,4338,
        3,480,240,0,4338,479,1,0,0,0,4339,4344,3,482,241,0,4340,4341,5,6,
        0,0,4341,4343,3,482,241,0,4342,4340,1,0,0,0,4343,4346,1,0,0,0,4344,
        4342,1,0,0,0,4344,4345,1,0,0,0,4345,481,1,0,0,0,4346,4344,1,0,0,
        0,4347,4348,5,309,0,0,4348,4349,3,1398,699,0,4349,4351,3,682,341,
        0,4350,4352,3,488,244,0,4351,4350,1,0,0,0,4351,4352,1,0,0,0,4352,
        4354,1,0,0,0,4353,4355,3,490,245,0,4354,4353,1,0,0,0,4354,4355,1,
        0,0,0,4355,4379,1,0,0,0,4356,4357,5,309,0,0,4357,4358,3,1398,699,
        0,4358,4360,3,686,343,0,4359,4361,3,488,244,0,4360,4359,1,0,0,0,
        4360,4361,1,0,0,0,4361,4363,1,0,0,0,4362,4364,3,490,245,0,4363,4362,
        1,0,0,0,4363,4364,1,0,0,0,4364,4379,1,0,0,0,4365,4366,5,249,0,0,
        4366,4367,3,1398,699,0,4367,4368,3,624,312,0,4368,4379,1,0,0,0,4369,
        4370,5,249,0,0,4370,4371,3,1398,699,0,4371,4372,5,2,0,0,4372,4373,
        3,1286,643,0,4373,4374,5,3,0,0,4374,4375,3,624,312,0,4375,4379,1,
        0,0,0,4376,4377,5,376,0,0,4377,4379,3,1116,558,0,4378,4347,1,0,0,
        0,4378,4356,1,0,0,0,4378,4365,1,0,0,0,4378,4369,1,0,0,0,4378,4376,
        1,0,0,0,4379,483,1,0,0,0,4380,4381,5,91,0,0,4381,485,1,0,0,0,4382,
        4383,5,244,0,0,4383,4384,3,520,260,0,4384,487,1,0,0,0,4385,4386,
        5,100,0,0,4386,4392,5,356,0,0,4387,4388,5,100,0,0,4388,4389,5,121,
        0,0,4389,4390,5,185,0,0,4390,4392,3,520,260,0,4391,4385,1,0,0,0,
        4391,4387,1,0,0,0,4392,489,1,0,0,0,4393,4394,5,333,0,0,4394,491,
        1,0,0,0,4395,4396,5,84,0,0,4396,4397,5,309,0,0,4397,4398,5,244,0,
        0,4398,4399,3,520,260,0,4399,4400,5,138,0,0,4400,4401,3,1382,691,
        0,4401,493,1,0,0,0,4402,4403,5,176,0,0,4403,4404,5,309,0,0,4404,
        4405,5,244,0,0,4405,4406,3,520,260,0,4406,4407,5,138,0,0,4407,4408,
        3,1382,691,0,4408,4409,5,171,0,0,4409,4410,3,480,240,0,4410,4421,
        1,0,0,0,4411,4412,5,176,0,0,4412,4413,5,309,0,0,4413,4414,5,244,
        0,0,4414,4415,3,520,260,0,4415,4416,5,138,0,0,4416,4417,3,1382,691,
        0,4417,4418,5,229,0,0,4418,4419,3,496,248,0,4419,4421,1,0,0,0,4420,
        4402,1,0,0,0,4420,4411,1,0,0,0,4421,495,1,0,0,0,4422,4427,3,498,
        249,0,4423,4424,5,6,0,0,4424,4426,3,498,249,0,4425,4423,1,0,0,0,
        4426,4429,1,0,0,0,4427,4425,1,0,0,0,4427,4428,1,0,0,0,4428,497,1,
        0,0,0,4429,4427,1,0,0,0,4430,4431,5,309,0,0,4431,4432,3,1398,699,
        0,4432,4433,5,2,0,0,4433,4434,3,1286,643,0,4434,4435,5,3,0,0,4435,
        4443,1,0,0,0,4436,4437,5,249,0,0,4437,4438,3,1398,699,0,4438,4439,
        5,2,0,0,4439,4440,3,1286,643,0,4440,4441,5,3,0,0,4441,4443,1,0,0,
        0,4442,4430,1,0,0,0,4442,4436,1,0,0,0,4443,499,1,0,0,0,4444,4445,
        5,229,0,0,4445,4446,5,309,0,0,4446,4447,5,194,0,0,4447,4448,3,520,
        260,0,4448,4449,5,138,0,0,4449,4451,3,1382,691,0,4450,4452,3,104,
        52,0,4451,4450,1,0,0,0,4451,4452,1,0,0,0,4452,4465,1,0,0,0,4453,
        4454,5,229,0,0,4454,4455,5,309,0,0,4455,4456,5,194,0,0,4456,4457,
        5,258,0,0,4457,4458,5,427,0,0,4458,4459,3,520,260,0,4459,4460,5,
        138,0,0,4460,4462,3,1382,691,0,4461,4463,3,104,52,0,4462,4461,1,
        0,0,0,4462,4463,1,0,0,0,4463,4465,1,0,0,0,4464,4444,1,0,0,0,4464,
        4453,1,0,0,0,4465,501,1,0,0,0,4466,4467,5,229,0,0,4467,4468,5,309,
        0,0,4468,4469,5,244,0,0,4469,4470,3,520,260,0,4470,4471,5,138,0,
        0,4471,4473,3,1382,691,0,4472,4474,3,104,52,0,4473,4472,1,0,0,0,
        4473,4474,1,0,0,0,4474,4487,1,0,0,0,4475,4476,5,229,0,0,4476,4477,
        5,309,0,0,4477,4478,5,244,0,0,4478,4479,5,258,0,0,4479,4480,5,427,
        0,0,4480,4481,3,520,260,0,4481,4482,5,138,0,0,4482,4484,3,1382,691,
        0,4483,4485,3,104,52,0,4484,4483,1,0,0,0,4484,4485,1,0,0,0,4485,
        4487,1,0,0,0,4486,4466,1,0,0,0,4486,4475,1,0,0,0,4487,503,1,0,0,
        0,4488,4489,5,229,0,0,4489,4490,5,312,0,0,4490,4491,5,185,0,0,4491,
        4493,3,1412,706,0,4492,4494,3,104,52,0,4493,4492,1,0,0,0,4493,4494,
        1,0,0,0,4494,505,1,0,0,0,4495,4496,5,332,0,0,4496,4497,5,312,0,0,
        4497,4498,5,185,0,0,4498,4499,3,1412,706,0,4499,4500,5,132,0,0,4500,
        4501,3,1410,705,0,4501,507,1,0,0,0,4502,4503,5,229,0,0,4503,4504,
        3,510,255,0,4504,4505,5,258,0,0,4505,4506,5,427,0,0,4506,4508,3,
        518,259,0,4507,4509,3,104,52,0,4508,4507,1,0,0,0,4508,4509,1,0,0,
        0,4509,4593,1,0,0,0,4510,4511,5,229,0,0,4511,4512,3,510,255,0,4512,
        4514,3,518,259,0,4513,4515,3,104,52,0,4514,4513,1,0,0,0,4514,4515,
        1,0,0,0,4515,4593,1,0,0,0,4516,4517,5,229,0,0,4517,4518,3,514,257,
        0,4518,4519,5,258,0,0,4519,4520,5,427,0,0,4520,4522,3,1380,690,0,
        4521,4523,3,104,52,0,4522,4521,1,0,0,0,4522,4523,1,0,0,0,4523,4593,
        1,0,0,0,4524,4525,5,229,0,0,4525,4526,3,514,257,0,4526,4528,3,1380,
        690,0,4527,4529,3,104,52,0,4528,4527,1,0,0,0,4528,4529,1,0,0,0,4529,
        4593,1,0,0,0,4530,4531,5,229,0,0,4531,4532,3,516,258,0,4532,4533,
        3,1382,691,0,4533,4534,5,118,0,0,4534,4536,3,520,260,0,4535,4537,
        3,104,52,0,4536,4535,1,0,0,0,4536,4537,1,0,0,0,4537,4593,1,0,0,0,
        4538,4539,5,229,0,0,4539,4540,3,516,258,0,4540,4541,5,258,0,0,4541,
        4542,5,427,0,0,4542,4543,3,1382,691,0,4543,4544,5,118,0,0,4544,4546,
        3,520,260,0,4545,4547,3,104,52,0,4546,4545,1,0,0,0,4546,4547,1,0,
        0,0,4547,4593,1,0,0,0,4548,4549,5,229,0,0,4549,4550,5,391,0,0,4550,
        4552,3,524,262,0,4551,4553,3,104,52,0,4552,4551,1,0,0,0,4552,4553,
        1,0,0,0,4553,4593,1,0,0,0,4554,4555,5,229,0,0,4555,4556,5,391,0,
        0,4556,4557,5,258,0,0,4557,4558,5,427,0,0,4558,4560,3,524,262,0,
        4559,4561,3,104,52,0,4560,4559,1,0,0,0,4560,4561,1,0,0,0,4561,4593,
        1,0,0,0,4562,4563,5,229,0,0,4563,4564,5,227,0,0,4564,4566,3,524,
        262,0,4565,4567,3,104,52,0,4566,4565,1,0,0,0,4566,4567,1,0,0,0,4567,
        4593,1,0,0,0,4568,4569,5,229,0,0,4569,4570,5,227,0,0,4570,4571,5,
        258,0,0,4571,4572,5,427,0,0,4572,4574,3,524,262,0,4573,4575,3,104,
        52,0,4574,4573,1,0,0,0,4574,4575,1,0,0,0,4575,4593,1,0,0,0,4576,
        4577,5,229,0,0,4577,4578,5,264,0,0,4578,4579,5,147,0,0,4579,4581,
        3,518,259,0,4580,4582,3,104,52,0,4581,4580,1,0,0,0,4581,4582,1,0,
        0,0,4582,4593,1,0,0,0,4583,4584,5,229,0,0,4584,4585,5,264,0,0,4585,
        4586,5,147,0,0,4586,4587,5,258,0,0,4587,4588,5,427,0,0,4588,4590,
        3,518,259,0,4589,4591,3,104,52,0,4590,4589,1,0,0,0,4590,4591,1,0,
        0,0,4591,4593,1,0,0,0,4592,4502,1,0,0,0,4592,4510,1,0,0,0,4592,4516,
        1,0,0,0,4592,4524,1,0,0,0,4592,4530,1,0,0,0,4592,4538,1,0,0,0,4592,
        4548,1,0,0,0,4592,4554,1,0,0,0,4592,4562,1,0,0,0,4592,4568,1,0,0,
        0,4592,4576,1,0,0,0,4592,4583,1,0,0,0,4593,509,1,0,0,0,4594,4618,
        5,130,0,0,4595,4618,5,359,0,0,4596,4618,5,407,0,0,4597,4598,5,289,
        0,0,4598,4618,5,407,0,0,4599,4618,5,264,0,0,4600,4601,5,101,0,0,
        4601,4618,5,130,0,0,4602,4618,5,146,0,0,4603,4618,5,206,0,0,4604,
        4618,5,373,0,0,4605,4606,5,386,0,0,4606,4607,5,356,0,0,4607,4618,
        5,314,0,0,4608,4609,5,386,0,0,4609,4610,5,356,0,0,4610,4618,5,223,
        0,0,4611,4612,5,386,0,0,4612,4613,5,356,0,0,4613,4618,5,384,0,0,
        4614,4615,5,386,0,0,4615,4616,5,356,0,0,4616,4618,5,201,0,0,4617,
        4594,1,0,0,0,4617,4595,1,0,0,0,4617,4596,1,0,0,0,4617,4597,1,0,0,
        0,4617,4599,1,0,0,0,4617,4600,1,0,0,0,4617,4602,1,0,0,0,4617,4603,
        1,0,0,0,4617,4604,1,0,0,0,4617,4605,1,0,0,0,4617,4608,1,0,0,0,4617,
        4611,1,0,0,0,4617,4614,1,0,0,0,4618,511,1,0,0,0,4619,4625,3,514,
        257,0,4620,4625,5,213,0,0,4621,4625,5,349,0,0,4622,4625,5,489,0,
        0,4623,4625,5,382,0,0,4624,4619,1,0,0,0,4624,4620,1,0,0,0,4624,4621,
        1,0,0,0,4624,4622,1,0,0,0,4624,4623,1,0,0,0,4625,513,1,0,0,0,4626,
        4627,5,169,0,0,4627,4642,5,484,0,0,4628,4629,5,236,0,0,4629,4642,
        5,388,0,0,4630,4642,5,242,0,0,4631,4632,5,101,0,0,4632,4633,5,212,
        0,0,4633,4642,5,412,0,0,4634,4636,3,304,152,0,4635,4634,1,0,0,0,
        4635,4636,1,0,0,0,4636,4637,1,0,0,0,4637,4642,5,276,0,0,4638,4642,
        5,490,0,0,4639,4642,5,354,0,0,4640,4642,5,362,0,0,4641,4626,1,0,
        0,0,4641,4628,1,0,0,0,4641,4630,1,0,0,0,4641,4631,1,0,0,0,4641,4635,
        1,0,0,0,4641,4638,1,0,0,0,4641,4639,1,0,0,0,4641,4640,1,0,0,0,4642,
        515,1,0,0,0,4643,4644,7,24,0,0,4644,517,1,0,0,0,4645,4650,3,520,
        260,0,4646,4647,5,6,0,0,4647,4649,3,520,260,0,4648,4646,1,0,0,0,
        4649,4652,1,0,0,0,4650,4648,1,0,0,0,4650,4651,1,0,0,0,4651,519,1,
        0,0,0,4652,4650,1,0,0,0,4653,4655,3,1414,707,0,4654,4656,3,522,261,
        0,4655,4654,1,0,0,0,4655,4656,1,0,0,0,4656,521,1,0,0,0,4657,4658,
        5,11,0,0,4658,4660,3,1384,692,0,4659,4657,1,0,0,0,4660,4661,1,0,
        0,0,4661,4659,1,0,0,0,4661,4662,1,0,0,0,4662,523,1,0,0,0,4663,4668,
        3,1116,558,0,4664,4665,5,6,0,0,4665,4667,3,1116,558,0,4666,4664,
        1,0,0,0,4667,4670,1,0,0,0,4668,4666,1,0,0,0,4668,4669,1,0,0,0,4669,
        525,1,0,0,0,4670,4668,1,0,0,0,4671,4673,5,389,0,0,4672,4674,3,992,
        496,0,4673,4672,1,0,0,0,4673,4674,1,0,0,0,4674,4675,1,0,0,0,4675,
        4677,3,1074,537,0,4676,4678,3,528,264,0,4677,4676,1,0,0,0,4677,4678,
        1,0,0,0,4678,4680,1,0,0,0,4679,4681,3,104,52,0,4680,4679,1,0,0,0,
        4680,4681,1,0,0,0,4681,527,1,0,0,0,4682,4683,5,205,0,0,4683,4687,
        5,257,0,0,4684,4685,5,345,0,0,4685,4687,5,257,0,0,4686,4682,1,0,
        0,0,4686,4684,1,0,0,0,4687,529,1,0,0,0,4688,4689,5,197,0,0,4689,
        4690,5,118,0,0,4690,4691,3,510,255,0,4691,4692,3,520,260,0,4692,
        4693,5,154,0,0,4693,4694,3,532,266,0,4694,4836,1,0,0,0,4695,4696,
        5,197,0,0,4696,4697,5,118,0,0,4697,4698,5,82,0,0,4698,4699,3,520,
        260,0,4699,4700,5,154,0,0,4700,4701,3,532,266,0,4701,4836,1,0,0,
        0,4702,4703,5,197,0,0,4703,4704,5,118,0,0,4704,4705,3,512,256,0,
        4705,4706,3,1382,691,0,4706,4707,5,154,0,0,4707,4708,3,532,266,0,
        4708,4836,1,0,0,0,4709,4710,5,197,0,0,4710,4711,5,118,0,0,4711,4712,
        5,391,0,0,4712,4713,3,1116,558,0,4713,4714,5,154,0,0,4714,4715,3,
        532,266,0,4715,4836,1,0,0,0,4716,4717,5,197,0,0,4717,4718,5,118,
        0,0,4718,4719,5,227,0,0,4719,4720,3,1116,558,0,4720,4721,5,154,0,
        0,4721,4722,3,532,266,0,4722,4836,1,0,0,0,4723,4724,5,197,0,0,4724,
        4725,5,118,0,0,4725,4726,5,174,0,0,4726,4727,3,648,324,0,4727,4728,
        5,154,0,0,4728,4729,3,532,266,0,4729,4836,1,0,0,0,4730,4731,5,197,
        0,0,4731,4732,5,118,0,0,4732,4733,5,249,0,0,4733,4734,3,624,312,
        0,4734,4735,5,154,0,0,4735,4736,3,532,266,0,4736,4836,1,0,0,0,4737,
        4738,5,197,0,0,4738,4739,5,118,0,0,4739,4740,5,309,0,0,4740,4741,
        3,686,343,0,4741,4742,5,154,0,0,4742,4743,3,532,266,0,4743,4836,
        1,0,0,0,4744,4745,5,197,0,0,4745,4746,5,118,0,0,4746,4747,5,83,0,
        0,4747,4748,3,1382,691,0,4748,4749,5,118,0,0,4749,4750,3,520,260,
        0,4750,4751,5,154,0,0,4751,4752,3,532,266,0,4752,4836,1,0,0,0,4753,
        4754,5,197,0,0,4754,4755,5,118,0,0,4755,4756,5,83,0,0,4756,4757,
        3,1382,691,0,4757,4758,5,118,0,0,4758,4759,5,227,0,0,4759,4760,3,
        520,260,0,4760,4761,5,154,0,0,4761,4762,3,532,266,0,4762,4836,1,
        0,0,0,4763,4764,5,197,0,0,4764,4765,5,118,0,0,4765,4766,3,516,258,
        0,4766,4767,3,1382,691,0,4767,4768,5,118,0,0,4768,4769,3,520,260,
        0,4769,4770,5,154,0,0,4770,4771,3,532,266,0,4771,4836,1,0,0,0,4772,
        4773,5,197,0,0,4773,4774,5,118,0,0,4774,4775,5,327,0,0,4775,4776,
        3,624,312,0,4776,4777,5,154,0,0,4777,4778,3,532,266,0,4778,4836,
        1,0,0,0,4779,4780,5,197,0,0,4780,4781,5,118,0,0,4781,4782,5,480,
        0,0,4782,4783,3,624,312,0,4783,4784,5,154,0,0,4784,4785,3,532,266,
        0,4785,4836,1,0,0,0,4786,4787,5,197,0,0,4787,4788,5,118,0,0,4788,
        4789,5,481,0,0,4789,4790,5,100,0,0,4790,4791,3,1116,558,0,4791,4792,
        5,276,0,0,4792,4793,3,1382,691,0,4793,4794,5,154,0,0,4794,4795,3,
        532,266,0,4795,4836,1,0,0,0,4796,4797,5,197,0,0,4797,4798,5,118,
        0,0,4798,4799,5,309,0,0,4799,4800,5,194,0,0,4800,4801,3,520,260,
        0,4801,4802,5,138,0,0,4802,4803,3,1382,691,0,4803,4804,5,154,0,0,
        4804,4805,3,532,266,0,4805,4836,1,0,0,0,4806,4807,5,197,0,0,4807,
        4808,5,118,0,0,4808,4809,5,309,0,0,4809,4810,5,244,0,0,4810,4811,
        3,520,260,0,4811,4812,5,138,0,0,4812,4813,3,1382,691,0,4813,4814,
        5,154,0,0,4814,4815,3,532,266,0,4815,4836,1,0,0,0,4816,4817,5,197,
        0,0,4817,4818,5,118,0,0,4818,4819,5,277,0,0,4819,4820,5,305,0,0,
        4820,4821,3,288,144,0,4821,4822,5,154,0,0,4822,4823,3,532,266,0,
        4823,4836,1,0,0,0,4824,4825,5,197,0,0,4825,4826,5,118,0,0,4826,4827,
        5,79,0,0,4827,4828,5,2,0,0,4828,4829,3,1116,558,0,4829,4830,5,74,
        0,0,4830,4831,3,1116,558,0,4831,4832,5,3,0,0,4832,4833,5,154,0,0,
        4833,4834,3,532,266,0,4834,4836,1,0,0,0,4835,4688,1,0,0,0,4835,4695,
        1,0,0,0,4835,4702,1,0,0,0,4835,4709,1,0,0,0,4835,4716,1,0,0,0,4835,
        4723,1,0,0,0,4835,4730,1,0,0,0,4835,4737,1,0,0,0,4835,4744,1,0,0,
        0,4835,4753,1,0,0,0,4835,4763,1,0,0,0,4835,4772,1,0,0,0,4835,4779,
        1,0,0,0,4835,4786,1,0,0,0,4835,4796,1,0,0,0,4835,4806,1,0,0,0,4835,
        4816,1,0,0,0,4835,4824,1,0,0,0,4836,531,1,0,0,0,4837,4840,3,1400,
        700,0,4838,4840,5,116,0,0,4839,4837,1,0,0,0,4839,4838,1,0,0,0,4840,
        533,1,0,0,0,4841,4842,5,358,0,0,4842,4844,5,275,0,0,4843,4845,3,
        536,268,0,4844,4843,1,0,0,0,4844,4845,1,0,0,0,4845,4846,1,0,0,0,
        4846,4847,5,118,0,0,4847,4848,3,510,255,0,4848,4849,3,520,260,0,
        4849,4850,5,154,0,0,4850,4851,3,538,269,0,4851,4953,1,0,0,0,4852,
        4853,5,358,0,0,4853,4855,5,275,0,0,4854,4856,3,536,268,0,4855,4854,
        1,0,0,0,4855,4856,1,0,0,0,4856,4857,1,0,0,0,4857,4858,5,118,0,0,
        4858,4859,5,82,0,0,4859,4860,3,520,260,0,4860,4861,5,154,0,0,4861,
        4862,3,538,269,0,4862,4953,1,0,0,0,4863,4864,5,358,0,0,4864,4866,
        5,275,0,0,4865,4867,3,536,268,0,4866,4865,1,0,0,0,4866,4867,1,0,
        0,0,4867,4868,1,0,0,0,4868,4869,5,118,0,0,4869,4870,3,512,256,0,
        4870,4871,3,1382,691,0,4871,4872,5,154,0,0,4872,4873,3,538,269,0,
        4873,4953,1,0,0,0,4874,4875,5,358,0,0,4875,4877,5,275,0,0,4876,4878,
        3,536,268,0,4877,4876,1,0,0,0,4877,4878,1,0,0,0,4878,4879,1,0,0,
        0,4879,4880,5,118,0,0,4880,4881,5,391,0,0,4881,4882,3,1116,558,0,
        4882,4883,5,154,0,0,4883,4884,3,538,269,0,4884,4953,1,0,0,0,4885,
        4886,5,358,0,0,4886,4888,5,275,0,0,4887,4889,3,536,268,0,4888,4887,
        1,0,0,0,4888,4889,1,0,0,0,4889,4890,1,0,0,0,4890,4891,5,118,0,0,
        4891,4892,5,227,0,0,4892,4893,3,1116,558,0,4893,4894,5,154,0,0,4894,
        4895,3,538,269,0,4895,4953,1,0,0,0,4896,4897,5,358,0,0,4897,4899,
        5,275,0,0,4898,4900,3,536,268,0,4899,4898,1,0,0,0,4899,4900,1,0,
        0,0,4900,4901,1,0,0,0,4901,4902,5,118,0,0,4902,4903,5,174,0,0,4903,
        4904,3,648,324,0,4904,4905,5,154,0,0,4905,4906,3,538,269,0,4906,
        4953,1,0,0,0,4907,4908,5,358,0,0,4908,4910,5,275,0,0,4909,4911,3,
        536,268,0,4910,4909,1,0,0,0,4910,4911,1,0,0,0,4911,4912,1,0,0,0,
        4912,4913,5,118,0,0,4913,4914,5,249,0,0,4914,4915,3,624,312,0,4915,
        4916,5,154,0,0,4916,4917,3,538,269,0,4917,4953,1,0,0,0,4918,4919,
        5,358,0,0,4919,4921,5,275,0,0,4920,4922,3,536,268,0,4921,4920,1,
        0,0,0,4921,4922,1,0,0,0,4922,4923,1,0,0,0,4923,4924,5,118,0,0,4924,
        4925,5,277,0,0,4925,4926,5,305,0,0,4926,4927,3,288,144,0,4927,4928,
        5,154,0,0,4928,4929,3,538,269,0,4929,4953,1,0,0,0,4930,4931,5,358,
        0,0,4931,4933,5,275,0,0,4932,4934,3,536,268,0,4933,4932,1,0,0,0,
        4933,4934,1,0,0,0,4934,4935,1,0,0,0,4935,4936,5,118,0,0,4936,4937,
        5,327,0,0,4937,4938,3,624,312,0,4938,4939,5,154,0,0,4939,4940,3,
        538,269,0,4940,4953,1,0,0,0,4941,4942,5,358,0,0,4942,4944,5,275,
        0,0,4943,4945,3,536,268,0,4944,4943,1,0,0,0,4944,4945,1,0,0,0,4945,
        4946,1,0,0,0,4946,4947,5,118,0,0,4947,4948,5,480,0,0,4948,4949,3,
        624,312,0,4949,4950,5,154,0,0,4950,4951,3,538,269,0,4951,4953,1,
        0,0,0,4952,4841,1,0,0,0,4952,4852,1,0,0,0,4952,4863,1,0,0,0,4952,
        4874,1,0,0,0,4952,4885,1,0,0,0,4952,4896,1,0,0,0,4952,4907,1,0,0,
        0,4952,4918,1,0,0,0,4952,4930,1,0,0,0,4952,4941,1,0,0,0,4953,535,
        1,0,0,0,4954,4955,5,100,0,0,4955,4956,3,68,34,0,4956,537,1,0,0,0,
        4957,4960,3,1400,700,0,4958,4960,5,116,0,0,4959,4957,1,0,0,0,4959,
        4958,1,0,0,0,4960,539,1,0,0,0,4961,4962,5,99,0,0,4962,4966,3,542,
        271,0,4963,4964,5,296,0,0,4964,4966,3,542,271,0,4965,4961,1,0,0,
        0,4965,4963,1,0,0,0,4966,541,1,0,0,0,4967,5053,3,958,479,0,4968,
        4969,3,544,272,0,4969,4970,3,958,479,0,4970,5053,1,0,0,0,4971,4973,
        5,299,0,0,4972,4974,3,546,273,0,4973,4972,1,0,0,0,4973,4974,1,0,
        0,0,4974,4975,1,0,0,0,4975,5053,3,958,479,0,4976,4978,5,324,0,0,
        4977,4979,3,546,273,0,4978,4977,1,0,0,0,4978,4979,1,0,0,0,4979,4980,
        1,0,0,0,4980,5053,3,958,479,0,4981,4983,5,245,0,0,4982,4984,3,546,
        273,0,4983,4982,1,0,0,0,4983,4984,1,0,0,0,4984,4985,1,0,0,0,4985,
        5053,3,958,479,0,4986,4988,5,278,0,0,4987,4989,3,546,273,0,4988,
        4987,1,0,0,0,4988,4989,1,0,0,0,4989,4990,1,0,0,0,4990,5053,3,958,
        479,0,4991,4992,5,168,0,0,4992,4994,3,1406,703,0,4993,4995,3,546,
        273,0,4994,4993,1,0,0,0,4994,4995,1,0,0,0,4995,4996,1,0,0,0,4996,
        4997,3,958,479,0,4997,5053,1,0,0,0,4998,4999,5,338,0,0,4999,5001,
        3,1406,703,0,5000,5002,3,546,273,0,5001,5000,1,0,0,0,5001,5002,1,
        0,0,0,5002,5003,1,0,0,0,5003,5004,3,958,479,0,5004,5053,1,0,0,0,
        5005,5007,3,1406,703,0,5006,5008,3,546,273,0,5007,5006,1,0,0,0,5007,
        5008,1,0,0,0,5008,5009,1,0,0,0,5009,5010,3,958,479,0,5010,5053,1,
        0,0,0,5011,5013,5,68,0,0,5012,5014,3,546,273,0,5013,5012,1,0,0,0,
        5013,5014,1,0,0,0,5014,5015,1,0,0,0,5015,5053,3,958,479,0,5016,5018,
        5,248,0,0,5017,5019,3,546,273,0,5018,5017,1,0,0,0,5018,5019,1,0,
        0,0,5019,5020,1,0,0,0,5020,5053,3,958,479,0,5021,5022,5,248,0,0,
        5022,5024,3,1406,703,0,5023,5025,3,546,273,0,5024,5023,1,0,0,0,5024,
        5025,1,0,0,0,5025,5026,1,0,0,0,5026,5027,3,958,479,0,5027,5053,1,
        0,0,0,5028,5029,5,248,0,0,5029,5031,5,68,0,0,5030,5032,3,546,273,
        0,5031,5030,1,0,0,0,5031,5032,1,0,0,0,5032,5033,1,0,0,0,5033,5053,
        3,958,479,0,5034,5036,5,182,0,0,5035,5037,3,546,273,0,5036,5035,
        1,0,0,0,5036,5037,1,0,0,0,5037,5038,1,0,0,0,5038,5053,3,958,479,
        0,5039,5040,5,182,0,0,5040,5042,3,1406,703,0,5041,5043,3,546,273,
        0,5042,5041,1,0,0,0,5042,5043,1,0,0,0,5043,5044,1,0,0,0,5044,5045,
        3,958,479,0,5045,5053,1,0,0,0,5046,5047,5,182,0,0,5047,5049,5,68,
        0,0,5048,5050,3,546,273,0,5049,5048,1,0,0,0,5049,5050,1,0,0,0,5050,
        5051,1,0,0,0,5051,5053,3,958,479,0,5052,4967,1,0,0,0,5052,4968,1,
        0,0,0,5052,4971,1,0,0,0,5052,4976,1,0,0,0,5052,4981,1,0,0,0,5052,
        4986,1,0,0,0,5052,4991,1,0,0,0,5052,4998,1,0,0,0,5052,5005,1,0,0,
        0,5052,5011,1,0,0,0,5052,5016,1,0,0,0,5052,5021,1,0,0,0,5052,5028,
        1,0,0,0,5052,5034,1,0,0,0,5052,5039,1,0,0,0,5052,5046,1,0,0,0,5053,
        543,1,0,0,0,5054,5055,7,25,0,0,5055,545,1,0,0,0,5056,5057,3,544,
        272,0,5057,547,1,0,0,0,5058,5059,5,103,0,0,5059,5060,3,552,276,0,
        5060,5061,5,118,0,0,5061,5062,3,558,279,0,5062,5063,5,132,0,0,5063,
        5065,3,560,280,0,5064,5066,3,564,282,0,5065,5064,1,0,0,0,5065,5066,
        1,0,0,0,5066,549,1,0,0,0,5067,5068,5,348,0,0,5068,5069,3,552,276,
        0,5069,5070,5,118,0,0,5070,5071,3,558,279,0,5071,5072,5,102,0,0,
        5072,5074,3,560,280,0,5073,5075,3,104,52,0,5074,5073,1,0,0,0,5074,
        5075,1,0,0,0,5075,5089,1,0,0,0,5076,5077,5,348,0,0,5077,5078,5,103,
        0,0,5078,5079,5,310,0,0,5079,5080,5,100,0,0,5080,5081,3,552,276,
        0,5081,5082,5,118,0,0,5082,5083,3,558,279,0,5083,5084,5,102,0,0,
        5084,5086,3,560,280,0,5085,5087,3,104,52,0,5086,5085,1,0,0,0,5086,
        5087,1,0,0,0,5087,5089,1,0,0,0,5088,5067,1,0,0,0,5088,5076,1,0,0,
        0,5089,551,1,0,0,0,5090,5106,3,554,277,0,5091,5106,5,68,0,0,5092,
        5093,5,68,0,0,5093,5106,5,325,0,0,5094,5095,5,68,0,0,5095,5096,5,
        2,0,0,5096,5097,3,212,106,0,5097,5098,5,3,0,0,5098,5106,1,0,0,0,
        5099,5100,5,68,0,0,5100,5101,5,325,0,0,5101,5102,5,2,0,0,5102,5103,
        3,212,106,0,5103,5104,5,3,0,0,5104,5106,1,0,0,0,5105,5090,1,0,0,
        0,5105,5091,1,0,0,0,5105,5092,1,0,0,0,5105,5094,1,0,0,0,5105,5099,
        1,0,0,0,5106,553,1,0,0,0,5107,5112,3,556,278,0,5108,5109,5,6,0,0,
        5109,5111,3,556,278,0,5110,5108,1,0,0,0,5111,5114,1,0,0,0,5112,5110,
        1,0,0,0,5112,5113,1,0,0,0,5113,555,1,0,0,0,5114,5112,1,0,0,0,5115,
        5117,5,126,0,0,5116,5118,3,210,105,0,5117,5116,1,0,0,0,5117,5118,
        1,0,0,0,5118,5132,1,0,0,0,5119,5121,5,124,0,0,5120,5122,3,210,105,
        0,5121,5120,1,0,0,0,5121,5122,1,0,0,0,5122,5132,1,0,0,0,5123,5125,
        5,84,0,0,5124,5126,3,210,105,0,5125,5124,1,0,0,0,5125,5126,1,0,0,
        0,5126,5132,1,0,0,0,5127,5129,3,1414,707,0,5128,5130,3,210,105,0,
        5129,5128,1,0,0,0,5129,5130,1,0,0,0,5130,5132,1,0,0,0,5131,5115,
        1,0,0,0,5131,5119,1,0,0,0,5131,5123,1,0,0,0,5131,5127,1,0,0,0,5132,
        557,1,0,0,0,5133,5192,3,1376,688,0,5134,5135,5,130,0,0,5135,5192,
        3,1376,688,0,5136,5137,5,359,0,0,5137,5192,3,1376,688,0,5138,5139,
        5,101,0,0,5139,5140,5,212,0,0,5140,5141,5,412,0,0,5141,5192,3,1380,
        690,0,5142,5143,5,101,0,0,5143,5144,5,362,0,0,5144,5192,3,1380,690,
        0,5145,5146,5,249,0,0,5146,5192,3,622,311,0,5147,5148,5,327,0,0,
        5148,5192,3,622,311,0,5149,5150,5,480,0,0,5150,5192,3,622,311,0,
        5151,5152,5,213,0,0,5152,5192,3,1380,690,0,5153,5154,5,227,0,0,5154,
        5192,3,518,259,0,5155,5156,5,276,0,0,5156,5192,3,1380,690,0,5157,
        5158,5,277,0,0,5158,5159,5,305,0,0,5159,5192,3,290,145,0,5160,5161,
        5,354,0,0,5161,5192,3,1380,690,0,5162,5163,5,382,0,0,5163,5192,3,
        1380,690,0,5164,5165,5,391,0,0,5165,5192,3,518,259,0,5166,5167,5,
        68,0,0,5167,5168,5,381,0,0,5168,5169,5,106,0,0,5169,5170,5,354,0,
        0,5170,5192,3,1380,690,0,5171,5172,5,68,0,0,5172,5173,5,360,0,0,
        5173,5174,5,106,0,0,5174,5175,5,354,0,0,5175,5192,3,1380,690,0,5176,
        5177,5,68,0,0,5177,5178,5,250,0,0,5178,5179,5,106,0,0,5179,5180,
        5,354,0,0,5180,5192,3,1380,690,0,5181,5182,5,68,0,0,5182,5183,5,
        495,0,0,5183,5184,5,106,0,0,5184,5185,5,354,0,0,5185,5192,3,1380,
        690,0,5186,5187,5,68,0,0,5187,5188,5,493,0,0,5188,5189,5,106,0,0,
        5189,5190,5,354,0,0,5190,5192,3,1380,690,0,5191,5133,1,0,0,0,5191,
        5134,1,0,0,0,5191,5136,1,0,0,0,5191,5138,1,0,0,0,5191,5142,1,0,0,
        0,5191,5145,1,0,0,0,5191,5147,1,0,0,0,5191,5149,1,0,0,0,5191,5151,
        1,0,0,0,5191,5153,1,0,0,0,5191,5155,1,0,0,0,5191,5157,1,0,0,0,5191,
        5160,1,0,0,0,5191,5162,1,0,0,0,5191,5164,1,0,0,0,5191,5166,1,0,0,
        0,5191,5171,1,0,0,0,5191,5176,1,0,0,0,5191,5181,1,0,0,0,5191,5186,
        1,0,0,0,5192,559,1,0,0,0,5193,5198,3,562,281,0,5194,5195,5,6,0,0,
        5195,5197,3,562,281,0,5196,5194,1,0,0,0,5197,5200,1,0,0,0,5198,5196,
        1,0,0,0,5198,5199,1,0,0,0,5199,561,1,0,0,0,5200,5198,1,0,0,0,5201,
        5205,3,1410,705,0,5202,5203,5,104,0,0,5203,5205,3,1410,705,0,5204,
        5201,1,0,0,0,5204,5202,1,0,0,0,5205,563,1,0,0,0,5206,5207,5,143,
        0,0,5207,5208,5,103,0,0,5208,5209,5,310,0,0,5209,565,1,0,0,0,5210,
        5211,5,103,0,0,5211,5212,3,554,277,0,5212,5213,5,132,0,0,5213,5215,
        3,1412,706,0,5214,5216,3,570,285,0,5215,5214,1,0,0,0,5215,5216,1,
        0,0,0,5216,5218,1,0,0,0,5217,5219,3,572,286,0,5218,5217,1,0,0,0,
        5218,5219,1,0,0,0,5219,567,1,0,0,0,5220,5221,5,348,0,0,5221,5222,
        3,554,277,0,5222,5223,5,102,0,0,5223,5225,3,1412,706,0,5224,5226,
        3,572,286,0,5225,5224,1,0,0,0,5225,5226,1,0,0,0,5226,5228,1,0,0,
        0,5227,5229,3,104,52,0,5228,5227,1,0,0,0,5228,5229,1,0,0,0,5229,
        5244,1,0,0,0,5230,5231,5,348,0,0,5231,5232,5,172,0,0,5232,5233,5,
        310,0,0,5233,5234,5,100,0,0,5234,5235,3,554,277,0,5235,5236,5,102,
        0,0,5236,5238,3,1412,706,0,5237,5239,3,572,286,0,5238,5237,1,0,0,
        0,5238,5239,1,0,0,0,5239,5241,1,0,0,0,5240,5242,3,104,52,0,5241,
        5240,1,0,0,0,5241,5242,1,0,0,0,5242,5244,1,0,0,0,5243,5220,1,0,0,
        0,5243,5230,1,0,0,0,5244,569,1,0,0,0,5245,5246,5,143,0,0,5246,5247,
        5,172,0,0,5247,5248,5,310,0,0,5248,571,1,0,0,0,5249,5250,5,252,0,
        0,5250,5251,5,185,0,0,5251,5252,3,1410,705,0,5252,573,1,0,0,0,5253,
        5254,5,176,0,0,5254,5255,5,91,0,0,5255,5256,5,325,0,0,5256,5257,
        3,576,288,0,5257,5258,3,580,290,0,5258,575,1,0,0,0,5259,5261,3,578,
        289,0,5260,5259,1,0,0,0,5261,5264,1,0,0,0,5262,5260,1,0,0,0,5262,
        5263,1,0,0,0,5263,577,1,0,0,0,5264,5262,1,0,0,0,5265,5266,5,106,
        0,0,5266,5267,5,354,0,0,5267,5275,3,1380,690,0,5268,5269,5,100,0,
        0,5269,5270,5,349,0,0,5270,5275,3,1412,706,0,5271,5272,5,100,0,0,
        5272,5273,5,137,0,0,5273,5275,3,1412,706,0,5274,5265,1,0,0,0,5274,
        5268,1,0,0,0,5274,5271,1,0,0,0,5275,579,1,0,0,0,5276,5277,5,103,
        0,0,5277,5278,3,552,276,0,5278,5279,5,118,0,0,5279,5280,3,582,291,
        0,5280,5281,5,132,0,0,5281,5283,3,560,280,0,5282,5284,3,564,282,
        0,5283,5282,1,0,0,0,5283,5284,1,0,0,0,5284,5307,1,0,0,0,5285,5286,
        5,348,0,0,5286,5287,3,552,276,0,5287,5288,5,118,0,0,5288,5289,3,
        582,291,0,5289,5290,5,102,0,0,5290,5292,3,560,280,0,5291,5293,3,
        104,52,0,5292,5291,1,0,0,0,5292,5293,1,0,0,0,5293,5307,1,0,0,0,5294,
        5295,5,348,0,0,5295,5296,5,103,0,0,5296,5297,5,310,0,0,5297,5298,
        5,100,0,0,5298,5299,3,552,276,0,5299,5300,5,118,0,0,5300,5301,3,
        582,291,0,5301,5302,5,102,0,0,5302,5304,3,560,280,0,5303,5305,3,
        104,52,0,5304,5303,1,0,0,0,5304,5305,1,0,0,0,5305,5307,1,0,0,0,5306,
        5276,1,0,0,0,5306,5285,1,0,0,0,5306,5294,1,0,0,0,5307,581,1,0,0,
        0,5308,5309,7,26,0,0,5309,583,1,0,0,0,5310,5312,5,84,0,0,5311,5313,
        3,586,293,0,5312,5311,1,0,0,0,5312,5313,1,0,0,0,5313,5314,1,0,0,
        0,5314,5316,5,264,0,0,5315,5317,3,590,295,0,5316,5315,1,0,0,0,5316,
        5317,1,0,0,0,5317,5319,1,0,0,0,5318,5320,3,592,296,0,5319,5318,1,
        0,0,0,5319,5320,1,0,0,0,5320,5321,1,0,0,0,5321,5322,5,118,0,0,5322,
        5324,3,1072,536,0,5323,5325,3,594,297,0,5324,5323,1,0,0,0,5324,5325,
        1,0,0,0,5325,5326,1,0,0,0,5326,5327,5,2,0,0,5327,5328,3,596,298,
        0,5328,5330,5,3,0,0,5329,5331,3,602,301,0,5330,5329,1,0,0,0,5330,
        5331,1,0,0,0,5331,5333,1,0,0,0,5332,5334,3,114,57,0,5333,5332,1,
        0,0,0,5333,5334,1,0,0,0,5334,5336,1,0,0,0,5335,5337,3,250,125,0,
        5336,5335,1,0,0,0,5336,5337,1,0,0,0,5337,5339,1,0,0,0,5338,5340,
        3,1092,546,0,5339,5338,1,0,0,0,5339,5340,1,0,0,0,5340,5374,1,0,0,
        0,5341,5343,5,84,0,0,5342,5344,3,586,293,0,5343,5342,1,0,0,0,5343,
        5344,1,0,0,0,5344,5345,1,0,0,0,5345,5347,5,264,0,0,5346,5348,3,590,
        295,0,5347,5346,1,0,0,0,5347,5348,1,0,0,0,5348,5349,1,0,0,0,5349,
        5350,5,258,0,0,5350,5351,5,115,0,0,5351,5352,5,427,0,0,5352,5353,
        3,1382,691,0,5353,5354,5,118,0,0,5354,5356,3,1072,536,0,5355,5357,
        3,594,297,0,5356,5355,1,0,0,0,5356,5357,1,0,0,0,5357,5358,1,0,0,
        0,5358,5359,5,2,0,0,5359,5360,3,596,298,0,5360,5362,5,3,0,0,5361,
        5363,3,602,301,0,5362,5361,1,0,0,0,5362,5363,1,0,0,0,5363,5365,1,
        0,0,0,5364,5366,3,114,57,0,5365,5364,1,0,0,0,5365,5366,1,0,0,0,5366,
        5368,1,0,0,0,5367,5369,3,250,125,0,5368,5367,1,0,0,0,5368,5369,1,
        0,0,0,5369,5371,1,0,0,0,5370,5372,3,1092,546,0,5371,5370,1,0,0,0,
        5371,5372,1,0,0,0,5372,5374,1,0,0,0,5373,5310,1,0,0,0,5373,5341,
        1,0,0,0,5374,585,1,0,0,0,5375,5376,5,136,0,0,5376,587,1,0,0,0,5377,
        5378,3,1414,707,0,5378,589,1,0,0,0,5379,5380,5,147,0,0,5380,591,
        1,0,0,0,5381,5382,3,1382,691,0,5382,593,1,0,0,0,5383,5384,5,138,
        0,0,5384,5385,3,1382,691,0,5385,595,1,0,0,0,5386,5391,3,600,300,
        0,5387,5388,5,6,0,0,5388,5390,3,600,300,0,5389,5387,1,0,0,0,5390,
        5393,1,0,0,0,5391,5389,1,0,0,0,5391,5392,1,0,0,0,5392,597,1,0,0,
        0,5393,5391,1,0,0,0,5394,5396,3,606,303,0,5395,5394,1,0,0,0,5395,
        5396,1,0,0,0,5396,5398,1,0,0,0,5397,5399,3,608,304,0,5398,5397,1,
        0,0,0,5398,5399,1,0,0,0,5399,5401,1,0,0,0,5400,5402,3,610,305,0,
        5401,5400,1,0,0,0,5401,5402,1,0,0,0,5402,5404,1,0,0,0,5403,5405,
        3,612,306,0,5404,5403,1,0,0,0,5404,5405,1,0,0,0,5405,5418,1,0,0,
        0,5406,5408,3,606,303,0,5407,5406,1,0,0,0,5407,5408,1,0,0,0,5408,
        5409,1,0,0,0,5409,5410,3,520,260,0,5410,5412,3,112,56,0,5411,5413,
        3,610,305,0,5412,5411,1,0,0,0,5412,5413,1,0,0,0,5413,5415,1,0,0,
        0,5414,5416,3,612,306,0,5415,5414,1,0,0,0,5415,5416,1,0,0,0,5416,
        5418,1,0,0,0,5417,5395,1,0,0,0,5417,5407,1,0,0,0,5418,599,1,0,0,
        0,5419,5420,3,1414,707,0,5420,5421,3,598,299,0,5421,5431,1,0,0,0,
        5422,5423,3,1214,607,0,5423,5424,3,598,299,0,5424,5431,1,0,0,0,5425,
        5426,5,2,0,0,5426,5427,3,1162,581,0,5427,5428,5,3,0,0,5428,5429,
        3,598,299,0,5429,5431,1,0,0,0,5430,5419,1,0,0,0,5430,5422,1,0,0,
        0,5430,5425,1,0,0,0,5431,601,1,0,0,0,5432,5433,5,479,0,0,5433,5434,
        5,2,0,0,5434,5435,3,604,302,0,5435,5436,5,3,0,0,5436,603,1,0,0,0,
        5437,5442,3,600,300,0,5438,5439,5,6,0,0,5439,5441,3,600,300,0,5440,
        5438,1,0,0,0,5441,5444,1,0,0,0,5442,5440,1,0,0,0,5442,5443,1,0,0,
        0,5443,605,1,0,0,0,5444,5442,1,0,0,0,5445,5446,5,81,0,0,5446,5447,
        3,520,260,0,5447,607,1,0,0,0,5448,5449,3,520,260,0,5449,609,1,0,
        0,0,5450,5451,7,27,0,0,5451,611,1,0,0,0,5452,5453,5,304,0,0,5453,
        5457,5,245,0,0,5454,5455,5,304,0,0,5455,5457,5,278,0,0,5456,5452,
        1,0,0,0,5456,5454,1,0,0,0,5457,613,1,0,0,0,5458,5460,5,84,0,0,5459,
        5461,3,616,308,0,5460,5459,1,0,0,0,5460,5461,1,0,0,0,5461,5462,1,
        0,0,0,5462,5463,7,23,0,0,5463,5464,3,1388,694,0,5464,5474,3,626,
        313,0,5465,5472,5,347,0,0,5466,5473,3,636,318,0,5467,5468,5,130,
        0,0,5468,5469,5,2,0,0,5469,5470,3,666,333,0,5470,5471,5,3,0,0,5471,
        5473,1,0,0,0,5472,5466,1,0,0,0,5472,5467,1,0,0,0,5473,5475,1,0,0,
        0,5474,5465,1,0,0,0,5474,5475,1,0,0,0,5475,5476,1,0,0,0,5476,5477,
        3,652,326,0,5477,615,1,0,0,0,5478,5479,5,120,0,0,5479,5480,5,342,
        0,0,5480,617,1,0,0,0,5481,5483,5,2,0,0,5482,5484,3,620,310,0,5483,
        5482,1,0,0,0,5483,5484,1,0,0,0,5484,5485,1,0,0,0,5485,5486,5,3,0,
        0,5486,619,1,0,0,0,5487,5492,3,630,315,0,5488,5489,5,6,0,0,5489,
        5491,3,630,315,0,5490,5488,1,0,0,0,5491,5494,1,0,0,0,5492,5490,1,
        0,0,0,5492,5493,1,0,0,0,5493,621,1,0,0,0,5494,5492,1,0,0,0,5495,
        5500,3,624,312,0,5496,5497,5,6,0,0,5497,5499,3,624,312,0,5498,5496,
        1,0,0,0,5499,5502,1,0,0,0,5500,5498,1,0,0,0,5500,5501,1,0,0,0,5501,
        623,1,0,0,0,5502,5500,1,0,0,0,5503,5504,3,1388,694,0,5504,5505,3,
        618,309,0,5505,5512,1,0,0,0,5506,5512,3,1428,714,0,5507,5509,3,1414,
        707,0,5508,5510,3,1324,662,0,5509,5508,1,0,0,0,5509,5510,1,0,0,0,
        5510,5512,1,0,0,0,5511,5503,1,0,0,0,5511,5506,1,0,0,0,5511,5507,
        1,0,0,0,5512,625,1,0,0,0,5513,5515,5,2,0,0,5514,5516,3,628,314,0,
        5515,5514,1,0,0,0,5515,5516,1,0,0,0,5516,5517,1,0,0,0,5517,5518,
        5,3,0,0,5518,627,1,0,0,0,5519,5524,3,640,320,0,5520,5521,5,6,0,0,
        5521,5523,3,640,320,0,5522,5520,1,0,0,0,5523,5526,1,0,0,0,5524,5522,
        1,0,0,0,5524,5525,1,0,0,0,5525,629,1,0,0,0,5526,5524,1,0,0,0,5527,
        5529,3,632,316,0,5528,5530,3,634,317,0,5529,5528,1,0,0,0,5529,5530,
        1,0,0,0,5530,5531,1,0,0,0,5531,5532,3,638,319,0,5532,5541,1,0,0,
        0,5533,5535,3,634,317,0,5534,5536,3,632,316,0,5535,5534,1,0,0,0,
        5535,5536,1,0,0,0,5536,5537,1,0,0,0,5537,5538,3,638,319,0,5538,5541,
        1,0,0,0,5539,5541,3,638,319,0,5540,5527,1,0,0,0,5540,5533,1,0,0,
        0,5540,5539,1,0,0,0,5541,631,1,0,0,0,5542,5544,5,106,0,0,5543,5545,
        5,491,0,0,5544,5543,1,0,0,0,5544,5545,1,0,0,0,5545,5550,1,0,0,0,
        5546,5550,5,491,0,0,5547,5550,5,431,0,0,5548,5550,5,139,0,0,5549,
        5542,1,0,0,0,5549,5546,1,0,0,0,5549,5547,1,0,0,0,5549,5548,1,0,0,
        0,5550,633,1,0,0,0,5551,5552,3,1416,708,0,5552,635,1,0,0,0,5553,
        5554,3,638,319,0,5554,637,1,0,0,0,5555,5565,3,1116,558,0,5556,5558,
        5,446,0,0,5557,5556,1,0,0,0,5557,5558,1,0,0,0,5558,5559,1,0,0,0,
        5559,5560,3,1416,708,0,5560,5561,3,522,261,0,5561,5562,5,27,0,0,
        5562,5563,5,391,0,0,5563,5565,1,0,0,0,5564,5555,1,0,0,0,5564,5557,
        1,0,0,0,5565,639,1,0,0,0,5566,5569,3,630,315,0,5567,5568,7,28,0,
        0,5568,5570,3,1162,581,0,5569,5567,1,0,0,0,5569,5570,1,0,0,0,5570,
        641,1,0,0,0,5571,5572,3,630,315,0,5572,643,1,0,0,0,5573,5584,5,2,
        0,0,5574,5585,5,9,0,0,5575,5585,3,646,323,0,5576,5577,5,121,0,0,
        5577,5578,5,185,0,0,5578,5585,3,646,323,0,5579,5580,3,646,323,0,
        5580,5581,5,121,0,0,5581,5582,5,185,0,0,5582,5583,3,646,323,0,5583,
        5585,1,0,0,0,5584,5574,1,0,0,0,5584,5575,1,0,0,0,5584,5576,1,0,0,
        0,5584,5579,1,0,0,0,5585,5586,1,0,0,0,5586,5587,5,3,0,0,5587,645,
        1,0,0,0,5588,5593,3,642,321,0,5589,5590,5,6,0,0,5590,5592,3,642,
        321,0,5591,5589,1,0,0,0,5592,5595,1,0,0,0,5593,5591,1,0,0,0,5593,
        5594,1,0,0,0,5594,647,1,0,0,0,5595,5593,1,0,0,0,5596,5597,3,1388,
        694,0,5597,5598,3,644,322,0,5598,649,1,0,0,0,5599,5604,3,648,324,
        0,5600,5601,5,6,0,0,5601,5603,3,648,324,0,5602,5600,1,0,0,0,5603,
        5606,1,0,0,0,5604,5602,1,0,0,0,5604,5605,1,0,0,0,5605,651,1,0,0,
        0,5606,5604,1,0,0,0,5607,5609,3,656,328,0,5608,5607,1,0,0,0,5609,
        5610,1,0,0,0,5610,5608,1,0,0,0,5610,5611,1,0,0,0,5611,5612,1,0,0,
        0,5612,5613,6,326,-1,0,5613,653,1,0,0,0,5614,5615,5,187,0,0,5615,
        5616,5,118,0,0,5616,5617,5,116,0,0,5617,5650,5,496,0,0,5618,5619,
        5,347,0,0,5619,5620,5,116,0,0,5620,5621,5,118,0,0,5621,5622,5,116,
        0,0,5622,5650,5,496,0,0,5623,5650,5,377,0,0,5624,5650,5,260,0,0,
        5625,5650,5,369,0,0,5626,5650,5,408,0,0,5627,5628,5,243,0,0,5628,
        5629,5,358,0,0,5629,5650,5,219,0,0,5630,5631,5,243,0,0,5631,5632,
        5,358,0,0,5632,5650,5,272,0,0,5633,5634,5,358,0,0,5634,5650,5,219,
        0,0,5635,5636,5,358,0,0,5636,5650,5,272,0,0,5637,5650,5,279,0,0,
        5638,5639,5,115,0,0,5639,5650,5,279,0,0,5640,5641,5,208,0,0,5641,
        5650,3,288,144,0,5642,5643,5,351,0,0,5643,5650,3,288,144,0,5644,
        5645,5,497,0,0,5645,5650,3,520,260,0,5646,5650,3,78,39,0,5647,5648,
        5,498,0,0,5648,5650,3,1414,707,0,5649,5614,1,0,0,0,5649,5618,1,0,
        0,0,5649,5623,1,0,0,0,5649,5624,1,0,0,0,5649,5625,1,0,0,0,5649,5626,
        1,0,0,0,5649,5627,1,0,0,0,5649,5630,1,0,0,0,5649,5633,1,0,0,0,5649,
        5635,1,0,0,0,5649,5637,1,0,0,0,5649,5638,1,0,0,0,5649,5640,1,0,0,
        0,5649,5642,1,0,0,0,5649,5644,1,0,0,0,5649,5646,1,0,0,0,5649,5647,
        1,0,0,0,5650,655,1,0,0,0,5651,5652,5,74,0,0,5652,5660,3,658,329,
        0,5653,5654,5,276,0,0,5654,5660,3,68,34,0,5655,5656,5,481,0,0,5656,
        5660,3,660,330,0,5657,5660,5,142,0,0,5658,5660,3,654,327,0,5659,
        5651,1,0,0,0,5659,5653,1,0,0,0,5659,5655,1,0,0,0,5659,5657,1,0,0,
        0,5659,5658,1,0,0,0,5660,657,1,0,0,0,5661,5667,3,1400,700,0,5662,
        5663,3,1400,700,0,5663,5664,5,6,0,0,5664,5665,3,1400,700,0,5665,
        5667,1,0,0,0,5666,5661,1,0,0,0,5666,5662,1,0,0,0,5667,659,1,0,0,
        0,5668,5669,5,100,0,0,5669,5670,5,391,0,0,5670,5677,3,1116,558,0,
        5671,5672,5,6,0,0,5672,5673,5,100,0,0,5673,5674,5,391,0,0,5674,5676,
        3,1116,558,0,5675,5671,1,0,0,0,5676,5679,1,0,0,0,5677,5675,1,0,0,
        0,5677,5678,1,0,0,0,5678,661,1,0,0,0,5679,5677,1,0,0,0,5680,5681,
        5,143,0,0,5681,5682,3,456,228,0,5682,663,1,0,0,0,5683,5684,3,634,
        317,0,5684,5685,3,638,319,0,5685,665,1,0,0,0,5686,5691,3,664,332,
        0,5687,5688,5,6,0,0,5688,5690,3,664,332,0,5689,5687,1,0,0,0,5690,
        5693,1,0,0,0,5691,5689,1,0,0,0,5691,5692,1,0,0,0,5692,667,1,0,0,
        0,5693,5691,1,0,0,0,5694,5695,5,176,0,0,5695,5696,7,29,0,0,5696,
        5697,3,624,312,0,5697,5699,3,670,335,0,5698,5700,3,672,336,0,5699,
        5698,1,0,0,0,5699,5700,1,0,0,0,5700,669,1,0,0,0,5701,5703,3,654,
        327,0,5702,5701,1,0,0,0,5703,5704,1,0,0,0,5704,5702,1,0,0,0,5704,
        5705,1,0,0,0,5705,671,1,0,0,0,5706,5707,5,346,0,0,5707,673,1,0,0,
        0,5708,5709,5,229,0,0,5709,5710,5,249,0,0,5710,5712,3,622,311,0,
        5711,5713,3,104,52,0,5712,5711,1,0,0,0,5712,5713,1,0,0,0,5713,5751,
        1,0,0,0,5714,5715,5,229,0,0,5715,5716,5,249,0,0,5716,5717,5,258,
        0,0,5717,5718,5,427,0,0,5718,5720,3,622,311,0,5719,5721,3,104,52,
        0,5720,5719,1,0,0,0,5720,5721,1,0,0,0,5721,5751,1,0,0,0,5722,5723,
        5,229,0,0,5723,5724,5,327,0,0,5724,5726,3,622,311,0,5725,5727,3,
        104,52,0,5726,5725,1,0,0,0,5726,5727,1,0,0,0,5727,5751,1,0,0,0,5728,
        5729,5,229,0,0,5729,5730,5,327,0,0,5730,5731,5,258,0,0,5731,5732,
        5,427,0,0,5732,5734,3,622,311,0,5733,5735,3,104,52,0,5734,5733,1,
        0,0,0,5734,5735,1,0,0,0,5735,5751,1,0,0,0,5736,5737,5,229,0,0,5737,
        5738,5,480,0,0,5738,5740,3,622,311,0,5739,5741,3,104,52,0,5740,5739,
        1,0,0,0,5740,5741,1,0,0,0,5741,5751,1,0,0,0,5742,5743,5,229,0,0,
        5743,5744,5,480,0,0,5744,5745,5,258,0,0,5745,5746,5,427,0,0,5746,
        5748,3,622,311,0,5747,5749,3,104,52,0,5748,5747,1,0,0,0,5748,5749,
        1,0,0,0,5749,5751,1,0,0,0,5750,5708,1,0,0,0,5750,5714,1,0,0,0,5750,
        5722,1,0,0,0,5750,5728,1,0,0,0,5750,5736,1,0,0,0,5750,5742,1,0,0,
        0,5751,675,1,0,0,0,5752,5753,5,229,0,0,5753,5754,5,174,0,0,5754,
        5756,3,650,325,0,5755,5757,3,104,52,0,5756,5755,1,0,0,0,5756,5757,
        1,0,0,0,5757,5767,1,0,0,0,5758,5759,5,229,0,0,5759,5760,5,174,0,
        0,5760,5761,5,258,0,0,5761,5762,5,427,0,0,5762,5764,3,650,325,0,
        5763,5765,3,104,52,0,5764,5763,1,0,0,0,5764,5765,1,0,0,0,5765,5767,
        1,0,0,0,5766,5752,1,0,0,0,5766,5758,1,0,0,0,5767,677,1,0,0,0,5768,
        5769,5,229,0,0,5769,5770,5,309,0,0,5770,5772,3,684,342,0,5771,5773,
        3,104,52,0,5772,5771,1,0,0,0,5772,5773,1,0,0,0,5773,5783,1,0,0,0,
        5774,5775,5,229,0,0,5775,5776,5,309,0,0,5776,5777,5,258,0,0,5777,
        5778,5,427,0,0,5778,5780,3,684,342,0,5779,5781,3,104,52,0,5780,5779,
        1,0,0,0,5780,5781,1,0,0,0,5781,5783,1,0,0,0,5782,5768,1,0,0,0,5782,
        5774,1,0,0,0,5783,679,1,0,0,0,5784,5785,5,2,0,0,5785,5786,3,1116,
        558,0,5786,5787,5,3,0,0,5787,5807,1,0,0,0,5788,5789,5,2,0,0,5789,
        5790,3,1116,558,0,5790,5791,5,6,0,0,5791,5792,3,1116,558,0,5792,
        5793,5,3,0,0,5793,5807,1,0,0,0,5794,5795,5,2,0,0,5795,5796,5,438,
        0,0,5796,5797,5,6,0,0,5797,5798,3,1116,558,0,5798,5799,5,3,0,0,5799,
        5807,1,0,0,0,5800,5801,5,2,0,0,5801,5802,3,1116,558,0,5802,5803,
        5,6,0,0,5803,5804,5,438,0,0,5804,5805,5,3,0,0,5805,5807,1,0,0,0,
        5806,5784,1,0,0,0,5806,5788,1,0,0,0,5806,5794,1,0,0,0,5806,5800,
        1,0,0,0,5807,681,1,0,0,0,5808,5809,3,1414,707,0,5809,5810,5,11,0,
        0,5810,5812,1,0,0,0,5811,5808,1,0,0,0,5812,5815,1,0,0,0,5813,5811,
        1,0,0,0,5813,5814,1,0,0,0,5814,5816,1,0,0,0,5815,5813,1,0,0,0,5816,
        5817,3,1270,635,0,5817,683,1,0,0,0,5818,5823,3,686,343,0,5819,5820,
        5,6,0,0,5820,5822,3,686,343,0,5821,5819,1,0,0,0,5822,5825,1,0,0,
        0,5823,5821,1,0,0,0,5823,5824,1,0,0,0,5824,685,1,0,0,0,5825,5823,
        1,0,0,0,5826,5827,3,682,341,0,5827,5828,3,680,340,0,5828,687,1,0,
        0,0,5829,5830,5,95,0,0,5830,5831,3,690,345,0,5831,689,1,0,0,0,5832,
        5834,3,692,346,0,5833,5832,1,0,0,0,5834,5835,1,0,0,0,5835,5833,1,
        0,0,0,5835,5836,1,0,0,0,5836,691,1,0,0,0,5837,5841,3,1400,700,0,
        5838,5839,5,276,0,0,5839,5841,3,68,34,0,5840,5837,1,0,0,0,5840,5838,
        1,0,0,0,5841,693,1,0,0,0,5842,5843,5,84,0,0,5843,5844,5,79,0,0,5844,
        5845,5,2,0,0,5845,5846,3,1116,558,0,5846,5847,5,74,0,0,5847,5848,
        3,1116,558,0,5848,5849,5,3,0,0,5849,5850,5,143,0,0,5850,5851,5,249,
        0,0,5851,5853,3,624,312,0,5852,5854,3,696,348,0,5853,5852,1,0,0,
        0,5853,5854,1,0,0,0,5854,5880,1,0,0,0,5855,5856,5,84,0,0,5856,5857,
        5,79,0,0,5857,5858,5,2,0,0,5858,5859,3,1116,558,0,5859,5860,5,74,
        0,0,5860,5861,3,1116,558,0,5861,5862,5,3,0,0,5862,5863,5,410,0,0,
        5863,5865,5,249,0,0,5864,5866,3,696,348,0,5865,5864,1,0,0,0,5865,
        5866,1,0,0,0,5866,5880,1,0,0,0,5867,5868,5,84,0,0,5868,5869,5,79,
        0,0,5869,5870,5,2,0,0,5870,5871,3,1116,558,0,5871,5872,5,74,0,0,
        5872,5873,3,1116,558,0,5873,5874,5,3,0,0,5874,5875,5,143,0,0,5875,
        5877,5,431,0,0,5876,5878,3,696,348,0,5877,5876,1,0,0,0,5877,5878,
        1,0,0,0,5878,5880,1,0,0,0,5879,5842,1,0,0,0,5879,5855,1,0,0,0,5879,
        5867,1,0,0,0,5880,695,1,0,0,0,5881,5882,5,74,0,0,5882,5886,5,261,
        0,0,5883,5884,5,74,0,0,5884,5886,5,179,0,0,5885,5881,1,0,0,0,5885,
        5883,1,0,0,0,5886,697,1,0,0,0,5887,5888,5,229,0,0,5888,5890,5,79,
        0,0,5889,5891,3,700,350,0,5890,5889,1,0,0,0,5890,5891,1,0,0,0,5891,
        5892,1,0,0,0,5892,5893,5,2,0,0,5893,5894,3,1116,558,0,5894,5895,
        5,74,0,0,5895,5896,3,1116,558,0,5896,5898,5,3,0,0,5897,5899,3,104,
        52,0,5898,5897,1,0,0,0,5898,5899,1,0,0,0,5899,699,1,0,0,0,5900,5901,
        5,258,0,0,5901,5902,5,427,0,0,5902,701,1,0,0,0,5903,5905,5,84,0,
        0,5904,5906,3,616,308,0,5905,5904,1,0,0,0,5905,5906,1,0,0,0,5906,
        5907,1,0,0,0,5907,5908,5,481,0,0,5908,5909,5,100,0,0,5909,5910,3,
        1116,558,0,5910,5911,5,276,0,0,5911,5912,3,1382,691,0,5912,5913,
        5,2,0,0,5913,5914,3,704,352,0,5914,5915,5,3,0,0,5915,703,1,0,0,0,
        5916,5917,5,102,0,0,5917,5918,5,499,0,0,5918,5919,5,143,0,0,5919,
        5920,5,249,0,0,5920,5921,3,624,312,0,5921,5922,5,6,0,0,5922,5923,
        5,132,0,0,5923,5924,5,499,0,0,5924,5925,5,143,0,0,5925,5926,5,249,
        0,0,5926,5927,3,624,312,0,5927,5951,1,0,0,0,5928,5929,5,132,0,0,
        5929,5930,5,499,0,0,5930,5931,5,143,0,0,5931,5932,5,249,0,0,5932,
        5933,3,624,312,0,5933,5934,5,6,0,0,5934,5935,5,102,0,0,5935,5936,
        5,499,0,0,5936,5937,5,143,0,0,5937,5938,5,249,0,0,5938,5939,3,624,
        312,0,5939,5951,1,0,0,0,5940,5941,5,102,0,0,5941,5942,5,499,0,0,
        5942,5943,5,143,0,0,5943,5944,5,249,0,0,5944,5951,3,624,312,0,5945,
        5946,5,132,0,0,5946,5947,5,499,0,0,5947,5948,5,143,0,0,5948,5949,
        5,249,0,0,5949,5951,3,624,312,0,5950,5916,1,0,0,0,5950,5928,1,0,
        0,0,5950,5940,1,0,0,0,5950,5945,1,0,0,0,5951,705,1,0,0,0,5952,5953,
        5,229,0,0,5953,5955,5,481,0,0,5954,5956,3,700,350,0,5955,5954,1,
        0,0,0,5955,5956,1,0,0,0,5956,5957,1,0,0,0,5957,5958,5,100,0,0,5958,
        5959,3,1116,558,0,5959,5960,5,276,0,0,5960,5962,3,1382,691,0,5961,
        5963,3,104,52,0,5962,5961,1,0,0,0,5962,5963,1,0,0,0,5963,707,1,0,
        0,0,5964,5966,5,337,0,0,5965,5967,3,714,357,0,5966,5965,1,0,0,0,
        5966,5967,1,0,0,0,5967,5968,1,0,0,0,5968,5970,3,710,355,0,5969,5971,
        3,590,295,0,5970,5969,1,0,0,0,5970,5971,1,0,0,0,5971,5972,1,0,0,
        0,5972,5973,3,1378,689,0,5973,5995,1,0,0,0,5974,5976,5,337,0,0,5975,
        5977,3,714,357,0,5976,5975,1,0,0,0,5976,5977,1,0,0,0,5977,5978,1,
        0,0,0,5978,5980,5,354,0,0,5979,5981,3,590,295,0,5980,5979,1,0,0,
        0,5980,5981,1,0,0,0,5981,5982,1,0,0,0,5982,5995,3,1382,691,0,5983,
        5985,5,337,0,0,5984,5986,3,714,357,0,5985,5984,1,0,0,0,5985,5986,
        1,0,0,0,5986,5987,1,0,0,0,5987,5989,3,712,356,0,5988,5990,3,590,
        295,0,5989,5988,1,0,0,0,5989,5990,1,0,0,0,5990,5992,1,0,0,0,5991,
        5993,3,588,294,0,5992,5991,1,0,0,0,5992,5993,1,0,0,0,5993,5995,1,
        0,0,0,5994,5964,1,0,0,0,5994,5974,1,0,0,0,5994,5983,1,0,0,0,5995,
        709,1,0,0,0,5996,5997,7,19,0,0,5997,711,1,0,0,0,5998,5999,7,30,0,
        0,5999,713,1,0,0,0,6000,6001,5,2,0,0,6001,6002,3,848,424,0,6002,
        6003,5,3,0,0,6003,715,1,0,0,0,6004,6005,5,176,0,0,6005,6006,5,382,
        0,0,6006,6007,3,1382,691,0,6007,6008,5,364,0,0,6008,6009,3,112,56,
        0,6009,6017,1,0,0,0,6010,6011,5,176,0,0,6011,6012,5,382,0,0,6012,
        6013,3,1382,691,0,6013,6014,5,344,0,0,6014,6015,3,112,56,0,6015,
        6017,1,0,0,0,6016,6004,1,0,0,0,6016,6010,1,0,0,0,6017,717,1,0,0,
        0,6018,6019,5,176,0,0,6019,6020,5,174,0,0,6020,6021,3,648,324,0,
        6021,6022,5,340,0,0,6022,6023,5,132,0,0,6023,6024,3,1382,691,0,6024,
        6506,1,0,0,0,6025,6026,5,176,0,0,6026,6027,5,146,0,0,6027,6028,3,
        520,260,0,6028,6029,5,340,0,0,6029,6030,5,132,0,0,6030,6031,3,1382,
        691,0,6031,6506,1,0,0,0,6032,6033,5,176,0,0,6033,6034,5,206,0,0,
        6034,6035,3,520,260,0,6035,6036,5,340,0,0,6036,6037,5,132,0,0,6037,
        6038,3,1382,691,0,6038,6506,1,0,0,0,6039,6040,5,176,0,0,6040,6041,
        5,213,0,0,6041,6042,3,1382,691,0,6042,6043,5,340,0,0,6043,6044,5,
        132,0,0,6044,6045,3,1382,691,0,6045,6506,1,0,0,0,6046,6047,5,176,
        0,0,6047,6048,5,227,0,0,6048,6049,3,520,260,0,6049,6050,5,340,0,
        0,6050,6051,5,132,0,0,6051,6052,3,1382,691,0,6052,6506,1,0,0,0,6053,
        6054,5,176,0,0,6054,6055,5,227,0,0,6055,6056,3,520,260,0,6056,6057,
        5,340,0,0,6057,6058,5,83,0,0,6058,6059,3,1382,691,0,6059,6060,5,
        132,0,0,6060,6061,3,1382,691,0,6061,6506,1,0,0,0,6062,6063,5,176,
        0,0,6063,6064,5,101,0,0,6064,6065,5,212,0,0,6065,6066,5,412,0,0,
        6066,6067,3,1382,691,0,6067,6068,5,340,0,0,6068,6069,5,132,0,0,6069,
        6070,3,1382,691,0,6070,6506,1,0,0,0,6071,6072,5,176,0,0,6072,6073,
        5,249,0,0,6073,6074,3,624,312,0,6074,6075,5,340,0,0,6075,6076,5,
        132,0,0,6076,6077,3,1382,691,0,6077,6506,1,0,0,0,6078,6079,5,176,
        0,0,6079,6080,5,104,0,0,6080,6081,3,1408,704,0,6081,6082,5,340,0,
        0,6082,6083,5,132,0,0,6083,6084,3,1408,704,0,6084,6506,1,0,0,0,6085,
        6087,5,176,0,0,6086,6088,3,304,152,0,6087,6086,1,0,0,0,6087,6088,
        1,0,0,0,6088,6089,1,0,0,0,6089,6090,5,276,0,0,6090,6091,3,1382,691,
        0,6091,6092,5,340,0,0,6092,6093,5,132,0,0,6093,6094,3,1382,691,0,
        6094,6506,1,0,0,0,6095,6096,5,176,0,0,6096,6097,5,309,0,0,6097,6098,
        5,194,0,0,6098,6099,3,520,260,0,6099,6100,5,138,0,0,6100,6101,3,
        1382,691,0,6101,6102,5,340,0,0,6102,6103,5,132,0,0,6103,6104,3,1382,
        691,0,6104,6506,1,0,0,0,6105,6106,5,176,0,0,6106,6107,5,309,0,0,
        6107,6108,5,244,0,0,6108,6109,3,520,260,0,6109,6110,5,138,0,0,6110,
        6111,3,1382,691,0,6111,6112,5,340,0,0,6112,6113,5,132,0,0,6113,6114,
        3,1382,691,0,6114,6506,1,0,0,0,6115,6116,5,176,0,0,6116,6117,5,483,
        0,0,6117,6118,3,1382,691,0,6118,6119,5,118,0,0,6119,6120,3,1378,
        689,0,6120,6121,5,340,0,0,6121,6122,5,132,0,0,6122,6123,3,1382,691,
        0,6123,6506,1,0,0,0,6124,6125,5,176,0,0,6125,6126,5,483,0,0,6126,
        6127,5,258,0,0,6127,6128,5,427,0,0,6128,6129,3,1382,691,0,6129,6130,
        5,118,0,0,6130,6131,3,1378,689,0,6131,6132,5,340,0,0,6132,6133,5,
        132,0,0,6133,6134,3,1382,691,0,6134,6506,1,0,0,0,6135,6136,5,176,
        0,0,6136,6137,5,327,0,0,6137,6138,3,624,312,0,6138,6139,5,340,0,
        0,6139,6140,5,132,0,0,6140,6141,3,1382,691,0,6141,6506,1,0,0,0,6142,
        6143,5,176,0,0,6143,6144,5,490,0,0,6144,6145,3,1382,691,0,6145,6146,
        5,340,0,0,6146,6147,5,132,0,0,6147,6148,3,1382,691,0,6148,6506,1,
        0,0,0,6149,6150,5,176,0,0,6150,6151,5,480,0,0,6151,6152,3,624,312,
        0,6152,6153,5,340,0,0,6153,6154,5,132,0,0,6154,6155,3,1382,691,0,
        6155,6506,1,0,0,0,6156,6157,5,176,0,0,6157,6158,5,354,0,0,6158,6159,
        3,1382,691,0,6159,6160,5,340,0,0,6160,6161,5,132,0,0,6161,6162,3,
        1382,691,0,6162,6506,1,0,0,0,6163,6164,5,176,0,0,6164,6165,5,362,
        0,0,6165,6166,3,1382,691,0,6166,6167,5,340,0,0,6167,6168,5,132,0,
        0,6168,6169,3,1382,691,0,6169,6506,1,0,0,0,6170,6171,5,176,0,0,6171,
        6172,5,489,0,0,6172,6173,3,1382,691,0,6173,6174,5,340,0,0,6174,6175,
        5,132,0,0,6175,6176,3,1382,691,0,6176,6506,1,0,0,0,6177,6178,5,176,
        0,0,6178,6179,5,130,0,0,6179,6180,3,1072,536,0,6180,6181,5,340,0,
        0,6181,6182,5,132,0,0,6182,6183,3,1382,691,0,6183,6506,1,0,0,0,6184,
        6185,5,176,0,0,6185,6186,5,130,0,0,6186,6187,5,258,0,0,6187,6188,
        5,427,0,0,6188,6189,3,1072,536,0,6189,6190,5,340,0,0,6190,6191,5,
        132,0,0,6191,6192,3,1382,691,0,6192,6506,1,0,0,0,6193,6194,5,176,
        0,0,6194,6195,5,359,0,0,6195,6196,3,1378,689,0,6196,6197,5,340,0,
        0,6197,6198,5,132,0,0,6198,6199,3,1382,691,0,6199,6506,1,0,0,0,6200,
        6201,5,176,0,0,6201,6202,5,359,0,0,6202,6203,5,258,0,0,6203,6204,
        5,427,0,0,6204,6205,3,1378,689,0,6205,6206,5,340,0,0,6206,6207,5,
        132,0,0,6207,6208,3,1382,691,0,6208,6506,1,0,0,0,6209,6210,5,176,
        0,0,6210,6211,5,407,0,0,6211,6212,3,1378,689,0,6212,6213,5,340,0,
        0,6213,6214,5,132,0,0,6214,6215,3,1382,691,0,6215,6506,1,0,0,0,6216,
        6217,5,176,0,0,6217,6218,5,407,0,0,6218,6219,5,258,0,0,6219,6220,
        5,427,0,0,6220,6221,3,1378,689,0,6221,6222,5,340,0,0,6222,6223,5,
        132,0,0,6223,6224,3,1382,691,0,6224,6506,1,0,0,0,6225,6226,5,176,
        0,0,6226,6227,5,289,0,0,6227,6228,5,407,0,0,6228,6229,3,1378,689,
        0,6229,6230,5,340,0,0,6230,6231,5,132,0,0,6231,6232,3,1382,691,0,
        6232,6506,1,0,0,0,6233,6234,5,176,0,0,6234,6235,5,289,0,0,6235,6236,
        5,407,0,0,6236,6237,5,258,0,0,6237,6238,5,427,0,0,6238,6239,3,1378,
        689,0,6239,6240,5,340,0,0,6240,6241,5,132,0,0,6241,6242,3,1382,691,
        0,6242,6506,1,0,0,0,6243,6244,5,176,0,0,6244,6245,5,264,0,0,6245,
        6246,3,1378,689,0,6246,6247,5,340,0,0,6247,6248,5,132,0,0,6248,6249,
        3,1382,691,0,6249,6506,1,0,0,0,6250,6251,5,176,0,0,6251,6252,5,264,
        0,0,6252,6253,5,258,0,0,6253,6254,5,427,0,0,6254,6255,3,1378,689,
        0,6255,6256,5,340,0,0,6256,6257,5,132,0,0,6257,6258,3,1382,691,0,
        6258,6506,1,0,0,0,6259,6260,5,176,0,0,6260,6261,5,101,0,0,6261,6262,
        5,130,0,0,6262,6263,3,1072,536,0,6263,6264,5,340,0,0,6264,6265,5,
        132,0,0,6265,6266,3,1382,691,0,6266,6506,1,0,0,0,6267,6268,5,176,
        0,0,6268,6269,5,101,0,0,6269,6270,5,130,0,0,6270,6271,5,258,0,0,
        6271,6272,5,427,0,0,6272,6273,3,1072,536,0,6273,6274,5,340,0,0,6274,
        6275,5,132,0,0,6275,6276,3,1382,691,0,6276,6506,1,0,0,0,6277,6278,
        5,176,0,0,6278,6279,5,130,0,0,6279,6280,3,1072,536,0,6280,6282,5,
        340,0,0,6281,6283,3,720,360,0,6282,6281,1,0,0,0,6282,6283,1,0,0,
        0,6283,6284,1,0,0,0,6284,6285,3,1382,691,0,6285,6286,5,132,0,0,6286,
        6287,3,1382,691,0,6287,6506,1,0,0,0,6288,6289,5,176,0,0,6289,6290,
        5,130,0,0,6290,6291,5,258,0,0,6291,6292,5,427,0,0,6292,6293,3,1072,
        536,0,6293,6295,5,340,0,0,6294,6296,3,720,360,0,6295,6294,1,0,0,
        0,6295,6296,1,0,0,0,6296,6297,1,0,0,0,6297,6298,3,1382,691,0,6298,
        6299,5,132,0,0,6299,6300,3,1382,691,0,6300,6506,1,0,0,0,6301,6302,
        5,176,0,0,6302,6303,5,407,0,0,6303,6304,3,1378,689,0,6304,6306,5,
        340,0,0,6305,6307,3,720,360,0,6306,6305,1,0,0,0,6306,6307,1,0,0,
        0,6307,6308,1,0,0,0,6308,6309,3,1382,691,0,6309,6310,5,132,0,0,6310,
        6311,3,1382,691,0,6311,6506,1,0,0,0,6312,6313,5,176,0,0,6313,6314,
        5,407,0,0,6314,6315,5,258,0,0,6315,6316,5,427,0,0,6316,6317,3,1378,
        689,0,6317,6319,5,340,0,0,6318,6320,3,720,360,0,6319,6318,1,0,0,
        0,6319,6320,1,0,0,0,6320,6321,1,0,0,0,6321,6322,3,1382,691,0,6322,
        6323,5,132,0,0,6323,6324,3,1382,691,0,6324,6506,1,0,0,0,6325,6326,
        5,176,0,0,6326,6327,5,289,0,0,6327,6328,5,407,0,0,6328,6329,3,1378,
        689,0,6329,6331,5,340,0,0,6330,6332,3,720,360,0,6331,6330,1,0,0,
        0,6331,6332,1,0,0,0,6332,6333,1,0,0,0,6333,6334,3,1382,691,0,6334,
        6335,5,132,0,0,6335,6336,3,1382,691,0,6336,6506,1,0,0,0,6337,6338,
        5,176,0,0,6338,6339,5,289,0,0,6339,6340,5,407,0,0,6340,6341,5,258,
        0,0,6341,6342,5,427,0,0,6342,6343,3,1378,689,0,6343,6345,5,340,0,
        0,6344,6346,3,720,360,0,6345,6344,1,0,0,0,6345,6346,1,0,0,0,6346,
        6347,1,0,0,0,6347,6348,3,1382,691,0,6348,6349,5,132,0,0,6349,6350,
        3,1382,691,0,6350,6506,1,0,0,0,6351,6352,5,176,0,0,6352,6353,5,130,
        0,0,6353,6354,3,1072,536,0,6354,6355,5,340,0,0,6355,6356,5,83,0,
        0,6356,6357,3,1382,691,0,6357,6358,5,132,0,0,6358,6359,3,1382,691,
        0,6359,6506,1,0,0,0,6360,6361,5,176,0,0,6361,6362,5,130,0,0,6362,
        6363,5,258,0,0,6363,6364,5,427,0,0,6364,6365,3,1072,536,0,6365,6366,
        5,340,0,0,6366,6367,5,83,0,0,6367,6368,3,1382,691,0,6368,6369,5,
        132,0,0,6369,6370,3,1382,691,0,6370,6506,1,0,0,0,6371,6372,5,176,
        0,0,6372,6373,5,101,0,0,6373,6374,5,130,0,0,6374,6375,3,1072,536,
        0,6375,6377,5,340,0,0,6376,6378,3,720,360,0,6377,6376,1,0,0,0,6377,
        6378,1,0,0,0,6378,6379,1,0,0,0,6379,6380,3,1382,691,0,6380,6381,
        5,132,0,0,6381,6382,3,1382,691,0,6382,6506,1,0,0,0,6383,6384,5,176,
        0,0,6384,6385,5,101,0,0,6385,6386,5,130,0,0,6386,6387,5,258,0,0,
        6387,6388,5,427,0,0,6388,6389,3,1072,536,0,6389,6391,5,340,0,0,6390,
        6392,3,720,360,0,6391,6390,1,0,0,0,6391,6392,1,0,0,0,6392,6393,1,
        0,0,0,6393,6394,3,1382,691,0,6394,6395,5,132,0,0,6395,6396,3,1382,
        691,0,6396,6506,1,0,0,0,6397,6398,5,176,0,0,6398,6399,5,352,0,0,
        6399,6400,3,1382,691,0,6400,6401,5,118,0,0,6401,6402,3,1378,689,
        0,6402,6403,5,340,0,0,6403,6404,5,132,0,0,6404,6405,3,1382,691,0,
        6405,6506,1,0,0,0,6406,6407,5,176,0,0,6407,6408,5,388,0,0,6408,6409,
        3,1382,691,0,6409,6410,5,118,0,0,6410,6411,3,1378,689,0,6411,6412,
        5,340,0,0,6412,6413,5,132,0,0,6413,6414,3,1382,691,0,6414,6506,1,
        0,0,0,6415,6416,5,176,0,0,6416,6417,5,236,0,0,6417,6418,5,388,0,
        0,6418,6419,3,1382,691,0,6419,6420,5,340,0,0,6420,6421,5,132,0,0,
        6421,6422,3,1382,691,0,6422,6506,1,0,0,0,6423,6424,5,176,0,0,6424,
        6425,5,349,0,0,6425,6426,3,1408,704,0,6426,6427,5,340,0,0,6427,6428,
        5,132,0,0,6428,6429,3,1408,704,0,6429,6506,1,0,0,0,6430,6431,5,176,
        0,0,6431,6432,5,137,0,0,6432,6433,3,1408,704,0,6433,6434,5,340,0,
        0,6434,6435,5,132,0,0,6435,6436,3,1408,704,0,6436,6506,1,0,0,0,6437,
        6438,5,176,0,0,6438,6439,5,382,0,0,6439,6440,3,1382,691,0,6440,6441,
        5,340,0,0,6441,6442,5,132,0,0,6442,6443,3,1382,691,0,6443,6506,1,
        0,0,0,6444,6445,5,176,0,0,6445,6446,5,373,0,0,6446,6447,3,520,260,
        0,6447,6448,5,340,0,0,6448,6449,5,132,0,0,6449,6450,3,1382,691,0,
        6450,6506,1,0,0,0,6451,6452,5,176,0,0,6452,6453,5,386,0,0,6453,6454,
        5,356,0,0,6454,6455,5,314,0,0,6455,6456,3,520,260,0,6456,6457,5,
        340,0,0,6457,6458,5,132,0,0,6458,6459,3,1382,691,0,6459,6506,1,0,
        0,0,6460,6461,5,176,0,0,6461,6462,5,386,0,0,6462,6463,5,356,0,0,
        6463,6464,5,223,0,0,6464,6465,3,520,260,0,6465,6466,5,340,0,0,6466,
        6467,5,132,0,0,6467,6468,3,1382,691,0,6468,6506,1,0,0,0,6469,6470,
        5,176,0,0,6470,6471,5,386,0,0,6471,6472,5,356,0,0,6472,6473,5,384,
        0,0,6473,6474,3,520,260,0,6474,6475,5,340,0,0,6475,6476,5,132,0,
        0,6476,6477,3,1382,691,0,6477,6506,1,0,0,0,6478,6479,5,176,0,0,6479,
        6480,5,386,0,0,6480,6481,5,356,0,0,6481,6482,5,201,0,0,6482,6483,
        3,520,260,0,6483,6484,5,340,0,0,6484,6485,5,132,0,0,6485,6486,3,
        1382,691,0,6486,6506,1,0,0,0,6487,6488,5,176,0,0,6488,6489,5,391,
        0,0,6489,6490,3,520,260,0,6490,6491,5,340,0,0,6491,6492,5,132,0,
        0,6492,6493,3,1382,691,0,6493,6506,1,0,0,0,6494,6495,5,176,0,0,6495,
        6496,5,391,0,0,6496,6497,3,520,260,0,6497,6498,5,340,0,0,6498,6499,
        5,181,0,0,6499,6500,3,1382,691,0,6500,6501,5,132,0,0,6501,6503,3,
        1382,691,0,6502,6504,3,104,52,0,6503,6502,1,0,0,0,6503,6504,1,0,
        0,0,6504,6506,1,0,0,0,6505,6018,1,0,0,0,6505,6025,1,0,0,0,6505,6032,
        1,0,0,0,6505,6039,1,0,0,0,6505,6046,1,0,0,0,6505,6053,1,0,0,0,6505,
        6062,1,0,0,0,6505,6071,1,0,0,0,6505,6078,1,0,0,0,6505,6085,1,0,0,
        0,6505,6095,1,0,0,0,6505,6105,1,0,0,0,6505,6115,1,0,0,0,6505,6124,
        1,0,0,0,6505,6135,1,0,0,0,6505,6142,1,0,0,0,6505,6149,1,0,0,0,6505,
        6156,1,0,0,0,6505,6163,1,0,0,0,6505,6170,1,0,0,0,6505,6177,1,0,0,
        0,6505,6184,1,0,0,0,6505,6193,1,0,0,0,6505,6200,1,0,0,0,6505,6209,
        1,0,0,0,6505,6216,1,0,0,0,6505,6225,1,0,0,0,6505,6233,1,0,0,0,6505,
        6243,1,0,0,0,6505,6250,1,0,0,0,6505,6259,1,0,0,0,6505,6267,1,0,0,
        0,6505,6277,1,0,0,0,6505,6288,1,0,0,0,6505,6301,1,0,0,0,6505,6312,
        1,0,0,0,6505,6325,1,0,0,0,6505,6337,1,0,0,0,6505,6351,1,0,0,0,6505,
        6360,1,0,0,0,6505,6371,1,0,0,0,6505,6383,1,0,0,0,6505,6397,1,0,0,
        0,6505,6406,1,0,0,0,6505,6415,1,0,0,0,6505,6423,1,0,0,0,6505,6430,
        1,0,0,0,6505,6437,1,0,0,0,6505,6444,1,0,0,0,6505,6451,1,0,0,0,6505,
        6460,1,0,0,0,6505,6469,1,0,0,0,6505,6478,1,0,0,0,6505,6487,1,0,0,
        0,6505,6494,1,0,0,0,6506,719,1,0,0,0,6507,6508,5,82,0,0,6508,721,
        1,0,0,0,6509,6510,5,364,0,0,6510,6511,5,212,0,0,6511,723,1,0,0,0,
        6512,6513,5,176,0,0,6513,6514,5,249,0,0,6514,6516,3,624,312,0,6515,
        6517,3,726,363,0,6516,6515,1,0,0,0,6516,6517,1,0,0,0,6517,6518,1,
        0,0,0,6518,6519,5,500,0,0,6519,6520,5,118,0,0,6520,6521,5,242,0,
        0,6521,6522,3,1382,691,0,6522,6582,1,0,0,0,6523,6524,5,176,0,0,6524,
        6525,5,327,0,0,6525,6527,3,624,312,0,6526,6528,3,726,363,0,6527,
        6526,1,0,0,0,6527,6528,1,0,0,0,6528,6529,1,0,0,0,6529,6530,5,500,
        0,0,6530,6531,5,118,0,0,6531,6532,5,242,0,0,6532,6533,3,1382,691,
        0,6533,6582,1,0,0,0,6534,6535,5,176,0,0,6535,6536,5,480,0,0,6536,
        6538,3,624,312,0,6537,6539,3,726,363,0,6538,6537,1,0,0,0,6538,6539,
        1,0,0,0,6539,6540,1,0,0,0,6540,6541,5,500,0,0,6541,6542,5,118,0,
        0,6542,6543,5,242,0,0,6543,6544,3,1382,691,0,6544,6582,1,0,0,0,6545,
        6546,5,176,0,0,6546,6547,5,388,0,0,6547,6548,3,1382,691,0,6548,6549,
        5,118,0,0,6549,6551,3,1378,689,0,6550,6552,3,726,363,0,6551,6550,
        1,0,0,0,6551,6552,1,0,0,0,6552,6553,1,0,0,0,6553,6554,5,500,0,0,
        6554,6555,5,118,0,0,6555,6556,5,242,0,0,6556,6557,3,1382,691,0,6557,
        6582,1,0,0,0,6558,6559,5,176,0,0,6559,6560,5,289,0,0,6560,6561,5,
        407,0,0,6561,6563,3,1378,689,0,6562,6564,3,726,363,0,6563,6562,1,
        0,0,0,6563,6564,1,0,0,0,6564,6565,1,0,0,0,6565,6566,5,500,0,0,6566,
        6567,5,118,0,0,6567,6568,5,242,0,0,6568,6569,3,1382,691,0,6569,6582,
        1,0,0,0,6570,6571,5,176,0,0,6571,6572,5,264,0,0,6572,6574,3,1378,
        689,0,6573,6575,3,726,363,0,6574,6573,1,0,0,0,6574,6575,1,0,0,0,
        6575,6576,1,0,0,0,6576,6577,5,500,0,0,6577,6578,5,118,0,0,6578,6579,
        5,242,0,0,6579,6580,3,1382,691,0,6580,6582,1,0,0,0,6581,6512,1,0,
        0,0,6581,6523,1,0,0,0,6581,6534,1,0,0,0,6581,6545,1,0,0,0,6581,6558,
        1,0,0,0,6581,6570,1,0,0,0,6582,725,1,0,0,0,6583,6584,5,300,0,0,6584,
        727,1,0,0,0,6585,6586,5,176,0,0,6586,6587,5,174,0,0,6587,6588,3,
        648,324,0,6588,6589,5,364,0,0,6589,6590,5,354,0,0,6590,6591,3,1382,
        691,0,6591,6803,1,0,0,0,6592,6593,5,176,0,0,6593,6594,5,146,0,0,
        6594,6595,3,520,260,0,6595,6596,5,364,0,0,6596,6597,5,354,0,0,6597,
        6598,3,1382,691,0,6598,6803,1,0,0,0,6599,6600,5,176,0,0,6600,6601,
        5,206,0,0,6601,6602,3,520,260,0,6602,6603,5,364,0,0,6603,6604,5,
        354,0,0,6604,6605,3,1382,691,0,6605,6803,1,0,0,0,6606,6607,5,176,
        0,0,6607,6608,5,227,0,0,6608,6609,3,520,260,0,6609,6610,5,364,0,
        0,6610,6611,5,354,0,0,6611,6612,3,1382,691,0,6612,6803,1,0,0,0,6613,
        6614,5,176,0,0,6614,6615,5,242,0,0,6615,6616,3,1382,691,0,6616,6617,
        5,364,0,0,6617,6618,5,354,0,0,6618,6619,3,1382,691,0,6619,6803,1,
        0,0,0,6620,6621,5,176,0,0,6621,6622,5,249,0,0,6622,6623,3,624,312,
        0,6623,6624,5,364,0,0,6624,6625,5,354,0,0,6625,6626,3,1382,691,0,
        6626,6803,1,0,0,0,6627,6628,5,176,0,0,6628,6629,5,309,0,0,6629,6630,
        3,686,343,0,6630,6631,5,364,0,0,6631,6632,5,354,0,0,6632,6633,3,
        1382,691,0,6633,6803,1,0,0,0,6634,6635,5,176,0,0,6635,6636,5,309,
        0,0,6636,6637,5,194,0,0,6637,6638,3,520,260,0,6638,6639,5,138,0,
        0,6639,6640,3,1382,691,0,6640,6641,5,364,0,0,6641,6642,5,354,0,0,
        6642,6643,3,1382,691,0,6643,6803,1,0,0,0,6644,6645,5,176,0,0,6645,
        6646,5,309,0,0,6646,6647,5,244,0,0,6647,6648,3,520,260,0,6648,6649,
        5,138,0,0,6649,6650,3,1382,691,0,6650,6651,5,364,0,0,6651,6652,5,
        354,0,0,6652,6653,3,1382,691,0,6653,6803,1,0,0,0,6654,6655,5,176,
        0,0,6655,6656,5,327,0,0,6656,6657,3,624,312,0,6657,6658,5,364,0,
        0,6658,6659,5,354,0,0,6659,6660,3,1382,691,0,6660,6803,1,0,0,0,6661,
        6662,5,176,0,0,6662,6663,5,480,0,0,6663,6664,3,624,312,0,6664,6665,
        5,364,0,0,6665,6666,5,354,0,0,6666,6667,3,1382,691,0,6667,6803,1,
        0,0,0,6668,6669,5,176,0,0,6669,6670,5,130,0,0,6670,6671,3,1072,536,
        0,6671,6672,5,364,0,0,6672,6673,5,354,0,0,6673,6674,3,1382,691,0,
        6674,6803,1,0,0,0,6675,6676,5,176,0,0,6676,6677,5,130,0,0,6677,6678,
        5,258,0,0,6678,6679,5,427,0,0,6679,6680,3,1072,536,0,6680,6681,5,
        364,0,0,6681,6682,5,354,0,0,6682,6683,3,1382,691,0,6683,6803,1,0,
        0,0,6684,6685,5,176,0,0,6685,6686,5,373,0,0,6686,6687,3,520,260,
        0,6687,6688,5,364,0,0,6688,6689,5,354,0,0,6689,6690,3,1382,691,0,
        6690,6803,1,0,0,0,6691,6692,5,176,0,0,6692,6693,5,386,0,0,6693,6694,
        5,356,0,0,6694,6695,5,314,0,0,6695,6696,3,520,260,0,6696,6697,5,
        364,0,0,6697,6698,5,354,0,0,6698,6699,3,1382,691,0,6699,6803,1,0,
        0,0,6700,6701,5,176,0,0,6701,6702,5,386,0,0,6702,6703,5,356,0,0,
        6703,6704,5,223,0,0,6704,6705,3,520,260,0,6705,6706,5,364,0,0,6706,
        6707,5,354,0,0,6707,6708,3,1382,691,0,6708,6803,1,0,0,0,6709,6710,
        5,176,0,0,6710,6711,5,386,0,0,6711,6712,5,356,0,0,6712,6713,5,384,
        0,0,6713,6714,3,520,260,0,6714,6715,5,364,0,0,6715,6716,5,354,0,
        0,6716,6717,3,1382,691,0,6717,6803,1,0,0,0,6718,6719,5,176,0,0,6719,
        6720,5,386,0,0,6720,6721,5,356,0,0,6721,6722,5,201,0,0,6722,6723,
        3,520,260,0,6723,6724,5,364,0,0,6724,6725,5,354,0,0,6725,6726,3,
        1382,691,0,6726,6803,1,0,0,0,6727,6728,5,176,0,0,6728,6729,5,359,
        0,0,6729,6730,3,1378,689,0,6730,6731,5,364,0,0,6731,6732,5,354,0,
        0,6732,6733,3,1382,691,0,6733,6803,1,0,0,0,6734,6735,5,176,0,0,6735,
        6736,5,359,0,0,6736,6737,5,258,0,0,6737,6738,5,427,0,0,6738,6739,
        3,1378,689,0,6739,6740,5,364,0,0,6740,6741,5,354,0,0,6741,6742,3,
        1382,691,0,6742,6803,1,0,0,0,6743,6744,5,176,0,0,6744,6745,5,407,
        0,0,6745,6746,3,1378,689,0,6746,6747,5,364,0,0,6747,6748,5,354,0,
        0,6748,6749,3,1382,691,0,6749,6803,1,0,0,0,6750,6751,5,176,0,0,6751,
        6752,5,407,0,0,6752,6753,5,258,0,0,6753,6754,5,427,0,0,6754,6755,
        3,1378,689,0,6755,6756,5,364,0,0,6756,6757,5,354,0,0,6757,6758,3,
        1382,691,0,6758,6803,1,0,0,0,6759,6760,5,176,0,0,6760,6761,5,289,
        0,0,6761,6762,5,407,0,0,6762,6763,3,1378,689,0,6763,6764,5,364,0,
        0,6764,6765,5,354,0,0,6765,6766,3,1382,691,0,6766,6803,1,0,0,0,6767,
        6768,5,176,0,0,6768,6769,5,289,0,0,6769,6770,5,407,0,0,6770,6771,
        5,258,0,0,6771,6772,5,427,0,0,6772,6773,3,1378,689,0,6773,6774,5,
        364,0,0,6774,6775,5,354,0,0,6775,6776,3,1382,691,0,6776,6803,1,0,
        0,0,6777,6778,5,176,0,0,6778,6779,5,101,0,0,6779,6780,5,130,0,0,
        6780,6781,3,1072,536,0,6781,6782,5,364,0,0,6782,6783,5,354,0,0,6783,
        6784,3,1382,691,0,6784,6803,1,0,0,0,6785,6786,5,176,0,0,6786,6787,
        5,101,0,0,6787,6788,5,130,0,0,6788,6789,5,258,0,0,6789,6790,5,427,
        0,0,6790,6791,3,1072,536,0,6791,6792,5,364,0,0,6792,6793,5,354,0,
        0,6793,6794,3,1382,691,0,6794,6803,1,0,0,0,6795,6796,5,176,0,0,6796,
        6797,5,391,0,0,6797,6798,3,520,260,0,6798,6799,5,364,0,0,6799,6800,
        5,354,0,0,6800,6801,3,1382,691,0,6801,6803,1,0,0,0,6802,6585,1,0,
        0,0,6802,6592,1,0,0,0,6802,6599,1,0,0,0,6802,6606,1,0,0,0,6802,6613,
        1,0,0,0,6802,6620,1,0,0,0,6802,6627,1,0,0,0,6802,6634,1,0,0,0,6802,
        6644,1,0,0,0,6802,6654,1,0,0,0,6802,6661,1,0,0,0,6802,6668,1,0,0,
        0,6802,6675,1,0,0,0,6802,6684,1,0,0,0,6802,6691,1,0,0,0,6802,6700,
        1,0,0,0,6802,6709,1,0,0,0,6802,6718,1,0,0,0,6802,6727,1,0,0,0,6802,
        6734,1,0,0,0,6802,6743,1,0,0,0,6802,6750,1,0,0,0,6802,6759,1,0,0,
        0,6802,6767,1,0,0,0,6802,6777,1,0,0,0,6802,6785,1,0,0,0,6802,6795,
        1,0,0,0,6803,729,1,0,0,0,6804,6805,5,176,0,0,6805,6806,5,309,0,0,
        6806,6807,3,686,343,0,6807,6808,5,364,0,0,6808,6809,5,2,0,0,6809,
        6810,3,732,366,0,6810,6811,5,3,0,0,6811,731,1,0,0,0,6812,6817,3,
        734,367,0,6813,6814,5,6,0,0,6814,6816,3,734,367,0,6815,6813,1,0,
        0,0,6816,6819,1,0,0,0,6817,6815,1,0,0,0,6817,6818,1,0,0,0,6818,733,
        1,0,0,0,6819,6817,1,0,0,0,6820,6821,3,1420,710,0,6821,6822,5,10,
        0,0,6822,6823,5,438,0,0,6823,6829,1,0,0,0,6824,6825,3,1420,710,0,
        6825,6826,5,10,0,0,6826,6827,3,736,368,0,6827,6829,1,0,0,0,6828,
        6820,1,0,0,0,6828,6824,1,0,0,0,6829,735,1,0,0,0,6830,6836,3,638,
        319,0,6831,6836,3,1430,715,0,6832,6836,3,1276,638,0,6833,6836,3,
        288,144,0,6834,6836,3,1400,700,0,6835,6830,1,0,0,0,6835,6831,1,0,
        0,0,6835,6832,1,0,0,0,6835,6833,1,0,0,0,6835,6834,1,0,0,0,6836,737,
        1,0,0,0,6837,6838,5,176,0,0,6838,6839,5,391,0,0,6839,6840,3,520,
        260,0,6840,6841,5,364,0,0,6841,6842,5,2,0,0,6842,6843,3,732,366,
        0,6843,6844,5,3,0,0,6844,739,1,0,0,0,6845,6846,5,176,0,0,6846,6847,
        5,174,0,0,6847,6848,3,648,324,0,6848,6849,5,313,0,0,6849,6850,5,
        132,0,0,6850,6851,3,1410,705,0,6851,7031,1,0,0,0,6852,6853,5,176,
        0,0,6853,6854,5,146,0,0,6854,6855,3,520,260,0,6855,6856,5,313,0,
        0,6856,6857,5,132,0,0,6857,6858,3,1410,705,0,6858,7031,1,0,0,0,6859,
        6860,5,176,0,0,6860,6861,5,206,0,0,6861,6862,3,520,260,0,6862,6863,
        5,313,0,0,6863,6864,5,132,0,0,6864,6865,3,1410,705,0,6865,7031,1,
        0,0,0,6866,6867,5,176,0,0,6867,6868,5,213,0,0,6868,6869,3,1382,691,
        0,6869,6870,5,313,0,0,6870,6871,5,132,0,0,6871,6872,3,1410,705,0,
        6872,7031,1,0,0,0,6873,6874,5,176,0,0,6874,6875,5,227,0,0,6875,6876,
        3,520,260,0,6876,6877,5,313,0,0,6877,6878,5,132,0,0,6878,6879,3,
        1410,705,0,6879,7031,1,0,0,0,6880,6881,5,176,0,0,6881,6882,5,249,
        0,0,6882,6883,3,624,312,0,6883,6884,5,313,0,0,6884,6885,5,132,0,
        0,6885,6886,3,1410,705,0,6886,7031,1,0,0,0,6887,6889,5,176,0,0,6888,
        6890,3,304,152,0,6889,6888,1,0,0,0,6889,6890,1,0,0,0,6890,6891,1,
        0,0,0,6891,6892,5,276,0,0,6892,6893,3,1382,691,0,6893,6894,5,313,
        0,0,6894,6895,5,132,0,0,6895,6896,3,1410,705,0,6896,7031,1,0,0,0,
        6897,6898,5,176,0,0,6898,6899,5,277,0,0,6899,6900,5,305,0,0,6900,
        6901,3,288,144,0,6901,6902,5,313,0,0,6902,6903,5,132,0,0,6903,6904,
        3,1410,705,0,6904,7031,1,0,0,0,6905,6906,5,176,0,0,6906,6907,5,309,
        0,0,6907,6908,3,686,343,0,6908,6909,5,313,0,0,6909,6910,5,132,0,
        0,6910,6911,3,1410,705,0,6911,7031,1,0,0,0,6912,6913,5,176,0,0,6913,
        6914,5,309,0,0,6914,6915,5,194,0,0,6915,6916,3,520,260,0,6916,6917,
        5,138,0,0,6917,6918,3,1382,691,0,6918,6919,5,313,0,0,6919,6920,5,
        132,0,0,6920,6921,3,1410,705,0,6921,7031,1,0,0,0,6922,6923,5,176,
        0,0,6923,6924,5,309,0,0,6924,6925,5,244,0,0,6925,6926,3,520,260,
        0,6926,6927,5,138,0,0,6927,6928,3,1382,691,0,6928,6929,5,313,0,0,
        6929,6930,5,132,0,0,6930,6931,3,1410,705,0,6931,7031,1,0,0,0,6932,
        6933,5,176,0,0,6933,6934,5,327,0,0,6934,6935,3,624,312,0,6935,6936,
        5,313,0,0,6936,6937,5,132,0,0,6937,6938,3,1410,705,0,6938,7031,1,
        0,0,0,6939,6940,5,176,0,0,6940,6941,5,480,0,0,6941,6942,3,624,312,
        0,6942,6943,5,313,0,0,6943,6944,5,132,0,0,6944,6945,3,1410,705,0,
        6945,7031,1,0,0,0,6946,6947,5,176,0,0,6947,6948,5,354,0,0,6948,6949,
        3,1382,691,0,6949,6950,5,313,0,0,6950,6951,5,132,0,0,6951,6952,3,
        1410,705,0,6952,7031,1,0,0,0,6953,6954,5,176,0,0,6954,6955,5,391,
        0,0,6955,6956,3,520,260,0,6956,6957,5,313,0,0,6957,6958,5,132,0,
        0,6958,6959,3,1410,705,0,6959,7031,1,0,0,0,6960,6961,5,176,0,0,6961,
        6962,5,382,0,0,6962,6963,3,1382,691,0,6963,6964,5,313,0,0,6964,6965,
        5,132,0,0,6965,6966,3,1410,705,0,6966,7031,1,0,0,0,6967,6968,5,176,
        0,0,6968,6969,5,373,0,0,6969,6970,3,520,260,0,6970,6971,5,313,0,
        0,6971,6972,5,132,0,0,6972,6973,3,1410,705,0,6973,7031,1,0,0,0,6974,
        6975,5,176,0,0,6975,6976,5,386,0,0,6976,6977,5,356,0,0,6977,6978,
        5,223,0,0,6978,6979,3,520,260,0,6979,6980,5,313,0,0,6980,6981,5,
        132,0,0,6981,6982,3,1410,705,0,6982,7031,1,0,0,0,6983,6984,5,176,
        0,0,6984,6985,5,386,0,0,6985,6986,5,356,0,0,6986,6987,5,201,0,0,
        6987,6988,3,520,260,0,6988,6989,5,313,0,0,6989,6990,5,132,0,0,6990,
        6991,3,1410,705,0,6991,7031,1,0,0,0,6992,6993,5,176,0,0,6993,6994,
        5,101,0,0,6994,6995,5,212,0,0,6995,6996,5,412,0,0,6996,6997,3,1382,
        691,0,6997,6998,5,313,0,0,6998,6999,5,132,0,0,6999,7000,3,1410,705,
        0,7000,7031,1,0,0,0,7001,7002,5,176,0,0,7002,7003,5,362,0,0,7003,
        7004,3,1382,691,0,7004,7005,5,313,0,0,7005,7006,5,132,0,0,7006,7007,
        3,1410,705,0,7007,7031,1,0,0,0,7008,7009,5,176,0,0,7009,7010,5,236,
        0,0,7010,7011,5,388,0,0,7011,7012,3,1382,691,0,7012,7013,5,313,0,
        0,7013,7014,5,132,0,0,7014,7015,3,1410,705,0,7015,7031,1,0,0,0,7016,
        7017,5,176,0,0,7017,7018,5,490,0,0,7018,7019,3,1382,691,0,7019,7020,
        5,313,0,0,7020,7021,5,132,0,0,7021,7022,3,1410,705,0,7022,7031,1,
        0,0,0,7023,7024,5,176,0,0,7024,7025,5,489,0,0,7025,7026,3,1382,691,
        0,7026,7027,5,313,0,0,7027,7028,5,132,0,0,7028,7029,3,1410,705,0,
        7029,7031,1,0,0,0,7030,6845,1,0,0,0,7030,6852,1,0,0,0,7030,6859,
        1,0,0,0,7030,6866,1,0,0,0,7030,6873,1,0,0,0,7030,6880,1,0,0,0,7030,
        6887,1,0,0,0,7030,6897,1,0,0,0,7030,6905,1,0,0,0,7030,6912,1,0,0,
        0,7030,6922,1,0,0,0,7030,6932,1,0,0,0,7030,6939,1,0,0,0,7030,6946,
        1,0,0,0,7030,6953,1,0,0,0,7030,6960,1,0,0,0,7030,6967,1,0,0,0,7030,
        6974,1,0,0,0,7030,6983,1,0,0,0,7030,6992,1,0,0,0,7030,7001,1,0,0,
        0,7030,7008,1,0,0,0,7030,7016,1,0,0,0,7030,7023,1,0,0,0,7031,741,
        1,0,0,0,7032,7033,5,84,0,0,7033,7034,5,490,0,0,7034,7036,3,1382,
        691,0,7035,7037,3,744,372,0,7036,7035,1,0,0,0,7036,7037,1,0,0,0,
        7037,7039,1,0,0,0,7038,7040,3,662,331,0,7039,7038,1,0,0,0,7039,7040,
        1,0,0,0,7040,743,1,0,0,0,7041,7042,3,746,373,0,7042,745,1,0,0,0,
        7043,7044,5,100,0,0,7044,7045,5,130,0,0,7045,7050,3,1074,537,0,7046,
        7047,5,100,0,0,7047,7048,5,68,0,0,7048,7050,5,381,0,0,7049,7043,
        1,0,0,0,7049,7046,1,0,0,0,7050,747,1,0,0,0,7051,7052,5,176,0,0,7052,
        7053,5,490,0,0,7053,7054,3,1382,691,0,7054,7055,5,364,0,0,7055,7056,
        3,456,228,0,7056,7079,1,0,0,0,7057,7058,5,176,0,0,7058,7059,5,490,
        0,0,7059,7060,3,1382,691,0,7060,7061,5,171,0,0,7061,7062,5,130,0,
        0,7062,7063,3,1074,537,0,7063,7079,1,0,0,0,7064,7065,5,176,0,0,7065,
        7066,5,490,0,0,7066,7067,3,1382,691,0,7067,7068,5,364,0,0,7068,7069,
        5,130,0,0,7069,7070,3,1074,537,0,7070,7079,1,0,0,0,7071,7072,5,176,
        0,0,7072,7073,5,490,0,0,7073,7074,3,1382,691,0,7074,7075,5,229,0,
        0,7075,7076,5,130,0,0,7076,7077,3,1074,537,0,7077,7079,1,0,0,0,7078,
        7051,1,0,0,0,7078,7057,1,0,0,0,7078,7064,1,0,0,0,7078,7071,1,0,0,
        0,7079,749,1,0,0,0,7080,7081,5,84,0,0,7081,7082,5,489,0,0,7082,7083,
        3,1382,691,0,7083,7084,5,202,0,0,7084,7085,3,1400,700,0,7085,7086,
        5,490,0,0,7086,7088,3,752,376,0,7087,7089,3,662,331,0,7088,7087,
        1,0,0,0,7088,7089,1,0,0,0,7089,751,1,0,0,0,7090,7095,3,754,377,0,
        7091,7092,5,6,0,0,7092,7094,3,754,377,0,7093,7091,1,0,0,0,7094,7097,
        1,0,0,0,7095,7093,1,0,0,0,7095,7096,1,0,0,0,7096,753,1,0,0,0,7097,
        7095,1,0,0,0,7098,7099,3,1420,710,0,7099,755,1,0,0,0,7100,7101,5,
        176,0,0,7101,7102,5,489,0,0,7102,7103,3,1382,691,0,7103,7104,5,364,
        0,0,7104,7105,3,456,228,0,7105,7140,1,0,0,0,7106,7107,5,176,0,0,
        7107,7108,5,489,0,0,7108,7109,3,1382,691,0,7109,7110,5,202,0,0,7110,
        7111,3,1400,700,0,7111,7140,1,0,0,0,7112,7113,5,176,0,0,7113,7114,
        5,489,0,0,7114,7115,3,1382,691,0,7115,7116,5,336,0,0,7116,7118,5,
        490,0,0,7117,7119,3,662,331,0,7118,7117,1,0,0,0,7118,7119,1,0,0,
        0,7119,7140,1,0,0,0,7120,7121,5,176,0,0,7121,7122,5,489,0,0,7122,
        7123,3,1382,691,0,7123,7124,5,364,0,0,7124,7125,5,490,0,0,7125,7127,
        3,752,376,0,7126,7128,3,662,331,0,7127,7126,1,0,0,0,7127,7128,1,
        0,0,0,7128,7140,1,0,0,0,7129,7130,5,176,0,0,7130,7131,5,489,0,0,
        7131,7132,3,1382,691,0,7132,7133,5,231,0,0,7133,7140,1,0,0,0,7134,
        7135,5,176,0,0,7135,7136,5,489,0,0,7136,7137,3,1382,691,0,7137,7138,
        5,224,0,0,7138,7140,1,0,0,0,7139,7100,1,0,0,0,7139,7106,1,0,0,0,
        7139,7112,1,0,0,0,7139,7120,1,0,0,0,7139,7129,1,0,0,0,7139,7134,
        1,0,0,0,7140,757,1,0,0,0,7141,7142,5,229,0,0,7142,7143,5,489,0,0,
        7143,7145,3,1382,691,0,7144,7146,3,104,52,0,7145,7144,1,0,0,0,7145,
        7146,1,0,0,0,7146,7156,1,0,0,0,7147,7148,5,229,0,0,7148,7149,5,489,
        0,0,7149,7150,5,258,0,0,7150,7151,5,427,0,0,7151,7153,3,1382,691,
        0,7152,7154,3,104,52,0,7153,7152,1,0,0,0,7153,7154,1,0,0,0,7154,
        7156,1,0,0,0,7155,7141,1,0,0,0,7155,7147,1,0,0,0,7156,759,1,0,0,
        0,7157,7159,5,84,0,0,7158,7160,3,616,308,0,7159,7158,1,0,0,0,7159,
        7160,1,0,0,0,7160,7161,1,0,0,0,7161,7162,5,352,0,0,7162,7163,3,1382,
        691,0,7163,7164,5,74,0,0,7164,7165,5,118,0,0,7165,7166,3,770,385,
        0,7166,7167,5,132,0,0,7167,7169,3,1378,689,0,7168,7170,3,1092,546,
        0,7169,7168,1,0,0,0,7169,7170,1,0,0,0,7170,7171,1,0,0,0,7171,7173,
        5,95,0,0,7172,7174,3,772,386,0,7173,7172,1,0,0,0,7173,7174,1,0,0,
        0,7174,7175,1,0,0,0,7175,7176,3,762,381,0,7176,761,1,0,0,0,7177,
        7184,5,301,0,0,7178,7184,3,766,383,0,7179,7180,5,2,0,0,7180,7181,
        3,764,382,0,7181,7182,5,3,0,0,7182,7184,1,0,0,0,7183,7177,1,0,0,
        0,7183,7178,1,0,0,0,7183,7179,1,0,0,0,7184,763,1,0,0,0,7185,7187,
        3,768,384,0,7186,7185,1,0,0,0,7186,7187,1,0,0,0,7187,7194,1,0,0,
        0,7188,7190,5,7,0,0,7189,7191,3,768,384,0,7190,7189,1,0,0,0,7190,
        7191,1,0,0,0,7191,7193,1,0,0,0,7192,7188,1,0,0,0,7193,7196,1,0,0,
        0,7194,7192,1,0,0,0,7194,7195,1,0,0,0,7195,765,1,0,0,0,7196,7194,
        1,0,0,0,7197,7203,3,964,482,0,7198,7203,3,906,453,0,7199,7203,3,
        946,473,0,7200,7203,3,932,466,0,7201,7203,3,774,387,0,7202,7197,
        1,0,0,0,7202,7198,1,0,0,0,7202,7199,1,0,0,0,7202,7200,1,0,0,0,7202,
        7201,1,0,0,0,7203,767,1,0,0,0,7204,7205,3,766,383,0,7205,769,1,0,
        0,0,7206,7207,7,31,0,0,7207,771,1,0,0,0,7208,7209,7,32,0,0,7209,
        773,1,0,0,0,7210,7211,5,302,0,0,7211,7213,3,1414,707,0,7212,7214,
        3,776,388,0,7213,7212,1,0,0,0,7213,7214,1,0,0,0,7214,775,1,0,0,0,
        7215,7216,5,6,0,0,7216,7217,3,1400,700,0,7217,777,1,0,0,0,7218,7219,
        5,281,0,0,7219,7220,3,1414,707,0,7220,779,1,0,0,0,7221,7222,5,397,
        0,0,7222,7226,3,1414,707,0,7223,7224,5,397,0,0,7224,7226,5,9,0,0,
        7225,7221,1,0,0,0,7225,7223,1,0,0,0,7226,781,1,0,0,0,7227,7229,5,
        167,0,0,7228,7230,3,784,392,0,7229,7228,1,0,0,0,7229,7230,1,0,0,
        0,7230,7232,1,0,0,0,7231,7233,3,792,396,0,7232,7231,1,0,0,0,7232,
        7233,1,0,0,0,7233,7297,1,0,0,0,7234,7236,5,184,0,0,7235,7237,3,784,
        392,0,7236,7235,1,0,0,0,7236,7237,1,0,0,0,7237,7239,1,0,0,0,7238,
        7240,3,790,395,0,7239,7238,1,0,0,0,7239,7240,1,0,0,0,7240,7297,1,
        0,0,0,7241,7242,5,371,0,0,7242,7244,5,387,0,0,7243,7245,3,790,395,
        0,7244,7243,1,0,0,0,7244,7245,1,0,0,0,7245,7297,1,0,0,0,7246,7248,
        5,199,0,0,7247,7249,3,784,392,0,7248,7247,1,0,0,0,7248,7249,1,0,
        0,0,7249,7251,1,0,0,0,7250,7252,3,792,396,0,7251,7250,1,0,0,0,7251,
        7252,1,0,0,0,7252,7297,1,0,0,0,7253,7255,5,492,0,0,7254,7256,3,784,
        392,0,7255,7254,1,0,0,0,7255,7256,1,0,0,0,7256,7258,1,0,0,0,7257,
        7259,3,792,396,0,7258,7257,1,0,0,0,7258,7259,1,0,0,0,7259,7297,1,
        0,0,0,7260,7262,5,350,0,0,7261,7263,3,784,392,0,7262,7261,1,0,0,
        0,7262,7263,1,0,0,0,7263,7265,1,0,0,0,7264,7266,3,792,396,0,7265,
        7264,1,0,0,0,7265,7266,1,0,0,0,7266,7297,1,0,0,0,7267,7268,5,353,
        0,0,7268,7297,3,1414,707,0,7269,7270,5,339,0,0,7270,7271,5,353,0,
        0,7271,7297,3,1414,707,0,7272,7273,5,339,0,0,7273,7297,3,1414,707,
        0,7274,7276,5,350,0,0,7275,7277,3,784,392,0,7276,7275,1,0,0,0,7276,
        7277,1,0,0,0,7277,7278,1,0,0,0,7278,7279,5,132,0,0,7279,7280,5,353,
        0,0,7280,7297,3,1414,707,0,7281,7283,5,350,0,0,7282,7284,3,784,392,
        0,7283,7282,1,0,0,0,7283,7284,1,0,0,0,7284,7285,1,0,0,0,7285,7286,
        5,132,0,0,7286,7297,3,1414,707,0,7287,7288,5,321,0,0,7288,7289,5,
        387,0,0,7289,7297,3,1400,700,0,7290,7291,5,199,0,0,7291,7292,5,322,
        0,0,7292,7297,3,1400,700,0,7293,7294,5,350,0,0,7294,7295,5,322,0,
        0,7295,7297,3,1400,700,0,7296,7227,1,0,0,0,7296,7234,1,0,0,0,7296,
        7241,1,0,0,0,7296,7246,1,0,0,0,7296,7253,1,0,0,0,7296,7260,1,0,0,
        0,7296,7267,1,0,0,0,7296,7269,1,0,0,0,7296,7272,1,0,0,0,7296,7274,
        1,0,0,0,7296,7281,1,0,0,0,7296,7287,1,0,0,0,7296,7290,1,0,0,0,7296,
        7293,1,0,0,0,7297,783,1,0,0,0,7298,7299,7,33,0,0,7299,785,1,0,0,
        0,7300,7301,5,273,0,0,7301,7302,5,280,0,0,7302,7311,3,60,30,0,7303,
        7304,5,331,0,0,7304,7311,5,119,0,0,7305,7306,5,331,0,0,7306,7311,
        5,413,0,0,7307,7311,5,92,0,0,7308,7309,5,115,0,0,7309,7311,5,92,
        0,0,7310,7300,1,0,0,0,7310,7303,1,0,0,0,7310,7305,1,0,0,0,7310,7307,
        1,0,0,0,7310,7308,1,0,0,0,7311,787,1,0,0,0,7312,7319,3,786,393,0,
        7313,7315,5,6,0,0,7314,7313,1,0,0,0,7314,7315,1,0,0,0,7315,7316,
        1,0,0,0,7316,7318,3,786,393,0,7317,7314,1,0,0,0,7318,7321,1,0,0,
        0,7319,7317,1,0,0,0,7319,7320,1,0,0,0,7320,789,1,0,0,0,7321,7319,
        1,0,0,0,7322,7323,3,788,394,0,7323,791,1,0,0,0,7324,7326,5,71,0,
        0,7325,7327,5,300,0,0,7326,7325,1,0,0,0,7326,7327,1,0,0,0,7327,7328,
        1,0,0,0,7328,7329,5,191,0,0,7329,793,1,0,0,0,7330,7333,5,84,0,0,
        7331,7332,5,120,0,0,7332,7334,5,342,0,0,7333,7331,1,0,0,0,7333,7334,
        1,0,0,0,7334,7336,1,0,0,0,7335,7337,3,170,85,0,7336,7335,1,0,0,0,
        7336,7337,1,0,0,0,7337,7355,1,0,0,0,7338,7339,5,407,0,0,7339,7341,
        3,1378,689,0,7340,7342,3,210,105,0,7341,7340,1,0,0,0,7341,7342,1,
        0,0,0,7342,7344,1,0,0,0,7343,7345,3,114,57,0,7344,7343,1,0,0,0,7344,
        7345,1,0,0,0,7345,7356,1,0,0,0,7346,7347,5,334,0,0,7347,7348,5,407,
        0,0,7348,7349,3,1378,689,0,7349,7350,5,2,0,0,7350,7351,3,212,106,
        0,7351,7353,5,3,0,0,7352,7354,3,114,57,0,7353,7352,1,0,0,0,7353,
        7354,1,0,0,0,7354,7356,1,0,0,0,7355,7338,1,0,0,0,7355,7346,1,0,0,
        0,7356,7357,1,0,0,0,7357,7358,5,74,0,0,7358,7360,3,964,482,0,7359,
        7361,3,796,398,0,7360,7359,1,0,0,0,7360,7361,1,0,0,0,7361,795,1,
        0,0,0,7362,7364,5,143,0,0,7363,7365,7,34,0,0,7364,7363,1,0,0,0,7364,
        7365,1,0,0,0,7365,7366,1,0,0,0,7366,7367,5,80,0,0,7367,7368,5,310,
        0,0,7368,797,1,0,0,0,7369,7370,5,282,0,0,7370,7371,3,1386,693,0,
        7371,799,1,0,0,0,7372,7373,5,84,0,0,7373,7374,5,213,0,0,7374,7376,
        3,1382,691,0,7375,7377,3,12,6,0,7376,7375,1,0,0,0,7376,7377,1,0,
        0,0,7377,7379,1,0,0,0,7378,7380,3,802,401,0,7379,7378,1,0,0,0,7379,
        7380,1,0,0,0,7380,801,1,0,0,0,7381,7382,3,804,402,0,7382,803,1,0,
        0,0,7383,7385,3,806,403,0,7384,7383,1,0,0,0,7385,7386,1,0,0,0,7386,
        7384,1,0,0,0,7386,7387,1,0,0,0,7387,805,1,0,0,0,7388,7390,3,808,
        404,0,7389,7391,3,810,405,0,7390,7389,1,0,0,0,7390,7391,1,0,0,0,
        7391,7395,1,0,0,0,7392,7396,3,1406,703,0,7393,7396,3,62,31,0,7394,
        7396,5,91,0,0,7395,7392,1,0,0,0,7395,7393,1,0,0,0,7395,7394,1,0,
        0,0,7396,807,1,0,0,0,7397,7406,3,1436,718,0,7398,7399,5,202,0,0,
        7399,7406,5,112,0,0,7400,7406,5,232,0,0,7401,7406,5,284,0,0,7402,
        7406,5,313,0,0,7403,7406,5,382,0,0,7404,7406,5,384,0,0,7405,7397,
        1,0,0,0,7405,7398,1,0,0,0,7405,7400,1,0,0,0,7405,7401,1,0,0,0,7405,
        7402,1,0,0,0,7405,7403,1,0,0,0,7405,7404,1,0,0,0,7406,809,1,0,0,
        0,7407,7408,5,10,0,0,7408,811,1,0,0,0,7409,7410,5,176,0,0,7410,7411,
        5,213,0,0,7411,7422,3,1382,691,0,7412,7414,5,143,0,0,7413,7415,3,
        802,401,0,7414,7413,1,0,0,0,7414,7415,1,0,0,0,7415,7423,1,0,0,0,
        7416,7418,3,802,401,0,7417,7416,1,0,0,0,7417,7418,1,0,0,0,7418,7423,
        1,0,0,0,7419,7420,5,364,0,0,7420,7421,5,382,0,0,7421,7423,3,1382,
        691,0,7422,7412,1,0,0,0,7422,7417,1,0,0,0,7422,7419,1,0,0,0,7423,
        813,1,0,0,0,7424,7425,5,176,0,0,7425,7426,5,213,0,0,7426,7427,3,
        1382,691,0,7427,7428,3,76,38,0,7428,815,1,0,0,0,7429,7430,5,229,
        0,0,7430,7433,5,213,0,0,7431,7432,5,258,0,0,7432,7434,5,427,0,0,
        7433,7431,1,0,0,0,7433,7434,1,0,0,0,7434,7435,1,0,0,0,7435,7443,
        3,1382,691,0,7436,7438,3,12,6,0,7437,7436,1,0,0,0,7437,7438,1,0,
        0,0,7438,7439,1,0,0,0,7439,7440,5,2,0,0,7440,7441,3,818,409,0,7441,
        7442,5,3,0,0,7442,7444,1,0,0,0,7443,7437,1,0,0,0,7443,7444,1,0,0,
        0,7444,817,1,0,0,0,7445,7450,3,820,410,0,7446,7447,5,6,0,0,7447,
        7449,3,820,410,0,7448,7446,1,0,0,0,7449,7452,1,0,0,0,7450,7448,1,
        0,0,0,7450,7451,1,0,0,0,7451,819,1,0,0,0,7452,7450,1,0,0,0,7453,
        7454,5,247,0,0,7454,821,1,0,0,0,7455,7456,5,176,0,0,7456,7457,5,
        146,0,0,7457,7458,3,520,260,0,7458,7459,5,336,0,0,7459,7460,5,406,
        0,0,7460,823,1,0,0,0,7461,7462,5,176,0,0,7462,7463,5,380,0,0,7463,
        7464,7,35,0,0,7464,7465,3,50,25,0,7465,825,1,0,0,0,7466,7467,5,84,
        0,0,7467,7468,5,227,0,0,7468,7470,3,520,260,0,7469,7471,3,830,415,
        0,7470,7469,1,0,0,0,7470,7471,1,0,0,0,7471,7472,1,0,0,0,7472,7473,
        3,1116,558,0,7473,7474,3,188,94,0,7474,827,1,0,0,0,7475,7476,5,176,
        0,0,7476,7477,5,227,0,0,7477,7500,3,520,260,0,7478,7501,3,102,51,
        0,7479,7480,5,229,0,0,7480,7481,5,115,0,0,7481,7501,5,116,0,0,7482,
        7483,5,364,0,0,7483,7484,5,115,0,0,7484,7501,5,116,0,0,7485,7486,
        5,171,0,0,7486,7501,3,204,102,0,7487,7488,5,229,0,0,7488,7491,5,
        83,0,0,7489,7490,5,258,0,0,7490,7492,5,427,0,0,7491,7489,1,0,0,0,
        7491,7492,1,0,0,0,7492,7493,1,0,0,0,7493,7495,3,1382,691,0,7494,
        7496,3,104,52,0,7495,7494,1,0,0,0,7495,7496,1,0,0,0,7496,7501,1,
        0,0,0,7497,7498,5,403,0,0,7498,7499,5,83,0,0,7499,7501,3,1382,691,
        0,7500,7478,1,0,0,0,7500,7479,1,0,0,0,7500,7482,1,0,0,0,7500,7485,
        1,0,0,0,7500,7487,1,0,0,0,7500,7497,1,0,0,0,7501,829,1,0,0,0,7502,
        7503,5,74,0,0,7503,831,1,0,0,0,7504,7505,5,176,0,0,7505,7506,5,386,
        0,0,7506,7507,5,356,0,0,7507,7508,5,223,0,0,7508,7509,3,520,260,
        0,7509,7510,3,456,228,0,7510,833,1,0,0,0,7511,7512,5,176,0,0,7512,
        7513,5,386,0,0,7513,7514,5,356,0,0,7514,7515,5,201,0,0,7515,7516,
        3,520,260,0,7516,7517,5,171,0,0,7517,7518,5,286,0,0,7518,7519,5,
        100,0,0,7519,7520,3,1380,690,0,7520,7521,3,836,418,0,7521,7522,3,
        518,259,0,7522,7584,1,0,0,0,7523,7524,5,176,0,0,7524,7525,5,386,
        0,0,7525,7526,5,356,0,0,7526,7527,5,201,0,0,7527,7528,3,520,260,
        0,7528,7529,5,176,0,0,7529,7530,5,286,0,0,7530,7531,5,100,0,0,7531,
        7532,3,1380,690,0,7532,7533,3,836,418,0,7533,7534,3,518,259,0,7534,
        7584,1,0,0,0,7535,7536,5,176,0,0,7536,7537,5,386,0,0,7537,7538,5,
        356,0,0,7538,7539,5,201,0,0,7539,7540,3,520,260,0,7540,7541,5,176,
        0,0,7541,7542,5,286,0,0,7542,7543,5,342,0,0,7543,7544,3,520,260,
        0,7544,7545,3,836,418,0,7545,7546,3,520,260,0,7546,7584,1,0,0,0,
        7547,7548,5,176,0,0,7548,7549,5,386,0,0,7549,7550,5,356,0,0,7550,
        7551,5,201,0,0,7551,7552,3,520,260,0,7552,7553,5,176,0,0,7553,7554,
        5,286,0,0,7554,7555,5,100,0,0,7555,7556,3,1380,690,0,7556,7557,5,
        342,0,0,7557,7558,3,520,260,0,7558,7559,3,836,418,0,7559,7560,3,
        520,260,0,7560,7584,1,0,0,0,7561,7562,5,176,0,0,7562,7563,5,386,
        0,0,7563,7564,5,356,0,0,7564,7565,5,201,0,0,7565,7566,3,520,260,
        0,7566,7567,5,229,0,0,7567,7568,5,286,0,0,7568,7569,5,100,0,0,7569,
        7570,3,1380,690,0,7570,7584,1,0,0,0,7571,7572,5,176,0,0,7572,7573,
        5,386,0,0,7573,7574,5,356,0,0,7574,7575,5,201,0,0,7575,7576,3,520,
        260,0,7576,7577,5,229,0,0,7577,7578,5,286,0,0,7578,7579,5,258,0,
        0,7579,7580,5,427,0,0,7580,7581,5,100,0,0,7581,7582,3,1380,690,0,
        7582,7584,1,0,0,0,7583,7511,1,0,0,0,7583,7523,1,0,0,0,7583,7535,
        1,0,0,0,7583,7547,1,0,0,0,7583,7561,1,0,0,0,7583,7571,1,0,0,0,7584,
        835,1,0,0,0,7585,7586,5,143,0,0,7586,837,1,0,0,0,7587,7589,5,84,
        0,0,7588,7590,3,484,242,0,7589,7588,1,0,0,0,7589,7590,1,0,0,0,7590,
        7591,1,0,0,0,7591,7592,5,206,0,0,7592,7593,3,520,260,0,7593,7594,
        5,100,0,0,7594,7595,3,1400,700,0,7595,7596,5,132,0,0,7596,7597,3,
        1400,700,0,7597,7598,5,102,0,0,7598,7599,3,520,260,0,7599,839,1,
        0,0,0,7600,7602,5,196,0,0,7601,7603,3,868,434,0,7602,7601,1,0,0,
        0,7602,7603,1,0,0,0,7603,7604,1,0,0,0,7604,7606,3,1378,689,0,7605,
        7607,3,842,421,0,7606,7605,1,0,0,0,7606,7607,1,0,0,0,7607,7621,1,
        0,0,0,7608,7610,5,196,0,0,7609,7611,3,868,434,0,7610,7609,1,0,0,
        0,7610,7611,1,0,0,0,7611,7621,1,0,0,0,7612,7614,5,196,0,0,7613,7615,
        3,868,434,0,7614,7613,1,0,0,0,7614,7615,1,0,0,0,7615,7616,1,0,0,
        0,7616,7617,3,1382,691,0,7617,7618,5,118,0,0,7618,7619,3,1378,689,
        0,7619,7621,1,0,0,0,7620,7600,1,0,0,0,7620,7608,1,0,0,0,7620,7612,
        1,0,0,0,7621,841,1,0,0,0,7622,7623,5,138,0,0,7623,7624,3,1382,691,
        0,7624,843,1,0,0,0,7625,7627,5,401,0,0,7626,7628,3,870,435,0,7627,
        7626,1,0,0,0,7627,7628,1,0,0,0,7628,7630,1,0,0,0,7629,7631,3,872,
        436,0,7630,7629,1,0,0,0,7630,7631,1,0,0,0,7631,7633,1,0,0,0,7632,
        7634,3,868,434,0,7633,7632,1,0,0,0,7633,7634,1,0,0,0,7634,7636,1,
        0,0,0,7635,7637,3,866,433,0,7636,7635,1,0,0,0,7636,7637,1,0,0,0,
        7637,7639,1,0,0,0,7638,7640,3,880,440,0,7639,7638,1,0,0,0,7639,7640,
        1,0,0,0,7640,7649,1,0,0,0,7641,7642,5,401,0,0,7642,7643,5,2,0,0,
        7643,7644,3,850,425,0,7644,7646,5,3,0,0,7645,7647,3,880,440,0,7646,
        7645,1,0,0,0,7646,7647,1,0,0,0,7647,7649,1,0,0,0,7648,7625,1,0,0,
        0,7648,7641,1,0,0,0,7649,845,1,0,0,0,7650,7652,3,852,426,0,7651,
        7653,3,868,434,0,7652,7651,1,0,0,0,7652,7653,1,0,0,0,7653,7655,1,
        0,0,0,7654,7656,3,880,440,0,7655,7654,1,0,0,0,7655,7656,1,0,0,0,
        7656,7665,1,0,0,0,7657,7658,3,852,426,0,7658,7659,5,2,0,0,7659,7660,
        3,850,425,0,7660,7662,5,3,0,0,7661,7663,3,880,440,0,7662,7661,1,
        0,0,0,7662,7663,1,0,0,0,7663,7665,1,0,0,0,7664,7650,1,0,0,0,7664,
        7657,1,0,0,0,7665,847,1,0,0,0,7666,7671,3,854,427,0,7667,7668,5,
        6,0,0,7668,7670,3,854,427,0,7669,7667,1,0,0,0,7670,7673,1,0,0,0,
        7671,7669,1,0,0,0,7671,7672,1,0,0,0,7672,849,1,0,0,0,7673,7671,1,
        0,0,0,7674,7679,3,860,430,0,7675,7676,5,6,0,0,7676,7678,3,860,430,
        0,7677,7675,1,0,0,0,7678,7681,1,0,0,0,7679,7677,1,0,0,0,7679,7680,
        1,0,0,0,7680,851,1,0,0,0,7681,7679,1,0,0,0,7682,7683,7,36,0,0,7683,
        853,1,0,0,0,7684,7686,3,856,428,0,7685,7687,3,858,429,0,7686,7685,
        1,0,0,0,7686,7687,1,0,0,0,7687,855,1,0,0,0,7688,7692,3,1418,709,
        0,7689,7692,3,852,426,0,7690,7692,5,67,0,0,7691,7688,1,0,0,0,7691,
        7689,1,0,0,0,7691,7690,1,0,0,0,7692,857,1,0,0,0,7693,7696,3,62,31,
        0,7694,7696,3,288,144,0,7695,7693,1,0,0,0,7695,7694,1,0,0,0,7696,
        859,1,0,0,0,7697,7699,3,862,431,0,7698,7700,3,864,432,0,7699,7698,
        1,0,0,0,7699,7700,1,0,0,0,7700,861,1,0,0,0,7701,7704,3,1418,709,
        0,7702,7704,3,852,426,0,7703,7701,1,0,0,0,7703,7702,1,0,0,0,7704,
        863,1,0,0,0,7705,7708,3,62,31,0,7706,7708,3,288,144,0,7707,7705,
        1,0,0,0,7707,7706,1,0,0,0,7708,865,1,0,0,0,7709,7710,3,852,426,0,
        7710,867,1,0,0,0,7711,7712,5,166,0,0,7712,869,1,0,0,0,7713,7714,
        5,151,0,0,7714,871,1,0,0,0,7715,7716,5,150,0,0,7716,873,1,0,0,0,
        7717,7718,5,2,0,0,7718,7719,3,1380,690,0,7719,7720,5,3,0,0,7720,
        875,1,0,0,0,7721,7723,3,1378,689,0,7722,7724,3,874,437,0,7723,7722,
        1,0,0,0,7723,7724,1,0,0,0,7724,877,1,0,0,0,7725,7730,3,876,438,0,
        7726,7727,5,6,0,0,7727,7729,3,876,438,0,7728,7726,1,0,0,0,7729,7732,
        1,0,0,0,7730,7728,1,0,0,0,7730,7731,1,0,0,0,7731,879,1,0,0,0,7732,
        7730,1,0,0,0,7733,7734,3,878,439,0,7734,881,1,0,0,0,7735,7736,5,
        241,0,0,7736,7754,3,884,442,0,7737,7738,5,241,0,0,7738,7740,3,852,
        426,0,7739,7741,3,868,434,0,7740,7739,1,0,0,0,7740,7741,1,0,0,0,
        7741,7742,1,0,0,0,7742,7743,3,884,442,0,7743,7754,1,0,0,0,7744,7745,
        5,241,0,0,7745,7746,5,166,0,0,7746,7754,3,884,442,0,7747,7748,5,
        241,0,0,7748,7749,5,2,0,0,7749,7750,3,886,443,0,7750,7751,5,3,0,
        0,7751,7752,3,884,442,0,7752,7754,1,0,0,0,7753,7735,1,0,0,0,7753,
        7737,1,0,0,0,7753,7744,1,0,0,0,7753,7747,1,0,0,0,7754,883,1,0,0,
        0,7755,7765,3,964,482,0,7756,7765,3,906,453,0,7757,7765,3,946,473,
        0,7758,7765,3,932,466,0,7759,7765,3,956,478,0,7760,7765,3,260,130,
        0,7761,7765,3,266,133,0,7762,7765,3,272,136,0,7763,7765,3,900,450,
        0,7764,7755,1,0,0,0,7764,7756,1,0,0,0,7764,7757,1,0,0,0,7764,7758,
        1,0,0,0,7764,7759,1,0,0,0,7764,7760,1,0,0,0,7764,7761,1,0,0,0,7764,
        7762,1,0,0,0,7764,7763,1,0,0,0,7765,885,1,0,0,0,7766,7771,3,888,
        444,0,7767,7768,5,6,0,0,7768,7770,3,888,444,0,7769,7767,1,0,0,0,
        7770,7773,1,0,0,0,7771,7769,1,0,0,0,7771,7772,1,0,0,0,7772,887,1,
        0,0,0,7773,7771,1,0,0,0,7774,7776,3,890,445,0,7775,7777,3,892,446,
        0,7776,7775,1,0,0,0,7776,7777,1,0,0,0,7777,889,1,0,0,0,7778,7781,
        3,1418,709,0,7779,7781,3,852,426,0,7780,7778,1,0,0,0,7780,7779,1,
        0,0,0,7781,891,1,0,0,0,7782,7785,3,62,31,0,7783,7785,3,288,144,0,
        7784,7782,1,0,0,0,7784,7783,1,0,0,0,7785,893,1,0,0,0,7786,7787,5,
        321,0,0,7787,7789,3,1382,691,0,7788,7790,3,896,448,0,7789,7788,1,
        0,0,0,7789,7790,1,0,0,0,7790,7791,1,0,0,0,7791,7792,5,74,0,0,7792,
        7793,3,898,449,0,7793,895,1,0,0,0,7794,7795,5,2,0,0,7795,7796,3,
        1286,643,0,7796,7797,5,3,0,0,7797,897,1,0,0,0,7798,7803,3,964,482,
        0,7799,7803,3,906,453,0,7800,7803,3,946,473,0,7801,7803,3,932,466,
        0,7802,7798,1,0,0,0,7802,7799,1,0,0,0,7802,7800,1,0,0,0,7802,7801,
        1,0,0,0,7803,899,1,0,0,0,7804,7805,5,240,0,0,7805,7807,3,1382,691,
        0,7806,7808,3,902,451,0,7807,7806,1,0,0,0,7807,7808,1,0,0,0,7808,
        7843,1,0,0,0,7809,7811,5,84,0,0,7810,7812,3,170,85,0,7811,7810,1,
        0,0,0,7811,7812,1,0,0,0,7812,7813,1,0,0,0,7813,7814,5,130,0,0,7814,
        7815,3,262,131,0,7815,7816,5,74,0,0,7816,7817,5,240,0,0,7817,7819,
        3,1382,691,0,7818,7820,3,902,451,0,7819,7818,1,0,0,0,7819,7820,1,
        0,0,0,7820,7822,1,0,0,0,7821,7823,3,264,132,0,7822,7821,1,0,0,0,
        7822,7823,1,0,0,0,7823,7843,1,0,0,0,7824,7826,5,84,0,0,7825,7827,
        3,170,85,0,7826,7825,1,0,0,0,7826,7827,1,0,0,0,7827,7828,1,0,0,0,
        7828,7829,5,130,0,0,7829,7830,5,258,0,0,7830,7831,5,115,0,0,7831,
        7832,5,427,0,0,7832,7833,3,262,131,0,7833,7834,5,74,0,0,7834,7835,
        5,240,0,0,7835,7837,3,1382,691,0,7836,7838,3,902,451,0,7837,7836,
        1,0,0,0,7837,7838,1,0,0,0,7838,7840,1,0,0,0,7839,7841,3,264,132,
        0,7840,7839,1,0,0,0,7840,7841,1,0,0,0,7841,7843,1,0,0,0,7842,7804,
        1,0,0,0,7842,7809,1,0,0,0,7842,7824,1,0,0,0,7843,901,1,0,0,0,7844,
        7845,5,2,0,0,7845,7846,3,1280,640,0,7846,7847,5,3,0,0,7847,903,1,
        0,0,0,7848,7849,5,215,0,0,7849,7859,3,1382,691,0,7850,7851,5,215,
        0,0,7851,7852,5,321,0,0,7852,7859,3,1382,691,0,7853,7854,5,215,0,
        0,7854,7859,5,68,0,0,7855,7856,5,215,0,0,7856,7857,5,321,0,0,7857,
        7859,5,68,0,0,7858,7848,1,0,0,0,7858,7850,1,0,0,0,7858,7853,1,0,
        0,0,7858,7855,1,0,0,0,7859,905,1,0,0,0,7860,7862,3,984,492,0,7861,
        7860,1,0,0,0,7861,7862,1,0,0,0,7862,7863,1,0,0,0,7863,7864,5,270,
        0,0,7864,7865,5,109,0,0,7865,7866,3,908,454,0,7866,7868,3,910,455,
        0,7867,7869,3,918,459,0,7868,7867,1,0,0,0,7868,7869,1,0,0,0,7869,
        7871,1,0,0,0,7870,7872,3,922,461,0,7871,7870,1,0,0,0,7871,7872,1,
        0,0,0,7872,907,1,0,0,0,7873,7876,3,1378,689,0,7874,7875,5,74,0,0,
        7875,7877,3,1414,707,0,7876,7874,1,0,0,0,7876,7877,1,0,0,0,7877,
        909,1,0,0,0,7878,7898,3,964,482,0,7879,7880,5,501,0,0,7880,7881,
        3,912,456,0,7881,7882,5,488,0,0,7882,7883,3,964,482,0,7883,7898,
        1,0,0,0,7884,7885,5,2,0,0,7885,7886,3,914,457,0,7886,7891,5,3,0,
        0,7887,7888,5,501,0,0,7888,7889,3,912,456,0,7889,7890,5,488,0,0,
        7890,7892,1,0,0,0,7891,7887,1,0,0,0,7891,7892,1,0,0,0,7892,7893,
        1,0,0,0,7893,7894,3,964,482,0,7894,7898,1,0,0,0,7895,7896,5,91,0,
        0,7896,7898,5,453,0,0,7897,7878,1,0,0,0,7897,7879,1,0,0,0,7897,7884,
        1,0,0,0,7897,7895,1,0,0,0,7898,911,1,0,0,0,7899,7900,7,37,0,0,7900,
        913,1,0,0,0,7901,7906,3,916,458,0,7902,7903,5,6,0,0,7903,7905,3,
        916,458,0,7904,7902,1,0,0,0,7905,7908,1,0,0,0,7906,7904,1,0,0,0,
        7906,7907,1,0,0,0,7907,915,1,0,0,0,7908,7906,1,0,0,0,7909,7910,3,
        1414,707,0,7910,7911,3,1326,663,0,7911,917,1,0,0,0,7912,7913,5,118,
        0,0,7913,7915,5,502,0,0,7914,7916,3,920,460,0,7915,7914,1,0,0,0,
        7915,7916,1,0,0,0,7916,7917,1,0,0,0,7917,7925,5,95,0,0,7918,7919,
        5,400,0,0,7919,7920,5,364,0,0,7920,7922,3,948,474,0,7921,7923,3,
        1092,546,0,7922,7921,1,0,0,0,7922,7923,1,0,0,0,7923,7926,1,0,0,0,
        7924,7926,5,301,0,0,7925,7918,1,0,0,0,7925,7924,1,0,0,0,7926,919,
        1,0,0,0,7927,7928,5,2,0,0,7928,7929,3,596,298,0,7929,7931,5,3,0,
        0,7930,7932,3,1092,546,0,7931,7930,1,0,0,0,7931,7932,1,0,0,0,7932,
        7937,1,0,0,0,7933,7934,5,118,0,0,7934,7935,5,83,0,0,7935,7937,3,
        1382,691,0,7936,7927,1,0,0,0,7936,7933,1,0,0,0,7937,921,1,0,0,0,
        7938,7939,5,125,0,0,7939,7940,3,1372,686,0,7940,923,1,0,0,0,7941,
        7943,5,291,0,0,7942,7944,5,109,0,0,7943,7942,1,0,0,0,7943,7944,1,
        0,0,0,7944,7945,1,0,0,0,7945,7947,3,1378,689,0,7946,7948,3,1064,
        532,0,7947,7946,1,0,0,0,7947,7948,1,0,0,0,7948,7949,1,0,0,0,7949,
        7952,5,138,0,0,7950,7953,3,966,483,0,7951,7953,3,1378,689,0,7952,
        7950,1,0,0,0,7952,7951,1,0,0,0,7953,7955,1,0,0,0,7954,7956,3,1064,
        532,0,7955,7954,1,0,0,0,7955,7956,1,0,0,0,7956,7957,1,0,0,0,7957,
        7958,5,118,0,0,7958,7967,3,1162,581,0,7959,7961,3,926,463,0,7960,
        7962,3,928,464,0,7961,7960,1,0,0,0,7961,7962,1,0,0,0,7962,7968,1,
        0,0,0,7963,7965,3,928,464,0,7964,7966,3,926,463,0,7965,7964,1,0,
        0,0,7965,7966,1,0,0,0,7966,7968,1,0,0,0,7967,7959,1,0,0,0,7967,7963,
        1,0,0,0,7968,7970,1,0,0,0,7969,7971,3,930,465,0,7970,7969,1,0,0,
        0,7970,7971,1,0,0,0,7971,925,1,0,0,0,7972,7973,5,140,0,0,7973,7974,
        5,115,0,0,7974,7977,5,288,0,0,7975,7976,5,71,0,0,7976,7978,3,1162,
        581,0,7977,7975,1,0,0,0,7977,7978,1,0,0,0,7978,7980,1,0,0,0,7979,
        7981,5,131,0,0,7980,7979,1,0,0,0,7980,7981,1,0,0,0,7981,7982,1,0,
        0,0,7982,7987,5,270,0,0,7983,7984,5,2,0,0,7984,7985,3,914,457,0,
        7985,7986,5,3,0,0,7986,7988,1,0,0,0,7987,7983,1,0,0,0,7987,7988,
        1,0,0,0,7988,7989,1,0,0,0,7989,7990,3,1056,528,0,7990,927,1,0,0,
        0,7991,7992,5,140,0,0,7992,7995,5,288,0,0,7993,7994,5,71,0,0,7994,
        7996,3,1162,581,0,7995,7993,1,0,0,0,7995,7996,1,0,0,0,7996,7998,
        1,0,0,0,7997,7999,5,131,0,0,7998,7997,1,0,0,0,7998,7999,1,0,0,0,
        7999,8000,1,0,0,0,8000,8001,5,400,0,0,8001,8002,5,364,0,0,8002,8003,
        3,948,474,0,8003,929,1,0,0,0,8004,8005,5,140,0,0,8005,8007,5,288,
        0,0,8006,8008,5,131,0,0,8007,8006,1,0,0,0,8007,8008,1,0,0,0,8008,
        8009,1,0,0,0,8009,8010,5,220,0,0,8010,931,1,0,0,0,8011,8013,3,984,
        492,0,8012,8011,1,0,0,0,8012,8013,1,0,0,0,8013,8014,1,0,0,0,8014,
        8015,5,220,0,0,8015,8016,5,102,0,0,8016,8018,3,1076,538,0,8017,8019,
        3,934,467,0,8018,8017,1,0,0,0,8018,8019,1,0,0,0,8019,8021,1,0,0,
        0,8020,8022,3,1094,547,0,8021,8020,1,0,0,0,8021,8022,1,0,0,0,8022,
        8024,1,0,0,0,8023,8025,3,922,461,0,8024,8023,1,0,0,0,8024,8025,1,
        0,0,0,8025,933,1,0,0,0,8026,8027,5,138,0,0,8027,8028,3,1060,530,
        0,8028,935,1,0,0,0,8029,8031,5,285,0,0,8030,8032,3,992,496,0,8031,
        8030,1,0,0,0,8031,8032,1,0,0,0,8032,8033,1,0,0,0,8033,8035,3,1074,
        537,0,8034,8036,3,938,469,0,8035,8034,1,0,0,0,8035,8036,1,0,0,0,
        8036,8038,1,0,0,0,8037,8039,3,942,471,0,8038,8037,1,0,0,0,8038,8039,
        1,0,0,0,8039,937,1,0,0,0,8040,8041,5,106,0,0,8041,8042,3,940,470,
        0,8042,8043,5,294,0,0,8043,939,1,0,0,0,8044,8045,5,169,0,0,8045,
        8057,7,38,0,0,8046,8047,5,445,0,0,8047,8057,7,38,0,0,8048,8053,5,
        365,0,0,8049,8050,5,400,0,0,8050,8054,5,239,0,0,8051,8052,5,445,
        0,0,8052,8054,5,239,0,0,8053,8049,1,0,0,0,8053,8051,1,0,0,0,8053,
        8054,1,0,0,0,8054,8057,1,0,0,0,8055,8057,5,239,0,0,8056,8044,1,0,
        0,0,8056,8046,1,0,0,0,8056,8048,1,0,0,0,8056,8055,1,0,0,0,8057,941,
        1,0,0,0,8058,8059,5,303,0,0,8059,943,1,0,0,0,8060,8064,5,303,0,0,
        8061,8062,5,503,0,0,8062,8064,5,504,0,0,8063,8060,1,0,0,0,8063,8061,
        1,0,0,0,8064,945,1,0,0,0,8065,8067,3,984,492,0,8066,8065,1,0,0,0,
        8066,8067,1,0,0,0,8067,8068,1,0,0,0,8068,8069,5,400,0,0,8069,8070,
        3,1076,538,0,8070,8071,5,364,0,0,8071,8073,3,948,474,0,8072,8074,
        3,1058,529,0,8073,8072,1,0,0,0,8073,8074,1,0,0,0,8074,8076,1,0,0,
        0,8075,8077,3,1094,547,0,8076,8075,1,0,0,0,8076,8077,1,0,0,0,8077,
        8079,1,0,0,0,8078,8080,3,922,461,0,8079,8078,1,0,0,0,8079,8080,1,
        0,0,0,8080,947,1,0,0,0,8081,8086,3,950,475,0,8082,8083,5,6,0,0,8083,
        8085,3,950,475,0,8084,8082,1,0,0,0,8085,8088,1,0,0,0,8086,8084,1,
        0,0,0,8086,8087,1,0,0,0,8087,949,1,0,0,0,8088,8086,1,0,0,0,8089,
        8090,3,952,476,0,8090,8091,5,10,0,0,8091,8092,3,1162,581,0,8092,
        8100,1,0,0,0,8093,8094,5,2,0,0,8094,8095,3,954,477,0,8095,8096,5,
        3,0,0,8096,8097,5,10,0,0,8097,8098,3,1162,581,0,8098,8100,1,0,0,
        0,8099,8089,1,0,0,0,8099,8093,1,0,0,0,8100,951,1,0,0,0,8101,8102,
        3,1414,707,0,8102,8103,3,1326,663,0,8103,953,1,0,0,0,8104,8109,3,
        952,476,0,8105,8106,5,6,0,0,8106,8108,3,952,476,0,8107,8105,1,0,
        0,0,8108,8111,1,0,0,0,8109,8107,1,0,0,0,8109,8110,1,0,0,0,8110,955,
        1,0,0,0,8111,8109,1,0,0,0,8112,8113,5,216,0,0,8113,8114,3,958,479,
        0,8114,8115,3,960,480,0,8115,8117,5,210,0,0,8116,8118,3,962,481,
        0,8117,8116,1,0,0,0,8117,8118,1,0,0,0,8118,8119,1,0,0,0,8119,8120,
        5,100,0,0,8120,8121,3,964,482,0,8121,957,1,0,0,0,8122,8123,3,1382,
        691,0,8123,959,1,0,0,0,8124,8125,5,300,0,0,8125,8130,5,355,0,0,8126,
        8130,5,355,0,0,8127,8130,5,145,0,0,8128,8130,5,269,0,0,8129,8124,
        1,0,0,0,8129,8126,1,0,0,0,8129,8127,1,0,0,0,8129,8128,1,0,0,0,8130,
        8133,1,0,0,0,8131,8129,1,0,0,0,8131,8132,1,0,0,0,8132,961,1,0,0,
        0,8133,8131,1,0,0,0,8134,8135,5,143,0,0,8135,8139,5,255,0,0,8136,
        8137,5,410,0,0,8137,8139,5,255,0,0,8138,8134,1,0,0,0,8138,8136,1,
        0,0,0,8139,963,1,0,0,0,8140,8143,3,968,484,0,8141,8143,3,966,483,
        0,8142,8140,1,0,0,0,8142,8141,1,0,0,0,8143,965,1,0,0,0,8144,8145,
        5,2,0,0,8145,8146,3,968,484,0,8146,8147,5,3,0,0,8147,8153,1,0,0,
        0,8148,8149,5,2,0,0,8149,8150,3,966,483,0,8150,8151,5,3,0,0,8151,
        8153,1,0,0,0,8152,8144,1,0,0,0,8152,8148,1,0,0,0,8153,967,1,0,0,
        0,8154,8156,3,970,485,0,8155,8157,3,1000,500,0,8156,8155,1,0,0,0,
        8156,8157,1,0,0,0,8157,8166,1,0,0,0,8158,8160,3,1044,522,0,8159,
        8161,3,1010,505,0,8160,8159,1,0,0,0,8160,8161,1,0,0,0,8161,8167,
        1,0,0,0,8162,8164,3,1008,504,0,8163,8165,3,1046,523,0,8164,8163,
        1,0,0,0,8164,8165,1,0,0,0,8165,8167,1,0,0,0,8166,8158,1,0,0,0,8166,
        8162,1,0,0,0,8166,8167,1,0,0,0,8167,8184,1,0,0,0,8168,8169,3,976,
        488,0,8169,8171,3,970,485,0,8170,8172,3,1000,500,0,8171,8170,1,0,
        0,0,8171,8172,1,0,0,0,8172,8181,1,0,0,0,8173,8175,3,1044,522,0,8174,
        8176,3,1010,505,0,8175,8174,1,0,0,0,8175,8176,1,0,0,0,8176,8182,
        1,0,0,0,8177,8179,3,1008,504,0,8178,8180,3,1046,523,0,8179,8178,
        1,0,0,0,8179,8180,1,0,0,0,8180,8182,1,0,0,0,8181,8173,1,0,0,0,8181,
        8177,1,0,0,0,8181,8182,1,0,0,0,8182,8184,1,0,0,0,8183,8154,1,0,0,
        0,8183,8168,1,0,0,0,8184,969,1,0,0,0,8185,8193,3,972,486,0,8186,
        8188,7,39,0,0,8187,8189,3,994,497,0,8188,8187,1,0,0,0,8188,8189,
        1,0,0,0,8189,8190,1,0,0,0,8190,8192,3,972,486,0,8191,8186,1,0,0,
        0,8192,8195,1,0,0,0,8193,8191,1,0,0,0,8193,8194,1,0,0,0,8194,971,
        1,0,0,0,8195,8193,1,0,0,0,8196,8204,3,974,487,0,8197,8199,5,108,
        0,0,8198,8200,3,994,497,0,8199,8198,1,0,0,0,8199,8200,1,0,0,0,8200,
        8201,1,0,0,0,8201,8203,3,974,487,0,8202,8197,1,0,0,0,8203,8206,1,
        0,0,0,8204,8202,1,0,0,0,8204,8205,1,0,0,0,8205,973,1,0,0,0,8206,
        8204,1,0,0,0,8207,8252,5,126,0,0,8208,8210,3,998,499,0,8209,8208,
        1,0,0,0,8209,8210,1,0,0,0,8210,8212,1,0,0,0,8211,8213,3,1370,685,
        0,8212,8211,1,0,0,0,8212,8213,1,0,0,0,8213,8215,1,0,0,0,8214,8216,
        3,986,493,0,8215,8214,1,0,0,0,8215,8216,1,0,0,0,8216,8218,1,0,0,
        0,8217,8219,3,1058,529,0,8218,8217,1,0,0,0,8218,8219,1,0,0,0,8219,
        8221,1,0,0,0,8220,8222,3,1092,546,0,8221,8220,1,0,0,0,8221,8222,
        1,0,0,0,8222,8224,1,0,0,0,8223,8225,3,1028,514,0,8224,8223,1,0,0,
        0,8224,8225,1,0,0,0,8225,8227,1,0,0,0,8226,8228,3,1042,521,0,8227,
        8226,1,0,0,0,8227,8228,1,0,0,0,8228,8230,1,0,0,0,8229,8231,3,1240,
        620,0,8230,8229,1,0,0,0,8230,8231,1,0,0,0,8231,8253,1,0,0,0,8232,
        8233,3,996,498,0,8233,8235,3,1372,686,0,8234,8236,3,986,493,0,8235,
        8234,1,0,0,0,8235,8236,1,0,0,0,8236,8238,1,0,0,0,8237,8239,3,1058,
        529,0,8238,8237,1,0,0,0,8238,8239,1,0,0,0,8239,8241,1,0,0,0,8240,
        8242,3,1092,546,0,8241,8240,1,0,0,0,8241,8242,1,0,0,0,8242,8244,
        1,0,0,0,8243,8245,3,1028,514,0,8244,8243,1,0,0,0,8244,8245,1,0,0,
        0,8245,8247,1,0,0,0,8246,8248,3,1042,521,0,8247,8246,1,0,0,0,8247,
        8248,1,0,0,0,8248,8250,1,0,0,0,8249,8251,3,1240,620,0,8250,8249,
        1,0,0,0,8250,8251,1,0,0,0,8251,8253,1,0,0,0,8252,8209,1,0,0,0,8252,
        8232,1,0,0,0,8253,8259,1,0,0,0,8254,8259,3,1056,528,0,8255,8256,
        5,130,0,0,8256,8259,3,1072,536,0,8257,8259,3,966,483,0,8258,8207,
        1,0,0,0,8258,8254,1,0,0,0,8258,8255,1,0,0,0,8258,8257,1,0,0,0,8259,
        975,1,0,0,0,8260,8262,5,143,0,0,8261,8263,5,334,0,0,8262,8261,1,
        0,0,0,8262,8263,1,0,0,0,8263,8264,1,0,0,0,8264,8265,3,978,489,0,
        8265,977,1,0,0,0,8266,8271,3,980,490,0,8267,8268,5,6,0,0,8268,8270,
        3,980,490,0,8269,8267,1,0,0,0,8270,8273,1,0,0,0,8271,8269,1,0,0,
        0,8271,8272,1,0,0,0,8272,979,1,0,0,0,8273,8271,1,0,0,0,8274,8276,
        3,1382,691,0,8275,8277,3,874,437,0,8276,8275,1,0,0,0,8276,8277,1,
        0,0,0,8277,8278,1,0,0,0,8278,8280,5,74,0,0,8279,8281,3,982,491,0,
        8280,8279,1,0,0,0,8280,8281,1,0,0,0,8281,8282,1,0,0,0,8282,8283,
        5,2,0,0,8283,8284,3,898,449,0,8284,8285,5,3,0,0,8285,981,1,0,0,0,
        8286,8290,5,289,0,0,8287,8288,5,115,0,0,8288,8290,5,289,0,0,8289,
        8286,1,0,0,0,8289,8287,1,0,0,0,8290,983,1,0,0,0,8291,8292,3,976,
        488,0,8292,985,1,0,0,0,8293,8294,5,109,0,0,8294,8295,3,990,495,0,
        8295,987,1,0,0,0,8296,8297,5,377,0,0,8297,989,1,0,0,0,8298,8300,
        7,40,0,0,8299,8298,1,0,0,0,8299,8300,1,0,0,0,8300,8301,1,0,0,0,8301,
        8303,7,12,0,0,8302,8304,3,992,496,0,8303,8302,1,0,0,0,8303,8304,
        1,0,0,0,8304,8305,1,0,0,0,8305,8315,3,1378,689,0,8306,8308,5,398,
        0,0,8307,8309,3,992,496,0,8308,8307,1,0,0,0,8308,8309,1,0,0,0,8309,
        8310,1,0,0,0,8310,8315,3,1378,689,0,8311,8312,5,130,0,0,8312,8315,
        3,1378,689,0,8313,8315,3,1378,689,0,8314,8299,1,0,0,0,8314,8306,
        1,0,0,0,8314,8311,1,0,0,0,8314,8313,1,0,0,0,8315,991,1,0,0,0,8316,
        8317,5,130,0,0,8317,993,1,0,0,0,8318,8319,7,41,0,0,8319,995,1,0,
        0,0,8320,8326,5,94,0,0,8321,8322,5,118,0,0,8322,8323,5,2,0,0,8323,
        8324,3,1280,640,0,8324,8325,5,3,0,0,8325,8327,1,0,0,0,8326,8321,
        1,0,0,0,8326,8327,1,0,0,0,8327,997,1,0,0,0,8328,8329,5,68,0,0,8329,
        999,1,0,0,0,8330,8331,3,1002,501,0,8331,1001,1,0,0,0,8332,8333,5,
        121,0,0,8333,8334,5,185,0,0,8334,8335,3,1004,502,0,8335,1003,1,0,
        0,0,8336,8341,3,1006,503,0,8337,8338,5,6,0,0,8338,8340,3,1006,503,
        0,8339,8337,1,0,0,0,8340,8343,1,0,0,0,8341,8339,1,0,0,0,8341,8342,
        1,0,0,0,8342,1005,1,0,0,0,8343,8341,1,0,0,0,8344,8350,3,1162,581,
        0,8345,8346,5,138,0,0,8346,8351,3,1276,638,0,8347,8349,3,610,305,
        0,8348,8347,1,0,0,0,8348,8349,1,0,0,0,8349,8351,1,0,0,0,8350,8345,
        1,0,0,0,8350,8348,1,0,0,0,8351,8353,1,0,0,0,8352,8354,3,612,306,
        0,8353,8352,1,0,0,0,8353,8354,1,0,0,0,8354,1007,1,0,0,0,8355,8357,
        3,1012,506,0,8356,8358,3,1014,507,0,8357,8356,1,0,0,0,8357,8358,
        1,0,0,0,8358,8364,1,0,0,0,8359,8361,3,1014,507,0,8360,8362,3,1012,
        506,0,8361,8360,1,0,0,0,8361,8362,1,0,0,0,8362,8364,1,0,0,0,8363,
        8355,1,0,0,0,8363,8359,1,0,0,0,8364,1009,1,0,0,0,8365,8366,3,1008,
        504,0,8366,1011,1,0,0,0,8367,8368,5,112,0,0,8368,8371,3,1016,508,
        0,8369,8370,5,6,0,0,8370,8372,3,1018,509,0,8371,8369,1,0,0,0,8371,
        8372,1,0,0,0,8372,8391,1,0,0,0,8373,8374,5,99,0,0,8374,8388,3,1026,
        513,0,8375,8376,3,1020,510,0,8376,8380,3,1024,512,0,8377,8381,5,
        119,0,0,8378,8379,5,143,0,0,8379,8381,5,505,0,0,8380,8377,1,0,0,
        0,8380,8378,1,0,0,0,8381,8389,1,0,0,0,8382,8386,3,1024,512,0,8383,
        8387,5,119,0,0,8384,8385,5,143,0,0,8385,8387,5,505,0,0,8386,8383,
        1,0,0,0,8386,8384,1,0,0,0,8387,8389,1,0,0,0,8388,8375,1,0,0,0,8388,
        8382,1,0,0,0,8389,8391,1,0,0,0,8390,8367,1,0,0,0,8390,8373,1,0,0,
        0,8391,1013,1,0,0,0,8392,8397,5,117,0,0,8393,8398,3,1018,509,0,8394,
        8395,3,1020,510,0,8395,8396,3,1024,512,0,8396,8398,1,0,0,0,8397,
        8393,1,0,0,0,8397,8394,1,0,0,0,8398,1015,1,0,0,0,8399,8402,3,1162,
        581,0,8400,8402,5,68,0,0,8401,8399,1,0,0,0,8401,8400,1,0,0,0,8402,
        1017,1,0,0,0,8403,8404,3,1162,581,0,8404,1019,1,0,0,0,8405,8411,
        3,1206,603,0,8406,8407,5,12,0,0,8407,8411,3,1022,511,0,8408,8409,
        5,13,0,0,8409,8411,3,1022,511,0,8410,8405,1,0,0,0,8410,8406,1,0,
        0,0,8410,8408,1,0,0,0,8411,1021,1,0,0,0,8412,8415,3,1398,699,0,8413,
        8415,3,1396,698,0,8414,8412,1,0,0,0,8414,8413,1,0,0,0,8415,1023,
        1,0,0,0,8416,8417,7,42,0,0,8417,1025,1,0,0,0,8418,8419,7,43,0,0,
        8419,1027,1,0,0,0,8420,8421,5,104,0,0,8421,8422,5,185,0,0,8422,8423,
        3,1030,515,0,8423,1029,1,0,0,0,8424,8429,3,1032,516,0,8425,8426,
        5,6,0,0,8426,8428,3,1032,516,0,8427,8425,1,0,0,0,8428,8431,1,0,0,
        0,8429,8427,1,0,0,0,8429,8430,1,0,0,0,8430,1031,1,0,0,0,8431,8429,
        1,0,0,0,8432,8438,3,1034,517,0,8433,8438,3,1038,519,0,8434,8438,
        3,1036,518,0,8435,8438,3,1040,520,0,8436,8438,3,1162,581,0,8437,
        8432,1,0,0,0,8437,8433,1,0,0,0,8437,8434,1,0,0,0,8437,8435,1,0,0,
        0,8437,8436,1,0,0,0,8438,1033,1,0,0,0,8439,8440,5,2,0,0,8440,8441,
        5,3,0,0,8441,1035,1,0,0,0,8442,8443,5,506,0,0,8443,8444,5,2,0,0,
        8444,8445,3,1280,640,0,8445,8446,5,3,0,0,8446,1037,1,0,0,0,8447,
        8448,5,507,0,0,8448,8449,5,2,0,0,8449,8450,3,1280,640,0,8450,8451,
        5,3,0,0,8451,1039,1,0,0,0,8452,8453,5,508,0,0,8453,8454,5,509,0,
        0,8454,8455,5,2,0,0,8455,8456,3,1030,515,0,8456,8457,5,3,0,0,8457,
        1041,1,0,0,0,8458,8459,5,105,0,0,8459,8460,3,1162,581,0,8460,1043,
        1,0,0,0,8461,8466,3,1048,524,0,8462,8463,5,100,0,0,8463,8464,5,331,
        0,0,8464,8466,5,119,0,0,8465,8461,1,0,0,0,8465,8462,1,0,0,0,8466,
        1045,1,0,0,0,8467,8468,3,1044,522,0,8468,1047,1,0,0,0,8469,8471,
        3,1050,525,0,8470,8469,1,0,0,0,8471,8472,1,0,0,0,8472,8470,1,0,0,
        0,8472,8473,1,0,0,0,8473,1049,1,0,0,0,8474,8476,3,1052,526,0,8475,
        8477,3,1054,527,0,8476,8475,1,0,0,0,8476,8477,1,0,0,0,8477,8479,
        1,0,0,0,8478,8480,3,944,472,0,8479,8478,1,0,0,0,8479,8480,1,0,0,
        0,8480,1051,1,0,0,0,8481,8491,5,100,0,0,8482,8483,5,300,0,0,8483,
        8485,5,274,0,0,8484,8482,1,0,0,0,8484,8485,1,0,0,0,8485,8486,1,0,
        0,0,8486,8492,5,400,0,0,8487,8489,5,274,0,0,8488,8487,1,0,0,0,8488,
        8489,1,0,0,0,8489,8490,1,0,0,0,8490,8492,5,365,0,0,8491,8484,1,0,
        0,0,8491,8488,1,0,0,0,8492,1053,1,0,0,0,8493,8494,5,306,0,0,8494,
        8495,3,1376,688,0,8495,1055,1,0,0,0,8496,8497,5,453,0,0,8497,8498,
        5,2,0,0,8498,8499,3,1280,640,0,8499,8507,5,3,0,0,8500,8501,5,6,0,
        0,8501,8502,5,2,0,0,8502,8503,3,1280,640,0,8503,8504,5,3,0,0,8504,
        8506,1,0,0,0,8505,8500,1,0,0,0,8506,8509,1,0,0,0,8507,8505,1,0,0,
        0,8507,8508,1,0,0,0,8508,1057,1,0,0,0,8509,8507,1,0,0,0,8510,8511,
        5,102,0,0,8511,8512,3,1060,530,0,8512,1059,1,0,0,0,8513,8518,3,1062,
        531,0,8514,8515,5,6,0,0,8515,8517,3,1062,531,0,8516,8514,1,0,0,0,
        8517,8520,1,0,0,0,8518,8516,1,0,0,0,8518,8519,1,0,0,0,8519,1061,
        1,0,0,0,8520,8518,1,0,0,0,8521,8523,3,1072,536,0,8522,8524,3,1064,
        532,0,8523,8522,1,0,0,0,8523,8524,1,0,0,0,8524,8526,1,0,0,0,8525,
        8527,3,1078,539,0,8526,8525,1,0,0,0,8526,8527,1,0,0,0,8527,8580,
        1,0,0,0,8528,8530,3,1082,541,0,8529,8531,3,1066,533,0,8530,8529,
        1,0,0,0,8530,8531,1,0,0,0,8531,8580,1,0,0,0,8532,8534,3,1102,551,
        0,8533,8535,3,1064,532,0,8534,8533,1,0,0,0,8534,8535,1,0,0,0,8535,
        8580,1,0,0,0,8536,8538,3,966,483,0,8537,8539,3,1064,532,0,8538,8537,
        1,0,0,0,8538,8539,1,0,0,0,8539,8580,1,0,0,0,8540,8553,5,110,0,0,
        8541,8543,3,1102,551,0,8542,8544,3,1064,532,0,8543,8542,1,0,0,0,
        8543,8544,1,0,0,0,8544,8554,1,0,0,0,8545,8547,3,1082,541,0,8546,
        8548,3,1066,533,0,8547,8546,1,0,0,0,8547,8548,1,0,0,0,8548,8554,
        1,0,0,0,8549,8551,3,966,483,0,8550,8552,3,1064,532,0,8551,8550,1,
        0,0,0,8551,8552,1,0,0,0,8552,8554,1,0,0,0,8553,8541,1,0,0,0,8553,
        8545,1,0,0,0,8553,8549,1,0,0,0,8554,8580,1,0,0,0,8555,8556,5,2,0,
        0,8556,8573,3,1062,531,0,8557,8558,5,148,0,0,8558,8559,5,156,0,0,
        8559,8574,3,1062,531,0,8560,8562,5,159,0,0,8561,8563,3,1068,534,
        0,8562,8561,1,0,0,0,8562,8563,1,0,0,0,8563,8564,1,0,0,0,8564,8565,
        5,156,0,0,8565,8574,3,1062,531,0,8566,8568,3,1068,534,0,8567,8566,
        1,0,0,0,8567,8568,1,0,0,0,8568,8569,1,0,0,0,8569,8570,5,156,0,0,
        8570,8571,3,1062,531,0,8571,8572,3,1070,535,0,8572,8574,1,0,0,0,
        8573,8557,1,0,0,0,8573,8560,1,0,0,0,8573,8567,1,0,0,0,8573,8574,
        1,0,0,0,8574,8575,1,0,0,0,8575,8577,5,3,0,0,8576,8578,3,1064,532,
        0,8577,8576,1,0,0,0,8577,8578,1,0,0,0,8578,8580,1,0,0,0,8579,8521,
        1,0,0,0,8579,8528,1,0,0,0,8579,8532,1,0,0,0,8579,8536,1,0,0,0,8579,
        8540,1,0,0,0,8579,8555,1,0,0,0,8580,8599,1,0,0,0,8581,8582,5,148,
        0,0,8582,8583,5,156,0,0,8583,8598,3,1062,531,0,8584,8586,5,159,0,
        0,8585,8587,3,1068,534,0,8586,8585,1,0,0,0,8586,8587,1,0,0,0,8587,
        8588,1,0,0,0,8588,8589,5,156,0,0,8589,8598,3,1062,531,0,8590,8592,
        3,1068,534,0,8591,8590,1,0,0,0,8591,8592,1,0,0,0,8592,8593,1,0,0,
        0,8593,8594,5,156,0,0,8594,8595,3,1062,531,0,8595,8596,3,1070,535,
        0,8596,8598,1,0,0,0,8597,8581,1,0,0,0,8597,8584,1,0,0,0,8597,8591,
        1,0,0,0,8598,8601,1,0,0,0,8599,8597,1,0,0,0,8599,8600,1,0,0,0,8600,
        1063,1,0,0,0,8601,8599,1,0,0,0,8602,8604,5,74,0,0,8603,8602,1,0,
        0,0,8603,8604,1,0,0,0,8604,8605,1,0,0,0,8605,8610,3,1414,707,0,8606,
        8607,5,2,0,0,8607,8608,3,1380,690,0,8608,8609,5,3,0,0,8609,8611,
        1,0,0,0,8610,8606,1,0,0,0,8610,8611,1,0,0,0,8611,1065,1,0,0,0,8612,
        8625,3,1064,532,0,8613,8615,5,74,0,0,8614,8616,3,1414,707,0,8615,
        8614,1,0,0,0,8615,8616,1,0,0,0,8616,8619,1,0,0,0,8617,8619,3,1414,
        707,0,8618,8613,1,0,0,0,8618,8617,1,0,0,0,8619,8620,1,0,0,0,8620,
        8621,5,2,0,0,8621,8622,3,1098,549,0,8622,8623,5,3,0,0,8623,8625,
        1,0,0,0,8624,8612,1,0,0,0,8624,8618,1,0,0,0,8625,1067,1,0,0,0,8626,
        8628,7,44,0,0,8627,8629,5,161,0,0,8628,8627,1,0,0,0,8628,8629,1,
        0,0,0,8629,1069,1,0,0,0,8630,8631,5,138,0,0,8631,8632,5,2,0,0,8632,
        8633,3,1380,690,0,8633,8634,5,3,0,0,8634,8638,1,0,0,0,8635,8636,
        5,118,0,0,8636,8638,3,1162,581,0,8637,8630,1,0,0,0,8637,8635,1,0,
        0,0,8638,1071,1,0,0,0,8639,8641,3,1378,689,0,8640,8642,5,9,0,0,8641,
        8640,1,0,0,0,8641,8642,1,0,0,0,8642,8652,1,0,0,0,8643,8649,5,119,
        0,0,8644,8650,3,1378,689,0,8645,8646,5,2,0,0,8646,8647,3,1378,689,
        0,8647,8648,5,3,0,0,8648,8650,1,0,0,0,8649,8644,1,0,0,0,8649,8645,
        1,0,0,0,8650,8652,1,0,0,0,8651,8639,1,0,0,0,8651,8643,1,0,0,0,8652,
        1073,1,0,0,0,8653,8658,3,1072,536,0,8654,8655,5,6,0,0,8655,8657,
        3,1072,536,0,8656,8654,1,0,0,0,8657,8660,1,0,0,0,8658,8656,1,0,0,
        0,8658,8659,1,0,0,0,8659,1075,1,0,0,0,8660,8658,1,0,0,0,8661,8666,
        3,1072,536,0,8662,8664,5,74,0,0,8663,8662,1,0,0,0,8663,8664,1,0,
        0,0,8664,8665,1,0,0,0,8665,8667,3,1414,707,0,8666,8663,1,0,0,0,8666,
        8667,1,0,0,0,8667,1077,1,0,0,0,8668,8669,5,510,0,0,8669,8670,3,1388,
        694,0,8670,8671,5,2,0,0,8671,8672,3,1280,640,0,8672,8674,5,3,0,0,
        8673,8675,3,1080,540,0,8674,8673,1,0,0,0,8674,8675,1,0,0,0,8675,
        1079,1,0,0,0,8676,8677,5,341,0,0,8677,8678,5,2,0,0,8678,8679,3,1162,
        581,0,8679,8680,5,3,0,0,8680,1081,1,0,0,0,8681,8683,3,1214,607,0,
        8682,8684,3,1090,545,0,8683,8682,1,0,0,0,8683,8684,1,0,0,0,8684,
        8694,1,0,0,0,8685,8686,5,351,0,0,8686,8687,5,102,0,0,8687,8688,5,
        2,0,0,8688,8689,3,1086,543,0,8689,8691,5,3,0,0,8690,8692,3,1090,
        545,0,8691,8690,1,0,0,0,8691,8692,1,0,0,0,8692,8694,1,0,0,0,8693,
        8681,1,0,0,0,8693,8685,1,0,0,0,8694,1083,1,0,0,0,8695,8697,3,1214,
        607,0,8696,8698,3,1088,544,0,8697,8696,1,0,0,0,8697,8698,1,0,0,0,
        8698,1085,1,0,0,0,8699,8704,3,1084,542,0,8700,8701,5,6,0,0,8701,
        8703,3,1084,542,0,8702,8700,1,0,0,0,8703,8706,1,0,0,0,8704,8702,
        1,0,0,0,8704,8705,1,0,0,0,8705,1087,1,0,0,0,8706,8704,1,0,0,0,8707,
        8708,5,74,0,0,8708,8709,5,2,0,0,8709,8710,3,1098,549,0,8710,8711,
        5,3,0,0,8711,1089,1,0,0,0,8712,8713,5,143,0,0,8713,8714,5,511,0,
        0,8714,1091,1,0,0,0,8715,8716,5,141,0,0,8716,8717,3,1162,581,0,8717,
        1093,1,0,0,0,8718,8723,5,141,0,0,8719,8720,5,472,0,0,8720,8721,5,
        306,0,0,8721,8724,3,958,479,0,8722,8724,3,1162,581,0,8723,8719,1,
        0,0,0,8723,8722,1,0,0,0,8724,1095,1,0,0,0,8725,8726,3,1098,549,0,
        8726,1097,1,0,0,0,8727,8732,3,1100,550,0,8728,8729,5,6,0,0,8729,
        8731,3,1100,550,0,8730,8728,1,0,0,0,8731,8734,1,0,0,0,8732,8730,
        1,0,0,0,8732,8733,1,0,0,0,8733,1099,1,0,0,0,8734,8732,1,0,0,0,8735,
        8736,3,1414,707,0,8736,8738,3,1116,558,0,8737,8739,3,106,53,0,8738,
        8737,1,0,0,0,8738,8739,1,0,0,0,8739,1101,1,0,0,0,8740,8741,5,512,
        0,0,8741,8757,5,2,0,0,8742,8743,3,1206,603,0,8743,8744,3,1232,616,
        0,8744,8745,5,513,0,0,8745,8746,3,1104,552,0,8746,8758,1,0,0,0,8747,
        8748,5,514,0,0,8748,8749,5,2,0,0,8749,8750,3,1112,556,0,8750,8751,
        5,3,0,0,8751,8752,5,6,0,0,8752,8753,3,1206,603,0,8753,8754,3,1232,
        616,0,8754,8755,5,513,0,0,8755,8756,3,1104,552,0,8756,8758,1,0,0,
        0,8757,8742,1,0,0,0,8757,8747,1,0,0,0,8758,8759,1,0,0,0,8759,8760,
        5,3,0,0,8760,1103,1,0,0,0,8761,8766,3,1106,553,0,8762,8763,5,6,0,
        0,8763,8765,3,1106,553,0,8764,8762,1,0,0,0,8765,8768,1,0,0,0,8766,
        8764,1,0,0,0,8766,8767,1,0,0,0,8767,1105,1,0,0,0,8768,8766,1,0,0,
        0,8769,8776,3,1414,707,0,8770,8772,3,1116,558,0,8771,8773,3,1108,
        554,0,8772,8771,1,0,0,0,8772,8773,1,0,0,0,8773,8777,1,0,0,0,8774,
        8775,5,100,0,0,8775,8777,5,511,0,0,8776,8770,1,0,0,0,8776,8774,1,
        0,0,0,8777,1107,1,0,0,0,8778,8780,3,1110,555,0,8779,8778,1,0,0,0,
        8780,8781,1,0,0,0,8781,8779,1,0,0,0,8781,8782,1,0,0,0,8782,1109,
        1,0,0,0,8783,8784,5,91,0,0,8784,8792,3,1162,581,0,8785,8786,3,1436,
        718,0,8786,8787,3,1162,581,0,8787,8792,1,0,0,0,8788,8789,5,115,0,
        0,8789,8792,5,116,0,0,8790,8792,5,116,0,0,8791,8783,1,0,0,0,8791,
        8785,1,0,0,0,8791,8788,1,0,0,0,8791,8790,1,0,0,0,8792,1111,1,0,0,
        0,8793,8798,3,1114,557,0,8794,8795,5,6,0,0,8795,8797,3,1114,557,
        0,8796,8794,1,0,0,0,8797,8800,1,0,0,0,8798,8796,1,0,0,0,8798,8799,
        1,0,0,0,8799,1113,1,0,0,0,8800,8798,1,0,0,0,8801,8802,3,1204,602,
        0,8802,8803,5,74,0,0,8803,8804,3,1420,710,0,8804,8808,1,0,0,0,8805,
        8806,5,91,0,0,8806,8808,3,1204,602,0,8807,8801,1,0,0,0,8807,8805,
        1,0,0,0,8808,1115,1,0,0,0,8809,8811,5,446,0,0,8810,8809,1,0,0,0,
        8810,8811,1,0,0,0,8811,8812,1,0,0,0,8812,8821,3,1120,560,0,8813,
        8822,3,1118,559,0,8814,8819,5,73,0,0,8815,8816,5,4,0,0,8816,8817,
        3,1398,699,0,8817,8818,5,5,0,0,8818,8820,1,0,0,0,8819,8815,1,0,0,
        0,8819,8820,1,0,0,0,8820,8822,1,0,0,0,8821,8813,1,0,0,0,8821,8814,
        1,0,0,0,8822,1117,1,0,0,0,8823,8825,5,4,0,0,8824,8826,3,1398,699,
        0,8825,8824,1,0,0,0,8825,8826,1,0,0,0,8826,8827,1,0,0,0,8827,8829,
        5,5,0,0,8828,8823,1,0,0,0,8829,8832,1,0,0,0,8830,8828,1,0,0,0,8830,
        8831,1,0,0,0,8831,1119,1,0,0,0,8832,8830,1,0,0,0,8833,8850,3,1124,
        562,0,8834,8850,3,1128,564,0,8835,8850,3,1132,566,0,8836,8850,3,
        1140,570,0,8837,8850,3,1148,574,0,8838,8846,3,1150,575,0,8839,8841,
        3,1154,577,0,8840,8839,1,0,0,0,8840,8841,1,0,0,0,8841,8847,1,0,0,
        0,8842,8843,5,2,0,0,8843,8844,3,1398,699,0,8844,8845,5,3,0,0,8845,
        8847,1,0,0,0,8846,8840,1,0,0,0,8846,8842,1,0,0,0,8847,8850,1,0,0,
        0,8848,8850,3,1158,579,0,8849,8833,1,0,0,0,8849,8834,1,0,0,0,8849,
        8835,1,0,0,0,8849,8836,1,0,0,0,8849,8837,1,0,0,0,8849,8838,1,0,0,
        0,8849,8848,1,0,0,0,8850,1121,1,0,0,0,8851,8857,3,1128,564,0,8852,
        8857,3,1134,567,0,8853,8857,3,1142,571,0,8854,8857,3,1148,574,0,
        8855,8857,3,1158,579,0,8856,8851,1,0,0,0,8856,8852,1,0,0,0,8856,
        8853,1,0,0,0,8856,8854,1,0,0,0,8856,8855,1,0,0,0,8857,1123,1,0,0,
        0,8858,8860,3,1416,708,0,8859,8861,3,522,261,0,8860,8859,1,0,0,0,
        8860,8861,1,0,0,0,8861,8863,1,0,0,0,8862,8864,3,1126,563,0,8863,
        8862,1,0,0,0,8863,8864,1,0,0,0,8864,1125,1,0,0,0,8865,8866,5,2,0,
        0,8866,8867,3,1280,640,0,8867,8868,5,3,0,0,8868,1127,1,0,0,0,8869,
        8894,5,432,0,0,8870,8894,5,433,0,0,8871,8894,5,447,0,0,8872,8894,
        5,419,0,0,8873,8894,5,444,0,0,8874,8876,5,429,0,0,8875,8877,3,1130,
        565,0,8876,8875,1,0,0,0,8876,8877,1,0,0,0,8877,8894,1,0,0,0,8878,
        8879,5,228,0,0,8879,8894,5,443,0,0,8880,8882,5,426,0,0,8881,8883,
        3,1126,563,0,8882,8881,1,0,0,0,8882,8883,1,0,0,0,8883,8894,1,0,0,
        0,8884,8886,5,425,0,0,8885,8887,3,1126,563,0,8886,8885,1,0,0,0,8886,
        8887,1,0,0,0,8887,8894,1,0,0,0,8888,8890,5,440,0,0,8889,8891,3,1126,
        563,0,8890,8889,1,0,0,0,8890,8891,1,0,0,0,8891,8894,1,0,0,0,8892,
        8894,5,421,0,0,8893,8869,1,0,0,0,8893,8870,1,0,0,0,8893,8871,1,0,
        0,0,8893,8872,1,0,0,0,8893,8873,1,0,0,0,8893,8874,1,0,0,0,8893,8878,
        1,0,0,0,8893,8880,1,0,0,0,8893,8884,1,0,0,0,8893,8888,1,0,0,0,8893,
        8892,1,0,0,0,8894,1129,1,0,0,0,8895,8896,5,2,0,0,8896,8897,3,1398,
        699,0,8897,8898,5,3,0,0,8898,1131,1,0,0,0,8899,8902,3,1136,568,0,
        8900,8902,3,1138,569,0,8901,8899,1,0,0,0,8901,8900,1,0,0,0,8902,
        1133,1,0,0,0,8903,8906,3,1136,568,0,8904,8906,3,1138,569,0,8905,
        8903,1,0,0,0,8905,8904,1,0,0,0,8906,1135,1,0,0,0,8907,8909,5,420,
        0,0,8908,8910,3,1146,573,0,8909,8908,1,0,0,0,8909,8910,1,0,0,0,8910,
        8911,1,0,0,0,8911,8912,5,2,0,0,8912,8913,3,1280,640,0,8913,8914,
        5,3,0,0,8914,1137,1,0,0,0,8915,8917,5,420,0,0,8916,8918,3,1146,573,
        0,8917,8916,1,0,0,0,8917,8918,1,0,0,0,8918,1139,1,0,0,0,8919,8924,
        3,1144,572,0,8920,8921,5,2,0,0,8921,8922,3,1398,699,0,8922,8923,
        5,3,0,0,8923,8925,1,0,0,0,8924,8920,1,0,0,0,8924,8925,1,0,0,0,8925,
        1141,1,0,0,0,8926,8931,3,1144,572,0,8927,8928,5,2,0,0,8928,8929,
        3,1398,699,0,8929,8930,5,3,0,0,8930,8932,1,0,0,0,8931,8927,1,0,0,
        0,8931,8932,1,0,0,0,8932,1143,1,0,0,0,8933,8935,7,45,0,0,8934,8936,
        3,1146,573,0,8935,8934,1,0,0,0,8935,8936,1,0,0,0,8936,8944,1,0,0,
        0,8937,8944,5,454,0,0,8938,8939,5,436,0,0,8939,8941,7,46,0,0,8940,
        8942,3,1146,573,0,8941,8940,1,0,0,0,8941,8942,1,0,0,0,8942,8944,
        1,0,0,0,8943,8933,1,0,0,0,8943,8937,1,0,0,0,8943,8938,1,0,0,0,8944,
        1145,1,0,0,0,8945,8946,5,405,0,0,8946,1147,1,0,0,0,8947,8952,7,47,
        0,0,8948,8949,5,2,0,0,8949,8950,3,1398,699,0,8950,8951,5,3,0,0,8951,
        8953,1,0,0,0,8952,8948,1,0,0,0,8952,8953,1,0,0,0,8953,8955,1,0,0,
        0,8954,8956,3,1152,576,0,8955,8954,1,0,0,0,8955,8956,1,0,0,0,8956,
        1149,1,0,0,0,8957,8958,5,434,0,0,8958,1151,1,0,0,0,8959,8960,5,143,
        0,0,8960,8961,5,449,0,0,8961,8966,5,417,0,0,8962,8963,5,410,0,0,
        8963,8964,5,449,0,0,8964,8966,5,417,0,0,8965,8959,1,0,0,0,8965,8962,
        1,0,0,0,8966,1153,1,0,0,0,8967,8993,5,415,0,0,8968,8993,5,295,0,
        0,8969,8993,5,214,0,0,8970,8993,5,256,0,0,8971,8993,5,292,0,0,8972,
        8993,3,1156,578,0,8973,8974,5,415,0,0,8974,8975,5,132,0,0,8975,8993,
        5,295,0,0,8976,8977,5,214,0,0,8977,8981,5,132,0,0,8978,8982,5,256,
        0,0,8979,8982,5,292,0,0,8980,8982,3,1156,578,0,8981,8978,1,0,0,0,
        8981,8979,1,0,0,0,8981,8980,1,0,0,0,8982,8993,1,0,0,0,8983,8984,
        5,256,0,0,8984,8987,5,132,0,0,8985,8988,5,292,0,0,8986,8988,3,1156,
        578,0,8987,8985,1,0,0,0,8987,8986,1,0,0,0,8988,8993,1,0,0,0,8989,
        8990,5,292,0,0,8990,8991,5,132,0,0,8991,8993,3,1156,578,0,8992,8967,
        1,0,0,0,8992,8968,1,0,0,0,8992,8969,1,0,0,0,8992,8970,1,0,0,0,8992,
        8971,1,0,0,0,8992,8972,1,0,0,0,8992,8973,1,0,0,0,8992,8976,1,0,0,
        0,8992,8983,1,0,0,0,8992,8989,1,0,0,0,8993,1155,1,0,0,0,8994,8999,
        5,357,0,0,8995,8996,5,2,0,0,8996,8997,3,1398,699,0,8997,8998,5,3,
        0,0,8998,9000,1,0,0,0,8999,8995,1,0,0,0,8999,9000,1,0,0,0,9000,1157,
        1,0,0,0,9001,9002,5,30,0,0,9002,1159,1,0,0,0,9003,9004,5,235,0,0,
        9004,9005,3,1162,581,0,9005,1161,1,0,0,0,9006,9007,3,1164,582,0,
        9007,1163,1,0,0,0,9008,9012,3,1166,583,0,9009,9010,4,582,0,0,9010,
        9013,3,1274,637,0,9011,9013,1,0,0,0,9012,9009,1,0,0,0,9012,9011,
        1,0,0,0,9013,1165,1,0,0,0,9014,9019,3,1168,584,0,9015,9016,7,48,
        0,0,9016,9018,3,1168,584,0,9017,9015,1,0,0,0,9018,9021,1,0,0,0,9019,
        9017,1,0,0,0,9019,9020,1,0,0,0,9020,1167,1,0,0,0,9021,9019,1,0,0,
        0,9022,9027,3,1170,585,0,9023,9024,5,120,0,0,9024,9026,3,1170,585,
        0,9025,9023,1,0,0,0,9026,9029,1,0,0,0,9027,9025,1,0,0,0,9027,9028,
        1,0,0,0,9028,1169,1,0,0,0,9029,9027,1,0,0,0,9030,9035,3,1172,586,
        0,9031,9032,5,71,0,0,9032,9034,3,1172,586,0,9033,9031,1,0,0,0,9034,
        9037,1,0,0,0,9035,9033,1,0,0,0,9035,9036,1,0,0,0,9036,1171,1,0,0,
        0,9037,9035,1,0,0,0,9038,9050,3,1174,587,0,9039,9041,5,115,0,0,9040,
        9039,1,0,0,0,9040,9041,1,0,0,0,9041,9042,1,0,0,0,9042,9044,5,418,
        0,0,9043,9045,5,129,0,0,9044,9043,1,0,0,0,9044,9045,1,0,0,0,9045,
        9046,1,0,0,0,9046,9047,3,1174,587,0,9047,9048,5,71,0,0,9048,9049,
        3,1174,587,0,9049,9051,1,0,0,0,9050,9040,1,0,0,0,9050,9051,1,0,0,
        0,9051,1173,1,0,0,0,9052,9058,3,1176,588,0,9053,9055,5,115,0,0,9054,
        9053,1,0,0,0,9054,9055,1,0,0,0,9055,9056,1,0,0,0,9056,9057,5,106,
        0,0,9057,9059,3,1306,653,0,9058,9054,1,0,0,0,9058,9059,1,0,0,0,9059,
        1175,1,0,0,0,9060,9062,5,115,0,0,9061,9060,1,0,0,0,9061,9062,1,0,
        0,0,9062,9063,1,0,0,0,9063,9064,3,1178,589,0,9064,1177,1,0,0,0,9065,
        9067,3,1180,590,0,9066,9068,7,49,0,0,9067,9066,1,0,0,0,9067,9068,
        1,0,0,0,9068,1179,1,0,0,0,9069,9093,3,1182,591,0,9070,9072,5,154,
        0,0,9071,9073,5,115,0,0,9072,9071,1,0,0,0,9072,9073,1,0,0,0,9073,
        9091,1,0,0,0,9074,9092,5,116,0,0,9075,9092,5,134,0,0,9076,9092,5,
        98,0,0,9077,9092,5,396,0,0,9078,9079,5,94,0,0,9079,9080,5,102,0,
        0,9080,9092,3,1162,581,0,9081,9082,5,306,0,0,9082,9083,5,2,0,0,9083,
        9084,3,1286,643,0,9084,9085,5,3,0,0,9085,9092,1,0,0,0,9086,9092,
        5,226,0,0,9087,9089,3,1296,648,0,9088,9087,1,0,0,0,9088,9089,1,0,
        0,0,9089,9090,1,0,0,0,9090,9092,5,516,0,0,9091,9074,1,0,0,0,9091,
        9075,1,0,0,0,9091,9076,1,0,0,0,9091,9077,1,0,0,0,9091,9078,1,0,0,
        0,9091,9081,1,0,0,0,9091,9086,1,0,0,0,9091,9088,1,0,0,0,9092,9094,
        1,0,0,0,9093,9070,1,0,0,0,9093,9094,1,0,0,0,9094,1181,1,0,0,0,9095,
        9107,3,1184,592,0,9096,9097,7,50,0,0,9097,9108,3,1184,592,0,9098,
        9099,3,1278,639,0,9099,9105,3,1268,634,0,9100,9106,3,966,483,0,9101,
        9102,5,2,0,0,9102,9103,3,1162,581,0,9103,9104,5,3,0,0,9104,9106,
        1,0,0,0,9105,9100,1,0,0,0,9105,9101,1,0,0,0,9106,9108,1,0,0,0,9107,
        9096,1,0,0,0,9107,9098,1,0,0,0,9107,9108,1,0,0,0,9108,1183,1,0,0,
        0,9109,9123,3,1186,593,0,9110,9112,5,115,0,0,9111,9110,1,0,0,0,9111,
        9112,1,0,0,0,9112,9117,1,0,0,0,9113,9118,5,158,0,0,9114,9118,5,152,
        0,0,9115,9116,5,165,0,0,9116,9118,5,132,0,0,9117,9113,1,0,0,0,9117,
        9114,1,0,0,0,9117,9115,1,0,0,0,9118,9119,1,0,0,0,9119,9121,3,1186,
        593,0,9120,9122,3,1160,580,0,9121,9120,1,0,0,0,9121,9122,1,0,0,0,
        9122,9124,1,0,0,0,9123,9111,1,0,0,0,9123,9124,1,0,0,0,9124,1185,
        1,0,0,0,9125,9131,3,1188,594,0,9126,9127,3,1274,637,0,9127,9128,
        3,1188,594,0,9128,9130,1,0,0,0,9129,9126,1,0,0,0,9130,9133,1,0,0,
        0,9131,9129,1,0,0,0,9131,9132,1,0,0,0,9132,1187,1,0,0,0,9133,9131,
        1,0,0,0,9134,9136,3,1274,637,0,9135,9134,1,0,0,0,9135,9136,1,0,0,
        0,9136,9137,1,0,0,0,9137,9138,3,1190,595,0,9138,1189,1,0,0,0,9139,
        9144,3,1192,596,0,9140,9141,7,51,0,0,9141,9143,3,1192,596,0,9142,
        9140,1,0,0,0,9143,9146,1,0,0,0,9144,9142,1,0,0,0,9144,9145,1,0,0,
        0,9145,1191,1,0,0,0,9146,9144,1,0,0,0,9147,9152,3,1194,597,0,9148,
        9149,7,52,0,0,9149,9151,3,1194,597,0,9150,9148,1,0,0,0,9151,9154,
        1,0,0,0,9152,9150,1,0,0,0,9152,9153,1,0,0,0,9153,1193,1,0,0,0,9154,
        9152,1,0,0,0,9155,9158,3,1196,598,0,9156,9157,5,15,0,0,9157,9159,
        3,1196,598,0,9158,9156,1,0,0,0,9158,9159,1,0,0,0,9159,1195,1,0,0,
        0,9160,9162,7,51,0,0,9161,9160,1,0,0,0,9161,9162,1,0,0,0,9162,9163,
        1,0,0,0,9163,9164,3,1198,599,0,9164,1197,1,0,0,0,9165,9170,3,1200,
        600,0,9166,9167,5,180,0,0,9167,9168,5,449,0,0,9168,9169,5,417,0,
        0,9169,9171,3,1162,581,0,9170,9166,1,0,0,0,9170,9171,1,0,0,0,9171,
        1199,1,0,0,0,9172,9175,3,1202,601,0,9173,9174,5,81,0,0,9174,9176,
        3,520,260,0,9175,9173,1,0,0,0,9175,9176,1,0,0,0,9176,1201,1,0,0,
        0,9177,9182,3,1206,603,0,9178,9179,5,26,0,0,9179,9181,3,1116,558,
        0,9180,9178,1,0,0,0,9181,9184,1,0,0,0,9182,9180,1,0,0,0,9182,9183,
        1,0,0,0,9183,1203,1,0,0,0,9184,9182,1,0,0,0,9185,9186,6,602,-1,0,
        9186,9193,3,1206,603,0,9187,9188,7,51,0,0,9188,9193,3,1204,602,9,
        9189,9190,3,1274,637,0,9190,9191,3,1204,602,3,9191,9193,1,0,0,0,
        9192,9185,1,0,0,0,9192,9187,1,0,0,0,9192,9189,1,0,0,0,9193,9233,
        1,0,0,0,9194,9195,10,8,0,0,9195,9196,5,15,0,0,9196,9232,3,1204,602,
        9,9197,9198,10,7,0,0,9198,9199,7,52,0,0,9199,9232,3,1204,602,8,9200,
        9201,10,6,0,0,9201,9202,7,51,0,0,9202,9232,3,1204,602,7,9203,9204,
        10,5,0,0,9204,9205,3,1274,637,0,9205,9206,3,1204,602,6,9206,9232,
        1,0,0,0,9207,9208,10,4,0,0,9208,9209,7,50,0,0,9209,9232,3,1204,602,
        5,9210,9211,10,10,0,0,9211,9212,5,26,0,0,9212,9232,3,1116,558,0,
        9213,9214,10,2,0,0,9214,9232,3,1274,637,0,9215,9216,10,1,0,0,9216,
        9218,5,154,0,0,9217,9219,5,115,0,0,9218,9217,1,0,0,0,9218,9219,1,
        0,0,0,9219,9229,1,0,0,0,9220,9221,5,94,0,0,9221,9222,5,102,0,0,9222,
        9230,3,1204,602,0,9223,9224,5,306,0,0,9224,9225,5,2,0,0,9225,9226,
        3,1286,643,0,9226,9227,5,3,0,0,9227,9230,1,0,0,0,9228,9230,5,226,
        0,0,9229,9220,1,0,0,0,9229,9223,1,0,0,0,9229,9228,1,0,0,0,9230,9232,
        1,0,0,0,9231,9194,1,0,0,0,9231,9197,1,0,0,0,9231,9200,1,0,0,0,9231,
        9203,1,0,0,0,9231,9207,1,0,0,0,9231,9210,1,0,0,0,9231,9213,1,0,0,
        0,9231,9215,1,0,0,0,9232,9235,1,0,0,0,9233,9231,1,0,0,0,9233,9234,
        1,0,0,0,9234,1205,1,0,0,0,9235,9233,1,0,0,0,9236,9237,5,427,0,0,
        9237,9273,3,966,483,0,9238,9241,5,73,0,0,9239,9242,3,966,483,0,9240,
        9242,3,1288,644,0,9241,9239,1,0,0,0,9241,9240,1,0,0,0,9242,9273,
        1,0,0,0,9243,9244,5,28,0,0,9244,9273,3,1326,663,0,9245,9246,5,508,
        0,0,9246,9247,5,2,0,0,9247,9248,3,1280,640,0,9248,9249,5,3,0,0,9249,
        9273,1,0,0,0,9250,9251,5,136,0,0,9251,9273,3,966,483,0,9252,9273,
        3,1318,659,0,9253,9273,3,1390,695,0,9254,9255,5,2,0,0,9255,9256,
        3,1162,581,0,9256,9257,5,3,0,0,9257,9258,3,1326,663,0,9258,9273,
        1,0,0,0,9259,9273,3,1308,654,0,9260,9273,3,1212,606,0,9261,9263,
        3,966,483,0,9262,9264,3,1324,662,0,9263,9262,1,0,0,0,9263,9264,1,
        0,0,0,9264,9273,1,0,0,0,9265,9273,3,1264,632,0,9266,9273,3,1266,
        633,0,9267,9268,3,1262,631,0,9268,9269,5,163,0,0,9269,9270,3,1262,
        631,0,9270,9273,1,0,0,0,9271,9273,5,91,0,0,9272,9236,1,0,0,0,9272,
        9238,1,0,0,0,9272,9243,1,0,0,0,9272,9245,1,0,0,0,9272,9250,1,0,0,
        0,9272,9252,1,0,0,0,9272,9253,1,0,0,0,9272,9254,1,0,0,0,9272,9259,
        1,0,0,0,9272,9260,1,0,0,0,9272,9261,1,0,0,0,9272,9265,1,0,0,0,9272,
        9266,1,0,0,0,9272,9267,1,0,0,0,9272,9271,1,0,0,0,9273,1207,1,0,0,
        0,9274,9275,5,582,0,0,9275,1209,1,0,0,0,9276,9277,3,1388,694,0,9277,
        9299,5,2,0,0,9278,9282,3,1282,641,0,9279,9280,5,6,0,0,9280,9281,
        5,139,0,0,9281,9283,3,1284,642,0,9282,9279,1,0,0,0,9282,9283,1,0,
        0,0,9283,9285,1,0,0,0,9284,9286,3,1000,500,0,9285,9284,1,0,0,0,9285,
        9286,1,0,0,0,9286,9300,1,0,0,0,9287,9288,5,139,0,0,9288,9290,3,1284,
        642,0,9289,9291,3,1000,500,0,9290,9289,1,0,0,0,9290,9291,1,0,0,0,
        9291,9300,1,0,0,0,9292,9293,7,41,0,0,9293,9295,3,1282,641,0,9294,
        9296,3,1000,500,0,9295,9294,1,0,0,0,9295,9296,1,0,0,0,9296,9300,
        1,0,0,0,9297,9300,5,9,0,0,9298,9300,1,0,0,0,9299,9278,1,0,0,0,9299,
        9287,1,0,0,0,9299,9292,1,0,0,0,9299,9297,1,0,0,0,9299,9298,1,0,0,
        0,9300,9301,1,0,0,0,9301,9302,5,3,0,0,9302,1211,1,0,0,0,9303,9305,
        3,1210,605,0,9304,9306,3,1236,618,0,9305,9304,1,0,0,0,9305,9306,
        1,0,0,0,9306,9308,1,0,0,0,9307,9309,3,1238,619,0,9308,9307,1,0,0,
        0,9308,9309,1,0,0,0,9309,9311,1,0,0,0,9310,9312,3,1246,623,0,9311,
        9310,1,0,0,0,9311,9312,1,0,0,0,9312,9315,1,0,0,0,9313,9315,3,1216,
        608,0,9314,9303,1,0,0,0,9314,9313,1,0,0,0,9315,1213,1,0,0,0,9316,
        9319,3,1210,605,0,9317,9319,3,1216,608,0,9318,9316,1,0,0,0,9318,
        9317,1,0,0,0,9319,1215,1,0,0,0,9320,9321,5,146,0,0,9321,9322,5,100,
        0,0,9322,9323,5,2,0,0,9323,9324,3,1162,581,0,9324,9325,5,3,0,0,9325,
        9627,1,0,0,0,9326,9627,5,86,0,0,9327,9332,5,88,0,0,9328,9329,5,2,
        0,0,9329,9330,3,1398,699,0,9330,9331,5,3,0,0,9331,9333,1,0,0,0,9332,
        9328,1,0,0,0,9332,9333,1,0,0,0,9333,9627,1,0,0,0,9334,9339,5,89,
        0,0,9335,9336,5,2,0,0,9336,9337,3,1398,699,0,9337,9338,5,3,0,0,9338,
        9340,1,0,0,0,9339,9335,1,0,0,0,9339,9340,1,0,0,0,9340,9627,1,0,0,
        0,9341,9346,5,113,0,0,9342,9343,5,2,0,0,9343,9344,3,1398,699,0,9344,
        9345,5,3,0,0,9345,9347,1,0,0,0,9346,9342,1,0,0,0,9346,9347,1,0,0,
        0,9347,9627,1,0,0,0,9348,9353,5,114,0,0,9349,9350,5,2,0,0,9350,9351,
        3,1398,699,0,9351,9352,5,3,0,0,9352,9354,1,0,0,0,9353,9349,1,0,0,
        0,9353,9354,1,0,0,0,9354,9627,1,0,0,0,9355,9627,5,87,0,0,9356,9627,
        5,90,0,0,9357,9627,5,127,0,0,9358,9627,5,42,0,0,9359,9627,5,137,
        0,0,9360,9627,5,85,0,0,9361,9627,5,149,0,0,9362,9363,5,79,0,0,9363,
        9364,5,2,0,0,9364,9365,3,1162,581,0,9365,9366,5,74,0,0,9366,9367,
        3,1116,558,0,9367,9368,5,3,0,0,9368,9627,1,0,0,0,9369,9370,5,428,
        0,0,9370,9372,5,2,0,0,9371,9373,3,1292,646,0,9372,9371,1,0,0,0,9372,
        9373,1,0,0,0,9373,9374,1,0,0,0,9374,9627,5,3,0,0,9375,9376,5,527,
        0,0,9376,9377,5,2,0,0,9377,9380,3,1162,581,0,9378,9379,5,6,0,0,9379,
        9381,3,1296,648,0,9380,9378,1,0,0,0,9380,9381,1,0,0,0,9381,9382,
        1,0,0,0,9382,9383,5,3,0,0,9383,9627,1,0,0,0,9384,9385,5,441,0,0,
        9385,9390,5,2,0,0,9386,9391,3,1298,649,0,9387,9389,3,1282,641,0,
        9388,9387,1,0,0,0,9388,9389,1,0,0,0,9389,9391,1,0,0,0,9390,9386,
        1,0,0,0,9390,9388,1,0,0,0,9391,9392,1,0,0,0,9392,9627,5,3,0,0,9393,
        9394,5,442,0,0,9394,9396,5,2,0,0,9395,9397,3,1300,650,0,9396,9395,
        1,0,0,0,9396,9397,1,0,0,0,9397,9398,1,0,0,0,9398,9627,5,3,0,0,9399,
        9400,5,448,0,0,9400,9405,5,2,0,0,9401,9406,3,1302,651,0,9402,9404,
        3,1282,641,0,9403,9402,1,0,0,0,9403,9404,1,0,0,0,9404,9406,1,0,0,
        0,9405,9401,1,0,0,0,9405,9403,1,0,0,0,9406,9407,1,0,0,0,9407,9627,
        5,3,0,0,9408,9409,5,451,0,0,9409,9410,5,2,0,0,9410,9411,3,1162,581,
        0,9411,9412,5,74,0,0,9412,9413,3,1116,558,0,9413,9414,5,3,0,0,9414,
        9627,1,0,0,0,9415,9416,5,452,0,0,9416,9418,5,2,0,0,9417,9419,7,53,
        0,0,9418,9417,1,0,0,0,9418,9419,1,0,0,0,9419,9420,1,0,0,0,9420,9421,
        3,1304,652,0,9421,9422,5,3,0,0,9422,9627,1,0,0,0,9423,9424,5,439,
        0,0,9424,9425,5,2,0,0,9425,9426,3,1162,581,0,9426,9427,5,6,0,0,9427,
        9428,3,1162,581,0,9428,9429,5,3,0,0,9429,9627,1,0,0,0,9430,9431,
        5,424,0,0,9431,9432,5,2,0,0,9432,9433,3,1280,640,0,9433,9434,5,3,
        0,0,9434,9627,1,0,0,0,9435,9436,5,430,0,0,9436,9437,5,2,0,0,9437,
        9438,3,1280,640,0,9438,9439,5,3,0,0,9439,9627,1,0,0,0,9440,9441,
        5,435,0,0,9441,9442,5,2,0,0,9442,9443,3,1280,640,0,9443,9444,5,3,
        0,0,9444,9627,1,0,0,0,9445,9446,5,463,0,0,9446,9447,5,2,0,0,9447,
        9448,3,1280,640,0,9448,9449,5,3,0,0,9449,9627,1,0,0,0,9450,9451,
        5,464,0,0,9451,9452,5,2,0,0,9452,9453,5,297,0,0,9453,9459,3,1420,
        710,0,9454,9457,5,6,0,0,9455,9458,3,1222,611,0,9456,9458,3,1280,
        640,0,9457,9455,1,0,0,0,9457,9456,1,0,0,0,9458,9460,1,0,0,0,9459,
        9454,1,0,0,0,9459,9460,1,0,0,0,9460,9461,1,0,0,0,9461,9462,5,3,0,
        0,9462,9627,1,0,0,0,9463,9464,5,465,0,0,9464,9465,5,2,0,0,9465,9466,
        3,1206,603,0,9466,9467,3,1232,616,0,9467,9468,5,3,0,0,9468,9627,
        1,0,0,0,9469,9470,5,466,0,0,9470,9471,5,2,0,0,9471,9472,3,1224,612,
        0,9472,9473,5,3,0,0,9473,9627,1,0,0,0,9474,9475,5,467,0,0,9475,9476,
        5,2,0,0,9476,9477,3,1228,614,0,9477,9479,3,1162,581,0,9478,9480,
        3,1230,615,0,9479,9478,1,0,0,0,9479,9480,1,0,0,0,9480,9481,1,0,0,
        0,9481,9482,5,3,0,0,9482,9627,1,0,0,0,9483,9484,5,468,0,0,9484,9485,
        5,2,0,0,9485,9486,5,297,0,0,9486,9489,3,1420,710,0,9487,9488,5,6,
        0,0,9488,9490,3,1162,581,0,9489,9487,1,0,0,0,9489,9490,1,0,0,0,9490,
        9491,1,0,0,0,9491,9492,5,3,0,0,9492,9627,1,0,0,0,9493,9494,5,469,
        0,0,9494,9495,5,2,0,0,9495,9496,5,414,0,0,9496,9497,3,1162,581,0,
        9497,9498,5,6,0,0,9498,9500,3,1218,609,0,9499,9501,3,1220,610,0,
        9500,9499,1,0,0,0,9500,9501,1,0,0,0,9501,9502,1,0,0,0,9502,9503,
        5,3,0,0,9503,9627,1,0,0,0,9504,9505,5,470,0,0,9505,9506,5,2,0,0,
        9506,9507,3,1228,614,0,9507,9508,3,1162,581,0,9508,9509,5,74,0,0,
        9509,9510,3,1120,560,0,9510,9511,5,3,0,0,9511,9627,1,0,0,0,9512,
        9513,5,34,0,0,9513,9528,5,2,0,0,9514,9529,3,1282,641,0,9515,9517,
        3,1356,678,0,9516,9518,3,1360,680,0,9517,9516,1,0,0,0,9517,9518,
        1,0,0,0,9518,9520,1,0,0,0,9519,9521,3,1354,677,0,9520,9519,1,0,0,
        0,9520,9521,1,0,0,0,9521,9523,1,0,0,0,9522,9524,3,1350,675,0,9523,
        9522,1,0,0,0,9523,9524,1,0,0,0,9524,9529,1,0,0,0,9525,9527,3,1350,
        675,0,9526,9525,1,0,0,0,9526,9527,1,0,0,0,9527,9529,1,0,0,0,9528,
        9514,1,0,0,0,9528,9515,1,0,0,0,9528,9526,1,0,0,0,9529,9530,1,0,0,
        0,9530,9627,5,3,0,0,9531,9532,5,31,0,0,9532,9550,5,2,0,0,9533,9535,
        3,1364,682,0,9534,9536,3,1362,681,0,9535,9534,1,0,0,0,9535,9536,
        1,0,0,0,9536,9538,1,0,0,0,9537,9539,3,1350,675,0,9538,9537,1,0,0,
        0,9538,9539,1,0,0,0,9539,9551,1,0,0,0,9540,9542,3,968,484,0,9541,
        9543,3,1346,673,0,9542,9541,1,0,0,0,9542,9543,1,0,0,0,9543,9545,
        1,0,0,0,9544,9546,3,1350,675,0,9545,9544,1,0,0,0,9545,9546,1,0,0,
        0,9546,9551,1,0,0,0,9547,9549,3,1350,675,0,9548,9547,1,0,0,0,9548,
        9549,1,0,0,0,9549,9551,1,0,0,0,9550,9533,1,0,0,0,9550,9540,1,0,0,
        0,9550,9548,1,0,0,0,9551,9552,1,0,0,0,9552,9627,5,3,0,0,9553,9554,
        5,30,0,0,9554,9555,5,2,0,0,9555,9557,3,1344,672,0,9556,9558,3,1354,
        677,0,9557,9556,1,0,0,0,9557,9558,1,0,0,0,9558,9559,1,0,0,0,9559,
        9560,5,3,0,0,9560,9627,1,0,0,0,9561,9562,5,37,0,0,9562,9563,5,2,
        0,0,9563,9564,3,1162,581,0,9564,9565,5,3,0,0,9565,9627,1,0,0,0,9566,
        9567,5,38,0,0,9567,9568,5,2,0,0,9568,9570,3,1344,672,0,9569,9571,
        3,1350,675,0,9570,9569,1,0,0,0,9570,9571,1,0,0,0,9571,9572,1,0,0,
        0,9572,9573,5,3,0,0,9573,9627,1,0,0,0,9574,9575,5,41,0,0,9575,9576,
        5,2,0,0,9576,9627,5,3,0,0,9577,9578,5,36,0,0,9578,9579,5,2,0,0,9579,
        9580,3,1344,672,0,9580,9581,5,6,0,0,9581,9583,3,1162,581,0,9582,
        9584,3,1328,664,0,9583,9582,1,0,0,0,9583,9584,1,0,0,0,9584,9586,
        1,0,0,0,9585,9587,3,1350,675,0,9586,9585,1,0,0,0,9586,9587,1,0,0,
        0,9587,9588,1,0,0,0,9588,9590,3,1334,667,0,9589,9591,3,1348,674,
        0,9590,9589,1,0,0,0,9590,9591,1,0,0,0,9591,9593,1,0,0,0,9592,9594,
        3,1340,670,0,9593,9592,1,0,0,0,9593,9594,1,0,0,0,9594,9595,1,0,0,
        0,9595,9596,5,3,0,0,9596,9627,1,0,0,0,9597,9598,5,33,0,0,9598,9599,
        5,2,0,0,9599,9600,3,1344,672,0,9600,9601,5,6,0,0,9601,9603,3,1162,
        581,0,9602,9604,3,1328,664,0,9603,9602,1,0,0,0,9603,9604,1,0,0,0,
        9604,9606,1,0,0,0,9605,9607,3,1342,671,0,9606,9605,1,0,0,0,9606,
        9607,1,0,0,0,9607,9608,1,0,0,0,9608,9609,5,3,0,0,9609,9627,1,0,0,
        0,9610,9611,5,40,0,0,9611,9612,5,2,0,0,9612,9613,3,1344,672,0,9613,
        9614,5,6,0,0,9614,9616,3,1162,581,0,9615,9617,3,1328,664,0,9616,
        9615,1,0,0,0,9616,9617,1,0,0,0,9617,9619,1,0,0,0,9618,9620,3,1350,
        675,0,9619,9618,1,0,0,0,9619,9620,1,0,0,0,9620,9622,1,0,0,0,9621,
        9623,3,1340,670,0,9622,9621,1,0,0,0,9622,9623,1,0,0,0,9623,9624,
        1,0,0,0,9624,9625,5,3,0,0,9625,9627,1,0,0,0,9626,9320,1,0,0,0,9626,
        9326,1,0,0,0,9626,9327,1,0,0,0,9626,9334,1,0,0,0,9626,9341,1,0,0,
        0,9626,9348,1,0,0,0,9626,9355,1,0,0,0,9626,9356,1,0,0,0,9626,9357,
        1,0,0,0,9626,9358,1,0,0,0,9626,9359,1,0,0,0,9626,9360,1,0,0,0,9626,
        9361,1,0,0,0,9626,9362,1,0,0,0,9626,9369,1,0,0,0,9626,9375,1,0,0,
        0,9626,9384,1,0,0,0,9626,9393,1,0,0,0,9626,9399,1,0,0,0,9626,9408,
        1,0,0,0,9626,9415,1,0,0,0,9626,9423,1,0,0,0,9626,9430,1,0,0,0,9626,
        9435,1,0,0,0,9626,9440,1,0,0,0,9626,9445,1,0,0,0,9626,9450,1,0,0,
        0,9626,9463,1,0,0,0,9626,9469,1,0,0,0,9626,9474,1,0,0,0,9626,9483,
        1,0,0,0,9626,9493,1,0,0,0,9626,9504,1,0,0,0,9626,9512,1,0,0,0,9626,
        9531,1,0,0,0,9626,9553,1,0,0,0,9626,9561,1,0,0,0,9626,9566,1,0,0,
        0,9626,9574,1,0,0,0,9626,9577,1,0,0,0,9626,9597,1,0,0,0,9626,9610,
        1,0,0,0,9627,1217,1,0,0,0,9628,9629,5,406,0,0,9629,9634,3,1162,581,
        0,9630,9631,5,406,0,0,9631,9632,5,300,0,0,9632,9634,5,488,0,0,9633,
        9628,1,0,0,0,9633,9630,1,0,0,0,9634,1219,1,0,0,0,9635,9636,5,6,0,
        0,9636,9637,5,370,0,0,9637,9646,5,416,0,0,9638,9639,5,6,0,0,9639,
        9640,5,370,0,0,9640,9646,5,300,0,0,9641,9642,5,6,0,0,9642,9643,5,
        370,0,0,9643,9644,5,300,0,0,9644,9646,5,488,0,0,9645,9635,1,0,0,
        0,9645,9638,1,0,0,0,9645,9641,1,0,0,0,9646,1221,1,0,0,0,9647,9648,
        5,455,0,0,9648,9649,5,2,0,0,9649,9650,3,1224,612,0,9650,9651,5,3,
        0,0,9651,1223,1,0,0,0,9652,9657,3,1226,613,0,9653,9654,5,6,0,0,9654,
        9656,3,1226,613,0,9655,9653,1,0,0,0,9656,9659,1,0,0,0,9657,9655,
        1,0,0,0,9657,9658,1,0,0,0,9658,1225,1,0,0,0,9659,9657,1,0,0,0,9660,
        9663,3,1162,581,0,9661,9662,5,74,0,0,9662,9664,3,1420,710,0,9663,
        9661,1,0,0,0,9663,9664,1,0,0,0,9664,1227,1,0,0,0,9665,9666,7,54,
        0,0,9666,1229,1,0,0,0,9667,9668,5,323,0,0,9668,9672,5,409,0,0,9669,
        9670,5,378,0,0,9670,9672,5,409,0,0,9671,9667,1,0,0,0,9671,9669,1,
        0,0,0,9672,1231,1,0,0,0,9673,9674,5,317,0,0,9674,9689,3,1206,603,
        0,9675,9676,5,317,0,0,9676,9677,3,1206,603,0,9677,9678,3,1234,617,
        0,9678,9689,1,0,0,0,9679,9680,5,317,0,0,9680,9681,3,1234,617,0,9681,
        9682,3,1206,603,0,9682,9689,1,0,0,0,9683,9684,5,317,0,0,9684,9685,
        3,1234,617,0,9685,9686,3,1206,603,0,9686,9687,3,1234,617,0,9687,
        9689,1,0,0,0,9688,9673,1,0,0,0,9688,9675,1,0,0,0,9688,9679,1,0,0,
        0,9688,9683,1,0,0,0,9689,1233,1,0,0,0,9690,9691,5,185,0,0,9691,9692,
        7,55,0,0,9692,1235,1,0,0,0,9693,9694,5,517,0,0,9694,9695,5,104,0,
        0,9695,9696,5,2,0,0,9696,9697,3,1002,501,0,9697,9698,5,3,0,0,9698,
        1237,1,0,0,0,9699,9700,5,518,0,0,9700,9701,5,2,0,0,9701,9702,5,141,
        0,0,9702,9703,3,1162,581,0,9703,9704,5,3,0,0,9704,1239,1,0,0,0,9705,
        9706,5,142,0,0,9706,9707,3,1242,621,0,9707,1241,1,0,0,0,9708,9713,
        3,1244,622,0,9709,9710,5,6,0,0,9710,9712,3,1244,622,0,9711,9709,
        1,0,0,0,9712,9715,1,0,0,0,9713,9711,1,0,0,0,9713,9714,1,0,0,0,9714,
        1243,1,0,0,0,9715,9713,1,0,0,0,9716,9717,3,1414,707,0,9717,9718,
        5,74,0,0,9718,9719,3,1248,624,0,9719,1245,1,0,0,0,9720,9723,5,162,
        0,0,9721,9724,3,1248,624,0,9722,9724,3,1414,707,0,9723,9721,1,0,
        0,0,9723,9722,1,0,0,0,9724,1247,1,0,0,0,9725,9727,5,2,0,0,9726,9728,
        3,1250,625,0,9727,9726,1,0,0,0,9727,9728,1,0,0,0,9728,9730,1,0,0,
        0,9729,9731,3,1252,626,0,9730,9729,1,0,0,0,9730,9731,1,0,0,0,9731,
        9733,1,0,0,0,9732,9734,3,1000,500,0,9733,9732,1,0,0,0,9733,9734,
        1,0,0,0,9734,9736,1,0,0,0,9735,9737,3,1254,627,0,9736,9735,1,0,0,
        0,9736,9737,1,0,0,0,9737,9738,1,0,0,0,9738,9739,5,3,0,0,9739,1249,
        1,0,0,0,9740,9741,3,1414,707,0,9741,1251,1,0,0,0,9742,9743,5,316,
        0,0,9743,9744,5,185,0,0,9744,9745,3,1280,640,0,9745,1253,1,0,0,0,
        9746,9747,5,330,0,0,9747,9749,3,1256,628,0,9748,9750,3,1260,630,
        0,9749,9748,1,0,0,0,9749,9750,1,0,0,0,9750,9762,1,0,0,0,9751,9752,
        5,351,0,0,9752,9754,3,1256,628,0,9753,9755,3,1260,630,0,9754,9753,
        1,0,0,0,9754,9755,1,0,0,0,9755,9762,1,0,0,0,9756,9757,5,519,0,0,
        9757,9759,3,1256,628,0,9758,9760,3,1260,630,0,9759,9758,1,0,0,0,
        9759,9760,1,0,0,0,9760,9762,1,0,0,0,9761,9746,1,0,0,0,9761,9751,
        1,0,0,0,9761,9756,1,0,0,0,9762,1255,1,0,0,0,9763,9770,3,1258,629,
        0,9764,9765,5,418,0,0,9765,9766,3,1258,629,0,9766,9767,5,71,0,0,
        9767,9768,3,1258,629,0,9768,9770,1,0,0,0,9769,9763,1,0,0,0,9769,
        9764,1,0,0,0,9770,1257,1,0,0,0,9771,9772,5,393,0,0,9772,9779,7,56,
        0,0,9773,9774,5,472,0,0,9774,9779,5,445,0,0,9775,9776,3,1162,581,
        0,9776,9777,7,56,0,0,9777,9779,1,0,0,0,9778,9771,1,0,0,0,9778,9773,
        1,0,0,0,9778,9775,1,0,0,0,9779,1259,1,0,0,0,9780,9787,5,237,0,0,
        9781,9782,5,472,0,0,9782,9788,5,445,0,0,9783,9788,5,104,0,0,9784,
        9788,5,505,0,0,9785,9786,5,300,0,0,9786,9788,5,520,0,0,9787,9781,
        1,0,0,0,9787,9783,1,0,0,0,9787,9784,1,0,0,0,9787,9785,1,0,0,0,9788,
        1261,1,0,0,0,9789,9790,5,445,0,0,9790,9792,5,2,0,0,9791,9793,3,1280,
        640,0,9792,9791,1,0,0,0,9792,9793,1,0,0,0,9793,9794,1,0,0,0,9794,
        9802,5,3,0,0,9795,9796,5,2,0,0,9796,9797,3,1280,640,0,9797,9798,
        5,6,0,0,9798,9799,3,1162,581,0,9799,9800,5,3,0,0,9800,9802,1,0,0,
        0,9801,9789,1,0,0,0,9801,9795,1,0,0,0,9802,1263,1,0,0,0,9803,9804,
        5,445,0,0,9804,9806,5,2,0,0,9805,9807,3,1280,640,0,9806,9805,1,0,
        0,0,9806,9807,1,0,0,0,9807,9808,1,0,0,0,9808,9809,5,3,0,0,9809,1265,
        1,0,0,0,9810,9811,5,2,0,0,9811,9812,3,1280,640,0,9812,9813,5,6,0,
        0,9813,9814,3,1162,581,0,9814,9815,5,3,0,0,9815,1267,1,0,0,0,9816,
        9817,7,57,0,0,9817,1269,1,0,0,0,9818,9821,5,29,0,0,9819,9821,3,1272,
        636,0,9820,9818,1,0,0,0,9820,9819,1,0,0,0,9821,1271,1,0,0,0,9822,
        9823,7,58,0,0,9823,1273,1,0,0,0,9824,9831,5,29,0,0,9825,9826,5,309,
        0,0,9826,9827,5,2,0,0,9827,9828,3,682,341,0,9828,9829,5,3,0,0,9829,
        9831,1,0,0,0,9830,9824,1,0,0,0,9830,9825,1,0,0,0,9831,1275,1,0,0,
        0,9832,9839,3,1270,635,0,9833,9834,5,309,0,0,9834,9835,5,2,0,0,9835,
        9836,3,682,341,0,9836,9837,5,3,0,0,9837,9839,1,0,0,0,9838,9832,1,
        0,0,0,9838,9833,1,0,0,0,9839,1277,1,0,0,0,9840,9853,3,1270,635,0,
        9841,9842,5,309,0,0,9842,9843,5,2,0,0,9843,9844,3,682,341,0,9844,
        9845,5,3,0,0,9845,9853,1,0,0,0,9846,9853,5,158,0,0,9847,9848,5,115,
        0,0,9848,9853,5,158,0,0,9849,9853,5,152,0,0,9850,9851,5,115,0,0,
        9851,9853,5,152,0,0,9852,9840,1,0,0,0,9852,9841,1,0,0,0,9852,9846,
        1,0,0,0,9852,9847,1,0,0,0,9852,9849,1,0,0,0,9852,9850,1,0,0,0,9853,
        1279,1,0,0,0,9854,9859,3,1162,581,0,9855,9856,5,6,0,0,9856,9858,
        3,1162,581,0,9857,9855,1,0,0,0,9858,9861,1,0,0,0,9859,9857,1,0,0,
        0,9859,9860,1,0,0,0,9860,1281,1,0,0,0,9861,9859,1,0,0,0,9862,9867,
        3,1284,642,0,9863,9864,5,6,0,0,9864,9866,3,1284,642,0,9865,9863,
        1,0,0,0,9866,9869,1,0,0,0,9867,9865,1,0,0,0,9867,9868,1,0,0,0,9868,
        1283,1,0,0,0,9869,9867,1,0,0,0,9870,9876,3,1162,581,0,9871,9872,
        3,634,317,0,9872,9873,7,59,0,0,9873,9874,3,1162,581,0,9874,9876,
        1,0,0,0,9875,9870,1,0,0,0,9875,9871,1,0,0,0,9876,1285,1,0,0,0,9877,
        9882,3,1116,558,0,9878,9879,5,6,0,0,9879,9881,3,1116,558,0,9880,
        9878,1,0,0,0,9881,9884,1,0,0,0,9882,9880,1,0,0,0,9882,9883,1,0,0,
        0,9883,1287,1,0,0,0,9884,9882,1,0,0,0,9885,9888,5,4,0,0,9886,9889,
        3,1280,640,0,9887,9889,3,1290,645,0,9888,9886,1,0,0,0,9888,9887,
        1,0,0,0,9888,9889,1,0,0,0,9889,9890,1,0,0,0,9890,9891,5,5,0,0,9891,
        1289,1,0,0,0,9892,9897,3,1288,644,0,9893,9894,5,6,0,0,9894,9896,
        3,1288,644,0,9895,9893,1,0,0,0,9896,9899,1,0,0,0,9897,9895,1,0,0,
        0,9897,9898,1,0,0,0,9898,1291,1,0,0,0,9899,9897,1,0,0,0,9900,9901,
        3,1294,647,0,9901,9902,5,102,0,0,9902,9903,3,1162,581,0,9903,1293,
        1,0,0,0,9904,9913,3,1436,718,0,9905,9913,5,415,0,0,9906,9913,5,295,
        0,0,9907,9913,5,214,0,0,9908,9913,5,256,0,0,9909,9913,5,292,0,0,
        9910,9913,5,357,0,0,9911,9913,3,1400,700,0,9912,9904,1,0,0,0,9912,
        9905,1,0,0,0,9912,9906,1,0,0,0,9912,9907,1,0,0,0,9912,9908,1,0,0,
        0,9912,9909,1,0,0,0,9912,9910,1,0,0,0,9912,9911,1,0,0,0,9913,1295,
        1,0,0,0,9914,9915,7,60,0,0,9915,1297,1,0,0,0,9916,9917,3,1162,581,
        0,9917,9918,5,122,0,0,9918,9919,3,1162,581,0,9919,9920,5,102,0,0,
        9920,9923,3,1162,581,0,9921,9922,5,100,0,0,9922,9924,3,1162,581,
        0,9923,9921,1,0,0,0,9923,9924,1,0,0,0,9924,1299,1,0,0,0,9925,9926,
        3,1204,602,0,9926,9927,5,106,0,0,9927,9928,3,1204,602,0,9928,1301,
        1,0,0,0,9929,9930,3,1162,581,0,9930,9931,5,102,0,0,9931,9932,3,1162,
        581,0,9932,9933,5,100,0,0,9933,9934,3,1162,581,0,9934,9956,1,0,0,
        0,9935,9936,3,1162,581,0,9936,9937,5,100,0,0,9937,9938,3,1162,581,
        0,9938,9939,5,102,0,0,9939,9940,3,1162,581,0,9940,9956,1,0,0,0,9941,
        9942,3,1162,581,0,9942,9943,5,102,0,0,9943,9944,3,1162,581,0,9944,
        9956,1,0,0,0,9945,9946,3,1162,581,0,9946,9947,5,100,0,0,9947,9948,
        3,1162,581,0,9948,9956,1,0,0,0,9949,9950,3,1162,581,0,9950,9951,
        5,165,0,0,9951,9952,3,1162,581,0,9952,9953,5,235,0,0,9953,9954,3,
        1162,581,0,9954,9956,1,0,0,0,9955,9929,1,0,0,0,9955,9935,1,0,0,0,
        9955,9941,1,0,0,0,9955,9945,1,0,0,0,9955,9949,1,0,0,0,9956,1303,
        1,0,0,0,9957,9958,3,1162,581,0,9958,9959,5,102,0,0,9959,9960,3,1280,
        640,0,9960,9965,1,0,0,0,9961,9962,5,102,0,0,9962,9965,3,1280,640,
        0,9963,9965,3,1280,640,0,9964,9957,1,0,0,0,9964,9961,1,0,0,0,9964,
        9963,1,0,0,0,9965,1305,1,0,0,0,9966,9972,3,966,483,0,9967,9968,5,
        2,0,0,9968,9969,3,1280,640,0,9969,9970,5,3,0,0,9970,9972,1,0,0,0,
        9971,9966,1,0,0,0,9971,9967,1,0,0,0,9972,1307,1,0,0,0,9973,9975,
        5,78,0,0,9974,9976,3,1316,658,0,9975,9974,1,0,0,0,9975,9976,1,0,
        0,0,9976,9977,1,0,0,0,9977,9979,3,1310,655,0,9978,9980,3,1314,657,
        0,9979,9978,1,0,0,0,9979,9980,1,0,0,0,9980,9981,1,0,0,0,9981,9982,
        5,492,0,0,9982,1309,1,0,0,0,9983,9985,3,1312,656,0,9984,9983,1,0,
        0,0,9985,9986,1,0,0,0,9986,9984,1,0,0,0,9986,9987,1,0,0,0,9987,1311,
        1,0,0,0,9988,9989,5,140,0,0,9989,9990,3,1162,581,0,9990,9991,5,131,
        0,0,9991,9992,3,1162,581,0,9992,1313,1,0,0,0,9993,9994,5,96,0,0,
        9994,9995,3,1162,581,0,9995,1315,1,0,0,0,9996,9997,3,1162,581,0,
        9997,1317,1,0,0,0,9998,10000,3,1414,707,0,9999,10001,3,1324,662,
        0,10000,9999,1,0,0,0,10000,10001,1,0,0,0,10001,1319,1,0,0,0,10002,
        10005,5,11,0,0,10003,10006,3,1384,692,0,10004,10006,5,9,0,0,10005,
        10003,1,0,0,0,10005,10004,1,0,0,0,10006,10020,1,0,0,0,10007,10016,
        5,4,0,0,10008,10017,3,1162,581,0,10009,10011,3,1322,661,0,10010,
        10009,1,0,0,0,10010,10011,1,0,0,0,10011,10012,1,0,0,0,10012,10014,
        5,8,0,0,10013,10015,3,1322,661,0,10014,10013,1,0,0,0,10014,10015,
        1,0,0,0,10015,10017,1,0,0,0,10016,10008,1,0,0,0,10016,10010,1,0,
        0,0,10017,10018,1,0,0,0,10018,10020,5,5,0,0,10019,10002,1,0,0,0,
        10019,10007,1,0,0,0,10020,1321,1,0,0,0,10021,10022,3,1162,581,0,
        10022,1323,1,0,0,0,10023,10025,3,1320,660,0,10024,10023,1,0,0,0,
        10025,10026,1,0,0,0,10026,10024,1,0,0,0,10026,10027,1,0,0,0,10027,
        1325,1,0,0,0,10028,10030,3,1320,660,0,10029,10028,1,0,0,0,10030,
        10033,1,0,0,0,10031,10029,1,0,0,0,10031,10032,1,0,0,0,10032,1327,
        1,0,0,0,10033,10031,1,0,0,0,10034,10035,5,317,0,0,10035,10036,3,
        1330,665,0,10036,1329,1,0,0,0,10037,10038,6,665,-1,0,10038,10039,
        3,1332,666,0,10039,10045,1,0,0,0,10040,10041,10,1,0,0,10041,10042,
        5,6,0,0,10042,10044,3,1332,666,0,10043,10040,1,0,0,0,10044,10047,
        1,0,0,0,10045,10043,1,0,0,0,10045,10046,1,0,0,0,10046,1331,1,0,0,
        0,10047,10045,1,0,0,0,10048,10049,3,1344,672,0,10049,10050,5,74,
        0,0,10050,10051,3,1420,710,0,10051,1333,1,0,0,0,10052,10053,5,410,
        0,0,10053,10078,5,412,0,0,10054,10055,5,410,0,0,10055,10056,5,73,
        0,0,10056,10078,5,412,0,0,10057,10058,5,143,0,0,10058,10078,5,412,
        0,0,10059,10060,5,143,0,0,10060,10061,5,73,0,0,10061,10078,5,412,
        0,0,10062,10063,5,143,0,0,10063,10064,5,48,0,0,10064,10065,5,73,
        0,0,10065,10078,5,412,0,0,10066,10067,5,143,0,0,10067,10068,5,65,
        0,0,10068,10069,5,73,0,0,10069,10078,5,412,0,0,10070,10071,5,143,
        0,0,10071,10072,5,48,0,0,10072,10078,5,412,0,0,10073,10074,5,143,
        0,0,10074,10075,5,65,0,0,10075,10078,5,412,0,0,10076,10078,1,0,0,
        0,10077,10052,1,0,0,0,10077,10054,1,0,0,0,10077,10057,1,0,0,0,10077,
        10059,1,0,0,0,10077,10062,1,0,0,0,10077,10066,1,0,0,0,10077,10070,
        1,0,0,0,10077,10073,1,0,0,0,10077,10076,1,0,0,0,10078,1335,1,0,0,
        0,10079,10080,5,91,0,0,10080,10083,3,1162,581,0,10081,10083,3,1338,
        669,0,10082,10079,1,0,0,0,10082,10081,1,0,0,0,10083,1337,1,0,0,0,
        10084,10095,5,529,0,0,10085,10095,5,116,0,0,10086,10095,5,134,0,
        0,10087,10095,5,98,0,0,10088,10095,5,396,0,0,10089,10090,5,50,0,
        0,10090,10095,5,73,0,0,10091,10092,5,50,0,0,10092,10095,5,305,0,
        0,10093,10095,5,50,0,0,10094,10084,1,0,0,0,10094,10085,1,0,0,0,10094,
        10086,1,0,0,0,10094,10087,1,0,0,0,10094,10088,1,0,0,0,10094,10089,
        1,0,0,0,10094,10091,1,0,0,0,10094,10093,1,0,0,0,10095,1339,1,0,0,
        0,10096,10097,3,1336,668,0,10097,10098,5,118,0,0,10098,10099,5,50,
        0,0,10099,10112,1,0,0,0,10100,10101,3,1336,668,0,10101,10102,5,118,
        0,0,10102,10103,5,529,0,0,10103,10112,1,0,0,0,10104,10105,3,1336,
        668,0,10105,10106,5,118,0,0,10106,10107,5,50,0,0,10107,10108,3,1336,
        668,0,10108,10109,5,118,0,0,10109,10110,5,529,0,0,10110,10112,1,
        0,0,0,10111,10096,1,0,0,0,10111,10100,1,0,0,0,10111,10104,1,0,0,
        0,10112,1341,1,0,0,0,10113,10114,3,1336,668,0,10114,10115,5,118,
        0,0,10115,10116,5,529,0,0,10116,1343,1,0,0,0,10117,10119,3,1162,
        581,0,10118,10120,3,1346,673,0,10119,10118,1,0,0,0,10119,10120,1,
        0,0,0,10120,1345,1,0,0,0,10121,10122,5,67,0,0,10122,10123,5,30,0,
        0,10123,10124,5,232,0,0,10124,10128,3,1382,691,0,10125,10126,5,67,
        0,0,10126,10128,5,30,0,0,10127,10121,1,0,0,0,10127,10125,1,0,0,0,
        10128,1347,1,0,0,0,10129,10130,5,53,0,0,10130,10131,5,60,0,0,10131,
        10132,5,118,0,0,10132,10133,5,61,0,0,10133,10144,5,63,0,0,10134,
        10135,5,53,0,0,10135,10144,5,60,0,0,10136,10137,5,56,0,0,10137,10138,
        5,60,0,0,10138,10139,5,118,0,0,10139,10140,5,61,0,0,10140,10144,
        5,63,0,0,10141,10142,5,56,0,0,10142,10144,5,60,0,0,10143,10129,1,
        0,0,0,10143,10134,1,0,0,0,10143,10136,1,0,0,0,10143,10141,1,0,0,
        0,10144,1349,1,0,0,0,10145,10146,5,125,0,0,10146,10148,3,1116,558,
        0,10147,10149,3,1346,673,0,10148,10147,1,0,0,0,10148,10149,1,0,0,
        0,10149,1351,1,0,0,0,10150,10160,5,30,0,0,10151,10152,5,30,0,0,10152,
        10160,5,488,0,0,10153,10154,5,30,0,0,10154,10160,5,73,0,0,10155,
        10156,5,30,0,0,10156,10160,5,305,0,0,10157,10158,5,30,0,0,10158,
        10160,5,61,0,0,10159,10150,1,0,0,0,10159,10151,1,0,0,0,10159,10153,
        1,0,0,0,10159,10155,1,0,0,0,10159,10157,1,0,0,0,10160,1353,1,0,0,
        0,10161,10162,5,143,0,0,10162,10163,5,136,0,0,10163,10172,5,54,0,
        0,10164,10165,5,143,0,0,10165,10172,5,136,0,0,10166,10167,5,410,
        0,0,10167,10168,5,136,0,0,10168,10172,5,54,0,0,10169,10170,5,410,
        0,0,10170,10172,5,136,0,0,10171,10161,1,0,0,0,10171,10164,1,0,0,
        0,10171,10166,1,0,0,0,10171,10169,1,0,0,0,10172,1355,1,0,0,0,10173,
        10174,6,678,-1,0,10174,10175,3,1358,679,0,10175,10181,1,0,0,0,10176,
        10177,10,1,0,0,10177,10178,5,6,0,0,10178,10180,3,1358,679,0,10179,
        10176,1,0,0,0,10180,10183,1,0,0,0,10181,10179,1,0,0,0,10181,10182,
        1,0,0,0,10182,1357,1,0,0,0,10183,10181,1,0,0,0,10184,10185,3,1206,
        603,0,10185,10186,5,488,0,0,10186,10187,3,1344,672,0,10187,10193,
        1,0,0,0,10188,10189,3,1162,581,0,10189,10190,5,8,0,0,10190,10191,
        3,1344,672,0,10191,10193,1,0,0,0,10192,10184,1,0,0,0,10192,10188,
        1,0,0,0,10193,1359,1,0,0,0,10194,10195,5,116,0,0,10195,10196,5,118,
        0,0,10196,10201,5,116,0,0,10197,10198,5,43,0,0,10198,10199,5,118,
        0,0,10199,10201,5,116,0,0,10200,10194,1,0,0,0,10200,10197,1,0,0,
        0,10201,1361,1,0,0,0,10202,10203,5,116,0,0,10203,10204,5,118,0,0,
        10204,10209,5,116,0,0,10205,10206,5,43,0,0,10206,10207,5,118,0,0,
        10207,10209,5,116,0,0,10208,10202,1,0,0,0,10208,10205,1,0,0,0,10209,
        1363,1,0,0,0,10210,10211,6,682,-1,0,10211,10212,3,1344,672,0,10212,
        10218,1,0,0,0,10213,10214,10,1,0,0,10214,10215,5,6,0,0,10215,10217,
        3,1344,672,0,10216,10213,1,0,0,0,10217,10220,1,0,0,0,10218,10216,
        1,0,0,0,10218,10219,1,0,0,0,10219,1365,1,0,0,0,10220,10218,1,0,0,
        0,10221,10222,5,35,0,0,10222,10223,5,2,0,0,10223,10225,3,1358,679,
        0,10224,10226,3,1360,680,0,10225,10224,1,0,0,0,10225,10226,1,0,0,
        0,10226,10228,1,0,0,0,10227,10229,3,1354,677,0,10228,10227,1,0,0,
        0,10228,10229,1,0,0,0,10229,10230,1,0,0,0,10230,10231,3,1350,675,
        0,10231,10232,5,3,0,0,10232,10246,1,0,0,0,10233,10234,5,32,0,0,10234,
        10235,5,2,0,0,10235,10237,3,1344,672,0,10236,10238,3,1368,684,0,
        10237,10236,1,0,0,0,10237,10238,1,0,0,0,10238,10240,1,0,0,0,10239,
        10241,3,1362,681,0,10240,10239,1,0,0,0,10240,10241,1,0,0,0,10241,
        10242,1,0,0,0,10242,10243,3,1350,675,0,10243,10244,5,3,0,0,10244,
        10246,1,0,0,0,10245,10221,1,0,0,0,10245,10233,1,0,0,0,10246,1367,
        1,0,0,0,10247,10248,5,121,0,0,10248,10249,5,185,0,0,10249,10250,
        3,1004,502,0,10250,1369,1,0,0,0,10251,10252,3,1372,686,0,10252,1371,
        1,0,0,0,10253,10258,3,1374,687,0,10254,10255,5,6,0,0,10255,10257,
        3,1374,687,0,10256,10254,1,0,0,0,10257,10260,1,0,0,0,10258,10256,
        1,0,0,0,10258,10259,1,0,0,0,10259,1373,1,0,0,0,10260,10258,1,0,0,
        0,10261,10266,3,1162,581,0,10262,10263,5,74,0,0,10263,10267,3,1420,
        710,0,10264,10267,3,1422,711,0,10265,10267,1,0,0,0,10266,10262,1,
        0,0,0,10266,10264,1,0,0,0,10266,10265,1,0,0,0,10267,10270,1,0,0,
        0,10268,10270,5,9,0,0,10269,10261,1,0,0,0,10269,10268,1,0,0,0,10270,
        1375,1,0,0,0,10271,10276,3,1378,689,0,10272,10273,5,6,0,0,10273,
        10275,3,1378,689,0,10274,10272,1,0,0,0,10275,10278,1,0,0,0,10276,
        10274,1,0,0,0,10276,10277,1,0,0,0,10277,1377,1,0,0,0,10278,10276,
        1,0,0,0,10279,10281,3,1414,707,0,10280,10282,3,1324,662,0,10281,
        10280,1,0,0,0,10281,10282,1,0,0,0,10282,1379,1,0,0,0,10283,10288,
        3,1382,691,0,10284,10285,5,6,0,0,10285,10287,3,1382,691,0,10286,
        10284,1,0,0,0,10287,10290,1,0,0,0,10288,10286,1,0,0,0,10288,10289,
        1,0,0,0,10289,1381,1,0,0,0,10290,10288,1,0,0,0,10291,10292,3,1414,
        707,0,10292,1383,1,0,0,0,10293,10294,3,1420,710,0,10294,1385,1,0,
        0,0,10295,10296,3,1400,700,0,10296,1387,1,0,0,0,10297,10302,3,1416,
        708,0,10298,10299,3,1414,707,0,10299,10300,3,1324,662,0,10300,10302,
        1,0,0,0,10301,10297,1,0,0,0,10301,10298,1,0,0,0,10302,1389,1,0,0,
        0,10303,10339,3,1398,699,0,10304,10339,3,1396,698,0,10305,10339,
        3,1400,700,0,10306,10339,3,1394,697,0,10307,10339,3,1392,696,0,10308,
        10318,3,1388,694,0,10309,10319,3,1400,700,0,10310,10311,5,2,0,0,
        10311,10313,3,1282,641,0,10312,10314,3,1000,500,0,10313,10312,1,
        0,0,0,10313,10314,1,0,0,0,10314,10315,1,0,0,0,10315,10316,5,3,0,
        0,10316,10317,3,1400,700,0,10317,10319,1,0,0,0,10318,10309,1,0,0,
        0,10318,10310,1,0,0,0,10319,10339,1,0,0,0,10320,10321,3,1122,561,
        0,10321,10322,3,1400,700,0,10322,10339,1,0,0,0,10323,10333,3,1150,
        575,0,10324,10326,3,1400,700,0,10325,10327,3,1154,577,0,10326,10325,
        1,0,0,0,10326,10327,1,0,0,0,10327,10334,1,0,0,0,10328,10329,5,2,
        0,0,10329,10330,3,1398,699,0,10330,10331,5,3,0,0,10331,10332,3,1400,
        700,0,10332,10334,1,0,0,0,10333,10324,1,0,0,0,10333,10328,1,0,0,
        0,10334,10339,1,0,0,0,10335,10339,5,134,0,0,10336,10339,5,98,0,0,
        10337,10339,5,116,0,0,10338,10303,1,0,0,0,10338,10304,1,0,0,0,10338,
        10305,1,0,0,0,10338,10306,1,0,0,0,10338,10307,1,0,0,0,10338,10308,
        1,0,0,0,10338,10320,1,0,0,0,10338,10323,1,0,0,0,10338,10335,1,0,
        0,0,10338,10336,1,0,0,0,10338,10337,1,0,0,0,10339,1391,1,0,0,0,10340,
        10341,5,572,0,0,10341,1393,1,0,0,0,10342,10343,5,568,0,0,10343,1395,
        1,0,0,0,10344,10345,5,581,0,0,10345,1397,1,0,0,0,10346,10347,7,61,
        0,0,10347,1399,1,0,0,0,10348,10350,3,1402,701,0,10349,10351,3,1404,
        702,0,10350,10349,1,0,0,0,10350,10351,1,0,0,0,10351,1401,1,0,0,0,
        10352,10364,5,563,0,0,10353,10364,5,565,0,0,10354,10358,5,567,0,
        0,10355,10357,5,596,0,0,10356,10355,1,0,0,0,10357,10360,1,0,0,0,
        10358,10356,1,0,0,0,10358,10359,1,0,0,0,10359,10361,1,0,0,0,10360,
        10358,1,0,0,0,10361,10364,5,597,0,0,10362,10364,5,590,0,0,10363,
        10352,1,0,0,0,10363,10353,1,0,0,0,10363,10354,1,0,0,0,10363,10362,
        1,0,0,0,10364,1403,1,0,0,0,10365,10366,5,525,0,0,10366,10367,3,1402,
        701,0,10367,1405,1,0,0,0,10368,10374,3,1398,699,0,10369,10370,5,
        12,0,0,10370,10374,3,1398,699,0,10371,10372,5,13,0,0,10372,10374,
        3,1398,699,0,10373,10368,1,0,0,0,10373,10369,1,0,0,0,10373,10371,
        1,0,0,0,10374,1407,1,0,0,0,10375,10376,3,1410,705,0,10376,1409,1,
        0,0,0,10377,10381,3,1418,709,0,10378,10381,5,90,0,0,10379,10381,
        5,127,0,0,10380,10377,1,0,0,0,10380,10378,1,0,0,0,10380,10379,1,
        0,0,0,10381,1411,1,0,0,0,10382,10387,3,1410,705,0,10383,10384,5,
        6,0,0,10384,10386,3,1410,705,0,10385,10383,1,0,0,0,10386,10389,1,
        0,0,0,10387,10385,1,0,0,0,10387,10388,1,0,0,0,10388,1413,1,0,0,0,
        10389,10387,1,0,0,0,10390,10394,3,1436,718,0,10391,10394,3,1424,
        712,0,10392,10394,3,1426,713,0,10393,10390,1,0,0,0,10393,10391,1,
        0,0,0,10393,10392,1,0,0,0,10394,1415,1,0,0,0,10395,10399,3,1436,
        718,0,10396,10399,3,1424,712,0,10397,10399,3,1428,714,0,10398,10395,
        1,0,0,0,10398,10396,1,0,0,0,10398,10397,1,0,0,0,10399,1417,1,0,0,
        0,10400,10405,3,1436,718,0,10401,10405,3,1424,712,0,10402,10405,
        3,1426,713,0,10403,10405,3,1428,714,0,10404,10400,1,0,0,0,10404,
        10401,1,0,0,0,10404,10402,1,0,0,0,10404,10403,1,0,0,0,10405,1419,
        1,0,0,0,10406,10413,3,1436,718,0,10407,10413,3,1424,712,0,10408,
        10413,3,1426,713,0,10409,10413,3,1428,714,0,10410,10413,3,1430,715,
        0,10411,10413,5,541,0,0,10412,10406,1,0,0,0,10412,10407,1,0,0,0,
        10412,10408,1,0,0,0,10412,10409,1,0,0,0,10412,10410,1,0,0,0,10412,
        10411,1,0,0,0,10413,1421,1,0,0,0,10414,10417,3,1436,718,0,10415,
        10417,3,1432,716,0,10416,10414,1,0,0,0,10416,10415,1,0,0,0,10417,
        1423,1,0,0,0,10418,10419,7,62,0,0,10419,1425,1,0,0,0,10420,10484,
        5,418,0,0,10421,10484,5,419,0,0,10422,10484,5,420,0,0,10423,10484,
        5,421,0,0,10424,10484,5,422,0,0,10425,10484,3,1140,570,0,10426,10484,
        5,424,0,0,10427,10484,5,425,0,0,10428,10484,5,426,0,0,10429,10484,
        5,427,0,0,10430,10484,5,428,0,0,10431,10484,5,429,0,0,10432,10484,
        5,430,0,0,10433,10484,5,508,0,0,10434,10484,5,431,0,0,10435,10484,
        5,432,0,0,10436,10484,5,433,0,0,10437,10484,5,434,0,0,10438,10484,
        5,30,0,0,10439,10484,5,31,0,0,10440,10484,5,32,0,0,10441,10484,5,
        33,0,0,10442,10484,5,34,0,0,10443,10484,5,35,0,0,10444,10484,5,36,
        0,0,10445,10484,5,37,0,0,10446,10484,5,38,0,0,10447,10484,5,39,0,
        0,10448,10484,5,40,0,0,10449,10484,5,435,0,0,10450,10484,5,41,0,
        0,10451,10484,5,436,0,0,10452,10484,5,437,0,0,10453,10484,5,438,
        0,0,10454,10484,5,527,0,0,10455,10484,5,439,0,0,10456,10484,5,440,
        0,0,10457,10484,5,491,0,0,10458,10484,5,441,0,0,10459,10484,5,442,
        0,0,10460,10484,5,443,0,0,10461,10484,5,444,0,0,10462,10484,5,445,
        0,0,10463,10484,5,446,0,0,10464,10484,5,447,0,0,10465,10484,5,448,
        0,0,10466,10484,5,449,0,0,10467,10484,5,450,0,0,10468,10484,5,451,
        0,0,10469,10484,5,452,0,0,10470,10484,5,453,0,0,10471,10484,5,454,
        0,0,10472,10484,5,455,0,0,10473,10484,5,463,0,0,10474,10484,5,464,
        0,0,10475,10484,5,465,0,0,10476,10484,5,466,0,0,10477,10484,5,514,
        0,0,10478,10484,5,467,0,0,10479,10484,5,468,0,0,10480,10484,5,469,
        0,0,10481,10484,5,470,0,0,10482,10484,5,512,0,0,10483,10420,1,0,
        0,0,10483,10421,1,0,0,0,10483,10422,1,0,0,0,10483,10423,1,0,0,0,
        10483,10424,1,0,0,0,10483,10425,1,0,0,0,10483,10426,1,0,0,0,10483,
        10427,1,0,0,0,10483,10428,1,0,0,0,10483,10429,1,0,0,0,10483,10430,
        1,0,0,0,10483,10431,1,0,0,0,10483,10432,1,0,0,0,10483,10433,1,0,
        0,0,10483,10434,1,0,0,0,10483,10435,1,0,0,0,10483,10436,1,0,0,0,
        10483,10437,1,0,0,0,10483,10438,1,0,0,0,10483,10439,1,0,0,0,10483,
        10440,1,0,0,0,10483,10441,1,0,0,0,10483,10442,1,0,0,0,10483,10443,
        1,0,0,0,10483,10444,1,0,0,0,10483,10445,1,0,0,0,10483,10446,1,0,
        0,0,10483,10447,1,0,0,0,10483,10448,1,0,0,0,10483,10449,1,0,0,0,
        10483,10450,1,0,0,0,10483,10451,1,0,0,0,10483,10452,1,0,0,0,10483,
        10453,1,0,0,0,10483,10454,1,0,0,0,10483,10455,1,0,0,0,10483,10456,
        1,0,0,0,10483,10457,1,0,0,0,10483,10458,1,0,0,0,10483,10459,1,0,
        0,0,10483,10460,1,0,0,0,10483,10461,1,0,0,0,10483,10462,1,0,0,0,
        10483,10463,1,0,0,0,10483,10464,1,0,0,0,10483,10465,1,0,0,0,10483,
        10466,1,0,0,0,10483,10467,1,0,0,0,10483,10468,1,0,0,0,10483,10469,
        1,0,0,0,10483,10470,1,0,0,0,10483,10471,1,0,0,0,10483,10472,1,0,
        0,0,10483,10473,1,0,0,0,10483,10474,1,0,0,0,10483,10475,1,0,0,0,
        10483,10476,1,0,0,0,10483,10477,1,0,0,0,10483,10478,1,0,0,0,10483,
        10479,1,0,0,0,10483,10480,1,0,0,0,10483,10481,1,0,0,0,10483,10482,
        1,0,0,0,10484,1427,1,0,0,0,10485,10486,7,63,0,0,10486,1429,1,0,0,
        0,10487,10488,7,64,0,0,10488,1431,1,0,0,0,10489,10490,7,65,0,0,10490,
        1433,1,0,0,0,10491,10492,3,1414,707,0,10492,1435,1,0,0,0,10493,10495,
        5,554,0,0,10494,10496,3,1404,702,0,10495,10494,1,0,0,0,10495,10496,
        1,0,0,0,10496,10501,1,0,0,0,10497,10501,5,555,0,0,10498,10501,5,
        559,0,0,10499,10501,5,582,0,0,10500,10493,1,0,0,0,10500,10497,1,
        0,0,0,10500,10498,1,0,0,0,10500,10499,1,0,0,0,10501,1437,1,0,0,0,
        1046,1444,1448,1452,1579,1588,1597,1603,1609,1624,1636,1642,1650,
        1661,1665,1673,1681,1699,1702,1707,1716,1725,1729,1741,1747,1763,
        1776,1783,1791,1796,1803,1809,1816,1827,1831,1835,1848,1852,1857,
        1862,1874,1883,1896,1901,1912,1918,1924,1929,1940,1946,1952,1961,
        1971,1986,1992,1999,2004,2011,2022,2046,2053,2062,2071,2079,2089,
        2098,2107,2115,2123,2132,2141,2145,2152,2160,2170,2176,2180,2184,
        2188,2192,2197,2200,2204,2225,2231,2326,2333,2349,2363,2373,2375,
        2380,2384,2387,2393,2395,2423,2433,2446,2453,2459,2463,2469,2474,
        2477,2479,2484,2488,2492,2496,2500,2503,2507,2515,2519,2523,2532,
        2539,2544,2551,2556,2563,2568,2586,2591,2603,2608,2617,2624,2631,
        2637,2642,2646,2649,2652,2655,2658,2661,2666,2669,2672,2675,2678,
        2681,2687,2691,2694,2697,2700,2703,2705,2714,2727,2735,2741,2745,
        2750,2757,2764,2775,2782,2785,2790,2793,2800,2809,2816,2821,2824,
        2827,2829,2834,2841,2851,2861,2874,2877,2880,2887,2895,2898,2901,
        2908,2912,2918,2921,2924,2927,2939,2942,2945,2949,2963,2981,2992,
        3007,3023,3044,3049,3052,3056,3059,3065,3068,3070,3079,3088,3107,
        3111,3122,3131,3137,3143,3147,3150,3153,3156,3159,3165,3169,3176,
        3182,3186,3189,3192,3195,3203,3207,3211,3217,3221,3227,3241,3250,
        3267,3272,3275,3277,3287,3294,3299,3302,3305,3312,3315,3317,3323,
        3332,3342,3347,3356,3365,3369,3376,3386,3397,3507,3515,3518,3528,
        3533,3543,3554,3566,3579,3589,3602,3605,3612,3621,3624,3631,3633,
        3641,3651,3653,3661,3665,3670,3681,3685,3690,3700,3706,3719,3725,
        3727,3734,3742,3747,3762,3775,3777,3781,3801,3818,3821,3824,3827,
        3830,3838,3841,3844,3890,3893,3896,3914,3921,3930,3936,3943,3953,
        3961,3966,3978,3995,4001,4008,4016,4030,4058,4065,4079,4094,4107,
        4116,4141,4152,4219,4230,4236,4244,4255,4269,4278,4288,4300,4315,
        4326,4334,4344,4351,4354,4360,4363,4378,4391,4420,4427,4442,4451,
        4462,4464,4473,4484,4486,4493,4508,4514,4522,4528,4536,4546,4552,
        4560,4566,4574,4581,4590,4592,4617,4624,4635,4641,4650,4655,4661,
        4668,4673,4677,4680,4686,4835,4839,4844,4855,4866,4877,4888,4899,
        4910,4921,4933,4944,4952,4959,4965,4973,4978,4983,4988,4994,5001,
        5007,5013,5018,5024,5031,5036,5042,5049,5052,5065,5074,5086,5088,
        5105,5112,5117,5121,5125,5129,5131,5191,5198,5204,5215,5218,5225,
        5228,5238,5241,5243,5262,5274,5283,5292,5304,5306,5312,5316,5319,
        5324,5330,5333,5336,5339,5343,5347,5356,5362,5365,5368,5371,5373,
        5391,5395,5398,5401,5404,5407,5412,5415,5417,5430,5442,5456,5460,
        5472,5474,5483,5492,5500,5509,5511,5515,5524,5529,5535,5540,5544,
        5549,5557,5564,5569,5584,5593,5604,5610,5649,5659,5666,5677,5691,
        5699,5704,5712,5720,5726,5734,5740,5748,5750,5756,5764,5766,5772,
        5780,5782,5806,5813,5823,5835,5840,5853,5865,5877,5879,5885,5890,
        5898,5905,5950,5955,5962,5966,5970,5976,5980,5985,5989,5992,5994,
        6016,6087,6282,6295,6306,6319,6331,6345,6377,6391,6503,6505,6516,
        6527,6538,6551,6563,6574,6581,6802,6817,6828,6835,6889,7030,7036,
        7039,7049,7078,7088,7095,7118,7127,7139,7145,7153,7155,7159,7169,
        7173,7183,7186,7190,7194,7202,7213,7225,7229,7232,7236,7239,7244,
        7248,7251,7255,7258,7262,7265,7276,7283,7296,7310,7314,7319,7326,
        7333,7336,7341,7344,7353,7355,7360,7364,7376,7379,7386,7390,7395,
        7405,7414,7417,7422,7433,7437,7443,7450,7470,7491,7495,7500,7583,
        7589,7602,7606,7610,7614,7620,7627,7630,7633,7636,7639,7646,7648,
        7652,7655,7662,7664,7671,7679,7686,7691,7695,7699,7703,7707,7723,
        7730,7740,7753,7764,7771,7776,7780,7784,7789,7802,7807,7811,7819,
        7822,7826,7837,7840,7842,7858,7861,7868,7871,7876,7891,7897,7906,
        7915,7922,7925,7931,7936,7943,7947,7952,7955,7961,7965,7967,7970,
        7977,7980,7987,7995,7998,8007,8012,8018,8021,8024,8031,8035,8038,
        8053,8056,8063,8066,8073,8076,8079,8086,8099,8109,8117,8129,8131,
        8138,8142,8152,8156,8160,8164,8166,8171,8175,8179,8181,8183,8188,
        8193,8199,8204,8209,8212,8215,8218,8221,8224,8227,8230,8235,8238,
        8241,8244,8247,8250,8252,8258,8262,8271,8276,8280,8289,8299,8303,
        8308,8314,8326,8341,8348,8350,8353,8357,8361,8363,8371,8380,8386,
        8388,8390,8397,8401,8410,8414,8429,8437,8465,8472,8476,8479,8484,
        8488,8491,8507,8518,8523,8526,8530,8534,8538,8543,8547,8551,8553,
        8562,8567,8573,8577,8579,8586,8591,8597,8599,8603,8610,8615,8618,
        8624,8628,8637,8641,8649,8651,8658,8663,8666,8674,8683,8691,8693,
        8697,8704,8723,8732,8738,8757,8766,8772,8776,8781,8791,8798,8807,
        8810,8819,8821,8825,8830,8840,8846,8849,8856,8860,8863,8876,8882,
        8886,8890,8893,8901,8905,8909,8917,8924,8931,8935,8941,8943,8952,
        8955,8965,8981,8987,8992,8999,9012,9019,9027,9035,9040,9044,9050,
        9054,9058,9061,9067,9072,9088,9091,9093,9105,9107,9111,9117,9121,
        9123,9131,9135,9144,9152,9158,9161,9170,9175,9182,9192,9218,9229,
        9231,9233,9241,9263,9272,9282,9285,9290,9295,9299,9305,9308,9311,
        9314,9318,9332,9339,9346,9353,9372,9380,9388,9390,9396,9403,9405,
        9418,9457,9459,9479,9489,9500,9517,9520,9523,9526,9528,9535,9538,
        9542,9545,9548,9550,9557,9570,9583,9586,9590,9593,9603,9606,9616,
        9619,9622,9626,9633,9645,9657,9663,9671,9688,9713,9723,9727,9730,
        9733,9736,9749,9754,9759,9761,9769,9778,9787,9792,9801,9806,9820,
        9830,9838,9852,9859,9867,9875,9882,9888,9897,9912,9923,9955,9964,
        9971,9975,9979,9986,10000,10005,10010,10014,10016,10019,10026,10031,
        10045,10077,10082,10094,10111,10119,10127,10143,10148,10159,10171,
        10181,10192,10200,10208,10218,10225,10228,10237,10240,10245,10258,
        10266,10269,10276,10281,10288,10301,10313,10318,10326,10333,10338,
        10350,10358,10363,10373,10380,10387,10393,10398,10404,10412,10416,
        10483,10495,10500
    ]

class PostgreSQLParser ( PostgreSQLParserBase ):

    grammarFileName = "PostgreSQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'$'", "'('", "')'", "'['", "']'", "','", 
                     "';'", "':'", "'*'", "'='", "'.'", "'+'", "'-'", "'/'", 
                     "'^'", "'<'", "'>'", "'<<'", "'>>'", "':='", "'<='", 
                     "'=>'", "'>='", "'..'", "'<>'", "'::'", "'%'", "<INVALID>", 
                     "<INVALID>", "'JSON'", "'JSON_ARRAY'", "'JSON_ARRAYAGG'", 
                     "'JSON_EXISTS'", "'JSON_OBJECT'", "'JSON_OBJECTAGG'", 
                     "'JSON_QUERY'", "'JSON_SCALAR'", "'JSON_SERIALIZE'", 
                     "'JSON_TABLE'", "'JSON_VALUE'", "'MERGE_ACTION'", "'SYSTEM_USER'", 
                     "'ABSENT'", "'ASENSITIVE'", "'ATOMIC'", "'BREATH'", 
                     "'COMPRESSION'", "'CONDITIONAL'", "'DEPTH'", "'EMPTY'", 
                     "'FINALIZE'", "'INDENT'", "'KEEP'", "'KEYS'", "'NESTED'", 
                     "'OMIT'", "'PARAMETER'", "'PATH'", "'PLAN'", "'QUOTES'", 
                     "'SCALAR'", "'SOURCE'", "'STRING'", "'TARGET'", "'UNCONDITIONAL'", 
                     "'PERIOD'", "'FORMAT_LA'", "'ALL'", "'ANALYSE'", "'ANALYZE'", 
                     "'AND'", "'ANY'", "'ARRAY'", "'AS'", "'ASC'", "'ASYMMETRIC'", 
                     "'BOTH'", "'CASE'", "'CAST'", "'CHECK'", "'COLLATE'", 
                     "'COLUMN'", "'CONSTRAINT'", "'CREATE'", "'CURRENT_CATALOG'", 
                     "'CURRENT_DATE'", "'CURRENT_ROLE'", "'CURRENT_TIME'", 
                     "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'DEFAULT'", 
                     "'DEFERRABLE'", "'DESC'", "'DISTINCT'", "'DO'", "'ELSE'", 
                     "'EXCEPT'", "'FALSE'", "'FETCH'", "'FOR'", "'FOREIGN'", 
                     "'FROM'", "'GRANT'", "'GROUP'", "'HAVING'", "'IN'", 
                     "'INITIALLY'", "'INTERSECT'", "'INTO'", "'LATERAL'", 
                     "'LEADING'", "'LIMIT'", "'LOCALTIME'", "'LOCALTIMESTAMP'", 
                     "'NOT'", "'NULL'", "'OFFSET'", "'ON'", "'ONLY'", "'OR'", 
                     "'ORDER'", "'PLACING'", "'PRIMARY'", "'REFERENCES'", 
                     "'RETURNING'", "'SELECT'", "'SESSION_USER'", "'SOME'", 
                     "'SYMMETRIC'", "'TABLE'", "'THEN'", "'TO'", "'TRAILING'", 
                     "'TRUE'", "'UNION'", "'UNIQUE'", "'USER'", "'USING'", 
                     "'VARIADIC'", "'WHEN'", "'WHERE'", "'WINDOW'", "'WITH'", 
                     "'AUTHORIZATION'", "'BINARY'", "'COLLATION'", "'CONCURRENTLY'", 
                     "'CROSS'", "'CURRENT_SCHEMA'", "'FREEZE'", "'FULL'", 
                     "'ILIKE'", "'INNER'", "'IS'", "'ISNULL'", "'JOIN'", 
                     "'LEFT'", "'LIKE'", "'NATURAL'", "'NOTNULL'", "'OUTER'", 
                     "'OVER'", "'OVERLAPS'", "'RIGHT'", "'SIMILAR'", "'VERBOSE'", 
                     "'ABORT'", "'ABSOLUTE'", "'ACCESS'", "'ACTION'", "'ADD'", 
                     "'ADMIN'", "'AFTER'", "'AGGREGATE'", "'ALSO'", "'ALTER'", 
                     "'ALWAYS'", "'ASSERTION'", "'ASSIGNMENT'", "'AT'", 
                     "'ATTRIBUTE'", "'BACKWARD'", "'BEFORE'", "'BEGIN'", 
                     "'BY'", "'CACHE'", "'CALLED'", "'CASCADE'", "'CASCADED'", 
                     "'CATALOG'", "'CHAIN'", "'CHARACTERISTICS'", "'CHECKPOINT'", 
                     "'CLASS'", "'CLOSE'", "'CLUSTER'", "'COMMENT'", "'COMMENTS'", 
                     "'COMMIT'", "'COMMITTED'", "'CONFIGURATION'", "'CONNECTION'", 
                     "'CONSTRAINTS'", "'CONTENT'", "'CONTINUE'", "'CONVERSION'", 
                     "'COPY'", "'COST'", "'CSV'", "'CURSOR'", "'CYCLE'", 
                     "'DATA'", "'DATABASE'", "'DAY'", "'DEALLOCATE'", "'DECLARE'", 
                     "'DEFAULTS'", "'DEFERRED'", "'DEFINER'", "'DELETE'", 
                     "'DELIMITER'", "'DELIMITERS'", "'DICTIONARY'", "'DISABLE'", 
                     "'DISCARD'", "'DOCUMENT'", "'DOMAIN'", "'DOUBLE'", 
                     "'DROP'", "'EACH'", "'ENABLE'", "'ENCODING'", "'ENCRYPTED'", 
                     "'ENUM'", "'ESCAPE'", "'EVENT'", "'EXCLUDE'", "'EXCLUDING'", 
                     "'EXCLUSIVE'", "'EXECUTE'", "'EXPLAIN'", "'EXTENSION'", 
                     "'EXTERNAL'", "'FAMILY'", "'FIRST'", "'FOLLOWING'", 
                     "'FORCE'", "'FORWARD'", "'FUNCTION'", "'FUNCTIONS'", 
                     "'GLOBAL'", "'GRANTED'", "'HANDLER'", "'HEADER'", "'HOLD'", 
                     "'HOUR'", "'IDENTITY'", "'IF'", "'IMMEDIATE'", "'IMMUTABLE'", 
                     "'IMPLICIT'", "'INCLUDING'", "'INCREMENT'", "'INDEX'", 
                     "'INDEXES'", "'INHERIT'", "'INHERITS'", "'INLINE'", 
                     "'INSENSITIVE'", "'INSERT'", "'INSTEAD'", "'INVOKER'", 
                     "'ISOLATION'", "'KEY'", "'LABEL'", "'LANGUAGE'", "'LARGE'", 
                     "'LAST'", "'LEAKPROOF'", "'LEVEL'", "'LISTEN'", "'LOAD'", 
                     "'LOCAL'", "'LOCATION'", "'LOCK'", "'MAPPING'", "'MATCH'", 
                     "'MATCHED'", "'MATERIALIZED'", "'MAXVALUE'", "'MERGE'", 
                     "'MINUTE'", "'MINVALUE'", "'MODE'", "'MONTH'", "'MOVE'", 
                     "'NAME'", "'NAMES'", "'NEXT'", "'NO'", "'NOTHING'", 
                     "'NOTIFY'", "'NOWAIT'", "'NULLS'", "'OBJECT'", "'OF'", 
                     "'OFF'", "'OIDS'", "'OPERATOR'", "'OPTION'", "'OPTIONS'", 
                     "'OWNED'", "'OWNER'", "'PARSER'", "'PARTIAL'", "'PARTITION'", 
                     "'PASSING'", "'PASSWORD'", "'PLANS'", "'PRECEDING'", 
                     "'PREPARE'", "'PREPARED'", "'PRESERVE'", "'PRIOR'", 
                     "'PRIVILEGES'", "'PROCEDURAL'", "'PROCEDURE'", "'PROGRAM'", 
                     "'QUOTE'", "'RANGE'", "'READ'", "'REASSIGN'", "'RECHECK'", 
                     "'RECURSIVE'", "'REF'", "'REFRESH'", "'REINDEX'", "'RELATIVE'", 
                     "'RELEASE'", "'RENAME'", "'REPEATABLE'", "'REPLACE'", 
                     "'REPLICA'", "'RESET'", "'RESTART'", "'RESTRICT'", 
                     "'RETURNS'", "'REVOKE'", "'ROLE'", "'ROLLBACK'", "'ROWS'", 
                     "'RULE'", "'SAVEPOINT'", "'SCHEMA'", "'SCROLL'", "'SEARCH'", 
                     "'SECOND'", "'SECURITY'", "'SEQUENCE'", "'SEQUENCES'", 
                     "'SERIALIZABLE'", "'SERVER'", "'SESSION'", "'SET'", 
                     "'SHARE'", "'SHOW'", "'SIMPLE'", "'SNAPSHOT'", "'STABLE'", 
                     "'STANDALONE'", "'START'", "'STATEMENT'", "'STATISTICS'", 
                     "'STDIN'", "'STDOUT'", "'STORAGE'", "'STRICT'", "'STRIP'", 
                     "'SYSID'", "'SYSTEM'", "'TABLES'", "'TABLESPACE'", 
                     "'TEMP'", "'TEMPLATE'", "'TEMPORARY'", "'TEXT'", "'TRANSACTION'", 
                     "'TRIGGER'", "'TRUNCATE'", "'TRUSTED'", "'TYPE'", "'TYPES'", 
                     "'UNBOUNDED'", "'UNCOMMITTED'", "'UNENCRYPTED'", "'UNKNOWN'", 
                     "'UNLISTEN'", "'UNLOGGED'", "'UNTIL'", "'UPDATE'", 
                     "'VACUUM'", "'VALID'", "'VALIDATE'", "'VALIDATOR'", 
                     "'VARYING'", "'VERSION'", "'VIEW'", "'VOLATILE'", "'WHITESPACE'", 
                     "'WITHOUT'", "'WORK'", "'WRAPPER'", "'WRITE'", "'XML'", 
                     "'YEAR'", "'YES'", "'ZONE'", "'BETWEEN'", "'BIGINT'", 
                     "'BIT'", "'BOOLEAN'", "'CHAR'", "'CHARACTER'", "'COALESCE'", 
                     "'DEC'", "'DECIMAL'", "'EXISTS'", "'EXTRACT'", "'FLOAT'", 
                     "'GREATEST'", "'INOUT'", "'INT'", "'INTEGER'", "'INTERVAL'", 
                     "'LEAST'", "'NATIONAL'", "'NCHAR'", "'NONE'", "'NULLIF'", 
                     "'NUMERIC'", "'OVERLAY'", "'POSITION'", "'PRECISION'", 
                     "'REAL'", "'ROW'", "'SETOF'", "'SMALLINT'", "'SUBSTRING'", 
                     "'TIME'", "'TIMESTAMP'", "'TREAT'", "'TRIM'", "'VALUES'", 
                     "'VARCHAR'", "'XMLATTRIBUTES'", "'XMLCOMMENT'", "'XMLAGG'", 
                     "'XML_IS_WELL_FORMED'", "'XML_IS_WELL_FORMED_DOCUMENT'", 
                     "'XML_IS_WELL_FORMED_CONTENT'", "'XPATH'", "'XPATH_EXISTS'", 
                     "'XMLCONCAT'", "'XMLELEMENT'", "'XMLEXISTS'", "'XMLFOREST'", 
                     "'XMLPARSE'", "'XMLPI'", "'XMLROOT'", "'XMLSERIALIZE'", 
                     "'CALL'", "'CURRENT'", "'ATTACH'", "'DETACH'", "'EXPRESSION'", 
                     "'GENERATED'", "'LOGGED'", "'STORED'", "'INCLUDE'", 
                     "'ROUTINE'", "'TRANSFORM'", "'IMPORT'", "'POLICY'", 
                     "'METHOD'", "'REFERENCING'", "'NEW'", "'OLD'", "'VALUE'", 
                     "'SUBSCRIPTION'", "'PUBLICATION'", "'OUT'", "'END'", 
                     "'ROUTINES'", "'SCHEMAS'", "'PROCEDURES'", "'INPUT'", 
                     "'SUPPORT'", "'PARALLEL'", "'SQL'", "'DEPENDS'", "'OVERRIDING'", 
                     "'CONFLICT'", "'SKIP'", "'LOCKED'", "'TIES'", "'ROLLUP'", 
                     "'CUBE'", "'GROUPING'", "'SETS'", "'TABLESAMPLE'", 
                     "'ORDINALITY'", "'XMLTABLE'", "'COLUMNS'", "'XMLNAMESPACES'", 
                     "'ROWTYPE'", "'NORMALIZED'", "'WITHIN'", "'FILTER'", 
                     "'GROUPS'", "'OTHERS'", "'NFC'", "'NFD'", "'NFKC'", 
                     "'NFKD'", "'UESCAPE'", "'VIEWS'", "'NORMALIZE'", "'DUMP'", 
                     "'ERROR'", "'USE_VARIABLE'", "'USE_COLUMN'", "'CONSTANT'", 
                     "'PERFORM'", "'GET'", "'DIAGNOSTICS'", "'STACKED'", 
                     "'ELSIF'", "'WHILE'", "'FOREACH'", "'SLICE'", "'EXIT'", 
                     "'RETURN'", "'RAISE'", "'SQLSTATE'", "'DEBUG'", "'INFO'", 
                     "'NOTICE'", "'WARNING'", "'EXCEPTION'", "'ASSERT'", 
                     "'LOOP'", "'OPEN'", "'FORMAT'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'\\'", "'''" ]

    symbolicNames = [ "<INVALID>", "Dollar", "OPEN_PAREN", "CLOSE_PAREN", 
                      "OPEN_BRACKET", "CLOSE_BRACKET", "COMMA", "SEMI", 
                      "COLON", "STAR", "EQUAL", "DOT", "PLUS", "MINUS", 
                      "SLASH", "CARET", "LT", "GT", "LESS_LESS", "GREATER_GREATER", 
                      "COLON_EQUALS", "LESS_EQUALS", "EQUALS_GREATER", "GREATER_EQUALS", 
                      "DOT_DOT", "NOT_EQUALS", "TYPECAST", "PERCENT", "PARAM", 
                      "Operator", "JSON", "JSON_ARRAY", "JSON_ARRAYAGG", 
                      "JSON_EXISTS", "JSON_OBJECT", "JSON_OBJECTAGG", "JSON_QUERY", 
                      "JSON_SCALAR", "JSON_SERIALIZE", "JSON_TABLE", "JSON_VALUE", 
                      "MERGE_ACTION", "SYSTEM_USER", "ABSENT", "ASENSITIVE", 
                      "ATOMIC", "BREADTH", "COMPRESSION", "CONDITIONAL", 
                      "DEPTH", "EMPTY_P", "FINALIZE", "INDENT", "KEEP", 
                      "KEYS", "NESTED", "OMIT", "PARAMETER", "PATH", "PLAN", 
                      "QUOTES", "SCALAR", "SOURCE", "STRING_P", "TARGET", 
                      "UNCONDITIONAL", "PERIOD", "FORMAT_LA", "ALL", "ANALYSE", 
                      "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC", "ASYMMETRIC", 
                      "BOTH", "CASE", "CAST", "CHECK", "COLLATE", "COLUMN", 
                      "CONSTRAINT", "CREATE", "CURRENT_CATALOG", "CURRENT_DATE", 
                      "CURRENT_ROLE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
                      "CURRENT_USER", "DEFAULT", "DEFERRABLE", "DESC", "DISTINCT", 
                      "DO", "ELSE", "EXCEPT", "FALSE_P", "FETCH", "FOR", 
                      "FOREIGN", "FROM", "GRANT", "GROUP_P", "HAVING", "IN_P", 
                      "INITIALLY", "INTERSECT", "INTO", "LATERAL_P", "LEADING", 
                      "LIMIT", "LOCALTIME", "LOCALTIMESTAMP", "NOT", "NULL_P", 
                      "OFFSET", "ON", "ONLY", "OR", "ORDER", "PLACING", 
                      "PRIMARY", "REFERENCES", "RETURNING", "SELECT", "SESSION_USER", 
                      "SOME", "SYMMETRIC", "TABLE", "THEN", "TO", "TRAILING", 
                      "TRUE_P", "UNION", "UNIQUE", "USER", "USING", "VARIADIC", 
                      "WHEN", "WHERE", "WINDOW", "WITH", "AUTHORIZATION", 
                      "BINARY", "COLLATION", "CONCURRENTLY", "CROSS", "CURRENT_SCHEMA", 
                      "FREEZE", "FULL", "ILIKE", "INNER_P", "IS", "ISNULL", 
                      "JOIN", "LEFT", "LIKE", "NATURAL", "NOTNULL", "OUTER_P", 
                      "OVER", "OVERLAPS", "RIGHT", "SIMILAR", "VERBOSE", 
                      "ABORT_P", "ABSOLUTE_P", "ACCESS", "ACTION", "ADD_P", 
                      "ADMIN", "AFTER", "AGGREGATE", "ALSO", "ALTER", "ALWAYS", 
                      "ASSERTION", "ASSIGNMENT", "AT", "ATTRIBUTE", "BACKWARD", 
                      "BEFORE", "BEGIN_P", "BY", "CACHE", "CALLED", "CASCADE", 
                      "CASCADED", "CATALOG", "CHAIN", "CHARACTERISTICS", 
                      "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER", "COMMENT", 
                      "COMMENTS", "COMMIT", "COMMITTED", "CONFIGURATION", 
                      "CONNECTION", "CONSTRAINTS", "CONTENT_P", "CONTINUE_P", 
                      "CONVERSION_P", "COPY", "COST", "CSV", "CURSOR", "CYCLE", 
                      "DATA_P", "DATABASE", "DAY_P", "DEALLOCATE", "DECLARE", 
                      "DEFAULTS", "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", 
                      "DELIMITERS", "DICTIONARY", "DISABLE_P", "DISCARD", 
                      "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH", 
                      "ENABLE_P", "ENCODING", "ENCRYPTED", "ENUM_P", "ESCAPE", 
                      "EVENT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE", 
                      "EXPLAIN", "EXTENSION", "EXTERNAL", "FAMILY", "FIRST_P", 
                      "FOLLOWING", "FORCE", "FORWARD", "FUNCTION", "FUNCTIONS", 
                      "GLOBAL", "GRANTED", "HANDLER", "HEADER_P", "HOLD", 
                      "HOUR_P", "IDENTITY_P", "IF_P", "IMMEDIATE", "IMMUTABLE", 
                      "IMPLICIT_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES", 
                      "INHERIT", "INHERITS", "INLINE_P", "INSENSITIVE", 
                      "INSERT", "INSTEAD", "INVOKER", "ISOLATION", "KEY", 
                      "LABEL", "LANGUAGE", "LARGE_P", "LAST_P", "LEAKPROOF", 
                      "LEVEL", "LISTEN", "LOAD", "LOCAL", "LOCATION", "LOCK_P", 
                      "MAPPING", "MATCH", "MATCHED", "MATERIALIZED", "MAXVALUE", 
                      "MERGE", "MINUTE_P", "MINVALUE", "MODE", "MONTH_P", 
                      "MOVE", "NAME_P", "NAMES", "NEXT", "NO", "NOTHING", 
                      "NOTIFY", "NOWAIT", "NULLS_P", "OBJECT_P", "OF", "OFF", 
                      "OIDS", "OPERATOR", "OPTION", "OPTIONS", "OWNED", 
                      "OWNER", "PARSER", "PARTIAL", "PARTITION", "PASSING", 
                      "PASSWORD", "PLANS", "PRECEDING", "PREPARE", "PREPARED", 
                      "PRESERVE", "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", 
                      "PROGRAM", "QUOTE", "RANGE", "READ", "REASSIGN", "RECHECK", 
                      "RECURSIVE", "REF", "REFRESH", "REINDEX", "RELATIVE_P", 
                      "RELEASE", "RENAME", "REPEATABLE", "REPLACE", "REPLICA", 
                      "RESET", "RESTART", "RESTRICT", "RETURNS", "REVOKE", 
                      "ROLE", "ROLLBACK", "ROWS", "RULE", "SAVEPOINT", "SCHEMA", 
                      "SCROLL", "SEARCH", "SECOND_P", "SECURITY", "SEQUENCE", 
                      "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION", 
                      "SET", "SHARE", "SHOW", "SIMPLE", "SNAPSHOT", "STABLE", 
                      "STANDALONE_P", "START", "STATEMENT", "STATISTICS", 
                      "STDIN", "STDOUT", "STORAGE", "STRICT_P", "STRIP_P", 
                      "SYSID", "SYSTEM_P", "TABLES", "TABLESPACE", "TEMP", 
                      "TEMPLATE", "TEMPORARY", "TEXT_P", "TRANSACTION", 
                      "TRIGGER", "TRUNCATE", "TRUSTED", "TYPE_P", "TYPES_P", 
                      "UNBOUNDED", "UNCOMMITTED", "UNENCRYPTED", "UNKNOWN", 
                      "UNLISTEN", "UNLOGGED", "UNTIL", "UPDATE", "VACUUM", 
                      "VALID", "VALIDATE", "VALIDATOR", "VARYING", "VERSION_P", 
                      "VIEW", "VOLATILE", "WHITESPACE_P", "WITHOUT", "WORK", 
                      "WRAPPER", "WRITE", "XML_P", "YEAR_P", "YES_P", "ZONE", 
                      "BETWEEN", "BIGINT", "BIT", "BOOLEAN_P", "CHAR_P", 
                      "CHARACTER", "COALESCE", "DEC", "DECIMAL_P", "EXISTS", 
                      "EXTRACT", "FLOAT_P", "GREATEST", "INOUT", "INT_P", 
                      "INTEGER", "INTERVAL", "LEAST", "NATIONAL", "NCHAR", 
                      "NONE", "NULLIF", "NUMERIC", "OVERLAY", "POSITION", 
                      "PRECISION", "REAL", "ROW", "SETOF", "SMALLINT", "SUBSTRING", 
                      "TIME", "TIMESTAMP", "TREAT", "TRIM", "VALUES", "VARCHAR", 
                      "XMLATTRIBUTES", "XMLCOMMENT", "XMLAGG", "XML_IS_WELL_FORMED", 
                      "XML_IS_WELL_FORMED_DOCUMENT", "XML_IS_WELL_FORMED_CONTENT", 
                      "XPATH", "XPATH_EXISTS", "XMLCONCAT", "XMLELEMENT", 
                      "XMLEXISTS", "XMLFOREST", "XMLPARSE", "XMLPI", "XMLROOT", 
                      "XMLSERIALIZE", "CALL", "CURRENT_P", "ATTACH", "DETACH", 
                      "EXPRESSION", "GENERATED", "LOGGED", "STORED", "INCLUDE", 
                      "ROUTINE", "TRANSFORM", "IMPORT_P", "POLICY", "METHOD", 
                      "REFERENCING", "NEW", "OLD", "VALUE_P", "SUBSCRIPTION", 
                      "PUBLICATION", "OUT_P", "END_P", "ROUTINES", "SCHEMAS", 
                      "PROCEDURES", "INPUT_P", "SUPPORT", "PARALLEL", "SQL_P", 
                      "DEPENDS", "OVERRIDING", "CONFLICT", "SKIP_P", "LOCKED", 
                      "TIES", "ROLLUP", "CUBE", "GROUPING", "SETS", "TABLESAMPLE", 
                      "ORDINALITY", "XMLTABLE", "COLUMNS", "XMLNAMESPACES", 
                      "ROWTYPE", "NORMALIZED", "WITHIN", "FILTER", "GROUPS", 
                      "OTHERS", "NFC", "NFD", "NFKC", "NFKD", "UESCAPE", 
                      "VIEWS", "NORMALIZE", "DUMP", "ERROR", "USE_VARIABLE", 
                      "USE_COLUMN", "CONSTANT", "PERFORM", "GET", "DIAGNOSTICS", 
                      "STACKED", "ELSIF", "WHILE", "FOREACH", "SLICE", "EXIT", 
                      "RETURN", "RAISE", "SQLSTATE", "DEBUG", "INFO", "NOTICE", 
                      "WARNING", "EXCEPTION", "ASSERT", "LOOP", "OPEN", 
                      "FORMAT", "Identifier", "QuotedIdentifier", "UnterminatedQuotedIdentifier", 
                      "InvalidQuotedIdentifier", "InvalidUnterminatedQuotedIdentifier", 
                      "UnicodeQuotedIdentifier", "UnterminatedUnicodeQuotedIdentifier", 
                      "InvalidUnicodeQuotedIdentifier", "InvalidUnterminatedUnicodeQuotedIdentifier", 
                      "StringConstant", "UnterminatedStringConstant", "UnicodeEscapeStringConstant", 
                      "UnterminatedUnicodeEscapeStringConstant", "BeginDollarStringConstant", 
                      "BinaryStringConstant", "UnterminatedBinaryStringConstant", 
                      "InvalidBinaryStringConstant", "InvalidUnterminatedBinaryStringConstant", 
                      "HexadecimalStringConstant", "UnterminatedHexadecimalStringConstant", 
                      "InvalidHexadecimalStringConstant", "InvalidUnterminatedHexadecimalStringConstant", 
                      "Integral", "BinaryIntegral", "OctalIntegral", "HexadecimalIntegral", 
                      "NumericFail", "Numeric", "PLSQLVARIABLENAME", "PLSQLIDENTIFIER", 
                      "Whitespace", "Newline", "LineComment", "BlockComment", 
                      "UnterminatedBlockComment", "ErrorCharacter", "EscapeStringConstant", 
                      "UnterminatedEscapeStringConstant", "InvalidEscapeStringConstant", 
                      "InvalidUnterminatedEscapeStringConstant", "AfterEscapeStringConstantMode_NotContinued", 
                      "AfterEscapeStringConstantWithNewlineMode_NotContinued", 
                      "DollarText", "EndDollarStringConstant", "MetaCommand", 
                      "AfterEscapeStringConstantWithNewlineMode_Continued" ]

    RULE_root = 0
    RULE_stmtblock = 1
    RULE_stmtmulti = 2
    RULE_stmt = 3
    RULE_callstmt = 4
    RULE_createrolestmt = 5
    RULE_with_ = 6
    RULE_optrolelist = 7
    RULE_alteroptrolelist = 8
    RULE_alteroptroleelem = 9
    RULE_createoptroleelem = 10
    RULE_createuserstmt = 11
    RULE_alterrolestmt = 12
    RULE_in_database_ = 13
    RULE_alterrolesetstmt = 14
    RULE_droprolestmt = 15
    RULE_creategroupstmt = 16
    RULE_altergroupstmt = 17
    RULE_add_drop = 18
    RULE_createschemastmt = 19
    RULE_optschemaname = 20
    RULE_optschemaeltlist = 21
    RULE_schema_stmt = 22
    RULE_variablesetstmt = 23
    RULE_set_rest = 24
    RULE_generic_set = 25
    RULE_set_rest_more = 26
    RULE_var_name = 27
    RULE_var_list = 28
    RULE_var_value = 29
    RULE_iso_level = 30
    RULE_boolean_or_string_ = 31
    RULE_zone_value = 32
    RULE_encoding_ = 33
    RULE_nonreservedword_or_sconst = 34
    RULE_variableresetstmt = 35
    RULE_reset_rest = 36
    RULE_generic_reset = 37
    RULE_setresetclause = 38
    RULE_functionsetresetclause = 39
    RULE_variableshowstmt = 40
    RULE_constraintssetstmt = 41
    RULE_constraints_set_list = 42
    RULE_constraints_set_mode = 43
    RULE_checkpointstmt = 44
    RULE_discardstmt = 45
    RULE_altertablestmt = 46
    RULE_alter_table_cmds = 47
    RULE_partition_cmd = 48
    RULE_index_partition_cmd = 49
    RULE_alter_table_cmd = 50
    RULE_alter_column_default = 51
    RULE_drop_behavior_ = 52
    RULE_collate_clause_ = 53
    RULE_alter_using = 54
    RULE_replica_identity = 55
    RULE_reloptions = 56
    RULE_reloptions_ = 57
    RULE_reloption_list = 58
    RULE_reloption_elem = 59
    RULE_alter_identity_column_option_list = 60
    RULE_alter_identity_column_option = 61
    RULE_partitionboundspec = 62
    RULE_hash_partbound_elem = 63
    RULE_hash_partbound = 64
    RULE_altercompositetypestmt = 65
    RULE_alter_type_cmds = 66
    RULE_alter_type_cmd = 67
    RULE_closeportalstmt = 68
    RULE_copystmt = 69
    RULE_copy_from = 70
    RULE_program_ = 71
    RULE_copy_file_name = 72
    RULE_copy_options = 73
    RULE_copy_opt_list = 74
    RULE_copy_opt_item = 75
    RULE_binary_ = 76
    RULE_copy_delimiter = 77
    RULE_using_ = 78
    RULE_copy_generic_opt_list = 79
    RULE_copy_generic_opt_elem = 80
    RULE_copy_generic_opt_arg = 81
    RULE_copy_generic_opt_arg_list = 82
    RULE_copy_generic_opt_arg_list_item = 83
    RULE_createstmt = 84
    RULE_opttemp = 85
    RULE_opttableelementlist = 86
    RULE_opttypedtableelementlist = 87
    RULE_tableelementlist = 88
    RULE_typedtableelementlist = 89
    RULE_tableelement = 90
    RULE_typedtableelement = 91
    RULE_columnDef = 92
    RULE_columnOptions = 93
    RULE_colquallist = 94
    RULE_colconstraint = 95
    RULE_colconstraintelem = 96
    RULE_generated_when = 97
    RULE_constraintattr = 98
    RULE_tablelikeclause = 99
    RULE_tablelikeoptionlist = 100
    RULE_tablelikeoption = 101
    RULE_tableconstraint = 102
    RULE_constraintelem = 103
    RULE_no_inherit_ = 104
    RULE_column_list_ = 105
    RULE_columnlist = 106
    RULE_columnElem = 107
    RULE_c_include_ = 108
    RULE_key_match = 109
    RULE_exclusionconstraintlist = 110
    RULE_exclusionconstraintelem = 111
    RULE_exclusionwhereclause = 112
    RULE_key_actions = 113
    RULE_key_update = 114
    RULE_key_delete = 115
    RULE_key_action = 116
    RULE_optinherit = 117
    RULE_optpartitionspec = 118
    RULE_partitionspec = 119
    RULE_part_params = 120
    RULE_part_elem = 121
    RULE_table_access_method_clause = 122
    RULE_optwith = 123
    RULE_oncommitoption = 124
    RULE_opttablespace = 125
    RULE_optconstablespace = 126
    RULE_existingindex = 127
    RULE_createstatsstmt = 128
    RULE_alterstatsstmt = 129
    RULE_createasstmt = 130
    RULE_create_as_target = 131
    RULE_with_data_ = 132
    RULE_creatematviewstmt = 133
    RULE_create_mv_target = 134
    RULE_optnolog = 135
    RULE_refreshmatviewstmt = 136
    RULE_createseqstmt = 137
    RULE_alterseqstmt = 138
    RULE_optseqoptlist = 139
    RULE_optparenthesizedseqoptlist = 140
    RULE_seqoptlist = 141
    RULE_seqoptelem = 142
    RULE_by_ = 143
    RULE_numericonly = 144
    RULE_numericonly_list = 145
    RULE_createplangstmt = 146
    RULE_trusted_ = 147
    RULE_handler_name = 148
    RULE_inline_handler_ = 149
    RULE_validator_clause = 150
    RULE_validator_ = 151
    RULE_procedural_ = 152
    RULE_createtablespacestmt = 153
    RULE_opttablespaceowner = 154
    RULE_droptablespacestmt = 155
    RULE_createextensionstmt = 156
    RULE_create_extension_opt_list = 157
    RULE_create_extension_opt_item = 158
    RULE_alterextensionstmt = 159
    RULE_alter_extension_opt_list = 160
    RULE_alter_extension_opt_item = 161
    RULE_alterextensioncontentsstmt = 162
    RULE_createfdwstmt = 163
    RULE_fdw_option = 164
    RULE_fdw_options = 165
    RULE_fdw_options_ = 166
    RULE_alterfdwstmt = 167
    RULE_create_generic_options = 168
    RULE_generic_option_list = 169
    RULE_alter_generic_options = 170
    RULE_alter_generic_option_list = 171
    RULE_alter_generic_option_elem = 172
    RULE_generic_option_elem = 173
    RULE_generic_option_name = 174
    RULE_generic_option_arg = 175
    RULE_createforeignserverstmt = 176
    RULE_type_ = 177
    RULE_foreign_server_version = 178
    RULE_foreign_server_version_ = 179
    RULE_alterforeignserverstmt = 180
    RULE_createforeigntablestmt = 181
    RULE_importforeignschemastmt = 182
    RULE_import_qualification_type = 183
    RULE_import_qualification = 184
    RULE_createusermappingstmt = 185
    RULE_auth_ident = 186
    RULE_dropusermappingstmt = 187
    RULE_alterusermappingstmt = 188
    RULE_createpolicystmt = 189
    RULE_alterpolicystmt = 190
    RULE_rowsecurityoptionalexpr = 191
    RULE_rowsecurityoptionalwithcheck = 192
    RULE_rowsecuritydefaulttorole = 193
    RULE_rowsecurityoptionaltorole = 194
    RULE_rowsecuritydefaultpermissive = 195
    RULE_rowsecuritydefaultforcmd = 196
    RULE_row_security_cmd = 197
    RULE_createamstmt = 198
    RULE_am_type = 199
    RULE_createtrigstmt = 200
    RULE_triggeractiontime = 201
    RULE_triggerevents = 202
    RULE_triggeroneevent = 203
    RULE_triggerreferencing = 204
    RULE_triggertransitions = 205
    RULE_triggertransition = 206
    RULE_transitionoldornew = 207
    RULE_transitionrowortable = 208
    RULE_transitionrelname = 209
    RULE_triggerforspec = 210
    RULE_triggerforopteach = 211
    RULE_triggerfortype = 212
    RULE_triggerwhen = 213
    RULE_function_or_procedure = 214
    RULE_triggerfuncargs = 215
    RULE_triggerfuncarg = 216
    RULE_optconstrfromtable = 217
    RULE_constraintattributespec = 218
    RULE_constraintattributeElem = 219
    RULE_createeventtrigstmt = 220
    RULE_event_trigger_when_list = 221
    RULE_event_trigger_when_item = 222
    RULE_event_trigger_value_list = 223
    RULE_altereventtrigstmt = 224
    RULE_enable_trigger = 225
    RULE_createassertionstmt = 226
    RULE_definestmt = 227
    RULE_definition = 228
    RULE_def_list = 229
    RULE_def_elem = 230
    RULE_def_arg = 231
    RULE_old_aggr_definition = 232
    RULE_old_aggr_list = 233
    RULE_old_aggr_elem = 234
    RULE_enum_val_list_ = 235
    RULE_enum_val_list = 236
    RULE_alterenumstmt = 237
    RULE_if_not_exists_ = 238
    RULE_createopclassstmt = 239
    RULE_opclass_item_list = 240
    RULE_opclass_item = 241
    RULE_default_ = 242
    RULE_opfamily_ = 243
    RULE_opclass_purpose = 244
    RULE_recheck_ = 245
    RULE_createopfamilystmt = 246
    RULE_alteropfamilystmt = 247
    RULE_opclass_drop_list = 248
    RULE_opclass_drop = 249
    RULE_dropopclassstmt = 250
    RULE_dropopfamilystmt = 251
    RULE_dropownedstmt = 252
    RULE_reassignownedstmt = 253
    RULE_dropstmt = 254
    RULE_object_type_any_name = 255
    RULE_object_type_name = 256
    RULE_drop_type_name = 257
    RULE_object_type_name_on_any_name = 258
    RULE_any_name_list_ = 259
    RULE_any_name = 260
    RULE_attrs = 261
    RULE_type_name_list = 262
    RULE_truncatestmt = 263
    RULE_restart_seqs_ = 264
    RULE_commentstmt = 265
    RULE_comment_text = 266
    RULE_seclabelstmt = 267
    RULE_provider_ = 268
    RULE_security_label = 269
    RULE_fetchstmt = 270
    RULE_fetch_args = 271
    RULE_from_in = 272
    RULE_from_in_ = 273
    RULE_grantstmt = 274
    RULE_revokestmt = 275
    RULE_privileges = 276
    RULE_privilege_list = 277
    RULE_privilege = 278
    RULE_privilege_target = 279
    RULE_grantee_list = 280
    RULE_grantee = 281
    RULE_grant_grant_option_ = 282
    RULE_grantrolestmt = 283
    RULE_revokerolestmt = 284
    RULE_grant_admin_option_ = 285
    RULE_granted_by_ = 286
    RULE_alterdefaultprivilegesstmt = 287
    RULE_defacloptionlist = 288
    RULE_defacloption = 289
    RULE_defaclaction = 290
    RULE_defacl_privilege_target = 291
    RULE_indexstmt = 292
    RULE_unique_ = 293
    RULE_single_name_ = 294
    RULE_concurrently_ = 295
    RULE_index_name_ = 296
    RULE_access_method_clause = 297
    RULE_index_params = 298
    RULE_index_elem_options = 299
    RULE_index_elem = 300
    RULE_include_ = 301
    RULE_index_including_params = 302
    RULE_collate_ = 303
    RULE_class_ = 304
    RULE_asc_desc_ = 305
    RULE_nulls_order_ = 306
    RULE_createfunctionstmt = 307
    RULE_or_replace_ = 308
    RULE_func_args = 309
    RULE_func_args_list = 310
    RULE_function_with_argtypes_list = 311
    RULE_function_with_argtypes = 312
    RULE_func_args_with_defaults = 313
    RULE_func_args_with_defaults_list = 314
    RULE_func_arg = 315
    RULE_arg_class = 316
    RULE_param_name = 317
    RULE_func_return = 318
    RULE_func_type = 319
    RULE_func_arg_with_default = 320
    RULE_aggr_arg = 321
    RULE_aggr_args = 322
    RULE_aggr_args_list = 323
    RULE_aggregate_with_argtypes = 324
    RULE_aggregate_with_argtypes_list = 325
    RULE_createfunc_opt_list = 326
    RULE_common_func_opt_item = 327
    RULE_createfunc_opt_item = 328
    RULE_func_as = 329
    RULE_transform_type_list = 330
    RULE_definition_ = 331
    RULE_table_func_column = 332
    RULE_table_func_column_list = 333
    RULE_alterfunctionstmt = 334
    RULE_alterfunc_opt_list = 335
    RULE_restrict_ = 336
    RULE_removefuncstmt = 337
    RULE_removeaggrstmt = 338
    RULE_removeoperstmt = 339
    RULE_oper_argtypes = 340
    RULE_any_operator = 341
    RULE_operator_with_argtypes_list = 342
    RULE_operator_with_argtypes = 343
    RULE_dostmt = 344
    RULE_dostmt_opt_list = 345
    RULE_dostmt_opt_item = 346
    RULE_createcaststmt = 347
    RULE_cast_context = 348
    RULE_dropcaststmt = 349
    RULE_if_exists_ = 350
    RULE_createtransformstmt = 351
    RULE_transform_element_list = 352
    RULE_droptransformstmt = 353
    RULE_reindexstmt = 354
    RULE_reindex_target_relation = 355
    RULE_reindex_target_all = 356
    RULE_reindex_option_list = 357
    RULE_altertblspcstmt = 358
    RULE_renamestmt = 359
    RULE_column_ = 360
    RULE_set_data_ = 361
    RULE_alterobjectdependsstmt = 362
    RULE_no_ = 363
    RULE_alterobjectschemastmt = 364
    RULE_alteroperatorstmt = 365
    RULE_operator_def_list = 366
    RULE_operator_def_elem = 367
    RULE_operator_def_arg = 368
    RULE_altertypestmt = 369
    RULE_alterownerstmt = 370
    RULE_createpublicationstmt = 371
    RULE_publication_for_tables_ = 372
    RULE_publication_for_tables = 373
    RULE_alterpublicationstmt = 374
    RULE_createsubscriptionstmt = 375
    RULE_publication_name_list = 376
    RULE_publication_name_item = 377
    RULE_altersubscriptionstmt = 378
    RULE_dropsubscriptionstmt = 379
    RULE_rulestmt = 380
    RULE_ruleactionlist = 381
    RULE_ruleactionmulti = 382
    RULE_ruleactionstmt = 383
    RULE_ruleactionstmtOrEmpty = 384
    RULE_event = 385
    RULE_instead_ = 386
    RULE_notifystmt = 387
    RULE_notify_payload = 388
    RULE_listenstmt = 389
    RULE_unlistenstmt = 390
    RULE_transactionstmt = 391
    RULE_transaction_ = 392
    RULE_transaction_mode_item = 393
    RULE_transaction_mode_list = 394
    RULE_transaction_mode_list_or_empty = 395
    RULE_transaction_chain_ = 396
    RULE_viewstmt = 397
    RULE_check_option_ = 398
    RULE_loadstmt = 399
    RULE_createdbstmt = 400
    RULE_createdb_opt_list = 401
    RULE_createdb_opt_items = 402
    RULE_createdb_opt_item = 403
    RULE_createdb_opt_name = 404
    RULE_equal_ = 405
    RULE_alterdatabasestmt = 406
    RULE_alterdatabasesetstmt = 407
    RULE_dropdbstmt = 408
    RULE_drop_option_list = 409
    RULE_drop_option = 410
    RULE_altercollationstmt = 411
    RULE_altersystemstmt = 412
    RULE_createdomainstmt = 413
    RULE_alterdomainstmt = 414
    RULE_as_ = 415
    RULE_altertsdictionarystmt = 416
    RULE_altertsconfigurationstmt = 417
    RULE_any_with = 418
    RULE_createconversionstmt = 419
    RULE_clusterstmt = 420
    RULE_cluster_index_specification = 421
    RULE_vacuumstmt = 422
    RULE_analyzestmt = 423
    RULE_utility_option_list = 424
    RULE_vac_analyze_option_list = 425
    RULE_analyze_keyword = 426
    RULE_utility_option_elem = 427
    RULE_utility_option_name = 428
    RULE_utility_option_arg = 429
    RULE_vac_analyze_option_elem = 430
    RULE_vac_analyze_option_name = 431
    RULE_vac_analyze_option_arg = 432
    RULE_analyze_ = 433
    RULE_verbose_ = 434
    RULE_full_ = 435
    RULE_freeze_ = 436
    RULE_name_list_ = 437
    RULE_vacuum_relation = 438
    RULE_vacuum_relation_list = 439
    RULE_vacuum_relation_list_ = 440
    RULE_explainstmt = 441
    RULE_explainablestmt = 442
    RULE_explain_option_list = 443
    RULE_explain_option_elem = 444
    RULE_explain_option_name = 445
    RULE_explain_option_arg = 446
    RULE_preparestmt = 447
    RULE_prep_type_clause = 448
    RULE_preparablestmt = 449
    RULE_executestmt = 450
    RULE_execute_param_clause = 451
    RULE_deallocatestmt = 452
    RULE_insertstmt = 453
    RULE_insert_target = 454
    RULE_insert_rest = 455
    RULE_override_kind = 456
    RULE_insert_column_list = 457
    RULE_insert_column_item = 458
    RULE_on_conflict_ = 459
    RULE_conf_expr_ = 460
    RULE_returning_clause = 461
    RULE_mergestmt = 462
    RULE_merge_insert_clause = 463
    RULE_merge_update_clause = 464
    RULE_merge_delete_clause = 465
    RULE_deletestmt = 466
    RULE_using_clause = 467
    RULE_lockstmt = 468
    RULE_lock_ = 469
    RULE_lock_type = 470
    RULE_nowait_ = 471
    RULE_nowait_or_skip_ = 472
    RULE_updatestmt = 473
    RULE_set_clause_list = 474
    RULE_set_clause = 475
    RULE_set_target = 476
    RULE_set_target_list = 477
    RULE_declarecursorstmt = 478
    RULE_cursor_name = 479
    RULE_cursor_options = 480
    RULE_hold_ = 481
    RULE_selectstmt = 482
    RULE_select_with_parens = 483
    RULE_select_no_parens = 484
    RULE_select_clause = 485
    RULE_simple_select_intersect = 486
    RULE_simple_select_pramary = 487
    RULE_with_clause = 488
    RULE_cte_list = 489
    RULE_common_table_expr = 490
    RULE_materialized_ = 491
    RULE_with_clause_ = 492
    RULE_into_clause = 493
    RULE_strict_ = 494
    RULE_opttempTableName = 495
    RULE_table_ = 496
    RULE_all_or_distinct = 497
    RULE_distinct_clause = 498
    RULE_all_clause_ = 499
    RULE_sort_clause_ = 500
    RULE_sort_clause = 501
    RULE_sortby_list = 502
    RULE_sortby = 503
    RULE_select_limit = 504
    RULE_select_limit_ = 505
    RULE_limit_clause = 506
    RULE_offset_clause = 507
    RULE_select_limit_value = 508
    RULE_select_offset_value = 509
    RULE_select_fetch_first_value = 510
    RULE_i_or_f_const = 511
    RULE_row_or_rows = 512
    RULE_first_or_next = 513
    RULE_group_clause = 514
    RULE_group_by_list = 515
    RULE_group_by_item = 516
    RULE_empty_grouping_set = 517
    RULE_rollup_clause = 518
    RULE_cube_clause = 519
    RULE_grouping_sets_clause = 520
    RULE_having_clause = 521
    RULE_for_locking_clause = 522
    RULE_for_locking_clause_ = 523
    RULE_for_locking_items = 524
    RULE_for_locking_item = 525
    RULE_for_locking_strength = 526
    RULE_locked_rels_list = 527
    RULE_values_clause = 528
    RULE_from_clause = 529
    RULE_from_list = 530
    RULE_table_ref = 531
    RULE_alias_clause = 532
    RULE_func_alias_clause = 533
    RULE_join_type = 534
    RULE_join_qual = 535
    RULE_relation_expr = 536
    RULE_relation_expr_list = 537
    RULE_relation_expr_opt_alias = 538
    RULE_tablesample_clause = 539
    RULE_repeatable_clause_ = 540
    RULE_func_table = 541
    RULE_rowsfrom_item = 542
    RULE_rowsfrom_list = 543
    RULE_col_def_list_ = 544
    RULE_ordinality_ = 545
    RULE_where_clause = 546
    RULE_where_or_current_clause = 547
    RULE_opttablefuncelementlist = 548
    RULE_tablefuncelementlist = 549
    RULE_tablefuncelement = 550
    RULE_xmltable = 551
    RULE_xmltable_column_list = 552
    RULE_xmltable_column_el = 553
    RULE_xmltable_column_option_list = 554
    RULE_xmltable_column_option_el = 555
    RULE_xml_namespace_list = 556
    RULE_xml_namespace_el = 557
    RULE_typename = 558
    RULE_opt_array_bounds = 559
    RULE_simpletypename = 560
    RULE_consttypename = 561
    RULE_generictype = 562
    RULE_type_modifiers_ = 563
    RULE_numeric = 564
    RULE_float_ = 565
    RULE_bit = 566
    RULE_constbit = 567
    RULE_bitwithlength = 568
    RULE_bitwithoutlength = 569
    RULE_character = 570
    RULE_constcharacter = 571
    RULE_character_c = 572
    RULE_varying_ = 573
    RULE_constdatetime = 574
    RULE_constinterval = 575
    RULE_timezone_ = 576
    RULE_interval_ = 577
    RULE_interval_second = 578
    RULE_jsonType = 579
    RULE_escape_ = 580
    RULE_a_expr = 581
    RULE_a_expr_qual = 582
    RULE_a_expr_lessless = 583
    RULE_a_expr_or = 584
    RULE_a_expr_and = 585
    RULE_a_expr_between = 586
    RULE_a_expr_in = 587
    RULE_a_expr_unary_not = 588
    RULE_a_expr_isnull = 589
    RULE_a_expr_is_not = 590
    RULE_a_expr_compare = 591
    RULE_a_expr_like = 592
    RULE_a_expr_qual_op = 593
    RULE_a_expr_unary_qualop = 594
    RULE_a_expr_add = 595
    RULE_a_expr_mul = 596
    RULE_a_expr_caret = 597
    RULE_a_expr_unary_sign = 598
    RULE_a_expr_at_time_zone = 599
    RULE_a_expr_collate = 600
    RULE_a_expr_typecast = 601
    RULE_b_expr = 602
    RULE_c_expr = 603
    RULE_plsqlvariablename = 604
    RULE_func_application = 605
    RULE_func_expr = 606
    RULE_func_expr_windowless = 607
    RULE_func_expr_common_subexpr = 608
    RULE_xml_root_version = 609
    RULE_xml_root_standalone_ = 610
    RULE_xml_attributes = 611
    RULE_xml_attribute_list = 612
    RULE_xml_attribute_el = 613
    RULE_document_or_content = 614
    RULE_xml_whitespace_option = 615
    RULE_xmlexists_argument = 616
    RULE_xml_passing_mech = 617
    RULE_within_group_clause = 618
    RULE_filter_clause = 619
    RULE_window_clause = 620
    RULE_window_definition_list = 621
    RULE_window_definition = 622
    RULE_over_clause = 623
    RULE_window_specification = 624
    RULE_existing_window_name_ = 625
    RULE_partition_clause_ = 626
    RULE_frame_clause_ = 627
    RULE_frame_extent = 628
    RULE_frame_bound = 629
    RULE_window_exclusion_clause_ = 630
    RULE_row = 631
    RULE_explicit_row = 632
    RULE_implicit_row = 633
    RULE_sub_type = 634
    RULE_all_op = 635
    RULE_mathop = 636
    RULE_qual_op = 637
    RULE_qual_all_op = 638
    RULE_subquery_Op = 639
    RULE_expr_list = 640
    RULE_func_arg_list = 641
    RULE_func_arg_expr = 642
    RULE_type_list = 643
    RULE_array_expr = 644
    RULE_array_expr_list = 645
    RULE_extract_list = 646
    RULE_extract_arg = 647
    RULE_unicode_normal_form = 648
    RULE_overlay_list = 649
    RULE_position_list = 650
    RULE_substr_list = 651
    RULE_trim_list = 652
    RULE_in_expr = 653
    RULE_case_expr = 654
    RULE_when_clause_list = 655
    RULE_when_clause = 656
    RULE_case_default = 657
    RULE_case_arg = 658
    RULE_columnref = 659
    RULE_indirection_el = 660
    RULE_slice_bound_ = 661
    RULE_indirection = 662
    RULE_opt_indirection = 663
    RULE_json_passing_clause = 664
    RULE_json_arguments = 665
    RULE_json_argument = 666
    RULE_json_wrapper_behavior = 667
    RULE_json_behavior = 668
    RULE_json_behavior_type = 669
    RULE_json_behavior_clause = 670
    RULE_json_on_error_clause = 671
    RULE_json_value_expr = 672
    RULE_json_format_clause = 673
    RULE_json_quotes_clause = 674
    RULE_json_returning_clause = 675
    RULE_json_predicate_type_constraint = 676
    RULE_json_key_uniqueness_constraint = 677
    RULE_json_name_and_value_list = 678
    RULE_json_name_and_value = 679
    RULE_json_object_constructor_null_clause = 680
    RULE_json_array_constructor_null_clause = 681
    RULE_json_value_expr_list = 682
    RULE_json_aggregate_func = 683
    RULE_json_array_aggregate_order_by_clause = 684
    RULE_target_list_ = 685
    RULE_target_list = 686
    RULE_target_el = 687
    RULE_qualified_name_list = 688
    RULE_qualified_name = 689
    RULE_name_list = 690
    RULE_name = 691
    RULE_attr_name = 692
    RULE_file_name = 693
    RULE_func_name = 694
    RULE_aexprconst = 695
    RULE_xconst = 696
    RULE_bconst = 697
    RULE_fconst = 698
    RULE_iconst = 699
    RULE_sconst = 700
    RULE_anysconst = 701
    RULE_uescape_ = 702
    RULE_signediconst = 703
    RULE_roleid = 704
    RULE_rolespec = 705
    RULE_role_list = 706
    RULE_colid = 707
    RULE_type_function_name = 708
    RULE_nonreservedword = 709
    RULE_colLabel = 710
    RULE_bareColLabel = 711
    RULE_unreserved_keyword = 712
    RULE_col_name_keyword = 713
    RULE_type_func_name_keyword = 714
    RULE_reserved_keyword = 715
    RULE_bare_label_keyword = 716
    RULE_any_identifier = 717
    RULE_identifier = 718

    ruleNames =  [ "root", "stmtblock", "stmtmulti", "stmt", "callstmt", 
                   "createrolestmt", "with_", "optrolelist", "alteroptrolelist", 
                   "alteroptroleelem", "createoptroleelem", "createuserstmt", 
                   "alterrolestmt", "in_database_", "alterrolesetstmt", 
                   "droprolestmt", "creategroupstmt", "altergroupstmt", 
                   "add_drop", "createschemastmt", "optschemaname", "optschemaeltlist", 
                   "schema_stmt", "variablesetstmt", "set_rest", "generic_set", 
                   "set_rest_more", "var_name", "var_list", "var_value", 
                   "iso_level", "boolean_or_string_", "zone_value", "encoding_", 
                   "nonreservedword_or_sconst", "variableresetstmt", "reset_rest", 
                   "generic_reset", "setresetclause", "functionsetresetclause", 
                   "variableshowstmt", "constraintssetstmt", "constraints_set_list", 
                   "constraints_set_mode", "checkpointstmt", "discardstmt", 
                   "altertablestmt", "alter_table_cmds", "partition_cmd", 
                   "index_partition_cmd", "alter_table_cmd", "alter_column_default", 
                   "drop_behavior_", "collate_clause_", "alter_using", "replica_identity", 
                   "reloptions", "reloptions_", "reloption_list", "reloption_elem", 
                   "alter_identity_column_option_list", "alter_identity_column_option", 
                   "partitionboundspec", "hash_partbound_elem", "hash_partbound", 
                   "altercompositetypestmt", "alter_type_cmds", "alter_type_cmd", 
                   "closeportalstmt", "copystmt", "copy_from", "program_", 
                   "copy_file_name", "copy_options", "copy_opt_list", "copy_opt_item", 
                   "binary_", "copy_delimiter", "using_", "copy_generic_opt_list", 
                   "copy_generic_opt_elem", "copy_generic_opt_arg", "copy_generic_opt_arg_list", 
                   "copy_generic_opt_arg_list_item", "createstmt", "opttemp", 
                   "opttableelementlist", "opttypedtableelementlist", "tableelementlist", 
                   "typedtableelementlist", "tableelement", "typedtableelement", 
                   "columnDef", "columnOptions", "colquallist", "colconstraint", 
                   "colconstraintelem", "generated_when", "constraintattr", 
                   "tablelikeclause", "tablelikeoptionlist", "tablelikeoption", 
                   "tableconstraint", "constraintelem", "no_inherit_", "column_list_", 
                   "columnlist", "columnElem", "c_include_", "key_match", 
                   "exclusionconstraintlist", "exclusionconstraintelem", 
                   "exclusionwhereclause", "key_actions", "key_update", 
                   "key_delete", "key_action", "optinherit", "optpartitionspec", 
                   "partitionspec", "part_params", "part_elem", "table_access_method_clause", 
                   "optwith", "oncommitoption", "opttablespace", "optconstablespace", 
                   "existingindex", "createstatsstmt", "alterstatsstmt", 
                   "createasstmt", "create_as_target", "with_data_", "creatematviewstmt", 
                   "create_mv_target", "optnolog", "refreshmatviewstmt", 
                   "createseqstmt", "alterseqstmt", "optseqoptlist", "optparenthesizedseqoptlist", 
                   "seqoptlist", "seqoptelem", "by_", "numericonly", "numericonly_list", 
                   "createplangstmt", "trusted_", "handler_name", "inline_handler_", 
                   "validator_clause", "validator_", "procedural_", "createtablespacestmt", 
                   "opttablespaceowner", "droptablespacestmt", "createextensionstmt", 
                   "create_extension_opt_list", "create_extension_opt_item", 
                   "alterextensionstmt", "alter_extension_opt_list", "alter_extension_opt_item", 
                   "alterextensioncontentsstmt", "createfdwstmt", "fdw_option", 
                   "fdw_options", "fdw_options_", "alterfdwstmt", "create_generic_options", 
                   "generic_option_list", "alter_generic_options", "alter_generic_option_list", 
                   "alter_generic_option_elem", "generic_option_elem", "generic_option_name", 
                   "generic_option_arg", "createforeignserverstmt", "type_", 
                   "foreign_server_version", "foreign_server_version_", 
                   "alterforeignserverstmt", "createforeigntablestmt", "importforeignschemastmt", 
                   "import_qualification_type", "import_qualification", 
                   "createusermappingstmt", "auth_ident", "dropusermappingstmt", 
                   "alterusermappingstmt", "createpolicystmt", "alterpolicystmt", 
                   "rowsecurityoptionalexpr", "rowsecurityoptionalwithcheck", 
                   "rowsecuritydefaulttorole", "rowsecurityoptionaltorole", 
                   "rowsecuritydefaultpermissive", "rowsecuritydefaultforcmd", 
                   "row_security_cmd", "createamstmt", "am_type", "createtrigstmt", 
                   "triggeractiontime", "triggerevents", "triggeroneevent", 
                   "triggerreferencing", "triggertransitions", "triggertransition", 
                   "transitionoldornew", "transitionrowortable", "transitionrelname", 
                   "triggerforspec", "triggerforopteach", "triggerfortype", 
                   "triggerwhen", "function_or_procedure", "triggerfuncargs", 
                   "triggerfuncarg", "optconstrfromtable", "constraintattributespec", 
                   "constraintattributeElem", "createeventtrigstmt", "event_trigger_when_list", 
                   "event_trigger_when_item", "event_trigger_value_list", 
                   "altereventtrigstmt", "enable_trigger", "createassertionstmt", 
                   "definestmt", "definition", "def_list", "def_elem", "def_arg", 
                   "old_aggr_definition", "old_aggr_list", "old_aggr_elem", 
                   "enum_val_list_", "enum_val_list", "alterenumstmt", "if_not_exists_", 
                   "createopclassstmt", "opclass_item_list", "opclass_item", 
                   "default_", "opfamily_", "opclass_purpose", "recheck_", 
                   "createopfamilystmt", "alteropfamilystmt", "opclass_drop_list", 
                   "opclass_drop", "dropopclassstmt", "dropopfamilystmt", 
                   "dropownedstmt", "reassignownedstmt", "dropstmt", "object_type_any_name", 
                   "object_type_name", "drop_type_name", "object_type_name_on_any_name", 
                   "any_name_list_", "any_name", "attrs", "type_name_list", 
                   "truncatestmt", "restart_seqs_", "commentstmt", "comment_text", 
                   "seclabelstmt", "provider_", "security_label", "fetchstmt", 
                   "fetch_args", "from_in", "from_in_", "grantstmt", "revokestmt", 
                   "privileges", "privilege_list", "privilege", "privilege_target", 
                   "grantee_list", "grantee", "grant_grant_option_", "grantrolestmt", 
                   "revokerolestmt", "grant_admin_option_", "granted_by_", 
                   "alterdefaultprivilegesstmt", "defacloptionlist", "defacloption", 
                   "defaclaction", "defacl_privilege_target", "indexstmt", 
                   "unique_", "single_name_", "concurrently_", "index_name_", 
                   "access_method_clause", "index_params", "index_elem_options", 
                   "index_elem", "include_", "index_including_params", "collate_", 
                   "class_", "asc_desc_", "nulls_order_", "createfunctionstmt", 
                   "or_replace_", "func_args", "func_args_list", "function_with_argtypes_list", 
                   "function_with_argtypes", "func_args_with_defaults", 
                   "func_args_with_defaults_list", "func_arg", "arg_class", 
                   "param_name", "func_return", "func_type", "func_arg_with_default", 
                   "aggr_arg", "aggr_args", "aggr_args_list", "aggregate_with_argtypes", 
                   "aggregate_with_argtypes_list", "createfunc_opt_list", 
                   "common_func_opt_item", "createfunc_opt_item", "func_as", 
                   "transform_type_list", "definition_", "table_func_column", 
                   "table_func_column_list", "alterfunctionstmt", "alterfunc_opt_list", 
                   "restrict_", "removefuncstmt", "removeaggrstmt", "removeoperstmt", 
                   "oper_argtypes", "any_operator", "operator_with_argtypes_list", 
                   "operator_with_argtypes", "dostmt", "dostmt_opt_list", 
                   "dostmt_opt_item", "createcaststmt", "cast_context", 
                   "dropcaststmt", "if_exists_", "createtransformstmt", 
                   "transform_element_list", "droptransformstmt", "reindexstmt", 
                   "reindex_target_relation", "reindex_target_all", "reindex_option_list", 
                   "altertblspcstmt", "renamestmt", "column_", "set_data_", 
                   "alterobjectdependsstmt", "no_", "alterobjectschemastmt", 
                   "alteroperatorstmt", "operator_def_list", "operator_def_elem", 
                   "operator_def_arg", "altertypestmt", "alterownerstmt", 
                   "createpublicationstmt", "publication_for_tables_", "publication_for_tables", 
                   "alterpublicationstmt", "createsubscriptionstmt", "publication_name_list", 
                   "publication_name_item", "altersubscriptionstmt", "dropsubscriptionstmt", 
                   "rulestmt", "ruleactionlist", "ruleactionmulti", "ruleactionstmt", 
                   "ruleactionstmtOrEmpty", "event", "instead_", "notifystmt", 
                   "notify_payload", "listenstmt", "unlistenstmt", "transactionstmt", 
                   "transaction_", "transaction_mode_item", "transaction_mode_list", 
                   "transaction_mode_list_or_empty", "transaction_chain_", 
                   "viewstmt", "check_option_", "loadstmt", "createdbstmt", 
                   "createdb_opt_list", "createdb_opt_items", "createdb_opt_item", 
                   "createdb_opt_name", "equal_", "alterdatabasestmt", "alterdatabasesetstmt", 
                   "dropdbstmt", "drop_option_list", "drop_option", "altercollationstmt", 
                   "altersystemstmt", "createdomainstmt", "alterdomainstmt", 
                   "as_", "altertsdictionarystmt", "altertsconfigurationstmt", 
                   "any_with", "createconversionstmt", "clusterstmt", "cluster_index_specification", 
                   "vacuumstmt", "analyzestmt", "utility_option_list", "vac_analyze_option_list", 
                   "analyze_keyword", "utility_option_elem", "utility_option_name", 
                   "utility_option_arg", "vac_analyze_option_elem", "vac_analyze_option_name", 
                   "vac_analyze_option_arg", "analyze_", "verbose_", "full_", 
                   "freeze_", "name_list_", "vacuum_relation", "vacuum_relation_list", 
                   "vacuum_relation_list_", "explainstmt", "explainablestmt", 
                   "explain_option_list", "explain_option_elem", "explain_option_name", 
                   "explain_option_arg", "preparestmt", "prep_type_clause", 
                   "preparablestmt", "executestmt", "execute_param_clause", 
                   "deallocatestmt", "insertstmt", "insert_target", "insert_rest", 
                   "override_kind", "insert_column_list", "insert_column_item", 
                   "on_conflict_", "conf_expr_", "returning_clause", "mergestmt", 
                   "merge_insert_clause", "merge_update_clause", "merge_delete_clause", 
                   "deletestmt", "using_clause", "lockstmt", "lock_", "lock_type", 
                   "nowait_", "nowait_or_skip_", "updatestmt", "set_clause_list", 
                   "set_clause", "set_target", "set_target_list", "declarecursorstmt", 
                   "cursor_name", "cursor_options", "hold_", "selectstmt", 
                   "select_with_parens", "select_no_parens", "select_clause", 
                   "simple_select_intersect", "simple_select_pramary", "with_clause", 
                   "cte_list", "common_table_expr", "materialized_", "with_clause_", 
                   "into_clause", "strict_", "opttempTableName", "table_", 
                   "all_or_distinct", "distinct_clause", "all_clause_", 
                   "sort_clause_", "sort_clause", "sortby_list", "sortby", 
                   "select_limit", "select_limit_", "limit_clause", "offset_clause", 
                   "select_limit_value", "select_offset_value", "select_fetch_first_value", 
                   "i_or_f_const", "row_or_rows", "first_or_next", "group_clause", 
                   "group_by_list", "group_by_item", "empty_grouping_set", 
                   "rollup_clause", "cube_clause", "grouping_sets_clause", 
                   "having_clause", "for_locking_clause", "for_locking_clause_", 
                   "for_locking_items", "for_locking_item", "for_locking_strength", 
                   "locked_rels_list", "values_clause", "from_clause", "from_list", 
                   "table_ref", "alias_clause", "func_alias_clause", "join_type", 
                   "join_qual", "relation_expr", "relation_expr_list", "relation_expr_opt_alias", 
                   "tablesample_clause", "repeatable_clause_", "func_table", 
                   "rowsfrom_item", "rowsfrom_list", "col_def_list_", "ordinality_", 
                   "where_clause", "where_or_current_clause", "opttablefuncelementlist", 
                   "tablefuncelementlist", "tablefuncelement", "xmltable", 
                   "xmltable_column_list", "xmltable_column_el", "xmltable_column_option_list", 
                   "xmltable_column_option_el", "xml_namespace_list", "xml_namespace_el", 
                   "typename", "opt_array_bounds", "simpletypename", "consttypename", 
                   "generictype", "type_modifiers_", "numeric", "float_", 
                   "bit", "constbit", "bitwithlength", "bitwithoutlength", 
                   "character", "constcharacter", "character_c", "varying_", 
                   "constdatetime", "constinterval", "timezone_", "interval_", 
                   "interval_second", "jsonType", "escape_", "a_expr", "a_expr_qual", 
                   "a_expr_lessless", "a_expr_or", "a_expr_and", "a_expr_between", 
                   "a_expr_in", "a_expr_unary_not", "a_expr_isnull", "a_expr_is_not", 
                   "a_expr_compare", "a_expr_like", "a_expr_qual_op", "a_expr_unary_qualop", 
                   "a_expr_add", "a_expr_mul", "a_expr_caret", "a_expr_unary_sign", 
                   "a_expr_at_time_zone", "a_expr_collate", "a_expr_typecast", 
                   "b_expr", "c_expr", "plsqlvariablename", "func_application", 
                   "func_expr", "func_expr_windowless", "func_expr_common_subexpr", 
                   "xml_root_version", "xml_root_standalone_", "xml_attributes", 
                   "xml_attribute_list", "xml_attribute_el", "document_or_content", 
                   "xml_whitespace_option", "xmlexists_argument", "xml_passing_mech", 
                   "within_group_clause", "filter_clause", "window_clause", 
                   "window_definition_list", "window_definition", "over_clause", 
                   "window_specification", "existing_window_name_", "partition_clause_", 
                   "frame_clause_", "frame_extent", "frame_bound", "window_exclusion_clause_", 
                   "row", "explicit_row", "implicit_row", "sub_type", "all_op", 
                   "mathop", "qual_op", "qual_all_op", "subquery_Op", "expr_list", 
                   "func_arg_list", "func_arg_expr", "type_list", "array_expr", 
                   "array_expr_list", "extract_list", "extract_arg", "unicode_normal_form", 
                   "overlay_list", "position_list", "substr_list", "trim_list", 
                   "in_expr", "case_expr", "when_clause_list", "when_clause", 
                   "case_default", "case_arg", "columnref", "indirection_el", 
                   "slice_bound_", "indirection", "opt_indirection", "json_passing_clause", 
                   "json_arguments", "json_argument", "json_wrapper_behavior", 
                   "json_behavior", "json_behavior_type", "json_behavior_clause", 
                   "json_on_error_clause", "json_value_expr", "json_format_clause", 
                   "json_quotes_clause", "json_returning_clause", "json_predicate_type_constraint", 
                   "json_key_uniqueness_constraint", "json_name_and_value_list", 
                   "json_name_and_value", "json_object_constructor_null_clause", 
                   "json_array_constructor_null_clause", "json_value_expr_list", 
                   "json_aggregate_func", "json_array_aggregate_order_by_clause", 
                   "target_list_", "target_list", "target_el", "qualified_name_list", 
                   "qualified_name", "name_list", "name", "attr_name", "file_name", 
                   "func_name", "aexprconst", "xconst", "bconst", "fconst", 
                   "iconst", "sconst", "anysconst", "uescape_", "signediconst", 
                   "roleid", "rolespec", "role_list", "colid", "type_function_name", 
                   "nonreservedword", "colLabel", "bareColLabel", "unreserved_keyword", 
                   "col_name_keyword", "type_func_name_keyword", "reserved_keyword", 
                   "bare_label_keyword", "any_identifier", "identifier" ]

    EOF = Token.EOF
    Dollar=1
    OPEN_PAREN=2
    CLOSE_PAREN=3
    OPEN_BRACKET=4
    CLOSE_BRACKET=5
    COMMA=6
    SEMI=7
    COLON=8
    STAR=9
    EQUAL=10
    DOT=11
    PLUS=12
    MINUS=13
    SLASH=14
    CARET=15
    LT=16
    GT=17
    LESS_LESS=18
    GREATER_GREATER=19
    COLON_EQUALS=20
    LESS_EQUALS=21
    EQUALS_GREATER=22
    GREATER_EQUALS=23
    DOT_DOT=24
    NOT_EQUALS=25
    TYPECAST=26
    PERCENT=27
    PARAM=28
    Operator=29
    JSON=30
    JSON_ARRAY=31
    JSON_ARRAYAGG=32
    JSON_EXISTS=33
    JSON_OBJECT=34
    JSON_OBJECTAGG=35
    JSON_QUERY=36
    JSON_SCALAR=37
    JSON_SERIALIZE=38
    JSON_TABLE=39
    JSON_VALUE=40
    MERGE_ACTION=41
    SYSTEM_USER=42
    ABSENT=43
    ASENSITIVE=44
    ATOMIC=45
    BREADTH=46
    COMPRESSION=47
    CONDITIONAL=48
    DEPTH=49
    EMPTY_P=50
    FINALIZE=51
    INDENT=52
    KEEP=53
    KEYS=54
    NESTED=55
    OMIT=56
    PARAMETER=57
    PATH=58
    PLAN=59
    QUOTES=60
    SCALAR=61
    SOURCE=62
    STRING_P=63
    TARGET=64
    UNCONDITIONAL=65
    PERIOD=66
    FORMAT_LA=67
    ALL=68
    ANALYSE=69
    ANALYZE=70
    AND=71
    ANY=72
    ARRAY=73
    AS=74
    ASC=75
    ASYMMETRIC=76
    BOTH=77
    CASE=78
    CAST=79
    CHECK=80
    COLLATE=81
    COLUMN=82
    CONSTRAINT=83
    CREATE=84
    CURRENT_CATALOG=85
    CURRENT_DATE=86
    CURRENT_ROLE=87
    CURRENT_TIME=88
    CURRENT_TIMESTAMP=89
    CURRENT_USER=90
    DEFAULT=91
    DEFERRABLE=92
    DESC=93
    DISTINCT=94
    DO=95
    ELSE=96
    EXCEPT=97
    FALSE_P=98
    FETCH=99
    FOR=100
    FOREIGN=101
    FROM=102
    GRANT=103
    GROUP_P=104
    HAVING=105
    IN_P=106
    INITIALLY=107
    INTERSECT=108
    INTO=109
    LATERAL_P=110
    LEADING=111
    LIMIT=112
    LOCALTIME=113
    LOCALTIMESTAMP=114
    NOT=115
    NULL_P=116
    OFFSET=117
    ON=118
    ONLY=119
    OR=120
    ORDER=121
    PLACING=122
    PRIMARY=123
    REFERENCES=124
    RETURNING=125
    SELECT=126
    SESSION_USER=127
    SOME=128
    SYMMETRIC=129
    TABLE=130
    THEN=131
    TO=132
    TRAILING=133
    TRUE_P=134
    UNION=135
    UNIQUE=136
    USER=137
    USING=138
    VARIADIC=139
    WHEN=140
    WHERE=141
    WINDOW=142
    WITH=143
    AUTHORIZATION=144
    BINARY=145
    COLLATION=146
    CONCURRENTLY=147
    CROSS=148
    CURRENT_SCHEMA=149
    FREEZE=150
    FULL=151
    ILIKE=152
    INNER_P=153
    IS=154
    ISNULL=155
    JOIN=156
    LEFT=157
    LIKE=158
    NATURAL=159
    NOTNULL=160
    OUTER_P=161
    OVER=162
    OVERLAPS=163
    RIGHT=164
    SIMILAR=165
    VERBOSE=166
    ABORT_P=167
    ABSOLUTE_P=168
    ACCESS=169
    ACTION=170
    ADD_P=171
    ADMIN=172
    AFTER=173
    AGGREGATE=174
    ALSO=175
    ALTER=176
    ALWAYS=177
    ASSERTION=178
    ASSIGNMENT=179
    AT=180
    ATTRIBUTE=181
    BACKWARD=182
    BEFORE=183
    BEGIN_P=184
    BY=185
    CACHE=186
    CALLED=187
    CASCADE=188
    CASCADED=189
    CATALOG=190
    CHAIN=191
    CHARACTERISTICS=192
    CHECKPOINT=193
    CLASS=194
    CLOSE=195
    CLUSTER=196
    COMMENT=197
    COMMENTS=198
    COMMIT=199
    COMMITTED=200
    CONFIGURATION=201
    CONNECTION=202
    CONSTRAINTS=203
    CONTENT_P=204
    CONTINUE_P=205
    CONVERSION_P=206
    COPY=207
    COST=208
    CSV=209
    CURSOR=210
    CYCLE=211
    DATA_P=212
    DATABASE=213
    DAY_P=214
    DEALLOCATE=215
    DECLARE=216
    DEFAULTS=217
    DEFERRED=218
    DEFINER=219
    DELETE_P=220
    DELIMITER=221
    DELIMITERS=222
    DICTIONARY=223
    DISABLE_P=224
    DISCARD=225
    DOCUMENT_P=226
    DOMAIN_P=227
    DOUBLE_P=228
    DROP=229
    EACH=230
    ENABLE_P=231
    ENCODING=232
    ENCRYPTED=233
    ENUM_P=234
    ESCAPE=235
    EVENT=236
    EXCLUDE=237
    EXCLUDING=238
    EXCLUSIVE=239
    EXECUTE=240
    EXPLAIN=241
    EXTENSION=242
    EXTERNAL=243
    FAMILY=244
    FIRST_P=245
    FOLLOWING=246
    FORCE=247
    FORWARD=248
    FUNCTION=249
    FUNCTIONS=250
    GLOBAL=251
    GRANTED=252
    HANDLER=253
    HEADER_P=254
    HOLD=255
    HOUR_P=256
    IDENTITY_P=257
    IF_P=258
    IMMEDIATE=259
    IMMUTABLE=260
    IMPLICIT_P=261
    INCLUDING=262
    INCREMENT=263
    INDEX=264
    INDEXES=265
    INHERIT=266
    INHERITS=267
    INLINE_P=268
    INSENSITIVE=269
    INSERT=270
    INSTEAD=271
    INVOKER=272
    ISOLATION=273
    KEY=274
    LABEL=275
    LANGUAGE=276
    LARGE_P=277
    LAST_P=278
    LEAKPROOF=279
    LEVEL=280
    LISTEN=281
    LOAD=282
    LOCAL=283
    LOCATION=284
    LOCK_P=285
    MAPPING=286
    MATCH=287
    MATCHED=288
    MATERIALIZED=289
    MAXVALUE=290
    MERGE=291
    MINUTE_P=292
    MINVALUE=293
    MODE=294
    MONTH_P=295
    MOVE=296
    NAME_P=297
    NAMES=298
    NEXT=299
    NO=300
    NOTHING=301
    NOTIFY=302
    NOWAIT=303
    NULLS_P=304
    OBJECT_P=305
    OF=306
    OFF=307
    OIDS=308
    OPERATOR=309
    OPTION=310
    OPTIONS=311
    OWNED=312
    OWNER=313
    PARSER=314
    PARTIAL=315
    PARTITION=316
    PASSING=317
    PASSWORD=318
    PLANS=319
    PRECEDING=320
    PREPARE=321
    PREPARED=322
    PRESERVE=323
    PRIOR=324
    PRIVILEGES=325
    PROCEDURAL=326
    PROCEDURE=327
    PROGRAM=328
    QUOTE=329
    RANGE=330
    READ=331
    REASSIGN=332
    RECHECK=333
    RECURSIVE=334
    REF=335
    REFRESH=336
    REINDEX=337
    RELATIVE_P=338
    RELEASE=339
    RENAME=340
    REPEATABLE=341
    REPLACE=342
    REPLICA=343
    RESET=344
    RESTART=345
    RESTRICT=346
    RETURNS=347
    REVOKE=348
    ROLE=349
    ROLLBACK=350
    ROWS=351
    RULE=352
    SAVEPOINT=353
    SCHEMA=354
    SCROLL=355
    SEARCH=356
    SECOND_P=357
    SECURITY=358
    SEQUENCE=359
    SEQUENCES=360
    SERIALIZABLE=361
    SERVER=362
    SESSION=363
    SET=364
    SHARE=365
    SHOW=366
    SIMPLE=367
    SNAPSHOT=368
    STABLE=369
    STANDALONE_P=370
    START=371
    STATEMENT=372
    STATISTICS=373
    STDIN=374
    STDOUT=375
    STORAGE=376
    STRICT_P=377
    STRIP_P=378
    SYSID=379
    SYSTEM_P=380
    TABLES=381
    TABLESPACE=382
    TEMP=383
    TEMPLATE=384
    TEMPORARY=385
    TEXT_P=386
    TRANSACTION=387
    TRIGGER=388
    TRUNCATE=389
    TRUSTED=390
    TYPE_P=391
    TYPES_P=392
    UNBOUNDED=393
    UNCOMMITTED=394
    UNENCRYPTED=395
    UNKNOWN=396
    UNLISTEN=397
    UNLOGGED=398
    UNTIL=399
    UPDATE=400
    VACUUM=401
    VALID=402
    VALIDATE=403
    VALIDATOR=404
    VARYING=405
    VERSION_P=406
    VIEW=407
    VOLATILE=408
    WHITESPACE_P=409
    WITHOUT=410
    WORK=411
    WRAPPER=412
    WRITE=413
    XML_P=414
    YEAR_P=415
    YES_P=416
    ZONE=417
    BETWEEN=418
    BIGINT=419
    BIT=420
    BOOLEAN_P=421
    CHAR_P=422
    CHARACTER=423
    COALESCE=424
    DEC=425
    DECIMAL_P=426
    EXISTS=427
    EXTRACT=428
    FLOAT_P=429
    GREATEST=430
    INOUT=431
    INT_P=432
    INTEGER=433
    INTERVAL=434
    LEAST=435
    NATIONAL=436
    NCHAR=437
    NONE=438
    NULLIF=439
    NUMERIC=440
    OVERLAY=441
    POSITION=442
    PRECISION=443
    REAL=444
    ROW=445
    SETOF=446
    SMALLINT=447
    SUBSTRING=448
    TIME=449
    TIMESTAMP=450
    TREAT=451
    TRIM=452
    VALUES=453
    VARCHAR=454
    XMLATTRIBUTES=455
    XMLCOMMENT=456
    XMLAGG=457
    XML_IS_WELL_FORMED=458
    XML_IS_WELL_FORMED_DOCUMENT=459
    XML_IS_WELL_FORMED_CONTENT=460
    XPATH=461
    XPATH_EXISTS=462
    XMLCONCAT=463
    XMLELEMENT=464
    XMLEXISTS=465
    XMLFOREST=466
    XMLPARSE=467
    XMLPI=468
    XMLROOT=469
    XMLSERIALIZE=470
    CALL=471
    CURRENT_P=472
    ATTACH=473
    DETACH=474
    EXPRESSION=475
    GENERATED=476
    LOGGED=477
    STORED=478
    INCLUDE=479
    ROUTINE=480
    TRANSFORM=481
    IMPORT_P=482
    POLICY=483
    METHOD=484
    REFERENCING=485
    NEW=486
    OLD=487
    VALUE_P=488
    SUBSCRIPTION=489
    PUBLICATION=490
    OUT_P=491
    END_P=492
    ROUTINES=493
    SCHEMAS=494
    PROCEDURES=495
    INPUT_P=496
    SUPPORT=497
    PARALLEL=498
    SQL_P=499
    DEPENDS=500
    OVERRIDING=501
    CONFLICT=502
    SKIP_P=503
    LOCKED=504
    TIES=505
    ROLLUP=506
    CUBE=507
    GROUPING=508
    SETS=509
    TABLESAMPLE=510
    ORDINALITY=511
    XMLTABLE=512
    COLUMNS=513
    XMLNAMESPACES=514
    ROWTYPE=515
    NORMALIZED=516
    WITHIN=517
    FILTER=518
    GROUPS=519
    OTHERS=520
    NFC=521
    NFD=522
    NFKC=523
    NFKD=524
    UESCAPE=525
    VIEWS=526
    NORMALIZE=527
    DUMP=528
    ERROR=529
    USE_VARIABLE=530
    USE_COLUMN=531
    CONSTANT=532
    PERFORM=533
    GET=534
    DIAGNOSTICS=535
    STACKED=536
    ELSIF=537
    WHILE=538
    FOREACH=539
    SLICE=540
    EXIT=541
    RETURN=542
    RAISE=543
    SQLSTATE=544
    DEBUG=545
    INFO=546
    NOTICE=547
    WARNING=548
    EXCEPTION=549
    ASSERT=550
    LOOP=551
    OPEN=552
    FORMAT=553
    Identifier=554
    QuotedIdentifier=555
    UnterminatedQuotedIdentifier=556
    InvalidQuotedIdentifier=557
    InvalidUnterminatedQuotedIdentifier=558
    UnicodeQuotedIdentifier=559
    UnterminatedUnicodeQuotedIdentifier=560
    InvalidUnicodeQuotedIdentifier=561
    InvalidUnterminatedUnicodeQuotedIdentifier=562
    StringConstant=563
    UnterminatedStringConstant=564
    UnicodeEscapeStringConstant=565
    UnterminatedUnicodeEscapeStringConstant=566
    BeginDollarStringConstant=567
    BinaryStringConstant=568
    UnterminatedBinaryStringConstant=569
    InvalidBinaryStringConstant=570
    InvalidUnterminatedBinaryStringConstant=571
    HexadecimalStringConstant=572
    UnterminatedHexadecimalStringConstant=573
    InvalidHexadecimalStringConstant=574
    InvalidUnterminatedHexadecimalStringConstant=575
    Integral=576
    BinaryIntegral=577
    OctalIntegral=578
    HexadecimalIntegral=579
    NumericFail=580
    Numeric=581
    PLSQLVARIABLENAME=582
    PLSQLIDENTIFIER=583
    Whitespace=584
    Newline=585
    LineComment=586
    BlockComment=587
    UnterminatedBlockComment=588
    ErrorCharacter=589
    EscapeStringConstant=590
    UnterminatedEscapeStringConstant=591
    InvalidEscapeStringConstant=592
    InvalidUnterminatedEscapeStringConstant=593
    AfterEscapeStringConstantMode_NotContinued=594
    AfterEscapeStringConstantWithNewlineMode_NotContinued=595
    DollarText=596
    EndDollarStringConstant=597
    MetaCommand=598
    AfterEscapeStringConstantWithNewlineMode_Continued=599

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class RootContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmtblock(self):
            return self.getTypedRuleContext(PostgreSQLParser.StmtblockContext,0)


        def EOF(self):
            return self.getToken(PostgreSQLParser.EOF, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)




    def root(self):

        localctx = PostgreSQLParser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1438
            self.stmtblock()
            self.state = 1439
            self.match(PostgreSQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtblockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmtmulti(self):
            return self.getTypedRuleContext(PostgreSQLParser.StmtmultiContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_stmtblock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmtblock" ):
                listener.enterStmtblock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmtblock" ):
                listener.exitStmtblock(self)




    def stmtblock(self):

        localctx = PostgreSQLParser.StmtblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_stmtblock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1441
            self.stmtmulti()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtmultiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.StmtContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.StmtContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.SEMI)
            else:
                return self.getToken(PostgreSQLParser.SEMI, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_stmtmulti

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmtmulti" ):
                listener.enterStmtmulti(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmtmulti" ):
                listener.exitStmtmulti(self)




    def stmtmulti(self):

        localctx = PostgreSQLParser.StmtmultiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_stmtmulti)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2 or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 2449958215610302467) != 0) or ((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & 104710898966331393) != 0) or ((((_la - 207)) & ~0x3f) == 0 and ((1 << (_la - 207)) & -9223372011080506623) != 0) or ((((_la - 281)) & ~0x3f) == 0 and ((1 << (_la - 281)) & -8824802370318728173) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & 14075947867505701) != 0) or ((((_la - 453)) & ~0x3f) == 0 and ((1 << (_la - 453)) & 550292946945) != 0):
                self.state = 1443
                self.stmt()


            self.state = 1452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==7:
                self.state = 1446
                self.match(PostgreSQLParser.SEMI)
                self.state = 1448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 2449958215610302467) != 0) or ((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & 104710898966331393) != 0) or ((((_la - 207)) & ~0x3f) == 0 and ((1 << (_la - 207)) & -9223372011080506623) != 0) or ((((_la - 281)) & ~0x3f) == 0 and ((1 << (_la - 281)) & -8824802370318728173) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & 14075947867505701) != 0) or ((((_la - 453)) & ~0x3f) == 0 and ((1 << (_la - 453)) & 550292946945) != 0):
                    self.state = 1447
                    self.stmt()


                self.state = 1454
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def altereventtrigstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AltereventtrigstmtContext,0)


        def altercollationstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AltercollationstmtContext,0)


        def alterdatabasestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterdatabasestmtContext,0)


        def alterdatabasesetstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterdatabasesetstmtContext,0)


        def alterdefaultprivilegesstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterdefaultprivilegesstmtContext,0)


        def alterdomainstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterdomainstmtContext,0)


        def alterenumstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterenumstmtContext,0)


        def alterextensionstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterextensionstmtContext,0)


        def alterextensioncontentsstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterextensioncontentsstmtContext,0)


        def alterfdwstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterfdwstmtContext,0)


        def alterforeignserverstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterforeignserverstmtContext,0)


        def alterfunctionstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterfunctionstmtContext,0)


        def altergroupstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AltergroupstmtContext,0)


        def alterobjectdependsstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterobjectdependsstmtContext,0)


        def alterobjectschemastmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterobjectschemastmtContext,0)


        def alterownerstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterownerstmtContext,0)


        def alteroperatorstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlteroperatorstmtContext,0)


        def altertypestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AltertypestmtContext,0)


        def alterpolicystmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterpolicystmtContext,0)


        def alterseqstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterseqstmtContext,0)


        def altersystemstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AltersystemstmtContext,0)


        def altertablestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AltertablestmtContext,0)


        def altertblspcstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AltertblspcstmtContext,0)


        def altercompositetypestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AltercompositetypestmtContext,0)


        def alterpublicationstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterpublicationstmtContext,0)


        def alterrolesetstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterrolesetstmtContext,0)


        def alterrolestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterrolestmtContext,0)


        def altersubscriptionstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AltersubscriptionstmtContext,0)


        def alterstatsstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterstatsstmtContext,0)


        def altertsconfigurationstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AltertsconfigurationstmtContext,0)


        def altertsdictionarystmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AltertsdictionarystmtContext,0)


        def alterusermappingstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlterusermappingstmtContext,0)


        def analyzestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AnalyzestmtContext,0)


        def callstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CallstmtContext,0)


        def checkpointstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CheckpointstmtContext,0)


        def closeportalstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CloseportalstmtContext,0)


        def clusterstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.ClusterstmtContext,0)


        def commentstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CommentstmtContext,0)


        def constraintssetstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.ConstraintssetstmtContext,0)


        def copystmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CopystmtContext,0)


        def createamstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateamstmtContext,0)


        def createasstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateasstmtContext,0)


        def createassertionstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateassertionstmtContext,0)


        def createcaststmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatecaststmtContext,0)


        def createconversionstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateconversionstmtContext,0)


        def createdomainstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatedomainstmtContext,0)


        def createextensionstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateextensionstmtContext,0)


        def createfdwstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatefdwstmtContext,0)


        def createforeignserverstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateforeignserverstmtContext,0)


        def createforeigntablestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateforeigntablestmtContext,0)


        def createfunctionstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatefunctionstmtContext,0)


        def creategroupstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreategroupstmtContext,0)


        def creatematviewstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatematviewstmtContext,0)


        def createopclassstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateopclassstmtContext,0)


        def createopfamilystmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateopfamilystmtContext,0)


        def createpublicationstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatepublicationstmtContext,0)


        def alteropfamilystmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlteropfamilystmtContext,0)


        def createpolicystmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatepolicystmtContext,0)


        def createplangstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateplangstmtContext,0)


        def createschemastmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateschemastmtContext,0)


        def createseqstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateseqstmtContext,0)


        def createstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatestmtContext,0)


        def createsubscriptionstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatesubscriptionstmtContext,0)


        def createstatsstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatestatsstmtContext,0)


        def createtablespacestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatetablespacestmtContext,0)


        def createtransformstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatetransformstmtContext,0)


        def createtrigstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatetrigstmtContext,0)


        def createeventtrigstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateeventtrigstmtContext,0)


        def createrolestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreaterolestmtContext,0)


        def createuserstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateuserstmtContext,0)


        def createusermappingstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateusermappingstmtContext,0)


        def createdbstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatedbstmtContext,0)


        def deallocatestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DeallocatestmtContext,0)


        def declarecursorstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DeclarecursorstmtContext,0)


        def definestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DefinestmtContext,0)


        def deletestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DeletestmtContext,0)


        def discardstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DiscardstmtContext,0)


        def dostmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DostmtContext,0)


        def dropcaststmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DropcaststmtContext,0)


        def dropopclassstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DropopclassstmtContext,0)


        def dropopfamilystmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DropopfamilystmtContext,0)


        def dropownedstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DropownedstmtContext,0)


        def dropstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DropstmtContext,0)


        def dropsubscriptionstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DropsubscriptionstmtContext,0)


        def droptablespacestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DroptablespacestmtContext,0)


        def droptransformstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DroptransformstmtContext,0)


        def droprolestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DroprolestmtContext,0)


        def dropusermappingstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DropusermappingstmtContext,0)


        def dropdbstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DropdbstmtContext,0)


        def executestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExecutestmtContext,0)


        def explainstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExplainstmtContext,0)


        def fetchstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.FetchstmtContext,0)


        def grantstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.GrantstmtContext,0)


        def grantrolestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.GrantrolestmtContext,0)


        def importforeignschemastmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.ImportforeignschemastmtContext,0)


        def indexstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.IndexstmtContext,0)


        def insertstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.InsertstmtContext,0)


        def mergestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.MergestmtContext,0)


        def listenstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.ListenstmtContext,0)


        def refreshmatviewstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.RefreshmatviewstmtContext,0)


        def loadstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.LoadstmtContext,0)


        def lockstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.LockstmtContext,0)


        def notifystmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.NotifystmtContext,0)


        def preparestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.PreparestmtContext,0)


        def reassignownedstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.ReassignownedstmtContext,0)


        def reindexstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.ReindexstmtContext,0)


        def removeaggrstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.RemoveaggrstmtContext,0)


        def removefuncstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.RemovefuncstmtContext,0)


        def removeoperstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.RemoveoperstmtContext,0)


        def renamestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.RenamestmtContext,0)


        def revokestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.RevokestmtContext,0)


        def revokerolestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.RevokerolestmtContext,0)


        def rulestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.RulestmtContext,0)


        def seclabelstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.SeclabelstmtContext,0)


        def selectstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.SelectstmtContext,0)


        def transactionstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.TransactionstmtContext,0)


        def truncatestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.TruncatestmtContext,0)


        def unlistenstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.UnlistenstmtContext,0)


        def updatestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.UpdatestmtContext,0)


        def vacuumstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.VacuumstmtContext,0)


        def variableresetstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.VariableresetstmtContext,0)


        def variablesetstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.VariablesetstmtContext,0)


        def variableshowstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.VariableshowstmtContext,0)


        def viewstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.ViewstmtContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)




    def stmt(self):

        localctx = PostgreSQLParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_stmt)
        try:
            self.state = 1579
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1455
                self.altereventtrigstmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1456
                self.altercollationstmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1457
                self.alterdatabasestmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1458
                self.alterdatabasesetstmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1459
                self.alterdefaultprivilegesstmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1460
                self.alterdomainstmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1461
                self.alterenumstmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1462
                self.alterextensionstmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1463
                self.alterextensioncontentsstmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1464
                self.alterfdwstmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1465
                self.alterforeignserverstmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1466
                self.alterfunctionstmt()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1467
                self.altergroupstmt()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1468
                self.alterobjectdependsstmt()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1469
                self.alterobjectschemastmt()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1470
                self.alterownerstmt()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1471
                self.alteroperatorstmt()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1472
                self.altertypestmt()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1473
                self.alterpolicystmt()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1474
                self.alterseqstmt()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1475
                self.altersystemstmt()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1476
                self.altertablestmt()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1477
                self.altertblspcstmt()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1478
                self.altercompositetypestmt()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1479
                self.alterpublicationstmt()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1480
                self.alterrolesetstmt()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1481
                self.alterrolestmt()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1482
                self.altersubscriptionstmt()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1483
                self.alterstatsstmt()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1484
                self.altertsconfigurationstmt()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1485
                self.altertsdictionarystmt()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1486
                self.alterusermappingstmt()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1487
                self.analyzestmt()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1488
                self.callstmt()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 1489
                self.checkpointstmt()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 1490
                self.closeportalstmt()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 1491
                self.clusterstmt()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 1492
                self.commentstmt()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 1493
                self.constraintssetstmt()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 1494
                self.copystmt()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 1495
                self.createamstmt()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 1496
                self.createasstmt()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 1497
                self.createassertionstmt()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 1498
                self.createcaststmt()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 1499
                self.createconversionstmt()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 1500
                self.createdomainstmt()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 1501
                self.createextensionstmt()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 1502
                self.createfdwstmt()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 1503
                self.createforeignserverstmt()
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 1504
                self.createforeigntablestmt()
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 1505
                self.createfunctionstmt()
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 1506
                self.creategroupstmt()
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 1507
                self.creatematviewstmt()
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 1508
                self.createopclassstmt()
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 1509
                self.createopfamilystmt()
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 1510
                self.createpublicationstmt()
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 1511
                self.alteropfamilystmt()
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 1512
                self.createpolicystmt()
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 1513
                self.createplangstmt()
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 1514
                self.createschemastmt()
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 1515
                self.createseqstmt()
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 1516
                self.createstmt()
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 1517
                self.createsubscriptionstmt()
                pass

            elif la_ == 64:
                self.enterOuterAlt(localctx, 64)
                self.state = 1518
                self.createstatsstmt()
                pass

            elif la_ == 65:
                self.enterOuterAlt(localctx, 65)
                self.state = 1519
                self.createtablespacestmt()
                pass

            elif la_ == 66:
                self.enterOuterAlt(localctx, 66)
                self.state = 1520
                self.createtransformstmt()
                pass

            elif la_ == 67:
                self.enterOuterAlt(localctx, 67)
                self.state = 1521
                self.createtrigstmt()
                pass

            elif la_ == 68:
                self.enterOuterAlt(localctx, 68)
                self.state = 1522
                self.createeventtrigstmt()
                pass

            elif la_ == 69:
                self.enterOuterAlt(localctx, 69)
                self.state = 1523
                self.createrolestmt()
                pass

            elif la_ == 70:
                self.enterOuterAlt(localctx, 70)
                self.state = 1524
                self.createuserstmt()
                pass

            elif la_ == 71:
                self.enterOuterAlt(localctx, 71)
                self.state = 1525
                self.createusermappingstmt()
                pass

            elif la_ == 72:
                self.enterOuterAlt(localctx, 72)
                self.state = 1526
                self.createdbstmt()
                pass

            elif la_ == 73:
                self.enterOuterAlt(localctx, 73)
                self.state = 1527
                self.deallocatestmt()
                pass

            elif la_ == 74:
                self.enterOuterAlt(localctx, 74)
                self.state = 1528
                self.declarecursorstmt()
                pass

            elif la_ == 75:
                self.enterOuterAlt(localctx, 75)
                self.state = 1529
                self.definestmt()
                pass

            elif la_ == 76:
                self.enterOuterAlt(localctx, 76)
                self.state = 1530
                self.deletestmt()
                pass

            elif la_ == 77:
                self.enterOuterAlt(localctx, 77)
                self.state = 1531
                self.discardstmt()
                pass

            elif la_ == 78:
                self.enterOuterAlt(localctx, 78)
                self.state = 1532
                self.dostmt()
                pass

            elif la_ == 79:
                self.enterOuterAlt(localctx, 79)
                self.state = 1533
                self.dropcaststmt()
                pass

            elif la_ == 80:
                self.enterOuterAlt(localctx, 80)
                self.state = 1534
                self.dropopclassstmt()
                pass

            elif la_ == 81:
                self.enterOuterAlt(localctx, 81)
                self.state = 1535
                self.dropopfamilystmt()
                pass

            elif la_ == 82:
                self.enterOuterAlt(localctx, 82)
                self.state = 1536
                self.dropownedstmt()
                pass

            elif la_ == 83:
                self.enterOuterAlt(localctx, 83)
                self.state = 1537
                self.dropstmt()
                pass

            elif la_ == 84:
                self.enterOuterAlt(localctx, 84)
                self.state = 1538
                self.dropsubscriptionstmt()
                pass

            elif la_ == 85:
                self.enterOuterAlt(localctx, 85)
                self.state = 1539
                self.droptablespacestmt()
                pass

            elif la_ == 86:
                self.enterOuterAlt(localctx, 86)
                self.state = 1540
                self.droptransformstmt()
                pass

            elif la_ == 87:
                self.enterOuterAlt(localctx, 87)
                self.state = 1541
                self.droprolestmt()
                pass

            elif la_ == 88:
                self.enterOuterAlt(localctx, 88)
                self.state = 1542
                self.dropusermappingstmt()
                pass

            elif la_ == 89:
                self.enterOuterAlt(localctx, 89)
                self.state = 1543
                self.dropdbstmt()
                pass

            elif la_ == 90:
                self.enterOuterAlt(localctx, 90)
                self.state = 1544
                self.executestmt()
                pass

            elif la_ == 91:
                self.enterOuterAlt(localctx, 91)
                self.state = 1545
                self.explainstmt()
                pass

            elif la_ == 92:
                self.enterOuterAlt(localctx, 92)
                self.state = 1546
                self.fetchstmt()
                pass

            elif la_ == 93:
                self.enterOuterAlt(localctx, 93)
                self.state = 1547
                self.grantstmt()
                pass

            elif la_ == 94:
                self.enterOuterAlt(localctx, 94)
                self.state = 1548
                self.grantrolestmt()
                pass

            elif la_ == 95:
                self.enterOuterAlt(localctx, 95)
                self.state = 1549
                self.importforeignschemastmt()
                pass

            elif la_ == 96:
                self.enterOuterAlt(localctx, 96)
                self.state = 1550
                self.indexstmt()
                pass

            elif la_ == 97:
                self.enterOuterAlt(localctx, 97)
                self.state = 1551
                self.insertstmt()
                pass

            elif la_ == 98:
                self.enterOuterAlt(localctx, 98)
                self.state = 1552
                self.mergestmt()
                pass

            elif la_ == 99:
                self.enterOuterAlt(localctx, 99)
                self.state = 1553
                self.listenstmt()
                pass

            elif la_ == 100:
                self.enterOuterAlt(localctx, 100)
                self.state = 1554
                self.refreshmatviewstmt()
                pass

            elif la_ == 101:
                self.enterOuterAlt(localctx, 101)
                self.state = 1555
                self.loadstmt()
                pass

            elif la_ == 102:
                self.enterOuterAlt(localctx, 102)
                self.state = 1556
                self.lockstmt()
                pass

            elif la_ == 103:
                self.enterOuterAlt(localctx, 103)
                self.state = 1557
                self.notifystmt()
                pass

            elif la_ == 104:
                self.enterOuterAlt(localctx, 104)
                self.state = 1558
                self.preparestmt()
                pass

            elif la_ == 105:
                self.enterOuterAlt(localctx, 105)
                self.state = 1559
                self.reassignownedstmt()
                pass

            elif la_ == 106:
                self.enterOuterAlt(localctx, 106)
                self.state = 1560
                self.reindexstmt()
                pass

            elif la_ == 107:
                self.enterOuterAlt(localctx, 107)
                self.state = 1561
                self.removeaggrstmt()
                pass

            elif la_ == 108:
                self.enterOuterAlt(localctx, 108)
                self.state = 1562
                self.removefuncstmt()
                pass

            elif la_ == 109:
                self.enterOuterAlt(localctx, 109)
                self.state = 1563
                self.removeoperstmt()
                pass

            elif la_ == 110:
                self.enterOuterAlt(localctx, 110)
                self.state = 1564
                self.renamestmt()
                pass

            elif la_ == 111:
                self.enterOuterAlt(localctx, 111)
                self.state = 1565
                self.revokestmt()
                pass

            elif la_ == 112:
                self.enterOuterAlt(localctx, 112)
                self.state = 1566
                self.revokerolestmt()
                pass

            elif la_ == 113:
                self.enterOuterAlt(localctx, 113)
                self.state = 1567
                self.rulestmt()
                pass

            elif la_ == 114:
                self.enterOuterAlt(localctx, 114)
                self.state = 1568
                self.seclabelstmt()
                pass

            elif la_ == 115:
                self.enterOuterAlt(localctx, 115)
                self.state = 1569
                self.selectstmt()
                pass

            elif la_ == 116:
                self.enterOuterAlt(localctx, 116)
                self.state = 1570
                self.transactionstmt()
                pass

            elif la_ == 117:
                self.enterOuterAlt(localctx, 117)
                self.state = 1571
                self.truncatestmt()
                pass

            elif la_ == 118:
                self.enterOuterAlt(localctx, 118)
                self.state = 1572
                self.unlistenstmt()
                pass

            elif la_ == 119:
                self.enterOuterAlt(localctx, 119)
                self.state = 1573
                self.updatestmt()
                pass

            elif la_ == 120:
                self.enterOuterAlt(localctx, 120)
                self.state = 1574
                self.vacuumstmt()
                pass

            elif la_ == 121:
                self.enterOuterAlt(localctx, 121)
                self.state = 1575
                self.variableresetstmt()
                pass

            elif la_ == 122:
                self.enterOuterAlt(localctx, 122)
                self.state = 1576
                self.variablesetstmt()
                pass

            elif la_ == 123:
                self.enterOuterAlt(localctx, 123)
                self.state = 1577
                self.variableshowstmt()
                pass

            elif la_ == 124:
                self.enterOuterAlt(localctx, 124)
                self.state = 1578
                self.viewstmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(PostgreSQLParser.CALL, 0)

        def func_application(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_applicationContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_callstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallstmt" ):
                listener.enterCallstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallstmt" ):
                listener.exitCallstmt(self)




    def callstmt(self):

        localctx = PostgreSQLParser.CallstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_callstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1581
            self.match(PostgreSQLParser.CALL)
            self.state = 1582
            self.func_application()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreaterolestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def ROLE(self):
            return self.getToken(PostgreSQLParser.ROLE, 0)

        def roleid(self):
            return self.getTypedRuleContext(PostgreSQLParser.RoleidContext,0)


        def optrolelist(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptrolelistContext,0)


        def with_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createrolestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreaterolestmt" ):
                listener.enterCreaterolestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreaterolestmt" ):
                listener.exitCreaterolestmt(self)




    def createrolestmt(self):

        localctx = PostgreSQLParser.CreaterolestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_createrolestmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1584
            self.match(PostgreSQLParser.CREATE)
            self.state = 1585
            self.match(PostgreSQLParser.ROLE)
            self.state = 1586
            self.roleid()
            self.state = 1588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 1587
                self.with_()


            self.state = 1590
            self.optrolelist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_with_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_" ):
                listener.enterWith_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_" ):
                listener.exitWith_(self)




    def with_(self):

        localctx = PostgreSQLParser.With_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_with_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1592
            self.match(PostgreSQLParser.WITH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptrolelistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createoptroleelem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.CreateoptroleelemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.CreateoptroleelemContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_optrolelist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptrolelist" ):
                listener.enterOptrolelist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptrolelist" ):
                listener.exitOptrolelist(self)




    def optrolelist(self):

        localctx = PostgreSQLParser.OptrolelistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_optrolelist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==106 or _la==137 or ((((_la - 172)) & ~0x3f) == 0 and ((1 << (_la - 172)) & 2305843010287435777) != 0) or _la==266 or _la==318 or ((((_la - 349)) & ~0x3f) == 0 and ((1 << (_la - 349)) & 9077569072660481) != 0) or ((((_la - 554)) & ~0x3f) == 0 and ((1 << (_la - 554)) & 268435491) != 0):
                self.state = 1594
                self.createoptroleelem()
                self.state = 1599
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlteroptrolelistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alteroptroleelem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.AlteroptroleelemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.AlteroptroleelemContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alteroptrolelist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlteroptrolelist" ):
                listener.enterAlteroptrolelist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlteroptrolelist" ):
                listener.exitAlteroptrolelist(self)




    def alteroptrolelist(self):

        localctx = PostgreSQLParser.AlteroptrolelistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_alteroptrolelist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==137 or _la==202 or _la==233 or _la==266 or _la==318 or _la==395 or _la==402 or ((((_la - 554)) & ~0x3f) == 0 and ((1 << (_la - 554)) & 268435491) != 0):
                self.state = 1600
                self.alteroptroleelem()
                self.state = 1605
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlteroptroleelemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASSWORD(self):
            return self.getToken(PostgreSQLParser.PASSWORD, 0)

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def NULL_P(self):
            return self.getToken(PostgreSQLParser.NULL_P, 0)

        def ENCRYPTED(self):
            return self.getToken(PostgreSQLParser.ENCRYPTED, 0)

        def UNENCRYPTED(self):
            return self.getToken(PostgreSQLParser.UNENCRYPTED, 0)

        def INHERIT(self):
            return self.getToken(PostgreSQLParser.INHERIT, 0)

        def CONNECTION(self):
            return self.getToken(PostgreSQLParser.CONNECTION, 0)

        def LIMIT(self):
            return self.getToken(PostgreSQLParser.LIMIT, 0)

        def signediconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SignediconstContext,0)


        def VALID(self):
            return self.getToken(PostgreSQLParser.VALID, 0)

        def UNTIL(self):
            return self.getToken(PostgreSQLParser.UNTIL, 0)

        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def role_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Role_listContext,0)


        def identifier(self):
            return self.getTypedRuleContext(PostgreSQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alteroptroleelem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlteroptroleelem" ):
                listener.enterAlteroptroleelem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlteroptroleelem" ):
                listener.exitAlteroptroleelem(self)




    def alteroptroleelem(self):

        localctx = PostgreSQLParser.AlteroptroleelemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_alteroptroleelem)
        self._la = 0 # Token type
        try:
            self.state = 1624
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [318]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1606
                self.match(PostgreSQLParser.PASSWORD)
                self.state = 1609
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [563, 565, 567, 590]:
                    self.state = 1607
                    self.sconst()
                    pass
                elif token in [116]:
                    self.state = 1608
                    self.match(PostgreSQLParser.NULL_P)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [233, 395]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1611
                _la = self._input.LA(1)
                if not(_la==233 or _la==395):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1612
                self.match(PostgreSQLParser.PASSWORD)
                self.state = 1613
                self.sconst()
                pass
            elif token in [266]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1614
                self.match(PostgreSQLParser.INHERIT)
                pass
            elif token in [202]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1615
                self.match(PostgreSQLParser.CONNECTION)
                self.state = 1616
                self.match(PostgreSQLParser.LIMIT)
                self.state = 1617
                self.signediconst()
                pass
            elif token in [402]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1618
                self.match(PostgreSQLParser.VALID)
                self.state = 1619
                self.match(PostgreSQLParser.UNTIL)
                self.state = 1620
                self.sconst()
                pass
            elif token in [137]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1621
                self.match(PostgreSQLParser.USER)
                self.state = 1622
                self.role_list()
                pass
            elif token in [554, 555, 559, 582]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1623
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateoptroleelemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alteroptroleelem(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlteroptroleelemContext,0)


        def SYSID(self):
            return self.getToken(PostgreSQLParser.SYSID, 0)

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def ADMIN(self):
            return self.getToken(PostgreSQLParser.ADMIN, 0)

        def role_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Role_listContext,0)


        def ROLE(self):
            return self.getToken(PostgreSQLParser.ROLE, 0)

        def IN_P(self):
            return self.getToken(PostgreSQLParser.IN_P, 0)

        def GROUP_P(self):
            return self.getToken(PostgreSQLParser.GROUP_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createoptroleelem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateoptroleelem" ):
                listener.enterCreateoptroleelem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateoptroleelem" ):
                listener.exitCreateoptroleelem(self)




    def createoptroleelem(self):

        localctx = PostgreSQLParser.CreateoptroleelemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_createoptroleelem)
        self._la = 0 # Token type
        try:
            self.state = 1636
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [137, 202, 233, 266, 318, 395, 402, 554, 555, 559, 582]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1626
                self.alteroptroleelem()
                pass
            elif token in [379]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1627
                self.match(PostgreSQLParser.SYSID)
                self.state = 1628
                self.iconst()
                pass
            elif token in [172]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1629
                self.match(PostgreSQLParser.ADMIN)
                self.state = 1630
                self.role_list()
                pass
            elif token in [349]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1631
                self.match(PostgreSQLParser.ROLE)
                self.state = 1632
                self.role_list()
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1633
                self.match(PostgreSQLParser.IN_P)
                self.state = 1634
                _la = self._input.LA(1)
                if not(_la==104 or _la==349):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1635
                self.role_list()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateuserstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def roleid(self):
            return self.getTypedRuleContext(PostgreSQLParser.RoleidContext,0)


        def optrolelist(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptrolelistContext,0)


        def with_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createuserstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateuserstmt" ):
                listener.enterCreateuserstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateuserstmt" ):
                listener.exitCreateuserstmt(self)




    def createuserstmt(self):

        localctx = PostgreSQLParser.CreateuserstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_createuserstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1638
            self.match(PostgreSQLParser.CREATE)
            self.state = 1639
            self.match(PostgreSQLParser.USER)
            self.state = 1640
            self.roleid()
            self.state = 1642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 1641
                self.with_()


            self.state = 1644
            self.optrolelist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterrolestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def rolespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.RolespecContext,0)


        def alteroptrolelist(self):
            return self.getTypedRuleContext(PostgreSQLParser.AlteroptrolelistContext,0)


        def ROLE(self):
            return self.getToken(PostgreSQLParser.ROLE, 0)

        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def with_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterrolestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterrolestmt" ):
                listener.enterAlterrolestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterrolestmt" ):
                listener.exitAlterrolestmt(self)




    def alterrolestmt(self):

        localctx = PostgreSQLParser.AlterrolestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_alterrolestmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1646
            self.match(PostgreSQLParser.ALTER)
            self.state = 1647
            _la = self._input.LA(1)
            if not(_la==137 or _la==349):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1648
            self.rolespec()
            self.state = 1650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 1649
                self.with_()


            self.state = 1652
            self.alteroptrolelist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class In_database_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN_P(self):
            return self.getToken(PostgreSQLParser.IN_P, 0)

        def DATABASE(self):
            return self.getToken(PostgreSQLParser.DATABASE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_in_database_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn_database_" ):
                listener.enterIn_database_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn_database_" ):
                listener.exitIn_database_(self)




    def in_database_(self):

        localctx = PostgreSQLParser.In_database_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_in_database_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1654
            self.match(PostgreSQLParser.IN_P)
            self.state = 1655
            self.match(PostgreSQLParser.DATABASE)
            self.state = 1656
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterrolesetstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def rolespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.RolespecContext,0)


        def setresetclause(self):
            return self.getTypedRuleContext(PostgreSQLParser.SetresetclauseContext,0)


        def ROLE(self):
            return self.getToken(PostgreSQLParser.ROLE, 0)

        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def in_database_(self):
            return self.getTypedRuleContext(PostgreSQLParser.In_database_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterrolesetstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterrolesetstmt" ):
                listener.enterAlterrolesetstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterrolesetstmt" ):
                listener.exitAlterrolesetstmt(self)




    def alterrolesetstmt(self):

        localctx = PostgreSQLParser.AlterrolesetstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_alterrolesetstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1658
            self.match(PostgreSQLParser.ALTER)
            self.state = 1659
            _la = self._input.LA(1)
            if not(_la==137 or _la==349):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 1660
                self.match(PostgreSQLParser.ALL)


            self.state = 1663
            self.rolespec()
            self.state = 1665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106:
                self.state = 1664
                self.in_database_()


            self.state = 1667
            self.setresetclause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DroprolestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def role_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Role_listContext,0)


        def ROLE(self):
            return self.getToken(PostgreSQLParser.ROLE, 0)

        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def GROUP_P(self):
            return self.getToken(PostgreSQLParser.GROUP_P, 0)

        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_droprolestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDroprolestmt" ):
                listener.enterDroprolestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDroprolestmt" ):
                listener.exitDroprolestmt(self)




    def droprolestmt(self):

        localctx = PostgreSQLParser.DroprolestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_droprolestmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1669
            self.match(PostgreSQLParser.DROP)
            self.state = 1670
            _la = self._input.LA(1)
            if not(_la==104 or _la==137 or _la==349):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1673
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 1671
                self.match(PostgreSQLParser.IF_P)
                self.state = 1672
                self.match(PostgreSQLParser.EXISTS)


            self.state = 1675
            self.role_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreategroupstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def GROUP_P(self):
            return self.getToken(PostgreSQLParser.GROUP_P, 0)

        def roleid(self):
            return self.getTypedRuleContext(PostgreSQLParser.RoleidContext,0)


        def optrolelist(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptrolelistContext,0)


        def with_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_creategroupstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreategroupstmt" ):
                listener.enterCreategroupstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreategroupstmt" ):
                listener.exitCreategroupstmt(self)




    def creategroupstmt(self):

        localctx = PostgreSQLParser.CreategroupstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_creategroupstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1677
            self.match(PostgreSQLParser.CREATE)
            self.state = 1678
            self.match(PostgreSQLParser.GROUP_P)
            self.state = 1679
            self.roleid()
            self.state = 1681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 1680
                self.with_()


            self.state = 1683
            self.optrolelist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AltergroupstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def GROUP_P(self):
            return self.getToken(PostgreSQLParser.GROUP_P, 0)

        def rolespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.RolespecContext,0)


        def add_drop(self):
            return self.getTypedRuleContext(PostgreSQLParser.Add_dropContext,0)


        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def role_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Role_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_altergroupstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAltergroupstmt" ):
                listener.enterAltergroupstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAltergroupstmt" ):
                listener.exitAltergroupstmt(self)




    def altergroupstmt(self):

        localctx = PostgreSQLParser.AltergroupstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_altergroupstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1685
            self.match(PostgreSQLParser.ALTER)
            self.state = 1686
            self.match(PostgreSQLParser.GROUP_P)
            self.state = 1687
            self.rolespec()
            self.state = 1688
            self.add_drop()
            self.state = 1689
            self.match(PostgreSQLParser.USER)
            self.state = 1690
            self.role_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_dropContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_P(self):
            return self.getToken(PostgreSQLParser.ADD_P, 0)

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_add_drop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_drop" ):
                listener.enterAdd_drop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_drop" ):
                listener.exitAdd_drop(self)




    def add_drop(self):

        localctx = PostgreSQLParser.Add_dropContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_add_drop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1692
            _la = self._input.LA(1)
            if not(_la==171 or _la==229):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateschemastmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def SCHEMA(self):
            return self.getToken(PostgreSQLParser.SCHEMA, 0)

        def optschemaeltlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptschemaeltlistContext,0)


        def AUTHORIZATION(self):
            return self.getToken(PostgreSQLParser.AUTHORIZATION, 0)

        def rolespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.RolespecContext,0)


        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def optschemaname(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptschemanameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createschemastmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateschemastmt" ):
                listener.enterCreateschemastmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateschemastmt" ):
                listener.exitCreateschemastmt(self)




    def createschemastmt(self):

        localctx = PostgreSQLParser.CreateschemastmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_createschemastmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1694
            self.match(PostgreSQLParser.CREATE)
            self.state = 1695
            self.match(PostgreSQLParser.SCHEMA)
            self.state = 1699
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 1696
                self.match(PostgreSQLParser.IF_P)
                self.state = 1697
                self.match(PostgreSQLParser.NOT)
                self.state = 1698
                self.match(PostgreSQLParser.EXISTS)


            self.state = 1707
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 1702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & 137438949375) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & -31) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & -1) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & -8796093022209) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & -1) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & -34909494181889) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & 1153132601981008895) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & 536870983) != 0):
                    self.state = 1701
                    self.optschemaname()


                self.state = 1704
                self.match(PostgreSQLParser.AUTHORIZATION)
                self.state = 1705
                self.rolespec()
                pass

            elif la_ == 2:
                self.state = 1706
                self.colid()
                pass


            self.state = 1709
            self.optschemaeltlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptschemanameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_optschemaname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptschemaname" ):
                listener.enterOptschemaname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptschemaname" ):
                listener.exitOptschemaname(self)




    def optschemaname(self):

        localctx = PostgreSQLParser.OptschemanameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_optschemaname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1711
            self.colid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptschemaeltlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def schema_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Schema_stmtContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Schema_stmtContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_optschemaeltlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptschemaeltlist" ):
                listener.enterOptschemaeltlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptschemaeltlist" ):
                listener.exitOptschemaeltlist(self)




    def optschemaeltlist(self):

        localctx = PostgreSQLParser.OptschemaeltlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_optschemaeltlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==84 or _la==103:
                self.state = 1713
                self.schema_stmt()
                self.state = 1718
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatestmtContext,0)


        def indexstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.IndexstmtContext,0)


        def createseqstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateseqstmtContext,0)


        def createtrigstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatetrigstmtContext,0)


        def grantstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.GrantstmtContext,0)


        def viewstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.ViewstmtContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_schema_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_stmt" ):
                listener.enterSchema_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_stmt" ):
                listener.exitSchema_stmt(self)




    def schema_stmt(self):

        localctx = PostgreSQLParser.Schema_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_schema_stmt)
        try:
            self.state = 1725
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1719
                self.createstmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1720
                self.indexstmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1721
                self.createseqstmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1722
                self.createtrigstmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1723
                self.grantstmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1724
                self.viewstmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariablesetstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def set_rest(self):
            return self.getTypedRuleContext(PostgreSQLParser.Set_restContext,0)


        def LOCAL(self):
            return self.getToken(PostgreSQLParser.LOCAL, 0)

        def SESSION(self):
            return self.getToken(PostgreSQLParser.SESSION, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_variablesetstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariablesetstmt" ):
                listener.enterVariablesetstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariablesetstmt" ):
                listener.exitVariablesetstmt(self)




    def variablesetstmt(self):

        localctx = PostgreSQLParser.VariablesetstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_variablesetstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1727
            self.match(PostgreSQLParser.SET)
            self.state = 1729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 1728
                _la = self._input.LA(1)
                if not(_la==283 or _la==363):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1731
            self.set_rest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_restContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRANSACTION(self):
            return self.getToken(PostgreSQLParser.TRANSACTION, 0)

        def transaction_mode_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Transaction_mode_listContext,0)


        def SESSION(self):
            return self.getToken(PostgreSQLParser.SESSION, 0)

        def CHARACTERISTICS(self):
            return self.getToken(PostgreSQLParser.CHARACTERISTICS, 0)

        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def set_rest_more(self):
            return self.getTypedRuleContext(PostgreSQLParser.Set_rest_moreContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_set_rest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_rest" ):
                listener.enterSet_rest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_rest" ):
                listener.exitSet_rest(self)




    def set_rest(self):

        localctx = PostgreSQLParser.Set_restContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_set_rest)
        try:
            self.state = 1741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1733
                self.match(PostgreSQLParser.TRANSACTION)
                self.state = 1734
                self.transaction_mode_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1735
                self.match(PostgreSQLParser.SESSION)
                self.state = 1736
                self.match(PostgreSQLParser.CHARACTERISTICS)
                self.state = 1737
                self.match(PostgreSQLParser.AS)
                self.state = 1738
                self.match(PostgreSQLParser.TRANSACTION)
                self.state = 1739
                self.transaction_mode_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1740
                self.set_rest_more()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def var_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Var_nameContext,0)


        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def EQUAL(self):
            return self.getToken(PostgreSQLParser.EQUAL, 0)

        def var_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Var_listContext,0)


        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_generic_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_set" ):
                listener.enterGeneric_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_set" ):
                listener.exitGeneric_set(self)




    def generic_set(self):

        localctx = PostgreSQLParser.Generic_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_generic_set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1743
            self.var_name()
            self.state = 1744
            _la = self._input.LA(1)
            if not(_la==10 or _la==132):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1747
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12, 13, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 98, 118, 134, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 563, 565, 567, 576, 577, 578, 579, 581, 582, 590]:
                self.state = 1745
                self.var_list()
                pass
            elif token in [91]:
                self.state = 1746
                self.match(PostgreSQLParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_rest_moreContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generic_set(self):
            return self.getTypedRuleContext(PostgreSQLParser.Generic_setContext,0)


        def var_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Var_nameContext,0)


        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def CURRENT_P(self):
            return self.getToken(PostgreSQLParser.CURRENT_P, 0)

        def TIME(self):
            return self.getToken(PostgreSQLParser.TIME, 0)

        def ZONE(self):
            return self.getToken(PostgreSQLParser.ZONE, 0)

        def zone_value(self):
            return self.getTypedRuleContext(PostgreSQLParser.Zone_valueContext,0)


        def CATALOG(self):
            return self.getToken(PostgreSQLParser.CATALOG, 0)

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def SCHEMA(self):
            return self.getToken(PostgreSQLParser.SCHEMA, 0)

        def NAMES(self):
            return self.getToken(PostgreSQLParser.NAMES, 0)

        def encoding_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Encoding_Context,0)


        def ROLE(self):
            return self.getToken(PostgreSQLParser.ROLE, 0)

        def nonreservedword_or_sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.Nonreservedword_or_sconstContext,0)


        def SESSION(self):
            return self.getToken(PostgreSQLParser.SESSION, 0)

        def AUTHORIZATION(self):
            return self.getToken(PostgreSQLParser.AUTHORIZATION, 0)

        def XML_P(self):
            return self.getToken(PostgreSQLParser.XML_P, 0)

        def OPTION(self):
            return self.getToken(PostgreSQLParser.OPTION, 0)

        def document_or_content(self):
            return self.getTypedRuleContext(PostgreSQLParser.Document_or_contentContext,0)


        def TRANSACTION(self):
            return self.getToken(PostgreSQLParser.TRANSACTION, 0)

        def SNAPSHOT(self):
            return self.getToken(PostgreSQLParser.SNAPSHOT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_set_rest_more

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_rest_more" ):
                listener.enterSet_rest_more(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_rest_more" ):
                listener.exitSet_rest_more(self)




    def set_rest_more(self):

        localctx = PostgreSQLParser.Set_rest_moreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_set_rest_more)
        self._la = 0 # Token type
        try:
            self.state = 1776
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1749
                self.generic_set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1750
                self.var_name()
                self.state = 1751
                self.match(PostgreSQLParser.FROM)
                self.state = 1752
                self.match(PostgreSQLParser.CURRENT_P)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1754
                self.match(PostgreSQLParser.TIME)
                self.state = 1755
                self.match(PostgreSQLParser.ZONE)
                self.state = 1756
                self.zone_value()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1757
                self.match(PostgreSQLParser.CATALOG)
                self.state = 1758
                self.sconst()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1759
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 1760
                self.sconst()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1761
                self.match(PostgreSQLParser.NAMES)
                self.state = 1763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91 or ((((_la - 563)) & ~0x3f) == 0 and ((1 << (_la - 563)) & 134217749) != 0):
                    self.state = 1762
                    self.encoding_()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1765
                self.match(PostgreSQLParser.ROLE)
                self.state = 1766
                self.nonreservedword_or_sconst()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1767
                self.match(PostgreSQLParser.SESSION)
                self.state = 1768
                self.match(PostgreSQLParser.AUTHORIZATION)
                self.state = 1769
                self.nonreservedword_or_sconst()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1770
                self.match(PostgreSQLParser.XML_P)
                self.state = 1771
                self.match(PostgreSQLParser.OPTION)
                self.state = 1772
                self.document_or_content()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1773
                self.match(PostgreSQLParser.TRANSACTION)
                self.state = 1774
                self.match(PostgreSQLParser.SNAPSHOT)
                self.state = 1775
                self.sconst()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ColidContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ColidContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.DOT)
            else:
                return self.getToken(PostgreSQLParser.DOT, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_var_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_name" ):
                listener.enterVar_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_name" ):
                listener.exitVar_name(self)




    def var_name(self):

        localctx = PostgreSQLParser.Var_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_var_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1778
            self.colid()
            self.state = 1783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==11:
                self.state = 1779
                self.match(PostgreSQLParser.DOT)
                self.state = 1780
                self.colid()
                self.state = 1785
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def var_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Var_valueContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Var_valueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_var_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_list" ):
                listener.enterVar_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_list" ):
                listener.exitVar_list(self)




    def var_list(self):

        localctx = PostgreSQLParser.Var_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_var_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1786
            self.var_value()
            self.state = 1791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 1787
                self.match(PostgreSQLParser.COMMA)
                self.state = 1788
                self.var_value()
                self.state = 1793
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolean_or_string_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Boolean_or_string_Context,0)


        def numericonly(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericonlyContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_var_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_value" ):
                listener.enterVar_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_value" ):
                listener.exitVar_value(self)




    def var_value(self):

        localctx = PostgreSQLParser.Var_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_var_value)
        try:
            self.state = 1796
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 98, 118, 134, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 563, 565, 567, 582, 590]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1794
                self.boolean_or_string_()
                pass
            elif token in [12, 13, 576, 577, 578, 579, 581]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1795
                self.numericonly()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Iso_levelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(PostgreSQLParser.READ, 0)

        def UNCOMMITTED(self):
            return self.getToken(PostgreSQLParser.UNCOMMITTED, 0)

        def COMMITTED(self):
            return self.getToken(PostgreSQLParser.COMMITTED, 0)

        def REPEATABLE(self):
            return self.getToken(PostgreSQLParser.REPEATABLE, 0)

        def SERIALIZABLE(self):
            return self.getToken(PostgreSQLParser.SERIALIZABLE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_iso_level

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIso_level" ):
                listener.enterIso_level(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIso_level" ):
                listener.exitIso_level(self)




    def iso_level(self):

        localctx = PostgreSQLParser.Iso_levelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_iso_level)
        self._la = 0 # Token type
        try:
            self.state = 1803
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [331]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1798
                self.match(PostgreSQLParser.READ)
                self.state = 1799
                _la = self._input.LA(1)
                if not(_la==200 or _la==394):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [341]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1800
                self.match(PostgreSQLParser.REPEATABLE)
                self.state = 1801
                self.match(PostgreSQLParser.READ)
                pass
            elif token in [361]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1802
                self.match(PostgreSQLParser.SERIALIZABLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_or_string_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE_P(self):
            return self.getToken(PostgreSQLParser.TRUE_P, 0)

        def FALSE_P(self):
            return self.getToken(PostgreSQLParser.FALSE_P, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def nonreservedword_or_sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.Nonreservedword_or_sconstContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_boolean_or_string_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_or_string_" ):
                listener.enterBoolean_or_string_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_or_string_" ):
                listener.exitBoolean_or_string_(self)




    def boolean_or_string_(self):

        localctx = PostgreSQLParser.Boolean_or_string_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_boolean_or_string_)
        try:
            self.state = 1809
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1805
                self.match(PostgreSQLParser.TRUE_P)
                pass
            elif token in [98]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1806
                self.match(PostgreSQLParser.FALSE_P)
                pass
            elif token in [118]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1807
                self.match(PostgreSQLParser.ON)
                pass
            elif token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 563, 565, 567, 582, 590]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1808
                self.nonreservedword_or_sconst()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Zone_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def identifier(self):
            return self.getTypedRuleContext(PostgreSQLParser.IdentifierContext,0)


        def constinterval(self):
            return self.getTypedRuleContext(PostgreSQLParser.ConstintervalContext,0)


        def interval_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Interval_Context,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def numericonly(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericonlyContext,0)


        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def LOCAL(self):
            return self.getToken(PostgreSQLParser.LOCAL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_zone_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterZone_value" ):
                listener.enterZone_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitZone_value" ):
                listener.exitZone_value(self)




    def zone_value(self):

        localctx = PostgreSQLParser.Zone_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_zone_value)
        self._la = 0 # Token type
        try:
            self.state = 1827
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1811
                self.sconst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1812
                self.identifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1813
                self.constinterval()
                self.state = 1814
                self.sconst()
                self.state = 1816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214 or _la==256 or _la==292 or _la==295 or _la==357 or _la==415:
                    self.state = 1815
                    self.interval_()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1818
                self.constinterval()
                self.state = 1819
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 1820
                self.iconst()
                self.state = 1821
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 1822
                self.sconst()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1824
                self.numericonly()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1825
                self.match(PostgreSQLParser.DEFAULT)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1826
                self.match(PostgreSQLParser.LOCAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Encoding_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_encoding_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEncoding_" ):
                listener.enterEncoding_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEncoding_" ):
                listener.exitEncoding_(self)




    def encoding_(self):

        localctx = PostgreSQLParser.Encoding_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_encoding_)
        try:
            self.state = 1831
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [563, 565, 567, 590]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1829
                self.sconst()
                pass
            elif token in [91]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1830
                self.match(PostgreSQLParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nonreservedword_or_sconstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonreservedword(self):
            return self.getTypedRuleContext(PostgreSQLParser.NonreservedwordContext,0)


        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_nonreservedword_or_sconst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonreservedword_or_sconst" ):
                listener.enterNonreservedword_or_sconst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonreservedword_or_sconst" ):
                listener.exitNonreservedword_or_sconst(self)




    def nonreservedword_or_sconst(self):

        localctx = PostgreSQLParser.Nonreservedword_or_sconstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_nonreservedword_or_sconst)
        try:
            self.state = 1835
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 582]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1833
                self.nonreservedword()
                pass
            elif token in [563, 565, 567, 590]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1834
                self.sconst()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableresetstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(PostgreSQLParser.RESET, 0)

        def reset_rest(self):
            return self.getTypedRuleContext(PostgreSQLParser.Reset_restContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_variableresetstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableresetstmt" ):
                listener.enterVariableresetstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableresetstmt" ):
                listener.exitVariableresetstmt(self)




    def variableresetstmt(self):

        localctx = PostgreSQLParser.VariableresetstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_variableresetstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1837
            self.match(PostgreSQLParser.RESET)
            self.state = 1838
            self.reset_rest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reset_restContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generic_reset(self):
            return self.getTypedRuleContext(PostgreSQLParser.Generic_resetContext,0)


        def TIME(self):
            return self.getToken(PostgreSQLParser.TIME, 0)

        def ZONE(self):
            return self.getToken(PostgreSQLParser.ZONE, 0)

        def TRANSACTION(self):
            return self.getToken(PostgreSQLParser.TRANSACTION, 0)

        def ISOLATION(self):
            return self.getToken(PostgreSQLParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(PostgreSQLParser.LEVEL, 0)

        def SESSION(self):
            return self.getToken(PostgreSQLParser.SESSION, 0)

        def AUTHORIZATION(self):
            return self.getToken(PostgreSQLParser.AUTHORIZATION, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_reset_rest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReset_rest" ):
                listener.enterReset_rest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReset_rest" ):
                listener.exitReset_rest(self)




    def reset_rest(self):

        localctx = PostgreSQLParser.Reset_restContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_reset_rest)
        try:
            self.state = 1848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1840
                self.generic_reset()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1841
                self.match(PostgreSQLParser.TIME)
                self.state = 1842
                self.match(PostgreSQLParser.ZONE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1843
                self.match(PostgreSQLParser.TRANSACTION)
                self.state = 1844
                self.match(PostgreSQLParser.ISOLATION)
                self.state = 1845
                self.match(PostgreSQLParser.LEVEL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1846
                self.match(PostgreSQLParser.SESSION)
                self.state = 1847
                self.match(PostgreSQLParser.AUTHORIZATION)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_resetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def var_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Var_nameContext,0)


        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_generic_reset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_reset" ):
                listener.enterGeneric_reset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_reset" ):
                listener.exitGeneric_reset(self)




    def generic_reset(self):

        localctx = PostgreSQLParser.Generic_resetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_generic_reset)
        try:
            self.state = 1852
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 162, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 582]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1850
                self.var_name()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1851
                self.match(PostgreSQLParser.ALL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetresetclauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def set_rest(self):
            return self.getTypedRuleContext(PostgreSQLParser.Set_restContext,0)


        def variableresetstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.VariableresetstmtContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_setresetclause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetresetclause" ):
                listener.enterSetresetclause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetresetclause" ):
                listener.exitSetresetclause(self)




    def setresetclause(self):

        localctx = PostgreSQLParser.SetresetclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_setresetclause)
        try:
            self.state = 1857
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [364]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1854
                self.match(PostgreSQLParser.SET)
                self.state = 1855
                self.set_rest()
                pass
            elif token in [344]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1856
                self.variableresetstmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionsetresetclauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def set_rest_more(self):
            return self.getTypedRuleContext(PostgreSQLParser.Set_rest_moreContext,0)


        def variableresetstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.VariableresetstmtContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_functionsetresetclause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionsetresetclause" ):
                listener.enterFunctionsetresetclause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionsetresetclause" ):
                listener.exitFunctionsetresetclause(self)




    def functionsetresetclause(self):

        localctx = PostgreSQLParser.FunctionsetresetclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_functionsetresetclause)
        try:
            self.state = 1862
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [364]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1859
                self.match(PostgreSQLParser.SET)
                self.state = 1860
                self.set_rest_more()
                pass
            elif token in [344]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1861
                self.variableresetstmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableshowstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(PostgreSQLParser.SHOW, 0)

        def var_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Var_nameContext,0)


        def TIME(self):
            return self.getToken(PostgreSQLParser.TIME, 0)

        def ZONE(self):
            return self.getToken(PostgreSQLParser.ZONE, 0)

        def TRANSACTION(self):
            return self.getToken(PostgreSQLParser.TRANSACTION, 0)

        def ISOLATION(self):
            return self.getToken(PostgreSQLParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(PostgreSQLParser.LEVEL, 0)

        def SESSION(self):
            return self.getToken(PostgreSQLParser.SESSION, 0)

        def AUTHORIZATION(self):
            return self.getToken(PostgreSQLParser.AUTHORIZATION, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_variableshowstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableshowstmt" ):
                listener.enterVariableshowstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableshowstmt" ):
                listener.exitVariableshowstmt(self)




    def variableshowstmt(self):

        localctx = PostgreSQLParser.VariableshowstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_variableshowstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1864
            self.match(PostgreSQLParser.SHOW)
            self.state = 1874
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 1865
                self.var_name()
                pass

            elif la_ == 2:
                self.state = 1866
                self.match(PostgreSQLParser.TIME)
                self.state = 1867
                self.match(PostgreSQLParser.ZONE)
                pass

            elif la_ == 3:
                self.state = 1868
                self.match(PostgreSQLParser.TRANSACTION)
                self.state = 1869
                self.match(PostgreSQLParser.ISOLATION)
                self.state = 1870
                self.match(PostgreSQLParser.LEVEL)
                pass

            elif la_ == 4:
                self.state = 1871
                self.match(PostgreSQLParser.SESSION)
                self.state = 1872
                self.match(PostgreSQLParser.AUTHORIZATION)
                pass

            elif la_ == 5:
                self.state = 1873
                self.match(PostgreSQLParser.ALL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintssetstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def CONSTRAINTS(self):
            return self.getToken(PostgreSQLParser.CONSTRAINTS, 0)

        def constraints_set_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Constraints_set_listContext,0)


        def constraints_set_mode(self):
            return self.getTypedRuleContext(PostgreSQLParser.Constraints_set_modeContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_constraintssetstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintssetstmt" ):
                listener.enterConstraintssetstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintssetstmt" ):
                listener.exitConstraintssetstmt(self)




    def constraintssetstmt(self):

        localctx = PostgreSQLParser.ConstraintssetstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_constraintssetstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1876
            self.match(PostgreSQLParser.SET)
            self.state = 1877
            self.match(PostgreSQLParser.CONSTRAINTS)
            self.state = 1878
            self.constraints_set_list()
            self.state = 1879
            self.constraints_set_mode()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constraints_set_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def qualified_name_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_name_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_constraints_set_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraints_set_list" ):
                listener.enterConstraints_set_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraints_set_list" ):
                listener.exitConstraints_set_list(self)




    def constraints_set_list(self):

        localctx = PostgreSQLParser.Constraints_set_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_constraints_set_list)
        try:
            self.state = 1883
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [68]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1881
                self.match(PostgreSQLParser.ALL)
                pass
            elif token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 162, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 582]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1882
                self.qualified_name_list()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constraints_set_modeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFERRED(self):
            return self.getToken(PostgreSQLParser.DEFERRED, 0)

        def IMMEDIATE(self):
            return self.getToken(PostgreSQLParser.IMMEDIATE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_constraints_set_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraints_set_mode" ):
                listener.enterConstraints_set_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraints_set_mode" ):
                listener.exitConstraints_set_mode(self)




    def constraints_set_mode(self):

        localctx = PostgreSQLParser.Constraints_set_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_constraints_set_mode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1885
            _la = self._input.LA(1)
            if not(_la==218 or _la==259):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckpointstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECKPOINT(self):
            return self.getToken(PostgreSQLParser.CHECKPOINT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_checkpointstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckpointstmt" ):
                listener.enterCheckpointstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckpointstmt" ):
                listener.exitCheckpointstmt(self)




    def checkpointstmt(self):

        localctx = PostgreSQLParser.CheckpointstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_checkpointstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1887
            self.match(PostgreSQLParser.CHECKPOINT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiscardstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISCARD(self):
            return self.getToken(PostgreSQLParser.DISCARD, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def TEMP(self):
            return self.getToken(PostgreSQLParser.TEMP, 0)

        def TEMPORARY(self):
            return self.getToken(PostgreSQLParser.TEMPORARY, 0)

        def PLANS(self):
            return self.getToken(PostgreSQLParser.PLANS, 0)

        def SEQUENCES(self):
            return self.getToken(PostgreSQLParser.SEQUENCES, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_discardstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscardstmt" ):
                listener.enterDiscardstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscardstmt" ):
                listener.exitDiscardstmt(self)




    def discardstmt(self):

        localctx = PostgreSQLParser.DiscardstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_discardstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1889
            self.match(PostgreSQLParser.DISCARD)
            self.state = 1890
            _la = self._input.LA(1)
            if not(_la==68 or _la==319 or _la==360 or _la==383 or _la==385):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AltertablestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def relation_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relation_exprContext,0)


        def alter_table_cmds(self):
            return self.getTypedRuleContext(PostgreSQLParser.Alter_table_cmdsContext,0)


        def partition_cmd(self):
            return self.getTypedRuleContext(PostgreSQLParser.Partition_cmdContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def IN_P(self):
            return self.getToken(PostgreSQLParser.IN_P, 0)

        def TABLESPACE(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.TABLESPACE)
            else:
                return self.getToken(PostgreSQLParser.TABLESPACE, i)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.NameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.NameContext,i)


        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def OWNED(self):
            return self.getToken(PostgreSQLParser.OWNED, 0)

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def role_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Role_listContext,0)


        def nowait_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Nowait_Context,0)


        def INDEX(self):
            return self.getToken(PostgreSQLParser.INDEX, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def index_partition_cmd(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_partition_cmdContext,0)


        def SEQUENCE(self):
            return self.getToken(PostgreSQLParser.SEQUENCE, 0)

        def VIEW(self):
            return self.getToken(PostgreSQLParser.VIEW, 0)

        def MATERIALIZED(self):
            return self.getToken(PostgreSQLParser.MATERIALIZED, 0)

        def FOREIGN(self):
            return self.getToken(PostgreSQLParser.FOREIGN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_altertablestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAltertablestmt" ):
                listener.enterAltertablestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAltertablestmt" ):
                listener.exitAltertablestmt(self)




    def altertablestmt(self):

        localctx = PostgreSQLParser.AltertablestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_altertablestmt)
        self._la = 0 # Token type
        try:
            self.state = 2004
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1892
                self.match(PostgreSQLParser.ALTER)
                self.state = 1893
                self.match(PostgreSQLParser.TABLE)
                self.state = 1896
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
                if la_ == 1:
                    self.state = 1894
                    self.match(PostgreSQLParser.IF_P)
                    self.state = 1895
                    self.match(PostgreSQLParser.EXISTS)


                self.state = 1898
                self.relation_expr()
                self.state = 1901
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [115, 171, 176, 196, 224, 229, 231, 247, 266, 300, 306, 311, 313, 343, 344, 364, 403]:
                    self.state = 1899
                    self.alter_table_cmds()
                    pass
                elif token in [473, 474]:
                    self.state = 1900
                    self.partition_cmd()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1903
                self.match(PostgreSQLParser.ALTER)
                self.state = 1904
                self.match(PostgreSQLParser.TABLE)
                self.state = 1905
                self.match(PostgreSQLParser.ALL)
                self.state = 1906
                self.match(PostgreSQLParser.IN_P)
                self.state = 1907
                self.match(PostgreSQLParser.TABLESPACE)
                self.state = 1908
                self.name()
                self.state = 1912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==312:
                    self.state = 1909
                    self.match(PostgreSQLParser.OWNED)
                    self.state = 1910
                    self.match(PostgreSQLParser.BY)
                    self.state = 1911
                    self.role_list()


                self.state = 1914
                self.match(PostgreSQLParser.SET)
                self.state = 1915
                self.match(PostgreSQLParser.TABLESPACE)
                self.state = 1916
                self.name()
                self.state = 1918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==303:
                    self.state = 1917
                    self.nowait_()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1920
                self.match(PostgreSQLParser.ALTER)
                self.state = 1921
                self.match(PostgreSQLParser.INDEX)
                self.state = 1924
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 1922
                    self.match(PostgreSQLParser.IF_P)
                    self.state = 1923
                    self.match(PostgreSQLParser.EXISTS)


                self.state = 1926
                self.qualified_name()
                self.state = 1929
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [115, 171, 176, 196, 224, 229, 231, 247, 266, 300, 306, 311, 313, 343, 344, 364, 403]:
                    self.state = 1927
                    self.alter_table_cmds()
                    pass
                elif token in [473]:
                    self.state = 1928
                    self.index_partition_cmd()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1931
                self.match(PostgreSQLParser.ALTER)
                self.state = 1932
                self.match(PostgreSQLParser.INDEX)
                self.state = 1933
                self.match(PostgreSQLParser.ALL)
                self.state = 1934
                self.match(PostgreSQLParser.IN_P)
                self.state = 1935
                self.match(PostgreSQLParser.TABLESPACE)
                self.state = 1936
                self.name()
                self.state = 1940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==312:
                    self.state = 1937
                    self.match(PostgreSQLParser.OWNED)
                    self.state = 1938
                    self.match(PostgreSQLParser.BY)
                    self.state = 1939
                    self.role_list()


                self.state = 1942
                self.match(PostgreSQLParser.SET)
                self.state = 1943
                self.match(PostgreSQLParser.TABLESPACE)
                self.state = 1944
                self.name()
                self.state = 1946
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==303:
                    self.state = 1945
                    self.nowait_()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1948
                self.match(PostgreSQLParser.ALTER)
                self.state = 1949
                self.match(PostgreSQLParser.SEQUENCE)
                self.state = 1952
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 1950
                    self.match(PostgreSQLParser.IF_P)
                    self.state = 1951
                    self.match(PostgreSQLParser.EXISTS)


                self.state = 1954
                self.qualified_name()
                self.state = 1955
                self.alter_table_cmds()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1957
                self.match(PostgreSQLParser.ALTER)
                self.state = 1958
                self.match(PostgreSQLParser.VIEW)
                self.state = 1961
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 1959
                    self.match(PostgreSQLParser.IF_P)
                    self.state = 1960
                    self.match(PostgreSQLParser.EXISTS)


                self.state = 1963
                self.qualified_name()
                self.state = 1964
                self.alter_table_cmds()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1966
                self.match(PostgreSQLParser.ALTER)
                self.state = 1967
                self.match(PostgreSQLParser.MATERIALIZED)
                self.state = 1968
                self.match(PostgreSQLParser.VIEW)
                self.state = 1971
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 1969
                    self.match(PostgreSQLParser.IF_P)
                    self.state = 1970
                    self.match(PostgreSQLParser.EXISTS)


                self.state = 1973
                self.qualified_name()
                self.state = 1974
                self.alter_table_cmds()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1976
                self.match(PostgreSQLParser.ALTER)
                self.state = 1977
                self.match(PostgreSQLParser.MATERIALIZED)
                self.state = 1978
                self.match(PostgreSQLParser.VIEW)
                self.state = 1979
                self.match(PostgreSQLParser.ALL)
                self.state = 1980
                self.match(PostgreSQLParser.IN_P)
                self.state = 1981
                self.match(PostgreSQLParser.TABLESPACE)
                self.state = 1982
                self.name()
                self.state = 1986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==312:
                    self.state = 1983
                    self.match(PostgreSQLParser.OWNED)
                    self.state = 1984
                    self.match(PostgreSQLParser.BY)
                    self.state = 1985
                    self.role_list()


                self.state = 1988
                self.match(PostgreSQLParser.SET)
                self.state = 1989
                self.match(PostgreSQLParser.TABLESPACE)
                self.state = 1990
                self.name()
                self.state = 1992
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==303:
                    self.state = 1991
                    self.nowait_()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1994
                self.match(PostgreSQLParser.ALTER)
                self.state = 1995
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 1996
                self.match(PostgreSQLParser.TABLE)
                self.state = 1999
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                if la_ == 1:
                    self.state = 1997
                    self.match(PostgreSQLParser.IF_P)
                    self.state = 1998
                    self.match(PostgreSQLParser.EXISTS)


                self.state = 2001
                self.relation_expr()
                self.state = 2002
                self.alter_table_cmds()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_cmdsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_table_cmd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Alter_table_cmdContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Alter_table_cmdContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alter_table_cmds

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_cmds" ):
                listener.enterAlter_table_cmds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_cmds" ):
                listener.exitAlter_table_cmds(self)




    def alter_table_cmds(self):

        localctx = PostgreSQLParser.Alter_table_cmdsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_alter_table_cmds)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2006
            self.alter_table_cmd()
            self.state = 2011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 2007
                self.match(PostgreSQLParser.COMMA)
                self.state = 2008
                self.alter_table_cmd()
                self.state = 2013
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_cmdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTACH(self):
            return self.getToken(PostgreSQLParser.ATTACH, 0)

        def PARTITION(self):
            return self.getToken(PostgreSQLParser.PARTITION, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def partitionboundspec(self):
            return self.getTypedRuleContext(PostgreSQLParser.PartitionboundspecContext,0)


        def DETACH(self):
            return self.getToken(PostgreSQLParser.DETACH, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_partition_cmd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_cmd" ):
                listener.enterPartition_cmd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_cmd" ):
                listener.exitPartition_cmd(self)




    def partition_cmd(self):

        localctx = PostgreSQLParser.Partition_cmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_partition_cmd)
        try:
            self.state = 2022
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [473]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2014
                self.match(PostgreSQLParser.ATTACH)
                self.state = 2015
                self.match(PostgreSQLParser.PARTITION)
                self.state = 2016
                self.qualified_name()
                self.state = 2017
                self.partitionboundspec()
                pass
            elif token in [474]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2019
                self.match(PostgreSQLParser.DETACH)
                self.state = 2020
                self.match(PostgreSQLParser.PARTITION)
                self.state = 2021
                self.qualified_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_partition_cmdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTACH(self):
            return self.getToken(PostgreSQLParser.ATTACH, 0)

        def PARTITION(self):
            return self.getToken(PostgreSQLParser.PARTITION, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_partition_cmd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_partition_cmd" ):
                listener.enterIndex_partition_cmd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_partition_cmd" ):
                listener.exitIndex_partition_cmd(self)




    def index_partition_cmd(self):

        localctx = PostgreSQLParser.Index_partition_cmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_index_partition_cmd)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2024
            self.match(PostgreSQLParser.ATTACH)
            self.state = 2025
            self.match(PostgreSQLParser.PARTITION)
            self.state = 2026
            self.qualified_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_cmdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_P(self):
            return self.getToken(PostgreSQLParser.ADD_P, 0)

        def columnDef(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColumnDefContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def COLUMN(self):
            return self.getToken(PostgreSQLParser.COLUMN, 0)

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def colid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ColidContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ColidContext,i)


        def alter_column_default(self):
            return self.getTypedRuleContext(PostgreSQLParser.Alter_column_defaultContext,0)


        def column_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_Context,0)


        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def NULL_P(self):
            return self.getToken(PostgreSQLParser.NULL_P, 0)

        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def EXPRESSION(self):
            return self.getToken(PostgreSQLParser.EXPRESSION, 0)

        def STATISTICS(self):
            return self.getToken(PostgreSQLParser.STATISTICS, 0)

        def signediconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SignediconstContext,0)


        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def reloptions(self):
            return self.getTypedRuleContext(PostgreSQLParser.ReloptionsContext,0)


        def RESET(self):
            return self.getToken(PostgreSQLParser.RESET, 0)

        def STORAGE(self):
            return self.getToken(PostgreSQLParser.STORAGE, 0)

        def GENERATED(self):
            return self.getToken(PostgreSQLParser.GENERATED, 0)

        def generated_when(self):
            return self.getTypedRuleContext(PostgreSQLParser.Generated_whenContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def IDENTITY_P(self):
            return self.getToken(PostgreSQLParser.IDENTITY_P, 0)

        def optparenthesizedseqoptlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptparenthesizedseqoptlistContext,0)


        def alter_identity_column_option_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Alter_identity_column_option_listContext,0)


        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def typename(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,0)


        def set_data_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Set_data_Context,0)


        def collate_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Collate_clause_Context,0)


        def alter_using(self):
            return self.getTypedRuleContext(PostgreSQLParser.Alter_usingContext,0)


        def alter_generic_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Alter_generic_optionsContext,0)


        def tableconstraint(self):
            return self.getTypedRuleContext(PostgreSQLParser.TableconstraintContext,0)


        def CONSTRAINT(self):
            return self.getToken(PostgreSQLParser.CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def constraintattributespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.ConstraintattributespecContext,0)


        def VALIDATE(self):
            return self.getToken(PostgreSQLParser.VALIDATE, 0)

        def WITHOUT(self):
            return self.getToken(PostgreSQLParser.WITHOUT, 0)

        def OIDS(self):
            return self.getToken(PostgreSQLParser.OIDS, 0)

        def CLUSTER(self):
            return self.getToken(PostgreSQLParser.CLUSTER, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def LOGGED(self):
            return self.getToken(PostgreSQLParser.LOGGED, 0)

        def UNLOGGED(self):
            return self.getToken(PostgreSQLParser.UNLOGGED, 0)

        def ENABLE_P(self):
            return self.getToken(PostgreSQLParser.ENABLE_P, 0)

        def TRIGGER(self):
            return self.getToken(PostgreSQLParser.TRIGGER, 0)

        def ALWAYS(self):
            return self.getToken(PostgreSQLParser.ALWAYS, 0)

        def REPLICA(self):
            return self.getToken(PostgreSQLParser.REPLICA, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def DISABLE_P(self):
            return self.getToken(PostgreSQLParser.DISABLE_P, 0)

        def RULE(self):
            return self.getToken(PostgreSQLParser.RULE, 0)

        def INHERIT(self):
            return self.getToken(PostgreSQLParser.INHERIT, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def OF(self):
            return self.getToken(PostgreSQLParser.OF, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def OWNER(self):
            return self.getToken(PostgreSQLParser.OWNER, 0)

        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def rolespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.RolespecContext,0)


        def TABLESPACE(self):
            return self.getToken(PostgreSQLParser.TABLESPACE, 0)

        def replica_identity(self):
            return self.getTypedRuleContext(PostgreSQLParser.Replica_identityContext,0)


        def ROW(self):
            return self.getToken(PostgreSQLParser.ROW, 0)

        def LEVEL(self):
            return self.getToken(PostgreSQLParser.LEVEL, 0)

        def SECURITY(self):
            return self.getToken(PostgreSQLParser.SECURITY, 0)

        def FORCE(self):
            return self.getToken(PostgreSQLParser.FORCE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alter_table_cmd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_cmd" ):
                listener.enterAlter_table_cmd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_cmd" ):
                listener.exitAlter_table_cmd(self)




    def alter_table_cmd(self):

        localctx = PostgreSQLParser.Alter_table_cmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_alter_table_cmd)
        self._la = 0 # Token type
        try:
            self.state = 2326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2028
                self.match(PostgreSQLParser.ADD_P)
                self.state = 2029
                self.columnDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2030
                self.match(PostgreSQLParser.ADD_P)
                self.state = 2031
                self.match(PostgreSQLParser.IF_P)
                self.state = 2032
                self.match(PostgreSQLParser.NOT)
                self.state = 2033
                self.match(PostgreSQLParser.EXISTS)
                self.state = 2034
                self.columnDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2035
                self.match(PostgreSQLParser.ADD_P)
                self.state = 2036
                self.match(PostgreSQLParser.COLUMN)
                self.state = 2037
                self.columnDef()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2038
                self.match(PostgreSQLParser.ADD_P)
                self.state = 2039
                self.match(PostgreSQLParser.COLUMN)
                self.state = 2040
                self.match(PostgreSQLParser.IF_P)
                self.state = 2041
                self.match(PostgreSQLParser.NOT)
                self.state = 2042
                self.match(PostgreSQLParser.EXISTS)
                self.state = 2043
                self.columnDef()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2044
                self.match(PostgreSQLParser.ALTER)
                self.state = 2046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2045
                    self.column_()


                self.state = 2048
                self.colid()
                self.state = 2049
                self.alter_column_default()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2051
                self.match(PostgreSQLParser.ALTER)
                self.state = 2053
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2052
                    self.column_()


                self.state = 2055
                self.colid()
                self.state = 2056
                self.match(PostgreSQLParser.DROP)
                self.state = 2057
                self.match(PostgreSQLParser.NOT)
                self.state = 2058
                self.match(PostgreSQLParser.NULL_P)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2060
                self.match(PostgreSQLParser.ALTER)
                self.state = 2062
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2061
                    self.column_()


                self.state = 2064
                self.colid()
                self.state = 2065
                self.match(PostgreSQLParser.SET)
                self.state = 2066
                self.match(PostgreSQLParser.NOT)
                self.state = 2067
                self.match(PostgreSQLParser.NULL_P)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2069
                self.match(PostgreSQLParser.ALTER)
                self.state = 2071
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2070
                    self.column_()


                self.state = 2073
                self.colid()
                self.state = 2074
                self.match(PostgreSQLParser.DROP)
                self.state = 2075
                self.match(PostgreSQLParser.EXPRESSION)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2077
                self.match(PostgreSQLParser.ALTER)
                self.state = 2079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2078
                    self.column_()


                self.state = 2081
                self.colid()
                self.state = 2082
                self.match(PostgreSQLParser.DROP)
                self.state = 2083
                self.match(PostgreSQLParser.EXPRESSION)
                self.state = 2084
                self.match(PostgreSQLParser.IF_P)
                self.state = 2085
                self.match(PostgreSQLParser.EXISTS)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2087
                self.match(PostgreSQLParser.ALTER)
                self.state = 2089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2088
                    self.column_()


                self.state = 2091
                self.colid()
                self.state = 2092
                self.match(PostgreSQLParser.SET)
                self.state = 2093
                self.match(PostgreSQLParser.STATISTICS)
                self.state = 2094
                self.signediconst()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2096
                self.match(PostgreSQLParser.ALTER)
                self.state = 2098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2097
                    self.column_()


                self.state = 2100
                self.iconst()
                self.state = 2101
                self.match(PostgreSQLParser.SET)
                self.state = 2102
                self.match(PostgreSQLParser.STATISTICS)
                self.state = 2103
                self.signediconst()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2105
                self.match(PostgreSQLParser.ALTER)
                self.state = 2107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2106
                    self.column_()


                self.state = 2109
                self.colid()
                self.state = 2110
                self.match(PostgreSQLParser.SET)
                self.state = 2111
                self.reloptions()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2113
                self.match(PostgreSQLParser.ALTER)
                self.state = 2115
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2114
                    self.column_()


                self.state = 2117
                self.colid()
                self.state = 2118
                self.match(PostgreSQLParser.RESET)
                self.state = 2119
                self.reloptions()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2121
                self.match(PostgreSQLParser.ALTER)
                self.state = 2123
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2122
                    self.column_()


                self.state = 2125
                self.colid()
                self.state = 2126
                self.match(PostgreSQLParser.SET)
                self.state = 2127
                self.match(PostgreSQLParser.STORAGE)
                self.state = 2128
                self.colid()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2130
                self.match(PostgreSQLParser.ALTER)
                self.state = 2132
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2131
                    self.column_()


                self.state = 2134
                self.colid()
                self.state = 2135
                self.match(PostgreSQLParser.ADD_P)
                self.state = 2136
                self.match(PostgreSQLParser.GENERATED)
                self.state = 2137
                self.generated_when()
                self.state = 2138
                self.match(PostgreSQLParser.AS)
                self.state = 2139
                self.match(PostgreSQLParser.IDENTITY_P)
                self.state = 2141
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 2140
                    self.optparenthesizedseqoptlist()


                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2143
                self.match(PostgreSQLParser.ALTER)
                self.state = 2145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2144
                    self.column_()


                self.state = 2147
                self.colid()
                self.state = 2148
                self.alter_identity_column_option_list()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2150
                self.match(PostgreSQLParser.ALTER)
                self.state = 2152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2151
                    self.column_()


                self.state = 2154
                self.colid()
                self.state = 2155
                self.match(PostgreSQLParser.DROP)
                self.state = 2156
                self.match(PostgreSQLParser.IDENTITY_P)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2158
                self.match(PostgreSQLParser.ALTER)
                self.state = 2160
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2159
                    self.column_()


                self.state = 2162
                self.colid()
                self.state = 2163
                self.match(PostgreSQLParser.DROP)
                self.state = 2164
                self.match(PostgreSQLParser.IDENTITY_P)
                self.state = 2165
                self.match(PostgreSQLParser.IF_P)
                self.state = 2166
                self.match(PostgreSQLParser.EXISTS)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2168
                self.match(PostgreSQLParser.DROP)
                self.state = 2170
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2169
                    self.column_()


                self.state = 2172
                self.match(PostgreSQLParser.IF_P)
                self.state = 2173
                self.match(PostgreSQLParser.EXISTS)
                self.state = 2174
                self.colid()
                self.state = 2176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 2175
                    self.drop_behavior_()


                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2178
                self.match(PostgreSQLParser.DROP)
                self.state = 2180
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2179
                    self.column_()


                self.state = 2182
                self.colid()
                self.state = 2184
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 2183
                    self.drop_behavior_()


                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2186
                self.match(PostgreSQLParser.ALTER)
                self.state = 2188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2187
                    self.column_()


                self.state = 2190
                self.colid()
                self.state = 2192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==364:
                    self.state = 2191
                    self.set_data_()


                self.state = 2194
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 2195
                self.typename()
                self.state = 2197
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 2196
                    self.collate_clause_()


                self.state = 2200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 2199
                    self.alter_using()


                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2202
                self.match(PostgreSQLParser.ALTER)
                self.state = 2204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 2203
                    self.column_()


                self.state = 2206
                self.colid()
                self.state = 2207
                self.alter_generic_options()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 2209
                self.match(PostgreSQLParser.ADD_P)
                self.state = 2210
                self.tableconstraint()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 2211
                self.match(PostgreSQLParser.ALTER)
                self.state = 2212
                self.match(PostgreSQLParser.CONSTRAINT)
                self.state = 2213
                self.name()
                self.state = 2214
                self.constraintattributespec()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 2216
                self.match(PostgreSQLParser.VALIDATE)
                self.state = 2217
                self.match(PostgreSQLParser.CONSTRAINT)
                self.state = 2218
                self.name()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 2219
                self.match(PostgreSQLParser.DROP)
                self.state = 2220
                self.match(PostgreSQLParser.CONSTRAINT)
                self.state = 2221
                self.match(PostgreSQLParser.IF_P)
                self.state = 2222
                self.match(PostgreSQLParser.EXISTS)
                self.state = 2223
                self.name()
                self.state = 2225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 2224
                    self.drop_behavior_()


                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 2227
                self.match(PostgreSQLParser.DROP)
                self.state = 2228
                self.match(PostgreSQLParser.CONSTRAINT)
                self.state = 2229
                self.name()
                self.state = 2231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 2230
                    self.drop_behavior_()


                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 2233
                self.match(PostgreSQLParser.SET)
                self.state = 2234
                self.match(PostgreSQLParser.WITHOUT)
                self.state = 2235
                self.match(PostgreSQLParser.OIDS)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 2236
                self.match(PostgreSQLParser.CLUSTER)
                self.state = 2237
                self.match(PostgreSQLParser.ON)
                self.state = 2238
                self.name()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 2239
                self.match(PostgreSQLParser.SET)
                self.state = 2240
                self.match(PostgreSQLParser.WITHOUT)
                self.state = 2241
                self.match(PostgreSQLParser.CLUSTER)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 2242
                self.match(PostgreSQLParser.SET)
                self.state = 2243
                self.match(PostgreSQLParser.LOGGED)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 2244
                self.match(PostgreSQLParser.SET)
                self.state = 2245
                self.match(PostgreSQLParser.UNLOGGED)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 2246
                self.match(PostgreSQLParser.ENABLE_P)
                self.state = 2247
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 2248
                self.name()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 2249
                self.match(PostgreSQLParser.ENABLE_P)
                self.state = 2250
                self.match(PostgreSQLParser.ALWAYS)
                self.state = 2251
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 2252
                self.name()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 2253
                self.match(PostgreSQLParser.ENABLE_P)
                self.state = 2254
                self.match(PostgreSQLParser.REPLICA)
                self.state = 2255
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 2256
                self.name()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 2257
                self.match(PostgreSQLParser.ENABLE_P)
                self.state = 2258
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 2259
                self.match(PostgreSQLParser.ALL)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 2260
                self.match(PostgreSQLParser.ENABLE_P)
                self.state = 2261
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 2262
                self.match(PostgreSQLParser.USER)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 2263
                self.match(PostgreSQLParser.DISABLE_P)
                self.state = 2264
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 2265
                self.name()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 2266
                self.match(PostgreSQLParser.DISABLE_P)
                self.state = 2267
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 2268
                self.match(PostgreSQLParser.ALL)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 2269
                self.match(PostgreSQLParser.DISABLE_P)
                self.state = 2270
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 2271
                self.match(PostgreSQLParser.USER)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 2272
                self.match(PostgreSQLParser.ENABLE_P)
                self.state = 2273
                self.match(PostgreSQLParser.RULE)
                self.state = 2274
                self.name()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 2275
                self.match(PostgreSQLParser.ENABLE_P)
                self.state = 2276
                self.match(PostgreSQLParser.ALWAYS)
                self.state = 2277
                self.match(PostgreSQLParser.RULE)
                self.state = 2278
                self.name()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 2279
                self.match(PostgreSQLParser.ENABLE_P)
                self.state = 2280
                self.match(PostgreSQLParser.REPLICA)
                self.state = 2281
                self.match(PostgreSQLParser.RULE)
                self.state = 2282
                self.name()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 2283
                self.match(PostgreSQLParser.DISABLE_P)
                self.state = 2284
                self.match(PostgreSQLParser.RULE)
                self.state = 2285
                self.name()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 2286
                self.match(PostgreSQLParser.INHERIT)
                self.state = 2287
                self.qualified_name()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 2288
                self.match(PostgreSQLParser.NO)
                self.state = 2289
                self.match(PostgreSQLParser.INHERIT)
                self.state = 2290
                self.qualified_name()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 2291
                self.match(PostgreSQLParser.OF)
                self.state = 2292
                self.any_name()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 2293
                self.match(PostgreSQLParser.NOT)
                self.state = 2294
                self.match(PostgreSQLParser.OF)
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 2295
                self.match(PostgreSQLParser.OWNER)
                self.state = 2296
                self.match(PostgreSQLParser.TO)
                self.state = 2297
                self.rolespec()
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 2298
                self.match(PostgreSQLParser.SET)
                self.state = 2299
                self.match(PostgreSQLParser.TABLESPACE)
                self.state = 2300
                self.name()
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 2301
                self.match(PostgreSQLParser.SET)
                self.state = 2302
                self.reloptions()
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 2303
                self.match(PostgreSQLParser.RESET)
                self.state = 2304
                self.reloptions()
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 2305
                self.match(PostgreSQLParser.REPLICA)
                self.state = 2306
                self.match(PostgreSQLParser.IDENTITY_P)
                self.state = 2307
                self.replica_identity()
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 2308
                self.match(PostgreSQLParser.ENABLE_P)
                self.state = 2309
                self.match(PostgreSQLParser.ROW)
                self.state = 2310
                self.match(PostgreSQLParser.LEVEL)
                self.state = 2311
                self.match(PostgreSQLParser.SECURITY)
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 2312
                self.match(PostgreSQLParser.DISABLE_P)
                self.state = 2313
                self.match(PostgreSQLParser.ROW)
                self.state = 2314
                self.match(PostgreSQLParser.LEVEL)
                self.state = 2315
                self.match(PostgreSQLParser.SECURITY)
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 2316
                self.match(PostgreSQLParser.FORCE)
                self.state = 2317
                self.match(PostgreSQLParser.ROW)
                self.state = 2318
                self.match(PostgreSQLParser.LEVEL)
                self.state = 2319
                self.match(PostgreSQLParser.SECURITY)
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 2320
                self.match(PostgreSQLParser.NO)
                self.state = 2321
                self.match(PostgreSQLParser.FORCE)
                self.state = 2322
                self.match(PostgreSQLParser.ROW)
                self.state = 2323
                self.match(PostgreSQLParser.LEVEL)
                self.state = 2324
                self.match(PostgreSQLParser.SECURITY)
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 2325
                self.alter_generic_options()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_column_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alter_column_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_column_default" ):
                listener.enterAlter_column_default(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_column_default" ):
                listener.exitAlter_column_default(self)




    def alter_column_default(self):

        localctx = PostgreSQLParser.Alter_column_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_alter_column_default)
        try:
            self.state = 2333
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [364]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2328
                self.match(PostgreSQLParser.SET)
                self.state = 2329
                self.match(PostgreSQLParser.DEFAULT)
                self.state = 2330
                self.a_expr()
                pass
            elif token in [229]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2331
                self.match(PostgreSQLParser.DROP)
                self.state = 2332
                self.match(PostgreSQLParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_behavior_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASCADE(self):
            return self.getToken(PostgreSQLParser.CASCADE, 0)

        def RESTRICT(self):
            return self.getToken(PostgreSQLParser.RESTRICT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_drop_behavior_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_behavior_" ):
                listener.enterDrop_behavior_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_behavior_" ):
                listener.exitDrop_behavior_(self)




    def drop_behavior_(self):

        localctx = PostgreSQLParser.Drop_behavior_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_drop_behavior_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2335
            _la = self._input.LA(1)
            if not(_la==188 or _la==346):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collate_clause_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLLATE(self):
            return self.getToken(PostgreSQLParser.COLLATE, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_collate_clause_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollate_clause_" ):
                listener.enterCollate_clause_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollate_clause_" ):
                listener.exitCollate_clause_(self)




    def collate_clause_(self):

        localctx = PostgreSQLParser.Collate_clause_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_collate_clause_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2337
            self.match(PostgreSQLParser.COLLATE)
            self.state = 2338
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_usingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alter_using

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_using" ):
                listener.enterAlter_using(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_using" ):
                listener.exitAlter_using(self)




    def alter_using(self):

        localctx = PostgreSQLParser.Alter_usingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_alter_using)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2340
            self.match(PostgreSQLParser.USING)
            self.state = 2341
            self.a_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Replica_identityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTHING(self):
            return self.getToken(PostgreSQLParser.NOTHING, 0)

        def FULL(self):
            return self.getToken(PostgreSQLParser.FULL, 0)

        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def INDEX(self):
            return self.getToken(PostgreSQLParser.INDEX, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_replica_identity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplica_identity" ):
                listener.enterReplica_identity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplica_identity" ):
                listener.exitReplica_identity(self)




    def replica_identity(self):

        localctx = PostgreSQLParser.Replica_identityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_replica_identity)
        try:
            self.state = 2349
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [301]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2343
                self.match(PostgreSQLParser.NOTHING)
                pass
            elif token in [151]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2344
                self.match(PostgreSQLParser.FULL)
                pass
            elif token in [91]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2345
                self.match(PostgreSQLParser.DEFAULT)
                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2346
                self.match(PostgreSQLParser.USING)
                self.state = 2347
                self.match(PostgreSQLParser.INDEX)
                self.state = 2348
                self.name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReloptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def reloption_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Reloption_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_reloptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReloptions" ):
                listener.enterReloptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReloptions" ):
                listener.exitReloptions(self)




    def reloptions(self):

        localctx = PostgreSQLParser.ReloptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_reloptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2351
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 2352
            self.reloption_list()
            self.state = 2353
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reloptions_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def reloptions(self):
            return self.getTypedRuleContext(PostgreSQLParser.ReloptionsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_reloptions_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReloptions_" ):
                listener.enterReloptions_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReloptions_" ):
                listener.exitReloptions_(self)




    def reloptions_(self):

        localctx = PostgreSQLParser.Reloptions_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_reloptions_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2355
            self.match(PostgreSQLParser.WITH)
            self.state = 2356
            self.reloptions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reloption_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reloption_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Reloption_elemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Reloption_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_reloption_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReloption_list" ):
                listener.enterReloption_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReloption_list" ):
                listener.exitReloption_list(self)




    def reloption_list(self):

        localctx = PostgreSQLParser.Reloption_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_reloption_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2358
            self.reloption_elem()
            self.state = 2363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 2359
                self.match(PostgreSQLParser.COMMA)
                self.state = 2360
                self.reloption_elem()
                self.state = 2365
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reloption_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ColLabelContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ColLabelContext,i)


        def EQUAL(self):
            return self.getToken(PostgreSQLParser.EQUAL, 0)

        def def_arg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Def_argContext,0)


        def DOT(self):
            return self.getToken(PostgreSQLParser.DOT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_reloption_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReloption_elem" ):
                listener.enterReloption_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReloption_elem" ):
                listener.exitReloption_elem(self)




    def reloption_elem(self):

        localctx = PostgreSQLParser.Reloption_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_reloption_elem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2366
            self.colLabel()
            self.state = 2375
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10]:
                self.state = 2367
                self.match(PostgreSQLParser.EQUAL)
                self.state = 2368
                self.def_arg()
                pass
            elif token in [11]:
                self.state = 2369
                self.match(PostgreSQLParser.DOT)
                self.state = 2370
                self.colLabel()
                self.state = 2373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 2371
                    self.match(PostgreSQLParser.EQUAL)
                    self.state = 2372
                    self.def_arg()


                pass
            elif token in [3, 6]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_identity_column_option_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_identity_column_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Alter_identity_column_optionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Alter_identity_column_optionContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alter_identity_column_option_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_identity_column_option_list" ):
                listener.enterAlter_identity_column_option_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_identity_column_option_list" ):
                listener.exitAlter_identity_column_option_list(self)




    def alter_identity_column_option_list(self):

        localctx = PostgreSQLParser.Alter_identity_column_option_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_alter_identity_column_option_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2378 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2377
                self.alter_identity_column_option()
                self.state = 2380 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==345 or _la==364):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_identity_column_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESTART(self):
            return self.getToken(PostgreSQLParser.RESTART, 0)

        def numericonly(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericonlyContext,0)


        def with_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_Context,0)


        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def seqoptelem(self):
            return self.getTypedRuleContext(PostgreSQLParser.SeqoptelemContext,0)


        def GENERATED(self):
            return self.getToken(PostgreSQLParser.GENERATED, 0)

        def generated_when(self):
            return self.getTypedRuleContext(PostgreSQLParser.Generated_whenContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alter_identity_column_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_identity_column_option" ):
                listener.enterAlter_identity_column_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_identity_column_option" ):
                listener.exitAlter_identity_column_option(self)




    def alter_identity_column_option(self):

        localctx = PostgreSQLParser.Alter_identity_column_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_alter_identity_column_option)
        self._la = 0 # Token type
        try:
            self.state = 2395
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [345]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2382
                self.match(PostgreSQLParser.RESTART)
                self.state = 2387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12 or _la==13 or _la==143 or ((((_la - 576)) & ~0x3f) == 0 and ((1 << (_la - 576)) & 47) != 0):
                    self.state = 2384
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==143:
                        self.state = 2383
                        self.with_()


                    self.state = 2386
                    self.numericonly()


                pass
            elif token in [364]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2389
                self.match(PostgreSQLParser.SET)
                self.state = 2393
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [74, 186, 211, 263, 290, 293, 300, 312, 345, 359, 371]:
                    self.state = 2390
                    self.seqoptelem()
                    pass
                elif token in [476]:
                    self.state = 2391
                    self.match(PostgreSQLParser.GENERATED)
                    self.state = 2392
                    self.generated_when()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionboundspecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def VALUES(self):
            return self.getToken(PostgreSQLParser.VALUES, 0)

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def OPEN_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.OPEN_PAREN)
            else:
                return self.getToken(PostgreSQLParser.OPEN_PAREN, i)

        def hash_partbound(self):
            return self.getTypedRuleContext(PostgreSQLParser.Hash_partboundContext,0)


        def CLOSE_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.CLOSE_PAREN)
            else:
                return self.getToken(PostgreSQLParser.CLOSE_PAREN, i)

        def IN_P(self):
            return self.getToken(PostgreSQLParser.IN_P, 0)

        def expr_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Expr_listContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,i)


        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_partitionboundspec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionboundspec" ):
                listener.enterPartitionboundspec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionboundspec" ):
                listener.exitPartitionboundspec(self)




    def partitionboundspec(self):

        localctx = PostgreSQLParser.PartitionboundspecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_partitionboundspec)
        try:
            self.state = 2423
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2397
                self.match(PostgreSQLParser.FOR)
                self.state = 2398
                self.match(PostgreSQLParser.VALUES)
                self.state = 2399
                self.match(PostgreSQLParser.WITH)
                self.state = 2400
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 2401
                self.hash_partbound()
                self.state = 2402
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2404
                self.match(PostgreSQLParser.FOR)
                self.state = 2405
                self.match(PostgreSQLParser.VALUES)
                self.state = 2406
                self.match(PostgreSQLParser.IN_P)
                self.state = 2407
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 2408
                self.expr_list()
                self.state = 2409
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2411
                self.match(PostgreSQLParser.FOR)
                self.state = 2412
                self.match(PostgreSQLParser.VALUES)
                self.state = 2413
                self.match(PostgreSQLParser.FROM)
                self.state = 2414
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 2415
                self.expr_list()
                self.state = 2416
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 2417
                self.match(PostgreSQLParser.TO)
                self.state = 2418
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 2419
                self.expr_list()
                self.state = 2420
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2422
                self.match(PostgreSQLParser.DEFAULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_partbound_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonreservedword(self):
            return self.getTypedRuleContext(PostgreSQLParser.NonreservedwordContext,0)


        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_hash_partbound_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash_partbound_elem" ):
                listener.enterHash_partbound_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash_partbound_elem" ):
                listener.exitHash_partbound_elem(self)




    def hash_partbound_elem(self):

        localctx = PostgreSQLParser.Hash_partbound_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_hash_partbound_elem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2425
            self.nonreservedword()
            self.state = 2426
            self.iconst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_partboundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hash_partbound_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Hash_partbound_elemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Hash_partbound_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_hash_partbound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash_partbound" ):
                listener.enterHash_partbound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash_partbound" ):
                listener.exitHash_partbound(self)




    def hash_partbound(self):

        localctx = PostgreSQLParser.Hash_partboundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_hash_partbound)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2428
            self.hash_partbound_elem()
            self.state = 2433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 2429
                self.match(PostgreSQLParser.COMMA)
                self.state = 2430
                self.hash_partbound_elem()
                self.state = 2435
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AltercompositetypestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def alter_type_cmds(self):
            return self.getTypedRuleContext(PostgreSQLParser.Alter_type_cmdsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_altercompositetypestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAltercompositetypestmt" ):
                listener.enterAltercompositetypestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAltercompositetypestmt" ):
                listener.exitAltercompositetypestmt(self)




    def altercompositetypestmt(self):

        localctx = PostgreSQLParser.AltercompositetypestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_altercompositetypestmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2436
            self.match(PostgreSQLParser.ALTER)
            self.state = 2437
            self.match(PostgreSQLParser.TYPE_P)
            self.state = 2438
            self.any_name()
            self.state = 2439
            self.alter_type_cmds()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_type_cmdsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_type_cmd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Alter_type_cmdContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Alter_type_cmdContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alter_type_cmds

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_type_cmds" ):
                listener.enterAlter_type_cmds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_type_cmds" ):
                listener.exitAlter_type_cmds(self)




    def alter_type_cmds(self):

        localctx = PostgreSQLParser.Alter_type_cmdsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_alter_type_cmds)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2441
            self.alter_type_cmd()
            self.state = 2446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 2442
                self.match(PostgreSQLParser.COMMA)
                self.state = 2443
                self.alter_type_cmd()
                self.state = 2448
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_type_cmdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_P(self):
            return self.getToken(PostgreSQLParser.ADD_P, 0)

        def ATTRIBUTE(self):
            return self.getToken(PostgreSQLParser.ATTRIBUTE, 0)

        def tablefuncelement(self):
            return self.getTypedRuleContext(PostgreSQLParser.TablefuncelementContext,0)


        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def typename(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,0)


        def set_data_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Set_data_Context,0)


        def collate_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Collate_clause_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alter_type_cmd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_type_cmd" ):
                listener.enterAlter_type_cmd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_type_cmd" ):
                listener.exitAlter_type_cmd(self)




    def alter_type_cmd(self):

        localctx = PostgreSQLParser.Alter_type_cmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_alter_type_cmd)
        self._la = 0 # Token type
        try:
            self.state = 2479
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [171]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2449
                self.match(PostgreSQLParser.ADD_P)
                self.state = 2450
                self.match(PostgreSQLParser.ATTRIBUTE)
                self.state = 2451
                self.tablefuncelement()
                self.state = 2453
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 2452
                    self.drop_behavior_()


                pass
            elif token in [229]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2455
                self.match(PostgreSQLParser.DROP)
                self.state = 2456
                self.match(PostgreSQLParser.ATTRIBUTE)
                self.state = 2459
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
                if la_ == 1:
                    self.state = 2457
                    self.match(PostgreSQLParser.IF_P)
                    self.state = 2458
                    self.match(PostgreSQLParser.EXISTS)


                self.state = 2461
                self.colid()
                self.state = 2463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 2462
                    self.drop_behavior_()


                pass
            elif token in [176]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2465
                self.match(PostgreSQLParser.ALTER)
                self.state = 2466
                self.match(PostgreSQLParser.ATTRIBUTE)
                self.state = 2467
                self.colid()
                self.state = 2469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==364:
                    self.state = 2468
                    self.set_data_()


                self.state = 2471
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 2472
                self.typename()
                self.state = 2474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 2473
                    self.collate_clause_()


                self.state = 2477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 2476
                    self.drop_behavior_()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CloseportalstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE(self):
            return self.getToken(PostgreSQLParser.CLOSE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Cursor_nameContext,0)


        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_closeportalstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloseportalstmt" ):
                listener.enterCloseportalstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloseportalstmt" ):
                listener.exitCloseportalstmt(self)




    def closeportalstmt(self):

        localctx = PostgreSQLParser.CloseportalstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_closeportalstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2481
            self.match(PostgreSQLParser.CLOSE)
            self.state = 2484
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 162, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 582]:
                self.state = 2482
                self.cursor_name()
                pass
            elif token in [68]:
                self.state = 2483
                self.match(PostgreSQLParser.ALL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CopystmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY(self):
            return self.getToken(PostgreSQLParser.COPY, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def copy_from(self):
            return self.getTypedRuleContext(PostgreSQLParser.Copy_fromContext,0)


        def copy_file_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Copy_file_nameContext,0)


        def copy_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Copy_optionsContext,0)


        def binary_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Binary_Context,0)


        def column_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_list_Context,0)


        def program_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Program_Context,0)


        def copy_delimiter(self):
            return self.getTypedRuleContext(PostgreSQLParser.Copy_delimiterContext,0)


        def with_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_Context,0)


        def where_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Where_clauseContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def preparablestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.PreparablestmtContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_copystmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopystmt" ):
                listener.enterCopystmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopystmt" ):
                listener.exitCopystmt(self)




    def copystmt(self):

        localctx = PostgreSQLParser.CopystmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_copystmt)
        self._la = 0 # Token type
        try:
            self.state = 2523
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2486
                self.match(PostgreSQLParser.COPY)
                self.state = 2488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==145:
                    self.state = 2487
                    self.binary_()


                self.state = 2490
                self.qualified_name()
                self.state = 2492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 2491
                    self.column_list_()


                self.state = 2494
                self.copy_from()
                self.state = 2496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==328:
                    self.state = 2495
                    self.program_()


                self.state = 2498
                self.copy_file_name()
                self.state = 2500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138 or _la==222:
                    self.state = 2499
                    self.copy_delimiter()


                self.state = 2503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143:
                    self.state = 2502
                    self.with_()


                self.state = 2505
                self.copy_options()
                self.state = 2507
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==141:
                    self.state = 2506
                    self.where_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2509
                self.match(PostgreSQLParser.COPY)
                self.state = 2510
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 2511
                self.preparablestmt()
                self.state = 2512
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 2513
                self.match(PostgreSQLParser.TO)
                self.state = 2515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==328:
                    self.state = 2514
                    self.program_()


                self.state = 2517
                self.copy_file_name()
                self.state = 2519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143:
                    self.state = 2518
                    self.with_()


                self.state = 2521
                self.copy_options()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_fromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_copy_from

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_from" ):
                listener.enterCopy_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_from" ):
                listener.exitCopy_from(self)




    def copy_from(self):

        localctx = PostgreSQLParser.Copy_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_copy_from)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2525
            _la = self._input.LA(1)
            if not(_la==102 or _la==132):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Program_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROGRAM(self):
            return self.getToken(PostgreSQLParser.PROGRAM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_program_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram_" ):
                listener.enterProgram_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram_" ):
                listener.exitProgram_(self)




    def program_(self):

        localctx = PostgreSQLParser.Program_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_program_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2527
            self.match(PostgreSQLParser.PROGRAM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_file_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def STDIN(self):
            return self.getToken(PostgreSQLParser.STDIN, 0)

        def STDOUT(self):
            return self.getToken(PostgreSQLParser.STDOUT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_copy_file_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_file_name" ):
                listener.enterCopy_file_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_file_name" ):
                listener.exitCopy_file_name(self)




    def copy_file_name(self):

        localctx = PostgreSQLParser.Copy_file_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_copy_file_name)
        try:
            self.state = 2532
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [563, 565, 567, 590]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2529
                self.sconst()
                pass
            elif token in [374]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2530
                self.match(PostgreSQLParser.STDIN)
                pass
            elif token in [375]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2531
                self.match(PostgreSQLParser.STDOUT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def copy_opt_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Copy_opt_listContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def copy_generic_opt_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Copy_generic_opt_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_copy_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_options" ):
                listener.enterCopy_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_options" ):
                listener.exitCopy_options(self)




    def copy_options(self):

        localctx = PostgreSQLParser.Copy_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_copy_options)
        try:
            self.state = 2539
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [-1, 7, 116, 141, 145, 150, 209, 221, 232, 235, 247, 254, 329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2534
                self.copy_opt_list()
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2535
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 2536
                self.copy_generic_opt_list()
                self.state = 2537
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_opt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def copy_opt_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Copy_opt_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Copy_opt_itemContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_copy_opt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_opt_list" ):
                listener.enterCopy_opt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_opt_list" ):
                listener.exitCopy_opt_list(self)




    def copy_opt_list(self):

        localctx = PostgreSQLParser.Copy_opt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_copy_opt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 116)) & ~0x3f) == 0 and ((1 << (_la - 116)) & 17716740097) != 0) or ((((_la - 209)) & ~0x3f) == 0 and ((1 << (_la - 209)) & 35459325497345) != 0) or _la==329:
                self.state = 2541
                self.copy_opt_item()
                self.state = 2546
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_opt_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(PostgreSQLParser.BINARY, 0)

        def FREEZE(self):
            return self.getToken(PostgreSQLParser.FREEZE, 0)

        def DELIMITER(self):
            return self.getToken(PostgreSQLParser.DELIMITER, 0)

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def as_(self):
            return self.getTypedRuleContext(PostgreSQLParser.As_Context,0)


        def NULL_P(self):
            return self.getToken(PostgreSQLParser.NULL_P, 0)

        def CSV(self):
            return self.getToken(PostgreSQLParser.CSV, 0)

        def HEADER_P(self):
            return self.getToken(PostgreSQLParser.HEADER_P, 0)

        def QUOTE(self):
            return self.getToken(PostgreSQLParser.QUOTE, 0)

        def ESCAPE(self):
            return self.getToken(PostgreSQLParser.ESCAPE, 0)

        def FORCE(self):
            return self.getToken(PostgreSQLParser.FORCE, 0)

        def columnlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColumnlistContext,0)


        def STAR(self):
            return self.getToken(PostgreSQLParser.STAR, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def ENCODING(self):
            return self.getToken(PostgreSQLParser.ENCODING, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_copy_opt_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_opt_item" ):
                listener.enterCopy_opt_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_opt_item" ):
                listener.exitCopy_opt_item(self)




    def copy_opt_item(self):

        localctx = PostgreSQLParser.Copy_opt_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_copy_opt_item)
        self._la = 0 # Token type
        try:
            self.state = 2586
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2547
                self.match(PostgreSQLParser.BINARY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2548
                self.match(PostgreSQLParser.FREEZE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2549
                self.match(PostgreSQLParser.DELIMITER)
                self.state = 2551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==74:
                    self.state = 2550
                    self.as_()


                self.state = 2553
                self.sconst()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2554
                self.match(PostgreSQLParser.NULL_P)
                self.state = 2556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==74:
                    self.state = 2555
                    self.as_()


                self.state = 2558
                self.sconst()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2559
                self.match(PostgreSQLParser.CSV)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2560
                self.match(PostgreSQLParser.HEADER_P)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2561
                self.match(PostgreSQLParser.QUOTE)
                self.state = 2563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==74:
                    self.state = 2562
                    self.as_()


                self.state = 2565
                self.sconst()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2566
                self.match(PostgreSQLParser.ESCAPE)
                self.state = 2568
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==74:
                    self.state = 2567
                    self.as_()


                self.state = 2570
                self.sconst()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2571
                self.match(PostgreSQLParser.FORCE)
                self.state = 2572
                self.match(PostgreSQLParser.QUOTE)
                self.state = 2573
                self.columnlist()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2574
                self.match(PostgreSQLParser.FORCE)
                self.state = 2575
                self.match(PostgreSQLParser.QUOTE)
                self.state = 2576
                self.match(PostgreSQLParser.STAR)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2577
                self.match(PostgreSQLParser.FORCE)
                self.state = 2578
                self.match(PostgreSQLParser.NOT)
                self.state = 2579
                self.match(PostgreSQLParser.NULL_P)
                self.state = 2580
                self.columnlist()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2581
                self.match(PostgreSQLParser.FORCE)
                self.state = 2582
                self.match(PostgreSQLParser.NULL_P)
                self.state = 2583
                self.columnlist()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2584
                self.match(PostgreSQLParser.ENCODING)
                self.state = 2585
                self.sconst()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Binary_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(PostgreSQLParser.BINARY, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_binary_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_" ):
                listener.enterBinary_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_" ):
                listener.exitBinary_(self)




    def binary_(self):

        localctx = PostgreSQLParser.Binary_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_binary_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2588
            self.match(PostgreSQLParser.BINARY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_delimiterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELIMITERS(self):
            return self.getToken(PostgreSQLParser.DELIMITERS, 0)

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def using_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Using_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_copy_delimiter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_delimiter" ):
                listener.enterCopy_delimiter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_delimiter" ):
                listener.exitCopy_delimiter(self)




    def copy_delimiter(self):

        localctx = PostgreSQLParser.Copy_delimiterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_copy_delimiter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 2590
                self.using_()


            self.state = 2593
            self.match(PostgreSQLParser.DELIMITERS)
            self.state = 2594
            self.sconst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_using_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_" ):
                listener.enterUsing_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_" ):
                listener.exitUsing_(self)




    def using_(self):

        localctx = PostgreSQLParser.Using_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_using_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2596
            self.match(PostgreSQLParser.USING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_generic_opt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def copy_generic_opt_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Copy_generic_opt_elemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Copy_generic_opt_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_copy_generic_opt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_generic_opt_list" ):
                listener.enterCopy_generic_opt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_generic_opt_list" ):
                listener.exitCopy_generic_opt_list(self)




    def copy_generic_opt_list(self):

        localctx = PostgreSQLParser.Copy_generic_opt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_copy_generic_opt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2598
            self.copy_generic_opt_elem()
            self.state = 2603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 2599
                self.match(PostgreSQLParser.COMMA)
                self.state = 2600
                self.copy_generic_opt_elem()
                self.state = 2605
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_generic_opt_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colLabel(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColLabelContext,0)


        def copy_generic_opt_arg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Copy_generic_opt_argContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_copy_generic_opt_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_generic_opt_elem" ):
                listener.enterCopy_generic_opt_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_generic_opt_elem" ):
                listener.exitCopy_generic_opt_elem(self)




    def copy_generic_opt_elem(self):

        localctx = PostgreSQLParser.Copy_generic_opt_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_copy_generic_opt_elem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2606
            self.colLabel()
            self.state = 2608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4399120240124) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 18014415689351175) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & -1023) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & -1) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & -1) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & -129) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & -1) != 0) or ((((_la - 454)) & ~0x3f) == 0 and ((1 << (_la - 454)) & -2305843284091601405) != 0) or ((((_la - 518)) & ~0x3f) == 0 and ((1 << (_la - 518)) & -4899175083207029761) != 0) or _la==582 or _la==590:
                self.state = 2607
                self.copy_generic_opt_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_generic_opt_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolean_or_string_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Boolean_or_string_Context,0)


        def numericonly(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericonlyContext,0)


        def STAR(self):
            return self.getToken(PostgreSQLParser.STAR, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def copy_generic_opt_arg_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Copy_generic_opt_arg_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_copy_generic_opt_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_generic_opt_arg" ):
                listener.enterCopy_generic_opt_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_generic_opt_arg" ):
                listener.exitCopy_generic_opt_arg(self)




    def copy_generic_opt_arg(self):

        localctx = PostgreSQLParser.Copy_generic_opt_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_copy_generic_opt_arg)
        try:
            self.state = 2617
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 98, 118, 134, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 563, 565, 567, 582, 590]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2610
                self.boolean_or_string_()
                pass
            elif token in [12, 13, 576, 577, 578, 579, 581]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2611
                self.numericonly()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2612
                self.match(PostgreSQLParser.STAR)
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2613
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 2614
                self.copy_generic_opt_arg_list()
                self.state = 2615
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_generic_opt_arg_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def copy_generic_opt_arg_list_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Copy_generic_opt_arg_list_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Copy_generic_opt_arg_list_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_copy_generic_opt_arg_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_generic_opt_arg_list" ):
                listener.enterCopy_generic_opt_arg_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_generic_opt_arg_list" ):
                listener.exitCopy_generic_opt_arg_list(self)




    def copy_generic_opt_arg_list(self):

        localctx = PostgreSQLParser.Copy_generic_opt_arg_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_copy_generic_opt_arg_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2619
            self.copy_generic_opt_arg_list_item()
            self.state = 2624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 2620
                self.match(PostgreSQLParser.COMMA)
                self.state = 2621
                self.copy_generic_opt_arg_list_item()
                self.state = 2626
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_generic_opt_arg_list_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolean_or_string_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Boolean_or_string_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_copy_generic_opt_arg_list_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_generic_opt_arg_list_item" ):
                listener.enterCopy_generic_opt_arg_list_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_generic_opt_arg_list_item" ):
                listener.exitCopy_generic_opt_arg_list_item(self)




    def copy_generic_opt_arg_list_item(self):

        localctx = PostgreSQLParser.Copy_generic_opt_arg_list_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_copy_generic_opt_arg_list_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2627
            self.boolean_or_string_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def qualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Qualified_nameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,i)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def OF(self):
            return self.getToken(PostgreSQLParser.OF, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def PARTITION(self):
            return self.getToken(PostgreSQLParser.PARTITION, 0)

        def partitionboundspec(self):
            return self.getTypedRuleContext(PostgreSQLParser.PartitionboundspecContext,0)


        def opttemp(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttempContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def opttableelementlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttableelementlistContext,0)


        def optinherit(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptinheritContext,0)


        def optpartitionspec(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptpartitionspecContext,0)


        def table_access_method_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_access_method_clauseContext,0)


        def optwith(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptwithContext,0)


        def oncommitoption(self):
            return self.getTypedRuleContext(PostgreSQLParser.OncommitoptionContext,0)


        def opttablespace(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttablespaceContext,0)


        def opttypedtableelementlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttypedtableelementlistContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatestmt" ):
                listener.enterCreatestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatestmt" ):
                listener.exitCreatestmt(self)




    def createstmt(self):

        localctx = PostgreSQLParser.CreatestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_createstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2629
            self.match(PostgreSQLParser.CREATE)
            self.state = 2631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==251 or _la==283 or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & 32773) != 0):
                self.state = 2630
                self.opttemp()


            self.state = 2633
            self.match(PostgreSQLParser.TABLE)
            self.state = 2637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.state = 2634
                self.match(PostgreSQLParser.IF_P)
                self.state = 2635
                self.match(PostgreSQLParser.NOT)
                self.state = 2636
                self.match(PostgreSQLParser.EXISTS)


            self.state = 2639
            self.qualified_name()
            self.state = 2705
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.state = 2640
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 2642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4399120252928) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 576460889742966791) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & -2076180479) != 0) or ((((_la - 200)) & ~0x3f) == 0 and ((1 << (_la - 200)) & -1) != 0) or ((((_la - 264)) & ~0x3f) == 0 and ((1 << (_la - 264)) & -1) != 0) or ((((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & -33) != 0) or ((((_la - 392)) & ~0x3f) == 0 and ((1 << (_la - 392)) & -1) != 0) or ((((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & -4644337652596737) != 0) or ((((_la - 527)) & ~0x3f) == 0 and ((1 << (_la - 527)) & 36028801783726085) != 0):
                    self.state = 2641
                    self.opttableelementlist()


                self.state = 2644
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 2646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==267:
                    self.state = 2645
                    self.optinherit()


                self.state = 2649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==316:
                    self.state = 2648
                    self.optpartitionspec()


                self.state = 2652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 2651
                    self.table_access_method_clause()


                self.state = 2655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143 or _la==410:
                    self.state = 2654
                    self.optwith()


                self.state = 2658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 2657
                    self.oncommitoption()


                self.state = 2661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==382:
                    self.state = 2660
                    self.opttablespace()


                pass
            elif token in [306]:
                self.state = 2663
                self.match(PostgreSQLParser.OF)
                self.state = 2664
                self.any_name()
                self.state = 2666
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 2665
                    self.opttypedtableelementlist()


                self.state = 2669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==316:
                    self.state = 2668
                    self.optpartitionspec()


                self.state = 2672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 2671
                    self.table_access_method_clause()


                self.state = 2675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143 or _la==410:
                    self.state = 2674
                    self.optwith()


                self.state = 2678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 2677
                    self.oncommitoption()


                self.state = 2681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==382:
                    self.state = 2680
                    self.opttablespace()


                pass
            elif token in [316]:
                self.state = 2683
                self.match(PostgreSQLParser.PARTITION)
                self.state = 2684
                self.match(PostgreSQLParser.OF)
                self.state = 2685
                self.qualified_name()
                self.state = 2687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 2686
                    self.opttypedtableelementlist()


                self.state = 2689
                self.partitionboundspec()
                self.state = 2691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==316:
                    self.state = 2690
                    self.optpartitionspec()


                self.state = 2694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 2693
                    self.table_access_method_clause()


                self.state = 2697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143 or _la==410:
                    self.state = 2696
                    self.optwith()


                self.state = 2700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 2699
                    self.oncommitoption()


                self.state = 2703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==382:
                    self.state = 2702
                    self.opttablespace()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpttempContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TEMPORARY(self):
            return self.getToken(PostgreSQLParser.TEMPORARY, 0)

        def TEMP(self):
            return self.getToken(PostgreSQLParser.TEMP, 0)

        def LOCAL(self):
            return self.getToken(PostgreSQLParser.LOCAL, 0)

        def GLOBAL(self):
            return self.getToken(PostgreSQLParser.GLOBAL, 0)

        def UNLOGGED(self):
            return self.getToken(PostgreSQLParser.UNLOGGED, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_opttemp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpttemp" ):
                listener.enterOpttemp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpttemp" ):
                listener.exitOpttemp(self)




    def opttemp(self):

        localctx = PostgreSQLParser.OpttempContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_opttemp)
        self._la = 0 # Token type
        try:
            self.state = 2714
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [385]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2707
                self.match(PostgreSQLParser.TEMPORARY)
                pass
            elif token in [383]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2708
                self.match(PostgreSQLParser.TEMP)
                pass
            elif token in [283]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2709
                self.match(PostgreSQLParser.LOCAL)
                self.state = 2710
                _la = self._input.LA(1)
                if not(_la==383 or _la==385):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [251]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2711
                self.match(PostgreSQLParser.GLOBAL)
                self.state = 2712
                _la = self._input.LA(1)
                if not(_la==383 or _la==385):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [398]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2713
                self.match(PostgreSQLParser.UNLOGGED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpttableelementlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableelementlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.TableelementlistContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_opttableelementlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpttableelementlist" ):
                listener.enterOpttableelementlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpttableelementlist" ):
                listener.exitOpttableelementlist(self)




    def opttableelementlist(self):

        localctx = PostgreSQLParser.OpttableelementlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_opttableelementlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2716
            self.tableelementlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpttypedtableelementlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def typedtableelementlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypedtableelementlistContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_opttypedtableelementlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpttypedtableelementlist" ):
                listener.enterOpttypedtableelementlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpttypedtableelementlist" ):
                listener.exitOpttypedtableelementlist(self)




    def opttypedtableelementlist(self):

        localctx = PostgreSQLParser.OpttypedtableelementlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_opttypedtableelementlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2718
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 2719
            self.typedtableelementlist()
            self.state = 2720
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableelementlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableelement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TableelementContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TableelementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_tableelementlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableelementlist" ):
                listener.enterTableelementlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableelementlist" ):
                listener.exitTableelementlist(self)




    def tableelementlist(self):

        localctx = PostgreSQLParser.TableelementlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_tableelementlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2722
            self.tableelement()
            self.state = 2727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 2723
                self.match(PostgreSQLParser.COMMA)
                self.state = 2724
                self.tableelement()
                self.state = 2729
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedtableelementlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedtableelement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TypedtableelementContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TypedtableelementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_typedtableelementlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedtableelementlist" ):
                listener.enterTypedtableelementlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedtableelementlist" ):
                listener.exitTypedtableelementlist(self)




    def typedtableelementlist(self):

        localctx = PostgreSQLParser.TypedtableelementlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_typedtableelementlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2730
            self.typedtableelement()
            self.state = 2735
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 2731
                self.match(PostgreSQLParser.COMMA)
                self.state = 2732
                self.typedtableelement()
                self.state = 2737
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableelementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableconstraint(self):
            return self.getTypedRuleContext(PostgreSQLParser.TableconstraintContext,0)


        def tablelikeclause(self):
            return self.getTypedRuleContext(PostgreSQLParser.TablelikeclauseContext,0)


        def columnDef(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColumnDefContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_tableelement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableelement" ):
                listener.enterTableelement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableelement" ):
                listener.exitTableelement(self)




    def tableelement(self):

        localctx = PostgreSQLParser.TableelementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_tableelement)
        try:
            self.state = 2741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2738
                self.tableconstraint()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2739
                self.tablelikeclause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2740
                self.columnDef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedtableelementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnOptions(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColumnOptionsContext,0)


        def tableconstraint(self):
            return self.getTypedRuleContext(PostgreSQLParser.TableconstraintContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_typedtableelement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedtableelement" ):
                listener.enterTypedtableelement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedtableelement" ):
                listener.exitTypedtableelement(self)




    def typedtableelement(self):

        localctx = PostgreSQLParser.TypedtableelementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_typedtableelement)
        try:
            self.state = 2745
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2743
                self.columnOptions()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2744
                self.tableconstraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def typename(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,0)


        def colquallist(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColquallistContext,0)


        def create_generic_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Create_generic_optionsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_columnDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDef" ):
                listener.enterColumnDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDef" ):
                listener.exitColumnDef(self)




    def columnDef(self):

        localctx = PostgreSQLParser.ColumnDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_columnDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2747
            self.colid()
            self.state = 2748
            self.typename()
            self.state = 2750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==311:
                self.state = 2749
                self.create_generic_options()


            self.state = 2752
            self.colquallist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def colquallist(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColquallistContext,0)


        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def OPTIONS(self):
            return self.getToken(PostgreSQLParser.OPTIONS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_columnOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnOptions" ):
                listener.enterColumnOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnOptions" ):
                listener.exitColumnOptions(self)




    def columnOptions(self):

        localctx = PostgreSQLParser.ColumnOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_columnOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2754
            self.colid()
            self.state = 2757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 2755
                self.match(PostgreSQLParser.WITH)
                self.state = 2756
                self.match(PostgreSQLParser.OPTIONS)


            self.state = 2759
            self.colquallist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColquallistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colconstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ColconstraintContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ColconstraintContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_colquallist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColquallist" ):
                listener.enterColquallist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColquallist" ):
                listener.exitColquallist(self)




    def colquallist(self):

        localctx = PostgreSQLParser.ColquallistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_colquallist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 72084085530433547) != 0) or _la==476:
                self.state = 2761
                self.colconstraint()
                self.state = 2766
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColconstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRAINT(self):
            return self.getToken(PostgreSQLParser.CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def colconstraintelem(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColconstraintelemContext,0)


        def constraintattr(self):
            return self.getTypedRuleContext(PostgreSQLParser.ConstraintattrContext,0)


        def COLLATE(self):
            return self.getToken(PostgreSQLParser.COLLATE, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_colconstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColconstraint" ):
                listener.enterColconstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColconstraint" ):
                listener.exitColconstraint(self)




    def colconstraint(self):

        localctx = PostgreSQLParser.ColconstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_colconstraint)
        try:
            self.state = 2775
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2767
                self.match(PostgreSQLParser.CONSTRAINT)
                self.state = 2768
                self.name()
                self.state = 2769
                self.colconstraintelem()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2771
                self.colconstraintelem()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2772
                self.constraintattr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2773
                self.match(PostgreSQLParser.COLLATE)
                self.state = 2774
                self.any_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColconstraintelemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def NULL_P(self):
            return self.getToken(PostgreSQLParser.NULL_P, 0)

        def UNIQUE(self):
            return self.getToken(PostgreSQLParser.UNIQUE, 0)

        def definition_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Definition_Context,0)


        def optconstablespace(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptconstablespaceContext,0)


        def PRIMARY(self):
            return self.getToken(PostgreSQLParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(PostgreSQLParser.KEY, 0)

        def CHECK(self):
            return self.getToken(PostgreSQLParser.CHECK, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def no_inherit_(self):
            return self.getTypedRuleContext(PostgreSQLParser.No_inherit_Context,0)


        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def b_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.B_exprContext,0)


        def GENERATED(self):
            return self.getToken(PostgreSQLParser.GENERATED, 0)

        def generated_when(self):
            return self.getTypedRuleContext(PostgreSQLParser.Generated_whenContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def IDENTITY_P(self):
            return self.getToken(PostgreSQLParser.IDENTITY_P, 0)

        def STORED(self):
            return self.getToken(PostgreSQLParser.STORED, 0)

        def optparenthesizedseqoptlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptparenthesizedseqoptlistContext,0)


        def REFERENCES(self):
            return self.getToken(PostgreSQLParser.REFERENCES, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def column_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_list_Context,0)


        def key_match(self):
            return self.getTypedRuleContext(PostgreSQLParser.Key_matchContext,0)


        def key_actions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Key_actionsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_colconstraintelem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColconstraintelem" ):
                listener.enterColconstraintelem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColconstraintelem" ):
                listener.exitColconstraintelem(self)




    def colconstraintelem(self):

        localctx = PostgreSQLParser.ColconstraintelemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_colconstraintelem)
        self._la = 0 # Token type
        try:
            self.state = 2829
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [115]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2777
                self.match(PostgreSQLParser.NOT)
                self.state = 2778
                self.match(PostgreSQLParser.NULL_P)
                pass
            elif token in [116]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2779
                self.match(PostgreSQLParser.NULL_P)
                pass
            elif token in [136]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2780
                self.match(PostgreSQLParser.UNIQUE)
                self.state = 2782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143:
                    self.state = 2781
                    self.definition_()


                self.state = 2785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 2784
                    self.optconstablespace()


                pass
            elif token in [123]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2787
                self.match(PostgreSQLParser.PRIMARY)
                self.state = 2788
                self.match(PostgreSQLParser.KEY)
                self.state = 2790
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143:
                    self.state = 2789
                    self.definition_()


                self.state = 2793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 2792
                    self.optconstablespace()


                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2795
                self.match(PostgreSQLParser.CHECK)
                self.state = 2796
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 2797
                self.a_expr()
                self.state = 2798
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 2800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==300:
                    self.state = 2799
                    self.no_inherit_()


                pass
            elif token in [91]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2802
                self.match(PostgreSQLParser.DEFAULT)
                self.state = 2803
                self.b_expr(0)
                pass
            elif token in [476]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2804
                self.match(PostgreSQLParser.GENERATED)
                self.state = 2805
                self.generated_when()
                self.state = 2806
                self.match(PostgreSQLParser.AS)
                self.state = 2816
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [257]:
                    self.state = 2807
                    self.match(PostgreSQLParser.IDENTITY_P)
                    self.state = 2809
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==2:
                        self.state = 2808
                        self.optparenthesizedseqoptlist()


                    pass
                elif token in [2]:
                    self.state = 2811
                    self.match(PostgreSQLParser.OPEN_PAREN)
                    self.state = 2812
                    self.a_expr()
                    self.state = 2813
                    self.match(PostgreSQLParser.CLOSE_PAREN)
                    self.state = 2814
                    self.match(PostgreSQLParser.STORED)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [124]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2818
                self.match(PostgreSQLParser.REFERENCES)
                self.state = 2819
                self.qualified_name()
                self.state = 2821
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 2820
                    self.column_list_()


                self.state = 2824
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==287:
                    self.state = 2823
                    self.key_match()


                self.state = 2827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 2826
                    self.key_actions()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generated_whenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALWAYS(self):
            return self.getToken(PostgreSQLParser.ALWAYS, 0)

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_generated_when

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenerated_when" ):
                listener.enterGenerated_when(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenerated_when" ):
                listener.exitGenerated_when(self)




    def generated_when(self):

        localctx = PostgreSQLParser.Generated_whenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_generated_when)
        try:
            self.state = 2834
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [177]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2831
                self.match(PostgreSQLParser.ALWAYS)
                pass
            elif token in [185]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2832
                self.match(PostgreSQLParser.BY)
                self.state = 2833
                self.match(PostgreSQLParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintattrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFERRABLE(self):
            return self.getToken(PostgreSQLParser.DEFERRABLE, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def INITIALLY(self):
            return self.getToken(PostgreSQLParser.INITIALLY, 0)

        def DEFERRED(self):
            return self.getToken(PostgreSQLParser.DEFERRED, 0)

        def IMMEDIATE(self):
            return self.getToken(PostgreSQLParser.IMMEDIATE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_constraintattr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintattr" ):
                listener.enterConstraintattr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintattr" ):
                listener.exitConstraintattr(self)




    def constraintattr(self):

        localctx = PostgreSQLParser.ConstraintattrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_constraintattr)
        self._la = 0 # Token type
        try:
            self.state = 2841
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [92]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2836
                self.match(PostgreSQLParser.DEFERRABLE)
                pass
            elif token in [115]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2837
                self.match(PostgreSQLParser.NOT)
                self.state = 2838
                self.match(PostgreSQLParser.DEFERRABLE)
                pass
            elif token in [107]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2839
                self.match(PostgreSQLParser.INITIALLY)
                self.state = 2840
                _la = self._input.LA(1)
                if not(_la==218 or _la==259):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablelikeclauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIKE(self):
            return self.getToken(PostgreSQLParser.LIKE, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def tablelikeoptionlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.TablelikeoptionlistContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_tablelikeclause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablelikeclause" ):
                listener.enterTablelikeclause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablelikeclause" ):
                listener.exitTablelikeclause(self)




    def tablelikeclause(self):

        localctx = PostgreSQLParser.TablelikeclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_tablelikeclause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2843
            self.match(PostgreSQLParser.LIKE)
            self.state = 2844
            self.qualified_name()
            self.state = 2845
            self.tablelikeoptionlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablelikeoptionlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tablelikeoption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TablelikeoptionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TablelikeoptionContext,i)


        def INCLUDING(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.INCLUDING)
            else:
                return self.getToken(PostgreSQLParser.INCLUDING, i)

        def EXCLUDING(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.EXCLUDING)
            else:
                return self.getToken(PostgreSQLParser.EXCLUDING, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_tablelikeoptionlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablelikeoptionlist" ):
                listener.enterTablelikeoptionlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablelikeoptionlist" ):
                listener.exitTablelikeoptionlist(self)




    def tablelikeoptionlist(self):

        localctx = PostgreSQLParser.TablelikeoptionlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_tablelikeoptionlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==238 or _la==262:
                self.state = 2847
                _la = self._input.LA(1)
                if not(_la==238 or _la==262):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2848
                self.tablelikeoption()
                self.state = 2853
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablelikeoptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENTS(self):
            return self.getToken(PostgreSQLParser.COMMENTS, 0)

        def CONSTRAINTS(self):
            return self.getToken(PostgreSQLParser.CONSTRAINTS, 0)

        def DEFAULTS(self):
            return self.getToken(PostgreSQLParser.DEFAULTS, 0)

        def IDENTITY_P(self):
            return self.getToken(PostgreSQLParser.IDENTITY_P, 0)

        def GENERATED(self):
            return self.getToken(PostgreSQLParser.GENERATED, 0)

        def INDEXES(self):
            return self.getToken(PostgreSQLParser.INDEXES, 0)

        def STATISTICS(self):
            return self.getToken(PostgreSQLParser.STATISTICS, 0)

        def STORAGE(self):
            return self.getToken(PostgreSQLParser.STORAGE, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_tablelikeoption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablelikeoption" ):
                listener.enterTablelikeoption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablelikeoption" ):
                listener.exitTablelikeoption(self)




    def tablelikeoption(self):

        localctx = PostgreSQLParser.TablelikeoptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_tablelikeoption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2854
            _la = self._input.LA(1)
            if not(_la==68 or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & 576460752303947809) != 0) or _la==265 or _la==373 or _la==376 or _la==476):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableconstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRAINT(self):
            return self.getToken(PostgreSQLParser.CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def constraintelem(self):
            return self.getTypedRuleContext(PostgreSQLParser.ConstraintelemContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_tableconstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableconstraint" ):
                listener.enterTableconstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableconstraint" ):
                listener.exitTableconstraint(self)




    def tableconstraint(self):

        localctx = PostgreSQLParser.TableconstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_tableconstraint)
        try:
            self.state = 2861
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [83]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2856
                self.match(PostgreSQLParser.CONSTRAINT)
                self.state = 2857
                self.name()
                self.state = 2858
                self.constraintelem()
                pass
            elif token in [80, 101, 123, 136, 237]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2860
                self.constraintelem()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintelemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK(self):
            return self.getToken(PostgreSQLParser.CHECK, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def constraintattributespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.ConstraintattributespecContext,0)


        def UNIQUE(self):
            return self.getToken(PostgreSQLParser.UNIQUE, 0)

        def columnlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColumnlistContext,0)


        def existingindex(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExistingindexContext,0)


        def c_include_(self):
            return self.getTypedRuleContext(PostgreSQLParser.C_include_Context,0)


        def definition_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Definition_Context,0)


        def optconstablespace(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptconstablespaceContext,0)


        def PRIMARY(self):
            return self.getToken(PostgreSQLParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(PostgreSQLParser.KEY, 0)

        def EXCLUDE(self):
            return self.getToken(PostgreSQLParser.EXCLUDE, 0)

        def exclusionconstraintlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExclusionconstraintlistContext,0)


        def access_method_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Access_method_clauseContext,0)


        def exclusionwhereclause(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExclusionwhereclauseContext,0)


        def FOREIGN(self):
            return self.getToken(PostgreSQLParser.FOREIGN, 0)

        def REFERENCES(self):
            return self.getToken(PostgreSQLParser.REFERENCES, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def column_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_list_Context,0)


        def key_match(self):
            return self.getTypedRuleContext(PostgreSQLParser.Key_matchContext,0)


        def key_actions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Key_actionsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_constraintelem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintelem" ):
                listener.enterConstraintelem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintelem" ):
                listener.exitConstraintelem(self)




    def constraintelem(self):

        localctx = PostgreSQLParser.ConstraintelemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_constraintelem)
        self._la = 0 # Token type
        try:
            self.state = 2949
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [80]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2863
                self.match(PostgreSQLParser.CHECK)
                self.state = 2864
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 2865
                self.a_expr()
                self.state = 2866
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 2867
                self.constraintattributespec()
                pass
            elif token in [136]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2869
                self.match(PostgreSQLParser.UNIQUE)
                self.state = 2887
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [2]:
                    self.state = 2870
                    self.match(PostgreSQLParser.OPEN_PAREN)
                    self.state = 2871
                    self.columnlist()
                    self.state = 2872
                    self.match(PostgreSQLParser.CLOSE_PAREN)
                    self.state = 2874
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==479:
                        self.state = 2873
                        self.c_include_()


                    self.state = 2877
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==143:
                        self.state = 2876
                        self.definition_()


                    self.state = 2880
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==138:
                        self.state = 2879
                        self.optconstablespace()


                    self.state = 2882
                    self.constraintattributespec()
                    pass
                elif token in [138]:
                    self.state = 2884
                    self.existingindex()
                    self.state = 2885
                    self.constraintattributespec()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [123]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2889
                self.match(PostgreSQLParser.PRIMARY)
                self.state = 2890
                self.match(PostgreSQLParser.KEY)
                self.state = 2908
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [2]:
                    self.state = 2891
                    self.match(PostgreSQLParser.OPEN_PAREN)
                    self.state = 2892
                    self.columnlist()
                    self.state = 2893
                    self.match(PostgreSQLParser.CLOSE_PAREN)
                    self.state = 2895
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==479:
                        self.state = 2894
                        self.c_include_()


                    self.state = 2898
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==143:
                        self.state = 2897
                        self.definition_()


                    self.state = 2901
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==138:
                        self.state = 2900
                        self.optconstablespace()


                    self.state = 2903
                    self.constraintattributespec()
                    pass
                elif token in [138]:
                    self.state = 2905
                    self.existingindex()
                    self.state = 2906
                    self.constraintattributespec()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [237]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2910
                self.match(PostgreSQLParser.EXCLUDE)
                self.state = 2912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 2911
                    self.access_method_clause()


                self.state = 2914
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 2915
                self.exclusionconstraintlist()
                self.state = 2916
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 2918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==479:
                    self.state = 2917
                    self.c_include_()


                self.state = 2921
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143:
                    self.state = 2920
                    self.definition_()


                self.state = 2924
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 2923
                    self.optconstablespace()


                self.state = 2927
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==141:
                    self.state = 2926
                    self.exclusionwhereclause()


                self.state = 2929
                self.constraintattributespec()
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2931
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 2932
                self.match(PostgreSQLParser.KEY)
                self.state = 2933
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 2934
                self.columnlist()
                self.state = 2935
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 2936
                self.match(PostgreSQLParser.REFERENCES)
                self.state = 2937
                self.qualified_name()
                self.state = 2939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 2938
                    self.column_list_()


                self.state = 2942
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==287:
                    self.state = 2941
                    self.key_match()


                self.state = 2945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 2944
                    self.key_actions()


                self.state = 2947
                self.constraintattributespec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class No_inherit_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def INHERIT(self):
            return self.getToken(PostgreSQLParser.INHERIT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_no_inherit_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo_inherit_" ):
                listener.enterNo_inherit_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo_inherit_" ):
                listener.exitNo_inherit_(self)




    def no_inherit_(self):

        localctx = PostgreSQLParser.No_inherit_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_no_inherit_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2951
            self.match(PostgreSQLParser.NO)
            self.state = 2952
            self.match(PostgreSQLParser.INHERIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_list_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def columnlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColumnlistContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_column_list_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_list_" ):
                listener.enterColumn_list_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_list_" ):
                listener.exitColumn_list_(self)




    def column_list_(self):

        localctx = PostgreSQLParser.Column_list_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_column_list_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2954
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 2955
            self.columnlist()
            self.state = 2956
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnElem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ColumnElemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ColumnElemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_columnlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnlist" ):
                listener.enterColumnlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnlist" ):
                listener.exitColumnlist(self)




    def columnlist(self):

        localctx = PostgreSQLParser.ColumnlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_columnlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2958
            self.columnElem()
            self.state = 2963
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 2959
                self.match(PostgreSQLParser.COMMA)
                self.state = 2960
                self.columnElem()
                self.state = 2965
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnElemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_columnElem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnElem" ):
                listener.enterColumnElem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnElem" ):
                listener.exitColumnElem(self)




    def columnElem(self):

        localctx = PostgreSQLParser.ColumnElemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_columnElem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2966
            self.colid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class C_include_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCLUDE(self):
            return self.getToken(PostgreSQLParser.INCLUDE, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def columnlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColumnlistContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_c_include_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterC_include_" ):
                listener.enterC_include_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitC_include_" ):
                listener.exitC_include_(self)




    def c_include_(self):

        localctx = PostgreSQLParser.C_include_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_c_include_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2968
            self.match(PostgreSQLParser.INCLUDE)
            self.state = 2969
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 2970
            self.columnlist()
            self.state = 2971
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_matchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(PostgreSQLParser.MATCH, 0)

        def FULL(self):
            return self.getToken(PostgreSQLParser.FULL, 0)

        def PARTIAL(self):
            return self.getToken(PostgreSQLParser.PARTIAL, 0)

        def SIMPLE(self):
            return self.getToken(PostgreSQLParser.SIMPLE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_key_match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_match" ):
                listener.enterKey_match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_match" ):
                listener.exitKey_match(self)




    def key_match(self):

        localctx = PostgreSQLParser.Key_matchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_key_match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2973
            self.match(PostgreSQLParser.MATCH)
            self.state = 2974
            _la = self._input.LA(1)
            if not(_la==151 or _la==315 or _la==367):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExclusionconstraintlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusionconstraintelem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ExclusionconstraintelemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ExclusionconstraintelemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_exclusionconstraintlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusionconstraintlist" ):
                listener.enterExclusionconstraintlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusionconstraintlist" ):
                listener.exitExclusionconstraintlist(self)




    def exclusionconstraintlist(self):

        localctx = PostgreSQLParser.ExclusionconstraintlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_exclusionconstraintlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2976
            self.exclusionconstraintelem()
            self.state = 2981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 2977
                self.match(PostgreSQLParser.COMMA)
                self.state = 2978
                self.exclusionconstraintelem()
                self.state = 2983
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExclusionconstraintelemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_elem(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_elemContext,0)


        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def any_operator(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_operatorContext,0)


        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_exclusionconstraintelem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusionconstraintelem" ):
                listener.enterExclusionconstraintelem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusionconstraintelem" ):
                listener.exitExclusionconstraintelem(self)




    def exclusionconstraintelem(self):

        localctx = PostgreSQLParser.ExclusionconstraintelemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_exclusionconstraintelem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2984
            self.index_elem()
            self.state = 2985
            self.match(PostgreSQLParser.WITH)
            self.state = 2992
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.state = 2986
                self.any_operator()
                pass

            elif la_ == 2:
                self.state = 2987
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 2988
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 2989
                self.any_operator()
                self.state = 2990
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExclusionwhereclauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(PostgreSQLParser.WHERE, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_exclusionwhereclause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusionwhereclause" ):
                listener.enterExclusionwhereclause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusionwhereclause" ):
                listener.exitExclusionwhereclause(self)




    def exclusionwhereclause(self):

        localctx = PostgreSQLParser.ExclusionwhereclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_exclusionwhereclause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2994
            self.match(PostgreSQLParser.WHERE)
            self.state = 2995
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 2996
            self.a_expr()
            self.state = 2997
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_actionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_update(self):
            return self.getTypedRuleContext(PostgreSQLParser.Key_updateContext,0)


        def key_delete(self):
            return self.getTypedRuleContext(PostgreSQLParser.Key_deleteContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_key_actions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_actions" ):
                listener.enterKey_actions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_actions" ):
                listener.exitKey_actions(self)




    def key_actions(self):

        localctx = PostgreSQLParser.Key_actionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_key_actions)
        try:
            self.state = 3007
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2999
                self.key_update()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3000
                self.key_delete()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3001
                self.key_update()
                self.state = 3002
                self.key_delete()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3004
                self.key_delete()
                self.state = 3005
                self.key_update()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_updateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def UPDATE(self):
            return self.getToken(PostgreSQLParser.UPDATE, 0)

        def key_action(self):
            return self.getTypedRuleContext(PostgreSQLParser.Key_actionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_key_update

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_update" ):
                listener.enterKey_update(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_update" ):
                listener.exitKey_update(self)




    def key_update(self):

        localctx = PostgreSQLParser.Key_updateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_key_update)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3009
            self.match(PostgreSQLParser.ON)
            self.state = 3010
            self.match(PostgreSQLParser.UPDATE)
            self.state = 3011
            self.key_action()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_deleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def DELETE_P(self):
            return self.getToken(PostgreSQLParser.DELETE_P, 0)

        def key_action(self):
            return self.getTypedRuleContext(PostgreSQLParser.Key_actionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_key_delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_delete" ):
                listener.enterKey_delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_delete" ):
                listener.exitKey_delete(self)




    def key_delete(self):

        localctx = PostgreSQLParser.Key_deleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_key_delete)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3013
            self.match(PostgreSQLParser.ON)
            self.state = 3014
            self.match(PostgreSQLParser.DELETE_P)
            self.state = 3015
            self.key_action()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def ACTION(self):
            return self.getToken(PostgreSQLParser.ACTION, 0)

        def RESTRICT(self):
            return self.getToken(PostgreSQLParser.RESTRICT, 0)

        def CASCADE(self):
            return self.getToken(PostgreSQLParser.CASCADE, 0)

        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def NULL_P(self):
            return self.getToken(PostgreSQLParser.NULL_P, 0)

        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_key_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_action" ):
                listener.enterKey_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_action" ):
                listener.exitKey_action(self)




    def key_action(self):

        localctx = PostgreSQLParser.Key_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_key_action)
        self._la = 0 # Token type
        try:
            self.state = 3023
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [300]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3017
                self.match(PostgreSQLParser.NO)
                self.state = 3018
                self.match(PostgreSQLParser.ACTION)
                pass
            elif token in [346]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3019
                self.match(PostgreSQLParser.RESTRICT)
                pass
            elif token in [188]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3020
                self.match(PostgreSQLParser.CASCADE)
                pass
            elif token in [364]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3021
                self.match(PostgreSQLParser.SET)
                self.state = 3022
                _la = self._input.LA(1)
                if not(_la==91 or _la==116):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptinheritContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INHERITS(self):
            return self.getToken(PostgreSQLParser.INHERITS, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def qualified_name_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_name_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_optinherit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptinherit" ):
                listener.enterOptinherit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptinherit" ):
                listener.exitOptinherit(self)




    def optinherit(self):

        localctx = PostgreSQLParser.OptinheritContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_optinherit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3025
            self.match(PostgreSQLParser.INHERITS)
            self.state = 3026
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 3027
            self.qualified_name_list()
            self.state = 3028
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptpartitionspecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partitionspec(self):
            return self.getTypedRuleContext(PostgreSQLParser.PartitionspecContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_optpartitionspec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptpartitionspec" ):
                listener.enterOptpartitionspec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptpartitionspec" ):
                listener.exitOptpartitionspec(self)




    def optpartitionspec(self):

        localctx = PostgreSQLParser.OptpartitionspecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_optpartitionspec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3030
            self.partitionspec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionspecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(PostgreSQLParser.PARTITION, 0)

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def part_params(self):
            return self.getTypedRuleContext(PostgreSQLParser.Part_paramsContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_partitionspec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionspec" ):
                listener.enterPartitionspec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionspec" ):
                listener.exitPartitionspec(self)




    def partitionspec(self):

        localctx = PostgreSQLParser.PartitionspecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_partitionspec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3032
            self.match(PostgreSQLParser.PARTITION)
            self.state = 3033
            self.match(PostgreSQLParser.BY)
            self.state = 3034
            self.colid()
            self.state = 3035
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 3036
            self.part_params()
            self.state = 3037
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Part_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def part_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Part_elemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Part_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_part_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPart_params" ):
                listener.enterPart_params(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPart_params" ):
                listener.exitPart_params(self)




    def part_params(self):

        localctx = PostgreSQLParser.Part_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_part_params)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3039
            self.part_elem()
            self.state = 3044
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 3040
                self.match(PostgreSQLParser.COMMA)
                self.state = 3041
                self.part_elem()
                self.state = 3046
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Part_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def collate_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Collate_Context,0)


        def class_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Class_Context,0)


        def func_expr_windowless(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_expr_windowlessContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_part_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPart_elem" ):
                listener.enterPart_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPart_elem" ):
                listener.exitPart_elem(self)




    def part_elem(self):

        localctx = PostgreSQLParser.Part_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_part_elem)
        self._la = 0 # Token type
        try:
            self.state = 3070
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3047
                self.colid()
                self.state = 3049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 3048
                    self.collate_()


                self.state = 3052
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & 137438949375) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & -31) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & -1) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & -8796093022209) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & -1) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & -34909494181889) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & 1153132601981008895) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & 536870983) != 0):
                    self.state = 3051
                    self.class_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3054
                self.func_expr_windowless()
                self.state = 3056
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 3055
                    self.collate_()


                self.state = 3059
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & 137438949375) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & -31) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & -1) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & -8796093022209) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & -1) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & -34909494181889) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & 1153132601981008895) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & 536870983) != 0):
                    self.state = 3058
                    self.class_()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3061
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 3062
                self.a_expr()
                self.state = 3063
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 3065
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 3064
                    self.collate_()


                self.state = 3068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & 137438949375) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & -31) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & -1) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & -8796093022209) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & -1) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & -34909494181889) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & 1153132601981008895) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & 536870983) != 0):
                    self.state = 3067
                    self.class_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_access_method_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_access_method_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_access_method_clause" ):
                listener.enterTable_access_method_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_access_method_clause" ):
                listener.exitTable_access_method_clause(self)




    def table_access_method_clause(self):

        localctx = PostgreSQLParser.Table_access_method_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_table_access_method_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3072
            self.match(PostgreSQLParser.USING)
            self.state = 3073
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptwithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def reloptions(self):
            return self.getTypedRuleContext(PostgreSQLParser.ReloptionsContext,0)


        def WITHOUT(self):
            return self.getToken(PostgreSQLParser.WITHOUT, 0)

        def OIDS(self):
            return self.getToken(PostgreSQLParser.OIDS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_optwith

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptwith" ):
                listener.enterOptwith(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptwith" ):
                listener.exitOptwith(self)




    def optwith(self):

        localctx = PostgreSQLParser.OptwithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_optwith)
        try:
            self.state = 3079
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [143]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3075
                self.match(PostgreSQLParser.WITH)
                self.state = 3076
                self.reloptions()
                pass
            elif token in [410]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3077
                self.match(PostgreSQLParser.WITHOUT)
                self.state = 3078
                self.match(PostgreSQLParser.OIDS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OncommitoptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def COMMIT(self):
            return self.getToken(PostgreSQLParser.COMMIT, 0)

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def DELETE_P(self):
            return self.getToken(PostgreSQLParser.DELETE_P, 0)

        def ROWS(self):
            return self.getToken(PostgreSQLParser.ROWS, 0)

        def PRESERVE(self):
            return self.getToken(PostgreSQLParser.PRESERVE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_oncommitoption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOncommitoption" ):
                listener.enterOncommitoption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOncommitoption" ):
                listener.exitOncommitoption(self)




    def oncommitoption(self):

        localctx = PostgreSQLParser.OncommitoptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_oncommitoption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3081
            self.match(PostgreSQLParser.ON)
            self.state = 3082
            self.match(PostgreSQLParser.COMMIT)
            self.state = 3088
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [229]:
                self.state = 3083
                self.match(PostgreSQLParser.DROP)
                pass
            elif token in [220]:
                self.state = 3084
                self.match(PostgreSQLParser.DELETE_P)
                self.state = 3085
                self.match(PostgreSQLParser.ROWS)
                pass
            elif token in [323]:
                self.state = 3086
                self.match(PostgreSQLParser.PRESERVE)
                self.state = 3087
                self.match(PostgreSQLParser.ROWS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpttablespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESPACE(self):
            return self.getToken(PostgreSQLParser.TABLESPACE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_opttablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpttablespace" ):
                listener.enterOpttablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpttablespace" ):
                listener.exitOpttablespace(self)




    def opttablespace(self):

        localctx = PostgreSQLParser.OpttablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_opttablespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3090
            self.match(PostgreSQLParser.TABLESPACE)
            self.state = 3091
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptconstablespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def INDEX(self):
            return self.getToken(PostgreSQLParser.INDEX, 0)

        def TABLESPACE(self):
            return self.getToken(PostgreSQLParser.TABLESPACE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_optconstablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptconstablespace" ):
                listener.enterOptconstablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptconstablespace" ):
                listener.exitOptconstablespace(self)




    def optconstablespace(self):

        localctx = PostgreSQLParser.OptconstablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_optconstablespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3093
            self.match(PostgreSQLParser.USING)
            self.state = 3094
            self.match(PostgreSQLParser.INDEX)
            self.state = 3095
            self.match(PostgreSQLParser.TABLESPACE)
            self.state = 3096
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExistingindexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def INDEX(self):
            return self.getToken(PostgreSQLParser.INDEX, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_existingindex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistingindex" ):
                listener.enterExistingindex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistingindex" ):
                listener.exitExistingindex(self)




    def existingindex(self):

        localctx = PostgreSQLParser.ExistingindexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_existingindex)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3098
            self.match(PostgreSQLParser.USING)
            self.state = 3099
            self.match(PostgreSQLParser.INDEX)
            self.state = 3100
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatestatsstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def STATISTICS(self):
            return self.getToken(PostgreSQLParser.STATISTICS, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)


        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def from_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.From_listContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def name_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Name_list_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createstatsstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatestatsstmt" ):
                listener.enterCreatestatsstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatestatsstmt" ):
                listener.exitCreatestatsstmt(self)




    def createstatsstmt(self):

        localctx = PostgreSQLParser.CreatestatsstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_createstatsstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3102
            self.match(PostgreSQLParser.CREATE)
            self.state = 3103
            self.match(PostgreSQLParser.STATISTICS)
            self.state = 3107
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.state = 3104
                self.match(PostgreSQLParser.IF_P)
                self.state = 3105
                self.match(PostgreSQLParser.NOT)
                self.state = 3106
                self.match(PostgreSQLParser.EXISTS)


            self.state = 3109
            self.any_name()
            self.state = 3111
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 3110
                self.name_list_()


            self.state = 3113
            self.match(PostgreSQLParser.ON)
            self.state = 3114
            self.expr_list()
            self.state = 3115
            self.match(PostgreSQLParser.FROM)
            self.state = 3116
            self.from_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterstatsstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def STATISTICS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.STATISTICS)
            else:
                return self.getToken(PostgreSQLParser.STATISTICS, i)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def signediconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SignediconstContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterstatsstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterstatsstmt" ):
                listener.enterAlterstatsstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterstatsstmt" ):
                listener.exitAlterstatsstmt(self)




    def alterstatsstmt(self):

        localctx = PostgreSQLParser.AlterstatsstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_alterstatsstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3118
            self.match(PostgreSQLParser.ALTER)
            self.state = 3119
            self.match(PostgreSQLParser.STATISTICS)
            self.state = 3122
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.state = 3120
                self.match(PostgreSQLParser.IF_P)
                self.state = 3121
                self.match(PostgreSQLParser.EXISTS)


            self.state = 3124
            self.any_name()
            self.state = 3125
            self.match(PostgreSQLParser.SET)
            self.state = 3126
            self.match(PostgreSQLParser.STATISTICS)
            self.state = 3127
            self.signediconst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateasstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def create_as_target(self):
            return self.getTypedRuleContext(PostgreSQLParser.Create_as_targetContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def selectstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.SelectstmtContext,0)


        def opttemp(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttempContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def with_data_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_data_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createasstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateasstmt" ):
                listener.enterCreateasstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateasstmt" ):
                listener.exitCreateasstmt(self)




    def createasstmt(self):

        localctx = PostgreSQLParser.CreateasstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_createasstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3129
            self.match(PostgreSQLParser.CREATE)
            self.state = 3131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==251 or _la==283 or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & 32773) != 0):
                self.state = 3130
                self.opttemp()


            self.state = 3133
            self.match(PostgreSQLParser.TABLE)
            self.state = 3137
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.state = 3134
                self.match(PostgreSQLParser.IF_P)
                self.state = 3135
                self.match(PostgreSQLParser.NOT)
                self.state = 3136
                self.match(PostgreSQLParser.EXISTS)


            self.state = 3139
            self.create_as_target()
            self.state = 3140
            self.match(PostgreSQLParser.AS)
            self.state = 3141
            self.selectstmt()
            self.state = 3143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 3142
                self.with_data_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_as_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def column_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_list_Context,0)


        def table_access_method_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_access_method_clauseContext,0)


        def optwith(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptwithContext,0)


        def oncommitoption(self):
            return self.getTypedRuleContext(PostgreSQLParser.OncommitoptionContext,0)


        def opttablespace(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttablespaceContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_create_as_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_as_target" ):
                listener.enterCreate_as_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_as_target" ):
                listener.exitCreate_as_target(self)




    def create_as_target(self):

        localctx = PostgreSQLParser.Create_as_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_create_as_target)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3145
            self.qualified_name()
            self.state = 3147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 3146
                self.column_list_()


            self.state = 3150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 3149
                self.table_access_method_clause()


            self.state = 3153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143 or _la==410:
                self.state = 3152
                self.optwith()


            self.state = 3156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 3155
                self.oncommitoption()


            self.state = 3159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==382:
                self.state = 3158
                self.opttablespace()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_data_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def DATA_P(self):
            return self.getToken(PostgreSQLParser.DATA_P, 0)

        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_with_data_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_data_" ):
                listener.enterWith_data_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_data_" ):
                listener.exitWith_data_(self)




    def with_data_(self):

        localctx = PostgreSQLParser.With_data_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_with_data_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3161
            self.match(PostgreSQLParser.WITH)
            self.state = 3165
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [212]:
                self.state = 3162
                self.match(PostgreSQLParser.DATA_P)
                pass
            elif token in [300]:
                self.state = 3163
                self.match(PostgreSQLParser.NO)
                self.state = 3164
                self.match(PostgreSQLParser.DATA_P)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatematviewstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def MATERIALIZED(self):
            return self.getToken(PostgreSQLParser.MATERIALIZED, 0)

        def VIEW(self):
            return self.getToken(PostgreSQLParser.VIEW, 0)

        def create_mv_target(self):
            return self.getTypedRuleContext(PostgreSQLParser.Create_mv_targetContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def selectstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.SelectstmtContext,0)


        def optnolog(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptnologContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def with_data_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_data_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_creatematviewstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatematviewstmt" ):
                listener.enterCreatematviewstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatematviewstmt" ):
                listener.exitCreatematviewstmt(self)




    def creatematviewstmt(self):

        localctx = PostgreSQLParser.CreatematviewstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_creatematviewstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3167
            self.match(PostgreSQLParser.CREATE)
            self.state = 3169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==398:
                self.state = 3168
                self.optnolog()


            self.state = 3171
            self.match(PostgreSQLParser.MATERIALIZED)
            self.state = 3172
            self.match(PostgreSQLParser.VIEW)
            self.state = 3176
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                self.state = 3173
                self.match(PostgreSQLParser.IF_P)
                self.state = 3174
                self.match(PostgreSQLParser.NOT)
                self.state = 3175
                self.match(PostgreSQLParser.EXISTS)


            self.state = 3178
            self.create_mv_target()
            self.state = 3179
            self.match(PostgreSQLParser.AS)
            self.state = 3180
            self.selectstmt()
            self.state = 3182
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 3181
                self.with_data_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_mv_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def column_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_list_Context,0)


        def table_access_method_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_access_method_clauseContext,0)


        def reloptions_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Reloptions_Context,0)


        def opttablespace(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttablespaceContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_create_mv_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_mv_target" ):
                listener.enterCreate_mv_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_mv_target" ):
                listener.exitCreate_mv_target(self)




    def create_mv_target(self):

        localctx = PostgreSQLParser.Create_mv_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_create_mv_target)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3184
            self.qualified_name()
            self.state = 3186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 3185
                self.column_list_()


            self.state = 3189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 3188
                self.table_access_method_clause()


            self.state = 3192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 3191
                self.reloptions_()


            self.state = 3195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==382:
                self.state = 3194
                self.opttablespace()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptnologContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNLOGGED(self):
            return self.getToken(PostgreSQLParser.UNLOGGED, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_optnolog

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptnolog" ):
                listener.enterOptnolog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptnolog" ):
                listener.exitOptnolog(self)




    def optnolog(self):

        localctx = PostgreSQLParser.OptnologContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_optnolog)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3197
            self.match(PostgreSQLParser.UNLOGGED)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RefreshmatviewstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFRESH(self):
            return self.getToken(PostgreSQLParser.REFRESH, 0)

        def MATERIALIZED(self):
            return self.getToken(PostgreSQLParser.MATERIALIZED, 0)

        def VIEW(self):
            return self.getToken(PostgreSQLParser.VIEW, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def concurrently_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Concurrently_Context,0)


        def with_data_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_data_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_refreshmatviewstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshmatviewstmt" ):
                listener.enterRefreshmatviewstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshmatviewstmt" ):
                listener.exitRefreshmatviewstmt(self)




    def refreshmatviewstmt(self):

        localctx = PostgreSQLParser.RefreshmatviewstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_refreshmatviewstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3199
            self.match(PostgreSQLParser.REFRESH)
            self.state = 3200
            self.match(PostgreSQLParser.MATERIALIZED)
            self.state = 3201
            self.match(PostgreSQLParser.VIEW)
            self.state = 3203
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==147:
                self.state = 3202
                self.concurrently_()


            self.state = 3205
            self.qualified_name()
            self.state = 3207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 3206
                self.with_data_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateseqstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def SEQUENCE(self):
            return self.getToken(PostgreSQLParser.SEQUENCE, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def opttemp(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttempContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def optseqoptlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptseqoptlistContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createseqstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateseqstmt" ):
                listener.enterCreateseqstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateseqstmt" ):
                listener.exitCreateseqstmt(self)




    def createseqstmt(self):

        localctx = PostgreSQLParser.CreateseqstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_createseqstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3209
            self.match(PostgreSQLParser.CREATE)
            self.state = 3211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==251 or _la==283 or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & 32773) != 0):
                self.state = 3210
                self.opttemp()


            self.state = 3213
            self.match(PostgreSQLParser.SEQUENCE)
            self.state = 3217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.state = 3214
                self.match(PostgreSQLParser.IF_P)
                self.state = 3215
                self.match(PostgreSQLParser.NOT)
                self.state = 3216
                self.match(PostgreSQLParser.EXISTS)


            self.state = 3219
            self.qualified_name()
            self.state = 3221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74 or _la==186 or _la==211 or ((((_la - 263)) & ~0x3f) == 0 and ((1 << (_la - 263)) & 563088600334337) != 0) or ((((_la - 345)) & ~0x3f) == 0 and ((1 << (_la - 345)) & 67125249) != 0):
                self.state = 3220
                self.optseqoptlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterseqstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def SEQUENCE(self):
            return self.getToken(PostgreSQLParser.SEQUENCE, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def seqoptlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.SeqoptlistContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterseqstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterseqstmt" ):
                listener.enterAlterseqstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterseqstmt" ):
                listener.exitAlterseqstmt(self)




    def alterseqstmt(self):

        localctx = PostgreSQLParser.AlterseqstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_alterseqstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3223
            self.match(PostgreSQLParser.ALTER)
            self.state = 3224
            self.match(PostgreSQLParser.SEQUENCE)
            self.state = 3227
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
            if la_ == 1:
                self.state = 3225
                self.match(PostgreSQLParser.IF_P)
                self.state = 3226
                self.match(PostgreSQLParser.EXISTS)


            self.state = 3229
            self.qualified_name()
            self.state = 3230
            self.seqoptlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptseqoptlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def seqoptlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.SeqoptlistContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_optseqoptlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptseqoptlist" ):
                listener.enterOptseqoptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptseqoptlist" ):
                listener.exitOptseqoptlist(self)




    def optseqoptlist(self):

        localctx = PostgreSQLParser.OptseqoptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_optseqoptlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3232
            self.seqoptlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptparenthesizedseqoptlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def seqoptlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.SeqoptlistContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_optparenthesizedseqoptlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptparenthesizedseqoptlist" ):
                listener.enterOptparenthesizedseqoptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptparenthesizedseqoptlist" ):
                listener.exitOptparenthesizedseqoptlist(self)




    def optparenthesizedseqoptlist(self):

        localctx = PostgreSQLParser.OptparenthesizedseqoptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_optparenthesizedseqoptlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3234
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 3235
            self.seqoptlist()
            self.state = 3236
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SeqoptlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def seqoptelem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SeqoptelemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SeqoptelemContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_seqoptlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeqoptlist" ):
                listener.enterSeqoptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeqoptlist" ):
                listener.exitSeqoptlist(self)




    def seqoptlist(self):

        localctx = PostgreSQLParser.SeqoptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_seqoptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3239 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3238
                self.seqoptelem()
                self.state = 3241 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==74 or _la==186 or _la==211 or ((((_la - 263)) & ~0x3f) == 0 and ((1 << (_la - 263)) & 563088600334337) != 0) or ((((_la - 345)) & ~0x3f) == 0 and ((1 << (_la - 345)) & 67125249) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SeqoptelemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def simpletypename(self):
            return self.getTypedRuleContext(PostgreSQLParser.SimpletypenameContext,0)


        def CACHE(self):
            return self.getToken(PostgreSQLParser.CACHE, 0)

        def numericonly(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericonlyContext,0)


        def CYCLE(self):
            return self.getToken(PostgreSQLParser.CYCLE, 0)

        def INCREMENT(self):
            return self.getToken(PostgreSQLParser.INCREMENT, 0)

        def by_(self):
            return self.getTypedRuleContext(PostgreSQLParser.By_Context,0)


        def MAXVALUE(self):
            return self.getToken(PostgreSQLParser.MAXVALUE, 0)

        def MINVALUE(self):
            return self.getToken(PostgreSQLParser.MINVALUE, 0)

        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def OWNED(self):
            return self.getToken(PostgreSQLParser.OWNED, 0)

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def SEQUENCE(self):
            return self.getToken(PostgreSQLParser.SEQUENCE, 0)

        def NAME_P(self):
            return self.getToken(PostgreSQLParser.NAME_P, 0)

        def START(self):
            return self.getToken(PostgreSQLParser.START, 0)

        def with_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_Context,0)


        def RESTART(self):
            return self.getToken(PostgreSQLParser.RESTART, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_seqoptelem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeqoptelem" ):
                listener.enterSeqoptelem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeqoptelem" ):
                listener.exitSeqoptelem(self)




    def seqoptelem(self):

        localctx = PostgreSQLParser.SeqoptelemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_seqoptelem)
        self._la = 0 # Token type
        try:
            self.state = 3277
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [74]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3243
                self.match(PostgreSQLParser.AS)
                self.state = 3244
                self.simpletypename()
                pass
            elif token in [186]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3245
                self.match(PostgreSQLParser.CACHE)
                self.state = 3246
                self.numericonly()
                pass
            elif token in [211]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3247
                self.match(PostgreSQLParser.CYCLE)
                pass
            elif token in [263]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3248
                self.match(PostgreSQLParser.INCREMENT)
                self.state = 3250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==185:
                    self.state = 3249
                    self.by_()


                self.state = 3252
                self.numericonly()
                pass
            elif token in [290]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3253
                self.match(PostgreSQLParser.MAXVALUE)
                self.state = 3254
                self.numericonly()
                pass
            elif token in [293]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3255
                self.match(PostgreSQLParser.MINVALUE)
                self.state = 3256
                self.numericonly()
                pass
            elif token in [300]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3257
                self.match(PostgreSQLParser.NO)
                self.state = 3258
                _la = self._input.LA(1)
                if not(_la==211 or _la==290 or _la==293):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [312]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3259
                self.match(PostgreSQLParser.OWNED)
                self.state = 3260
                self.match(PostgreSQLParser.BY)
                self.state = 3261
                self.any_name()
                pass
            elif token in [359]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3262
                self.match(PostgreSQLParser.SEQUENCE)
                self.state = 3263
                self.match(PostgreSQLParser.NAME_P)
                self.state = 3264
                self.any_name()
                pass
            elif token in [371]:
                self.enterOuterAlt(localctx, 10)
                self.state = 3265
                self.match(PostgreSQLParser.START)
                self.state = 3267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143:
                    self.state = 3266
                    self.with_()


                self.state = 3269
                self.numericonly()
                pass
            elif token in [345]:
                self.enterOuterAlt(localctx, 11)
                self.state = 3270
                self.match(PostgreSQLParser.RESTART)
                self.state = 3272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143:
                    self.state = 3271
                    self.with_()


                self.state = 3275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12 or _la==13 or ((((_la - 576)) & ~0x3f) == 0 and ((1 << (_la - 576)) & 47) != 0):
                    self.state = 3274
                    self.numericonly()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class By_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_by_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBy_" ):
                listener.enterBy_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBy_" ):
                listener.exitBy_(self)




    def by_(self):

        localctx = PostgreSQLParser.By_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_by_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3279
            self.match(PostgreSQLParser.BY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericonlyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.FconstContext,0)


        def PLUS(self):
            return self.getToken(PostgreSQLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(PostgreSQLParser.MINUS, 0)

        def signediconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SignediconstContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_numericonly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericonly" ):
                listener.enterNumericonly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericonly" ):
                listener.exitNumericonly(self)




    def numericonly(self):

        localctx = PostgreSQLParser.NumericonlyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_numericonly)
        try:
            self.state = 3287
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3281
                self.fconst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3282
                self.match(PostgreSQLParser.PLUS)
                self.state = 3283
                self.fconst()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3284
                self.match(PostgreSQLParser.MINUS)
                self.state = 3285
                self.fconst()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3286
                self.signediconst()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numericonly_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericonly(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.NumericonlyContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.NumericonlyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_numericonly_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericonly_list" ):
                listener.enterNumericonly_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericonly_list" ):
                listener.exitNumericonly_list(self)




    def numericonly_list(self):

        localctx = PostgreSQLParser.Numericonly_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_numericonly_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3289
            self.numericonly()
            self.state = 3294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 3290
                self.match(PostgreSQLParser.COMMA)
                self.state = 3291
                self.numericonly()
                self.state = 3296
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateplangstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def LANGUAGE(self):
            return self.getToken(PostgreSQLParser.LANGUAGE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def or_replace_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Or_replace_Context,0)


        def trusted_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Trusted_Context,0)


        def procedural_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Procedural_Context,0)


        def HANDLER(self):
            return self.getToken(PostgreSQLParser.HANDLER, 0)

        def handler_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Handler_nameContext,0)


        def inline_handler_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Inline_handler_Context,0)


        def validator_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Validator_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createplangstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateplangstmt" ):
                listener.enterCreateplangstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateplangstmt" ):
                listener.exitCreateplangstmt(self)




    def createplangstmt(self):

        localctx = PostgreSQLParser.CreateplangstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_createplangstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3297
            self.match(PostgreSQLParser.CREATE)
            self.state = 3299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 3298
                self.or_replace_()


            self.state = 3302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==390:
                self.state = 3301
                self.trusted_()


            self.state = 3305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==326:
                self.state = 3304
                self.procedural_()


            self.state = 3307
            self.match(PostgreSQLParser.LANGUAGE)
            self.state = 3308
            self.name()
            self.state = 3317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==253:
                self.state = 3309
                self.match(PostgreSQLParser.HANDLER)
                self.state = 3310
                self.handler_name()
                self.state = 3312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268:
                    self.state = 3311
                    self.inline_handler_()


                self.state = 3315
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==300 or _la==404:
                    self.state = 3314
                    self.validator_()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trusted_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUSTED(self):
            return self.getToken(PostgreSQLParser.TRUSTED, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_trusted_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrusted_" ):
                listener.enterTrusted_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrusted_" ):
                listener.exitTrusted_(self)




    def trusted_(self):

        localctx = PostgreSQLParser.Trusted_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_trusted_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3319
            self.match(PostgreSQLParser.TRUSTED)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Handler_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def attrs(self):
            return self.getTypedRuleContext(PostgreSQLParser.AttrsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_handler_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandler_name" ):
                listener.enterHandler_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandler_name" ):
                listener.exitHandler_name(self)




    def handler_name(self):

        localctx = PostgreSQLParser.Handler_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_handler_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3321
            self.name()
            self.state = 3323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 3322
                self.attrs()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inline_handler_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INLINE_P(self):
            return self.getToken(PostgreSQLParser.INLINE_P, 0)

        def handler_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Handler_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_inline_handler_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInline_handler_" ):
                listener.enterInline_handler_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInline_handler_" ):
                listener.exitInline_handler_(self)




    def inline_handler_(self):

        localctx = PostgreSQLParser.Inline_handler_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_inline_handler_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3325
            self.match(PostgreSQLParser.INLINE_P)
            self.state = 3326
            self.handler_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Validator_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALIDATOR(self):
            return self.getToken(PostgreSQLParser.VALIDATOR, 0)

        def handler_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Handler_nameContext,0)


        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_validator_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValidator_clause" ):
                listener.enterValidator_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValidator_clause" ):
                listener.exitValidator_clause(self)




    def validator_clause(self):

        localctx = PostgreSQLParser.Validator_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_validator_clause)
        try:
            self.state = 3332
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [404]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3328
                self.match(PostgreSQLParser.VALIDATOR)
                self.state = 3329
                self.handler_name()
                pass
            elif token in [300]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3330
                self.match(PostgreSQLParser.NO)
                self.state = 3331
                self.match(PostgreSQLParser.VALIDATOR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Validator_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def validator_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Validator_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_validator_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValidator_" ):
                listener.enterValidator_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValidator_" ):
                listener.exitValidator_(self)




    def validator_(self):

        localctx = PostgreSQLParser.Validator_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_validator_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3334
            self.validator_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedural_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURAL(self):
            return self.getToken(PostgreSQLParser.PROCEDURAL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_procedural_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedural_" ):
                listener.enterProcedural_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedural_" ):
                listener.exitProcedural_(self)




    def procedural_(self):

        localctx = PostgreSQLParser.Procedural_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_procedural_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3336
            self.match(PostgreSQLParser.PROCEDURAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatetablespacestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def TABLESPACE(self):
            return self.getToken(PostgreSQLParser.TABLESPACE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def LOCATION(self):
            return self.getToken(PostgreSQLParser.LOCATION, 0)

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def opttablespaceowner(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttablespaceownerContext,0)


        def reloptions_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Reloptions_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createtablespacestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatetablespacestmt" ):
                listener.enterCreatetablespacestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatetablespacestmt" ):
                listener.exitCreatetablespacestmt(self)




    def createtablespacestmt(self):

        localctx = PostgreSQLParser.CreatetablespacestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_createtablespacestmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3338
            self.match(PostgreSQLParser.CREATE)
            self.state = 3339
            self.match(PostgreSQLParser.TABLESPACE)
            self.state = 3340
            self.name()
            self.state = 3342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==313:
                self.state = 3341
                self.opttablespaceowner()


            self.state = 3344
            self.match(PostgreSQLParser.LOCATION)
            self.state = 3345
            self.sconst()
            self.state = 3347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 3346
                self.reloptions_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpttablespaceownerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OWNER(self):
            return self.getToken(PostgreSQLParser.OWNER, 0)

        def rolespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.RolespecContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_opttablespaceowner

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpttablespaceowner" ):
                listener.enterOpttablespaceowner(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpttablespaceowner" ):
                listener.exitOpttablespaceowner(self)




    def opttablespaceowner(self):

        localctx = PostgreSQLParser.OpttablespaceownerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_opttablespaceowner)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3349
            self.match(PostgreSQLParser.OWNER)
            self.state = 3350
            self.rolespec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DroptablespacestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def TABLESPACE(self):
            return self.getToken(PostgreSQLParser.TABLESPACE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_droptablespacestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDroptablespacestmt" ):
                listener.enterDroptablespacestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDroptablespacestmt" ):
                listener.exitDroptablespacestmt(self)




    def droptablespacestmt(self):

        localctx = PostgreSQLParser.DroptablespacestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_droptablespacestmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3352
            self.match(PostgreSQLParser.DROP)
            self.state = 3353
            self.match(PostgreSQLParser.TABLESPACE)
            self.state = 3356
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
            if la_ == 1:
                self.state = 3354
                self.match(PostgreSQLParser.IF_P)
                self.state = 3355
                self.match(PostgreSQLParser.EXISTS)


            self.state = 3358
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateextensionstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def EXTENSION(self):
            return self.getToken(PostgreSQLParser.EXTENSION, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def create_extension_opt_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Create_extension_opt_listContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def with_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createextensionstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateextensionstmt" ):
                listener.enterCreateextensionstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateextensionstmt" ):
                listener.exitCreateextensionstmt(self)




    def createextensionstmt(self):

        localctx = PostgreSQLParser.CreateextensionstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_createextensionstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3360
            self.match(PostgreSQLParser.CREATE)
            self.state = 3361
            self.match(PostgreSQLParser.EXTENSION)
            self.state = 3365
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
            if la_ == 1:
                self.state = 3362
                self.match(PostgreSQLParser.IF_P)
                self.state = 3363
                self.match(PostgreSQLParser.NOT)
                self.state = 3364
                self.match(PostgreSQLParser.EXISTS)


            self.state = 3367
            self.name()
            self.state = 3369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 3368
                self.with_()


            self.state = 3371
            self.create_extension_opt_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_extension_opt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_extension_opt_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Create_extension_opt_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Create_extension_opt_itemContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_create_extension_opt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_extension_opt_list" ):
                listener.enterCreate_extension_opt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_extension_opt_list" ):
                listener.exitCreate_extension_opt_list(self)




    def create_extension_opt_list(self):

        localctx = PostgreSQLParser.Create_extension_opt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_create_extension_opt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==102 or _la==188 or _la==354 or _la==406:
                self.state = 3373
                self.create_extension_opt_item()
                self.state = 3378
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_extension_opt_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCHEMA(self):
            return self.getToken(PostgreSQLParser.SCHEMA, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def VERSION_P(self):
            return self.getToken(PostgreSQLParser.VERSION_P, 0)

        def nonreservedword_or_sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.Nonreservedword_or_sconstContext,0)


        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def CASCADE(self):
            return self.getToken(PostgreSQLParser.CASCADE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_create_extension_opt_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_extension_opt_item" ):
                listener.enterCreate_extension_opt_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_extension_opt_item" ):
                listener.exitCreate_extension_opt_item(self)




    def create_extension_opt_item(self):

        localctx = PostgreSQLParser.Create_extension_opt_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_create_extension_opt_item)
        try:
            self.state = 3386
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [354]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3379
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 3380
                self.name()
                pass
            elif token in [406]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3381
                self.match(PostgreSQLParser.VERSION_P)
                self.state = 3382
                self.nonreservedword_or_sconst()
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3383
                self.match(PostgreSQLParser.FROM)
                self.state = 3384
                self.nonreservedword_or_sconst()
                pass
            elif token in [188]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3385
                self.match(PostgreSQLParser.CASCADE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterextensionstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def EXTENSION(self):
            return self.getToken(PostgreSQLParser.EXTENSION, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def UPDATE(self):
            return self.getToken(PostgreSQLParser.UPDATE, 0)

        def alter_extension_opt_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Alter_extension_opt_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterextensionstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterextensionstmt" ):
                listener.enterAlterextensionstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterextensionstmt" ):
                listener.exitAlterextensionstmt(self)




    def alterextensionstmt(self):

        localctx = PostgreSQLParser.AlterextensionstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_alterextensionstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3388
            self.match(PostgreSQLParser.ALTER)
            self.state = 3389
            self.match(PostgreSQLParser.EXTENSION)
            self.state = 3390
            self.name()
            self.state = 3391
            self.match(PostgreSQLParser.UPDATE)
            self.state = 3392
            self.alter_extension_opt_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_extension_opt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_extension_opt_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Alter_extension_opt_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Alter_extension_opt_itemContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alter_extension_opt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_extension_opt_list" ):
                listener.enterAlter_extension_opt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_extension_opt_list" ):
                listener.exitAlter_extension_opt_list(self)




    def alter_extension_opt_list(self):

        localctx = PostgreSQLParser.Alter_extension_opt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_alter_extension_opt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 3394
                self.alter_extension_opt_item()
                self.state = 3399
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_extension_opt_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def nonreservedword_or_sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.Nonreservedword_or_sconstContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alter_extension_opt_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_extension_opt_item" ):
                listener.enterAlter_extension_opt_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_extension_opt_item" ):
                listener.exitAlter_extension_opt_item(self)




    def alter_extension_opt_item(self):

        localctx = PostgreSQLParser.Alter_extension_opt_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_alter_extension_opt_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3400
            self.match(PostgreSQLParser.TO)
            self.state = 3401
            self.nonreservedword_or_sconst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterextensioncontentsstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def EXTENSION(self):
            return self.getToken(PostgreSQLParser.EXTENSION, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.NameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.NameContext,i)


        def add_drop(self):
            return self.getTypedRuleContext(PostgreSQLParser.Add_dropContext,0)


        def object_type_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Object_type_nameContext,0)


        def object_type_any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Object_type_any_nameContext,0)


        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def AGGREGATE(self):
            return self.getToken(PostgreSQLParser.AGGREGATE, 0)

        def aggregate_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Aggregate_with_argtypesContext,0)


        def CAST(self):
            return self.getToken(PostgreSQLParser.CAST, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def typename(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TypenameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,i)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def DOMAIN_P(self):
            return self.getToken(PostgreSQLParser.DOMAIN_P, 0)

        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_with_argtypesContext,0)


        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def operator_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Operator_with_argtypesContext,0)


        def CLASS(self):
            return self.getToken(PostgreSQLParser.CLASS, 0)

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def FAMILY(self):
            return self.getToken(PostgreSQLParser.FAMILY, 0)

        def PROCEDURE(self):
            return self.getToken(PostgreSQLParser.PROCEDURE, 0)

        def ROUTINE(self):
            return self.getToken(PostgreSQLParser.ROUTINE, 0)

        def TRANSFORM(self):
            return self.getToken(PostgreSQLParser.TRANSFORM, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def LANGUAGE(self):
            return self.getToken(PostgreSQLParser.LANGUAGE, 0)

        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterextensioncontentsstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterextensioncontentsstmt" ):
                listener.enterAlterextensioncontentsstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterextensioncontentsstmt" ):
                listener.exitAlterextensioncontentsstmt(self)




    def alterextensioncontentsstmt(self):

        localctx = PostgreSQLParser.AlterextensioncontentsstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_alterextensioncontentsstmt)
        try:
            self.state = 3507
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3403
                self.match(PostgreSQLParser.ALTER)
                self.state = 3404
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 3405
                self.name()
                self.state = 3406
                self.add_drop()
                self.state = 3407
                self.object_type_name()
                self.state = 3408
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3410
                self.match(PostgreSQLParser.ALTER)
                self.state = 3411
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 3412
                self.name()
                self.state = 3413
                self.add_drop()
                self.state = 3414
                self.object_type_any_name()
                self.state = 3415
                self.any_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3417
                self.match(PostgreSQLParser.ALTER)
                self.state = 3418
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 3419
                self.name()
                self.state = 3420
                self.add_drop()
                self.state = 3421
                self.match(PostgreSQLParser.AGGREGATE)
                self.state = 3422
                self.aggregate_with_argtypes()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3424
                self.match(PostgreSQLParser.ALTER)
                self.state = 3425
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 3426
                self.name()
                self.state = 3427
                self.add_drop()
                self.state = 3428
                self.match(PostgreSQLParser.CAST)
                self.state = 3429
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 3430
                self.typename()
                self.state = 3431
                self.match(PostgreSQLParser.AS)
                self.state = 3432
                self.typename()
                self.state = 3433
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3435
                self.match(PostgreSQLParser.ALTER)
                self.state = 3436
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 3437
                self.name()
                self.state = 3438
                self.add_drop()
                self.state = 3439
                self.match(PostgreSQLParser.DOMAIN_P)
                self.state = 3440
                self.typename()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3442
                self.match(PostgreSQLParser.ALTER)
                self.state = 3443
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 3444
                self.name()
                self.state = 3445
                self.add_drop()
                self.state = 3446
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 3447
                self.function_with_argtypes()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3449
                self.match(PostgreSQLParser.ALTER)
                self.state = 3450
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 3451
                self.name()
                self.state = 3452
                self.add_drop()
                self.state = 3453
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 3454
                self.operator_with_argtypes()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3456
                self.match(PostgreSQLParser.ALTER)
                self.state = 3457
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 3458
                self.name()
                self.state = 3459
                self.add_drop()
                self.state = 3460
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 3461
                self.match(PostgreSQLParser.CLASS)
                self.state = 3462
                self.any_name()
                self.state = 3463
                self.match(PostgreSQLParser.USING)
                self.state = 3464
                self.name()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3466
                self.match(PostgreSQLParser.ALTER)
                self.state = 3467
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 3468
                self.name()
                self.state = 3469
                self.add_drop()
                self.state = 3470
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 3471
                self.match(PostgreSQLParser.FAMILY)
                self.state = 3472
                self.any_name()
                self.state = 3473
                self.match(PostgreSQLParser.USING)
                self.state = 3474
                self.name()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3476
                self.match(PostgreSQLParser.ALTER)
                self.state = 3477
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 3478
                self.name()
                self.state = 3479
                self.add_drop()
                self.state = 3480
                self.match(PostgreSQLParser.PROCEDURE)
                self.state = 3481
                self.function_with_argtypes()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3483
                self.match(PostgreSQLParser.ALTER)
                self.state = 3484
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 3485
                self.name()
                self.state = 3486
                self.add_drop()
                self.state = 3487
                self.match(PostgreSQLParser.ROUTINE)
                self.state = 3488
                self.function_with_argtypes()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3490
                self.match(PostgreSQLParser.ALTER)
                self.state = 3491
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 3492
                self.name()
                self.state = 3493
                self.add_drop()
                self.state = 3494
                self.match(PostgreSQLParser.TRANSFORM)
                self.state = 3495
                self.match(PostgreSQLParser.FOR)
                self.state = 3496
                self.typename()
                self.state = 3497
                self.match(PostgreSQLParser.LANGUAGE)
                self.state = 3498
                self.name()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 3500
                self.match(PostgreSQLParser.ALTER)
                self.state = 3501
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 3502
                self.name()
                self.state = 3503
                self.add_drop()
                self.state = 3504
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 3505
                self.typename()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatefdwstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def FOREIGN(self):
            return self.getToken(PostgreSQLParser.FOREIGN, 0)

        def DATA_P(self):
            return self.getToken(PostgreSQLParser.DATA_P, 0)

        def WRAPPER(self):
            return self.getToken(PostgreSQLParser.WRAPPER, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def fdw_options_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Fdw_options_Context,0)


        def create_generic_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Create_generic_optionsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createfdwstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatefdwstmt" ):
                listener.enterCreatefdwstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatefdwstmt" ):
                listener.exitCreatefdwstmt(self)




    def createfdwstmt(self):

        localctx = PostgreSQLParser.CreatefdwstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_createfdwstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3509
            self.match(PostgreSQLParser.CREATE)
            self.state = 3510
            self.match(PostgreSQLParser.FOREIGN)
            self.state = 3511
            self.match(PostgreSQLParser.DATA_P)
            self.state = 3512
            self.match(PostgreSQLParser.WRAPPER)
            self.state = 3513
            self.name()
            self.state = 3515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==253 or _la==300 or _la==404:
                self.state = 3514
                self.fdw_options_()


            self.state = 3518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==311:
                self.state = 3517
                self.create_generic_options()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fdw_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HANDLER(self):
            return self.getToken(PostgreSQLParser.HANDLER, 0)

        def handler_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Handler_nameContext,0)


        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def VALIDATOR(self):
            return self.getToken(PostgreSQLParser.VALIDATOR, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_fdw_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFdw_option" ):
                listener.enterFdw_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFdw_option" ):
                listener.exitFdw_option(self)




    def fdw_option(self):

        localctx = PostgreSQLParser.Fdw_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_fdw_option)
        try:
            self.state = 3528
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3520
                self.match(PostgreSQLParser.HANDLER)
                self.state = 3521
                self.handler_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3522
                self.match(PostgreSQLParser.NO)
                self.state = 3523
                self.match(PostgreSQLParser.HANDLER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3524
                self.match(PostgreSQLParser.VALIDATOR)
                self.state = 3525
                self.handler_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3526
                self.match(PostgreSQLParser.NO)
                self.state = 3527
                self.match(PostgreSQLParser.VALIDATOR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fdw_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fdw_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Fdw_optionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Fdw_optionContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_fdw_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFdw_options" ):
                listener.enterFdw_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFdw_options" ):
                listener.exitFdw_options(self)




    def fdw_options(self):

        localctx = PostgreSQLParser.Fdw_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_fdw_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3531 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3530
                self.fdw_option()
                self.state = 3533 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==253 or _la==300 or _la==404):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fdw_options_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fdw_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Fdw_optionsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_fdw_options_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFdw_options_" ):
                listener.enterFdw_options_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFdw_options_" ):
                listener.exitFdw_options_(self)




    def fdw_options_(self):

        localctx = PostgreSQLParser.Fdw_options_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_fdw_options_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3535
            self.fdw_options()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterfdwstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def FOREIGN(self):
            return self.getToken(PostgreSQLParser.FOREIGN, 0)

        def DATA_P(self):
            return self.getToken(PostgreSQLParser.DATA_P, 0)

        def WRAPPER(self):
            return self.getToken(PostgreSQLParser.WRAPPER, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def alter_generic_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Alter_generic_optionsContext,0)


        def fdw_options_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Fdw_options_Context,0)


        def fdw_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Fdw_optionsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterfdwstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterfdwstmt" ):
                listener.enterAlterfdwstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterfdwstmt" ):
                listener.exitAlterfdwstmt(self)




    def alterfdwstmt(self):

        localctx = PostgreSQLParser.AlterfdwstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_alterfdwstmt)
        self._la = 0 # Token type
        try:
            self.state = 3554
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3537
                self.match(PostgreSQLParser.ALTER)
                self.state = 3538
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 3539
                self.match(PostgreSQLParser.DATA_P)
                self.state = 3540
                self.match(PostgreSQLParser.WRAPPER)
                self.state = 3541
                self.name()
                self.state = 3543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==253 or _la==300 or _la==404:
                    self.state = 3542
                    self.fdw_options_()


                self.state = 3545
                self.alter_generic_options()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3547
                self.match(PostgreSQLParser.ALTER)
                self.state = 3548
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 3549
                self.match(PostgreSQLParser.DATA_P)
                self.state = 3550
                self.match(PostgreSQLParser.WRAPPER)
                self.state = 3551
                self.name()
                self.state = 3552
                self.fdw_options()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_generic_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONS(self):
            return self.getToken(PostgreSQLParser.OPTIONS, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def generic_option_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Generic_option_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_create_generic_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_generic_options" ):
                listener.enterCreate_generic_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_generic_options" ):
                listener.exitCreate_generic_options(self)




    def create_generic_options(self):

        localctx = PostgreSQLParser.Create_generic_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_create_generic_options)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3556
            self.match(PostgreSQLParser.OPTIONS)
            self.state = 3557
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 3558
            self.generic_option_list()
            self.state = 3559
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_option_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generic_option_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Generic_option_elemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Generic_option_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_generic_option_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_option_list" ):
                listener.enterGeneric_option_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_option_list" ):
                listener.exitGeneric_option_list(self)




    def generic_option_list(self):

        localctx = PostgreSQLParser.Generic_option_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_generic_option_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3561
            self.generic_option_elem()
            self.state = 3566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 3562
                self.match(PostgreSQLParser.COMMA)
                self.state = 3563
                self.generic_option_elem()
                self.state = 3568
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_generic_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONS(self):
            return self.getToken(PostgreSQLParser.OPTIONS, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def alter_generic_option_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Alter_generic_option_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alter_generic_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_generic_options" ):
                listener.enterAlter_generic_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_generic_options" ):
                listener.exitAlter_generic_options(self)




    def alter_generic_options(self):

        localctx = PostgreSQLParser.Alter_generic_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_alter_generic_options)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3569
            self.match(PostgreSQLParser.OPTIONS)
            self.state = 3570
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 3571
            self.alter_generic_option_list()
            self.state = 3572
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_generic_option_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_generic_option_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Alter_generic_option_elemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Alter_generic_option_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alter_generic_option_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_generic_option_list" ):
                listener.enterAlter_generic_option_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_generic_option_list" ):
                listener.exitAlter_generic_option_list(self)




    def alter_generic_option_list(self):

        localctx = PostgreSQLParser.Alter_generic_option_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_alter_generic_option_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3574
            self.alter_generic_option_elem()
            self.state = 3579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 3575
                self.match(PostgreSQLParser.COMMA)
                self.state = 3576
                self.alter_generic_option_elem()
                self.state = 3581
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_generic_option_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generic_option_elem(self):
            return self.getTypedRuleContext(PostgreSQLParser.Generic_option_elemContext,0)


        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def ADD_P(self):
            return self.getToken(PostgreSQLParser.ADD_P, 0)

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def generic_option_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Generic_option_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alter_generic_option_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_generic_option_elem" ):
                listener.enterAlter_generic_option_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_generic_option_elem" ):
                listener.exitAlter_generic_option_elem(self)




    def alter_generic_option_elem(self):

        localctx = PostgreSQLParser.Alter_generic_option_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_alter_generic_option_elem)
        try:
            self.state = 3589
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3582
                self.generic_option_elem()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3583
                self.match(PostgreSQLParser.SET)
                self.state = 3584
                self.generic_option_elem()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3585
                self.match(PostgreSQLParser.ADD_P)
                self.state = 3586
                self.generic_option_elem()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3587
                self.match(PostgreSQLParser.DROP)
                self.state = 3588
                self.generic_option_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_option_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generic_option_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Generic_option_nameContext,0)


        def generic_option_arg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Generic_option_argContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_generic_option_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_option_elem" ):
                listener.enterGeneric_option_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_option_elem" ):
                listener.exitGeneric_option_elem(self)




    def generic_option_elem(self):

        localctx = PostgreSQLParser.Generic_option_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_generic_option_elem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3591
            self.generic_option_name()
            self.state = 3592
            self.generic_option_arg()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_option_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colLabel(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColLabelContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_generic_option_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_option_name" ):
                listener.enterGeneric_option_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_option_name" ):
                listener.exitGeneric_option_name(self)




    def generic_option_name(self):

        localctx = PostgreSQLParser.Generic_option_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_generic_option_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3594
            self.colLabel()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_option_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_generic_option_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_option_arg" ):
                listener.enterGeneric_option_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_option_arg" ):
                listener.exitGeneric_option_arg(self)




    def generic_option_arg(self):

        localctx = PostgreSQLParser.Generic_option_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_generic_option_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3596
            self.sconst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateforeignserverstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def SERVER(self):
            return self.getToken(PostgreSQLParser.SERVER, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.NameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.NameContext,i)


        def FOREIGN(self):
            return self.getToken(PostgreSQLParser.FOREIGN, 0)

        def DATA_P(self):
            return self.getToken(PostgreSQLParser.DATA_P, 0)

        def WRAPPER(self):
            return self.getToken(PostgreSQLParser.WRAPPER, 0)

        def type_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_Context,0)


        def foreign_server_version_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Foreign_server_version_Context,0)


        def create_generic_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Create_generic_optionsContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createforeignserverstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateforeignserverstmt" ):
                listener.enterCreateforeignserverstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateforeignserverstmt" ):
                listener.exitCreateforeignserverstmt(self)




    def createforeignserverstmt(self):

        localctx = PostgreSQLParser.CreateforeignserverstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_createforeignserverstmt)
        self._la = 0 # Token type
        try:
            self.state = 3633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3598
                self.match(PostgreSQLParser.CREATE)
                self.state = 3599
                self.match(PostgreSQLParser.SERVER)
                self.state = 3600
                self.name()
                self.state = 3602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==391:
                    self.state = 3601
                    self.type_()


                self.state = 3605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==406:
                    self.state = 3604
                    self.foreign_server_version_()


                self.state = 3607
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 3608
                self.match(PostgreSQLParser.DATA_P)
                self.state = 3609
                self.match(PostgreSQLParser.WRAPPER)
                self.state = 3610
                self.name()
                self.state = 3612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==311:
                    self.state = 3611
                    self.create_generic_options()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3614
                self.match(PostgreSQLParser.CREATE)
                self.state = 3615
                self.match(PostgreSQLParser.SERVER)
                self.state = 3616
                self.match(PostgreSQLParser.IF_P)
                self.state = 3617
                self.match(PostgreSQLParser.NOT)
                self.state = 3618
                self.match(PostgreSQLParser.EXISTS)
                self.state = 3619
                self.name()
                self.state = 3621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==391:
                    self.state = 3620
                    self.type_()


                self.state = 3624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==406:
                    self.state = 3623
                    self.foreign_server_version_()


                self.state = 3626
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 3627
                self.match(PostgreSQLParser.DATA_P)
                self.state = 3628
                self.match(PostgreSQLParser.WRAPPER)
                self.state = 3629
                self.name()
                self.state = 3631
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==311:
                    self.state = 3630
                    self.create_generic_options()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_type_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_" ):
                listener.enterType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_" ):
                listener.exitType_(self)




    def type_(self):

        localctx = PostgreSQLParser.Type_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_type_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3635
            self.match(PostgreSQLParser.TYPE_P)
            self.state = 3636
            self.sconst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_server_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSION_P(self):
            return self.getToken(PostgreSQLParser.VERSION_P, 0)

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def NULL_P(self):
            return self.getToken(PostgreSQLParser.NULL_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_foreign_server_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_server_version" ):
                listener.enterForeign_server_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_server_version" ):
                listener.exitForeign_server_version(self)




    def foreign_server_version(self):

        localctx = PostgreSQLParser.Foreign_server_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_foreign_server_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3638
            self.match(PostgreSQLParser.VERSION_P)
            self.state = 3641
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [563, 565, 567, 590]:
                self.state = 3639
                self.sconst()
                pass
            elif token in [116]:
                self.state = 3640
                self.match(PostgreSQLParser.NULL_P)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_server_version_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def foreign_server_version(self):
            return self.getTypedRuleContext(PostgreSQLParser.Foreign_server_versionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_foreign_server_version_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_server_version_" ):
                listener.enterForeign_server_version_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_server_version_" ):
                listener.exitForeign_server_version_(self)




    def foreign_server_version_(self):

        localctx = PostgreSQLParser.Foreign_server_version_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_foreign_server_version_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3643
            self.foreign_server_version()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterforeignserverstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def SERVER(self):
            return self.getToken(PostgreSQLParser.SERVER, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def alter_generic_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Alter_generic_optionsContext,0)


        def foreign_server_version(self):
            return self.getTypedRuleContext(PostgreSQLParser.Foreign_server_versionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterforeignserverstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterforeignserverstmt" ):
                listener.enterAlterforeignserverstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterforeignserverstmt" ):
                listener.exitAlterforeignserverstmt(self)




    def alterforeignserverstmt(self):

        localctx = PostgreSQLParser.AlterforeignserverstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_alterforeignserverstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3645
            self.match(PostgreSQLParser.ALTER)
            self.state = 3646
            self.match(PostgreSQLParser.SERVER)
            self.state = 3647
            self.name()
            self.state = 3653
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [311]:
                self.state = 3648
                self.alter_generic_options()
                pass
            elif token in [406]:
                self.state = 3649
                self.foreign_server_version()
                self.state = 3651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==311:
                    self.state = 3650
                    self.alter_generic_options()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateforeigntablestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def FOREIGN(self):
            return self.getToken(PostgreSQLParser.FOREIGN, 0)

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def qualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Qualified_nameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,i)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def SERVER(self):
            return self.getToken(PostgreSQLParser.SERVER, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def opttableelementlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttableelementlistContext,0)


        def optinherit(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptinheritContext,0)


        def create_generic_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Create_generic_optionsContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def PARTITION(self):
            return self.getToken(PostgreSQLParser.PARTITION, 0)

        def OF(self):
            return self.getToken(PostgreSQLParser.OF, 0)

        def partitionboundspec(self):
            return self.getTypedRuleContext(PostgreSQLParser.PartitionboundspecContext,0)


        def opttypedtableelementlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttypedtableelementlistContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createforeigntablestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateforeigntablestmt" ):
                listener.enterCreateforeigntablestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateforeigntablestmt" ):
                listener.exitCreateforeigntablestmt(self)




    def createforeigntablestmt(self):

        localctx = PostgreSQLParser.CreateforeigntablestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_createforeigntablestmt)
        self._la = 0 # Token type
        try:
            self.state = 3727
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3655
                self.match(PostgreSQLParser.CREATE)
                self.state = 3656
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 3657
                self.match(PostgreSQLParser.TABLE)
                self.state = 3658
                self.qualified_name()
                self.state = 3659
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 3661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4399120252928) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 576460889742966791) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & -2076180479) != 0) or ((((_la - 200)) & ~0x3f) == 0 and ((1 << (_la - 200)) & -1) != 0) or ((((_la - 264)) & ~0x3f) == 0 and ((1 << (_la - 264)) & -1) != 0) or ((((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & -33) != 0) or ((((_la - 392)) & ~0x3f) == 0 and ((1 << (_la - 392)) & -1) != 0) or ((((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & -4644337652596737) != 0) or ((((_la - 527)) & ~0x3f) == 0 and ((1 << (_la - 527)) & 36028801783726085) != 0):
                    self.state = 3660
                    self.opttableelementlist()


                self.state = 3663
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 3665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==267:
                    self.state = 3664
                    self.optinherit()


                self.state = 3667
                self.match(PostgreSQLParser.SERVER)
                self.state = 3668
                self.name()
                self.state = 3670
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==311:
                    self.state = 3669
                    self.create_generic_options()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3672
                self.match(PostgreSQLParser.CREATE)
                self.state = 3673
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 3674
                self.match(PostgreSQLParser.TABLE)
                self.state = 3675
                self.match(PostgreSQLParser.IF_P)
                self.state = 3676
                self.match(PostgreSQLParser.NOT)
                self.state = 3677
                self.match(PostgreSQLParser.EXISTS)
                self.state = 3678
                self.qualified_name()
                self.state = 3679
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 3681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4399120252928) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 576460889742966791) != 0) or ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & -2076180479) != 0) or ((((_la - 200)) & ~0x3f) == 0 and ((1 << (_la - 200)) & -1) != 0) or ((((_la - 264)) & ~0x3f) == 0 and ((1 << (_la - 264)) & -1) != 0) or ((((_la - 328)) & ~0x3f) == 0 and ((1 << (_la - 328)) & -33) != 0) or ((((_la - 392)) & ~0x3f) == 0 and ((1 << (_la - 392)) & -1) != 0) or ((((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & -4644337652596737) != 0) or ((((_la - 527)) & ~0x3f) == 0 and ((1 << (_la - 527)) & 36028801783726085) != 0):
                    self.state = 3680
                    self.opttableelementlist()


                self.state = 3683
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 3685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==267:
                    self.state = 3684
                    self.optinherit()


                self.state = 3687
                self.match(PostgreSQLParser.SERVER)
                self.state = 3688
                self.name()
                self.state = 3690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==311:
                    self.state = 3689
                    self.create_generic_options()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3692
                self.match(PostgreSQLParser.CREATE)
                self.state = 3693
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 3694
                self.match(PostgreSQLParser.TABLE)
                self.state = 3695
                self.qualified_name()
                self.state = 3696
                self.match(PostgreSQLParser.PARTITION)
                self.state = 3697
                self.match(PostgreSQLParser.OF)
                self.state = 3698
                self.qualified_name()
                self.state = 3700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 3699
                    self.opttypedtableelementlist()


                self.state = 3702
                self.partitionboundspec()
                self.state = 3703
                self.match(PostgreSQLParser.SERVER)
                self.state = 3704
                self.name()
                self.state = 3706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==311:
                    self.state = 3705
                    self.create_generic_options()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3708
                self.match(PostgreSQLParser.CREATE)
                self.state = 3709
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 3710
                self.match(PostgreSQLParser.TABLE)
                self.state = 3711
                self.match(PostgreSQLParser.IF_P)
                self.state = 3712
                self.match(PostgreSQLParser.NOT)
                self.state = 3713
                self.match(PostgreSQLParser.EXISTS)
                self.state = 3714
                self.qualified_name()
                self.state = 3715
                self.match(PostgreSQLParser.PARTITION)
                self.state = 3716
                self.match(PostgreSQLParser.OF)
                self.state = 3717
                self.qualified_name()
                self.state = 3719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 3718
                    self.opttypedtableelementlist()


                self.state = 3721
                self.partitionboundspec()
                self.state = 3722
                self.match(PostgreSQLParser.SERVER)
                self.state = 3723
                self.name()
                self.state = 3725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==311:
                    self.state = 3724
                    self.create_generic_options()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportforeignschemastmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT_P(self):
            return self.getToken(PostgreSQLParser.IMPORT_P, 0)

        def FOREIGN(self):
            return self.getToken(PostgreSQLParser.FOREIGN, 0)

        def SCHEMA(self):
            return self.getToken(PostgreSQLParser.SCHEMA, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.NameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.NameContext,i)


        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def SERVER(self):
            return self.getToken(PostgreSQLParser.SERVER, 0)

        def INTO(self):
            return self.getToken(PostgreSQLParser.INTO, 0)

        def import_qualification(self):
            return self.getTypedRuleContext(PostgreSQLParser.Import_qualificationContext,0)


        def create_generic_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Create_generic_optionsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_importforeignschemastmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportforeignschemastmt" ):
                listener.enterImportforeignschemastmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportforeignschemastmt" ):
                listener.exitImportforeignschemastmt(self)




    def importforeignschemastmt(self):

        localctx = PostgreSQLParser.ImportforeignschemastmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_importforeignschemastmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3729
            self.match(PostgreSQLParser.IMPORT_P)
            self.state = 3730
            self.match(PostgreSQLParser.FOREIGN)
            self.state = 3731
            self.match(PostgreSQLParser.SCHEMA)
            self.state = 3732
            self.name()
            self.state = 3734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97 or _la==112:
                self.state = 3733
                self.import_qualification()


            self.state = 3736
            self.match(PostgreSQLParser.FROM)
            self.state = 3737
            self.match(PostgreSQLParser.SERVER)
            self.state = 3738
            self.name()
            self.state = 3739
            self.match(PostgreSQLParser.INTO)
            self.state = 3740
            self.name()
            self.state = 3742
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==311:
                self.state = 3741
                self.create_generic_options()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_qualification_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(PostgreSQLParser.LIMIT, 0)

        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def EXCEPT(self):
            return self.getToken(PostgreSQLParser.EXCEPT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_import_qualification_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_qualification_type" ):
                listener.enterImport_qualification_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_qualification_type" ):
                listener.exitImport_qualification_type(self)




    def import_qualification_type(self):

        localctx = PostgreSQLParser.Import_qualification_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_import_qualification_type)
        try:
            self.state = 3747
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [112]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3744
                self.match(PostgreSQLParser.LIMIT)
                self.state = 3745
                self.match(PostgreSQLParser.TO)
                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3746
                self.match(PostgreSQLParser.EXCEPT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_qualificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_qualification_type(self):
            return self.getTypedRuleContext(PostgreSQLParser.Import_qualification_typeContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def relation_expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relation_expr_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_import_qualification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_qualification" ):
                listener.enterImport_qualification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_qualification" ):
                listener.exitImport_qualification(self)




    def import_qualification(self):

        localctx = PostgreSQLParser.Import_qualificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_import_qualification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3749
            self.import_qualification_type()
            self.state = 3750
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 3751
            self.relation_expr_list()
            self.state = 3752
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateusermappingstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def MAPPING(self):
            return self.getToken(PostgreSQLParser.MAPPING, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def auth_ident(self):
            return self.getTypedRuleContext(PostgreSQLParser.Auth_identContext,0)


        def SERVER(self):
            return self.getToken(PostgreSQLParser.SERVER, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def create_generic_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Create_generic_optionsContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createusermappingstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateusermappingstmt" ):
                listener.enterCreateusermappingstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateusermappingstmt" ):
                listener.exitCreateusermappingstmt(self)




    def createusermappingstmt(self):

        localctx = PostgreSQLParser.CreateusermappingstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_createusermappingstmt)
        self._la = 0 # Token type
        try:
            self.state = 3777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3754
                self.match(PostgreSQLParser.CREATE)
                self.state = 3755
                self.match(PostgreSQLParser.USER)
                self.state = 3756
                self.match(PostgreSQLParser.MAPPING)
                self.state = 3757
                self.match(PostgreSQLParser.FOR)
                self.state = 3758
                self.auth_ident()
                self.state = 3759
                self.match(PostgreSQLParser.SERVER)
                self.state = 3760
                self.name()
                self.state = 3762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==311:
                    self.state = 3761
                    self.create_generic_options()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3764
                self.match(PostgreSQLParser.CREATE)
                self.state = 3765
                self.match(PostgreSQLParser.USER)
                self.state = 3766
                self.match(PostgreSQLParser.MAPPING)
                self.state = 3767
                self.match(PostgreSQLParser.IF_P)
                self.state = 3768
                self.match(PostgreSQLParser.NOT)
                self.state = 3769
                self.match(PostgreSQLParser.EXISTS)
                self.state = 3770
                self.match(PostgreSQLParser.FOR)
                self.state = 3771
                self.auth_ident()
                self.state = 3772
                self.match(PostgreSQLParser.SERVER)
                self.state = 3773
                self.name()
                self.state = 3775
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==311:
                    self.state = 3774
                    self.create_generic_options()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Auth_identContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rolespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.RolespecContext,0)


        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_auth_ident

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuth_ident" ):
                listener.enterAuth_ident(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuth_ident" ):
                listener.exitAuth_ident(self)




    def auth_ident(self):

        localctx = PostgreSQLParser.Auth_identContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_auth_ident)
        try:
            self.state = 3781
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 90, 127, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 582]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3779
                self.rolespec()
                pass
            elif token in [137]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3780
                self.match(PostgreSQLParser.USER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropusermappingstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def MAPPING(self):
            return self.getToken(PostgreSQLParser.MAPPING, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def auth_ident(self):
            return self.getTypedRuleContext(PostgreSQLParser.Auth_identContext,0)


        def SERVER(self):
            return self.getToken(PostgreSQLParser.SERVER, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_dropusermappingstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropusermappingstmt" ):
                listener.enterDropusermappingstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropusermappingstmt" ):
                listener.exitDropusermappingstmt(self)




    def dropusermappingstmt(self):

        localctx = PostgreSQLParser.DropusermappingstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_dropusermappingstmt)
        try:
            self.state = 3801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3783
                self.match(PostgreSQLParser.DROP)
                self.state = 3784
                self.match(PostgreSQLParser.USER)
                self.state = 3785
                self.match(PostgreSQLParser.MAPPING)
                self.state = 3786
                self.match(PostgreSQLParser.FOR)
                self.state = 3787
                self.auth_ident()
                self.state = 3788
                self.match(PostgreSQLParser.SERVER)
                self.state = 3789
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3791
                self.match(PostgreSQLParser.DROP)
                self.state = 3792
                self.match(PostgreSQLParser.USER)
                self.state = 3793
                self.match(PostgreSQLParser.MAPPING)
                self.state = 3794
                self.match(PostgreSQLParser.IF_P)
                self.state = 3795
                self.match(PostgreSQLParser.EXISTS)
                self.state = 3796
                self.match(PostgreSQLParser.FOR)
                self.state = 3797
                self.auth_ident()
                self.state = 3798
                self.match(PostgreSQLParser.SERVER)
                self.state = 3799
                self.name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterusermappingstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def MAPPING(self):
            return self.getToken(PostgreSQLParser.MAPPING, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def auth_ident(self):
            return self.getTypedRuleContext(PostgreSQLParser.Auth_identContext,0)


        def SERVER(self):
            return self.getToken(PostgreSQLParser.SERVER, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def alter_generic_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Alter_generic_optionsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterusermappingstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterusermappingstmt" ):
                listener.enterAlterusermappingstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterusermappingstmt" ):
                listener.exitAlterusermappingstmt(self)




    def alterusermappingstmt(self):

        localctx = PostgreSQLParser.AlterusermappingstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_alterusermappingstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3803
            self.match(PostgreSQLParser.ALTER)
            self.state = 3804
            self.match(PostgreSQLParser.USER)
            self.state = 3805
            self.match(PostgreSQLParser.MAPPING)
            self.state = 3806
            self.match(PostgreSQLParser.FOR)
            self.state = 3807
            self.auth_ident()
            self.state = 3808
            self.match(PostgreSQLParser.SERVER)
            self.state = 3809
            self.name()
            self.state = 3810
            self.alter_generic_options()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatepolicystmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def POLICY(self):
            return self.getToken(PostgreSQLParser.POLICY, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def rowsecuritydefaultpermissive(self):
            return self.getTypedRuleContext(PostgreSQLParser.RowsecuritydefaultpermissiveContext,0)


        def rowsecuritydefaultforcmd(self):
            return self.getTypedRuleContext(PostgreSQLParser.RowsecuritydefaultforcmdContext,0)


        def rowsecuritydefaulttorole(self):
            return self.getTypedRuleContext(PostgreSQLParser.RowsecuritydefaulttoroleContext,0)


        def rowsecurityoptionalexpr(self):
            return self.getTypedRuleContext(PostgreSQLParser.RowsecurityoptionalexprContext,0)


        def rowsecurityoptionalwithcheck(self):
            return self.getTypedRuleContext(PostgreSQLParser.RowsecurityoptionalwithcheckContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createpolicystmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatepolicystmt" ):
                listener.enterCreatepolicystmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatepolicystmt" ):
                listener.exitCreatepolicystmt(self)




    def createpolicystmt(self):

        localctx = PostgreSQLParser.CreatepolicystmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_createpolicystmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3812
            self.match(PostgreSQLParser.CREATE)
            self.state = 3813
            self.match(PostgreSQLParser.POLICY)
            self.state = 3814
            self.name()
            self.state = 3815
            self.match(PostgreSQLParser.ON)
            self.state = 3816
            self.qualified_name()
            self.state = 3818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 3817
                self.rowsecuritydefaultpermissive()


            self.state = 3821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==100:
                self.state = 3820
                self.rowsecuritydefaultforcmd()


            self.state = 3824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 3823
                self.rowsecuritydefaulttorole()


            self.state = 3827
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 3826
                self.rowsecurityoptionalexpr()


            self.state = 3830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 3829
                self.rowsecurityoptionalwithcheck()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterpolicystmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def POLICY(self):
            return self.getToken(PostgreSQLParser.POLICY, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def rowsecurityoptionaltorole(self):
            return self.getTypedRuleContext(PostgreSQLParser.RowsecurityoptionaltoroleContext,0)


        def rowsecurityoptionalexpr(self):
            return self.getTypedRuleContext(PostgreSQLParser.RowsecurityoptionalexprContext,0)


        def rowsecurityoptionalwithcheck(self):
            return self.getTypedRuleContext(PostgreSQLParser.RowsecurityoptionalwithcheckContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterpolicystmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterpolicystmt" ):
                listener.enterAlterpolicystmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterpolicystmt" ):
                listener.exitAlterpolicystmt(self)




    def alterpolicystmt(self):

        localctx = PostgreSQLParser.AlterpolicystmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_alterpolicystmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3832
            self.match(PostgreSQLParser.ALTER)
            self.state = 3833
            self.match(PostgreSQLParser.POLICY)
            self.state = 3834
            self.name()
            self.state = 3835
            self.match(PostgreSQLParser.ON)
            self.state = 3836
            self.qualified_name()
            self.state = 3838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132:
                self.state = 3837
                self.rowsecurityoptionaltorole()


            self.state = 3841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 3840
                self.rowsecurityoptionalexpr()


            self.state = 3844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 3843
                self.rowsecurityoptionalwithcheck()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowsecurityoptionalexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_rowsecurityoptionalexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowsecurityoptionalexpr" ):
                listener.enterRowsecurityoptionalexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowsecurityoptionalexpr" ):
                listener.exitRowsecurityoptionalexpr(self)




    def rowsecurityoptionalexpr(self):

        localctx = PostgreSQLParser.RowsecurityoptionalexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_rowsecurityoptionalexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3846
            self.match(PostgreSQLParser.USING)
            self.state = 3847
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 3848
            self.a_expr()
            self.state = 3849
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowsecurityoptionalwithcheckContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def CHECK(self):
            return self.getToken(PostgreSQLParser.CHECK, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_rowsecurityoptionalwithcheck

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowsecurityoptionalwithcheck" ):
                listener.enterRowsecurityoptionalwithcheck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowsecurityoptionalwithcheck" ):
                listener.exitRowsecurityoptionalwithcheck(self)




    def rowsecurityoptionalwithcheck(self):

        localctx = PostgreSQLParser.RowsecurityoptionalwithcheckContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_rowsecurityoptionalwithcheck)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3851
            self.match(PostgreSQLParser.WITH)
            self.state = 3852
            self.match(PostgreSQLParser.CHECK)
            self.state = 3853
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 3854
            self.a_expr()
            self.state = 3855
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowsecuritydefaulttoroleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def role_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Role_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_rowsecuritydefaulttorole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowsecuritydefaulttorole" ):
                listener.enterRowsecuritydefaulttorole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowsecuritydefaulttorole" ):
                listener.exitRowsecuritydefaulttorole(self)




    def rowsecuritydefaulttorole(self):

        localctx = PostgreSQLParser.RowsecuritydefaulttoroleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_rowsecuritydefaulttorole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3857
            self.match(PostgreSQLParser.TO)
            self.state = 3858
            self.role_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowsecurityoptionaltoroleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def role_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Role_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_rowsecurityoptionaltorole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowsecurityoptionaltorole" ):
                listener.enterRowsecurityoptionaltorole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowsecurityoptionaltorole" ):
                listener.exitRowsecurityoptionaltorole(self)




    def rowsecurityoptionaltorole(self):

        localctx = PostgreSQLParser.RowsecurityoptionaltoroleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_rowsecurityoptionaltorole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3860
            self.match(PostgreSQLParser.TO)
            self.state = 3861
            self.role_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowsecuritydefaultpermissiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def identifier(self):
            return self.getTypedRuleContext(PostgreSQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_rowsecuritydefaultpermissive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowsecuritydefaultpermissive" ):
                listener.enterRowsecuritydefaultpermissive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowsecuritydefaultpermissive" ):
                listener.exitRowsecuritydefaultpermissive(self)




    def rowsecuritydefaultpermissive(self):

        localctx = PostgreSQLParser.RowsecuritydefaultpermissiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_rowsecuritydefaultpermissive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3863
            self.match(PostgreSQLParser.AS)
            self.state = 3864
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowsecuritydefaultforcmdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def row_security_cmd(self):
            return self.getTypedRuleContext(PostgreSQLParser.Row_security_cmdContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_rowsecuritydefaultforcmd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowsecuritydefaultforcmd" ):
                listener.enterRowsecuritydefaultforcmd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowsecuritydefaultforcmd" ):
                listener.exitRowsecuritydefaultforcmd(self)




    def rowsecuritydefaultforcmd(self):

        localctx = PostgreSQLParser.RowsecuritydefaultforcmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_rowsecuritydefaultforcmd)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3866
            self.match(PostgreSQLParser.FOR)
            self.state = 3867
            self.row_security_cmd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_security_cmdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def SELECT(self):
            return self.getToken(PostgreSQLParser.SELECT, 0)

        def INSERT(self):
            return self.getToken(PostgreSQLParser.INSERT, 0)

        def UPDATE(self):
            return self.getToken(PostgreSQLParser.UPDATE, 0)

        def DELETE_P(self):
            return self.getToken(PostgreSQLParser.DELETE_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_row_security_cmd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_security_cmd" ):
                listener.enterRow_security_cmd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_security_cmd" ):
                listener.exitRow_security_cmd(self)




    def row_security_cmd(self):

        localctx = PostgreSQLParser.Row_security_cmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_row_security_cmd)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3869
            _la = self._input.LA(1)
            if not(_la==68 or _la==126 or _la==220 or _la==270 or _la==400):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateamstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def ACCESS(self):
            return self.getToken(PostgreSQLParser.ACCESS, 0)

        def METHOD(self):
            return self.getToken(PostgreSQLParser.METHOD, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def am_type(self):
            return self.getTypedRuleContext(PostgreSQLParser.Am_typeContext,0)


        def HANDLER(self):
            return self.getToken(PostgreSQLParser.HANDLER, 0)

        def handler_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Handler_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createamstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateamstmt" ):
                listener.enterCreateamstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateamstmt" ):
                listener.exitCreateamstmt(self)




    def createamstmt(self):

        localctx = PostgreSQLParser.CreateamstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_createamstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3871
            self.match(PostgreSQLParser.CREATE)
            self.state = 3872
            self.match(PostgreSQLParser.ACCESS)
            self.state = 3873
            self.match(PostgreSQLParser.METHOD)
            self.state = 3874
            self.name()
            self.state = 3875
            self.match(PostgreSQLParser.TYPE_P)
            self.state = 3876
            self.am_type()
            self.state = 3877
            self.match(PostgreSQLParser.HANDLER)
            self.state = 3878
            self.handler_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Am_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDEX(self):
            return self.getToken(PostgreSQLParser.INDEX, 0)

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_am_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAm_type" ):
                listener.enterAm_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAm_type" ):
                listener.exitAm_type(self)




    def am_type(self):

        localctx = PostgreSQLParser.Am_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_am_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3880
            _la = self._input.LA(1)
            if not(_la==130 or _la==264):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatetrigstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def TRIGGER(self):
            return self.getToken(PostgreSQLParser.TRIGGER, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def triggeractiontime(self):
            return self.getTypedRuleContext(PostgreSQLParser.TriggeractiontimeContext,0)


        def triggerevents(self):
            return self.getTypedRuleContext(PostgreSQLParser.TriggereventsContext,0)


        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def EXECUTE(self):
            return self.getToken(PostgreSQLParser.EXECUTE, 0)

        def function_or_procedure(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_or_procedureContext,0)


        def func_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_nameContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def triggerfuncargs(self):
            return self.getTypedRuleContext(PostgreSQLParser.TriggerfuncargsContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def triggerreferencing(self):
            return self.getTypedRuleContext(PostgreSQLParser.TriggerreferencingContext,0)


        def triggerforspec(self):
            return self.getTypedRuleContext(PostgreSQLParser.TriggerforspecContext,0)


        def triggerwhen(self):
            return self.getTypedRuleContext(PostgreSQLParser.TriggerwhenContext,0)


        def CONSTRAINT(self):
            return self.getToken(PostgreSQLParser.CONSTRAINT, 0)

        def AFTER(self):
            return self.getToken(PostgreSQLParser.AFTER, 0)

        def constraintattributespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.ConstraintattributespecContext,0)


        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def EACH(self):
            return self.getToken(PostgreSQLParser.EACH, 0)

        def ROW(self):
            return self.getToken(PostgreSQLParser.ROW, 0)

        def optconstrfromtable(self):
            return self.getTypedRuleContext(PostgreSQLParser.OptconstrfromtableContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createtrigstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatetrigstmt" ):
                listener.enterCreatetrigstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatetrigstmt" ):
                listener.exitCreatetrigstmt(self)




    def createtrigstmt(self):

        localctx = PostgreSQLParser.CreatetrigstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_createtrigstmt)
        self._la = 0 # Token type
        try:
            self.state = 3930
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3882
                self.match(PostgreSQLParser.CREATE)
                self.state = 3883
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 3884
                self.name()
                self.state = 3885
                self.triggeractiontime()
                self.state = 3886
                self.triggerevents()
                self.state = 3887
                self.match(PostgreSQLParser.ON)
                self.state = 3888
                self.qualified_name()
                self.state = 3890
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==485:
                    self.state = 3889
                    self.triggerreferencing()


                self.state = 3893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==100:
                    self.state = 3892
                    self.triggerforspec()


                self.state = 3896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==140:
                    self.state = 3895
                    self.triggerwhen()


                self.state = 3898
                self.match(PostgreSQLParser.EXECUTE)
                self.state = 3899
                self.function_or_procedure()
                self.state = 3900
                self.func_name()
                self.state = 3901
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 3902
                self.triggerfuncargs()
                self.state = 3903
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3905
                self.match(PostgreSQLParser.CREATE)
                self.state = 3906
                self.match(PostgreSQLParser.CONSTRAINT)
                self.state = 3907
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 3908
                self.name()
                self.state = 3909
                self.match(PostgreSQLParser.AFTER)
                self.state = 3910
                self.triggerevents()
                self.state = 3911
                self.match(PostgreSQLParser.ON)
                self.state = 3912
                self.qualified_name()
                self.state = 3914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 3913
                    self.optconstrfromtable()


                self.state = 3916
                self.constraintattributespec()
                self.state = 3917
                self.match(PostgreSQLParser.FOR)
                self.state = 3918
                self.match(PostgreSQLParser.EACH)
                self.state = 3919
                self.match(PostgreSQLParser.ROW)
                self.state = 3921
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==140:
                    self.state = 3920
                    self.triggerwhen()


                self.state = 3923
                self.match(PostgreSQLParser.EXECUTE)
                self.state = 3924
                self.function_or_procedure()
                self.state = 3925
                self.func_name()
                self.state = 3926
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 3927
                self.triggerfuncargs()
                self.state = 3928
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggeractiontimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEFORE(self):
            return self.getToken(PostgreSQLParser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(PostgreSQLParser.AFTER, 0)

        def INSTEAD(self):
            return self.getToken(PostgreSQLParser.INSTEAD, 0)

        def OF(self):
            return self.getToken(PostgreSQLParser.OF, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_triggeractiontime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggeractiontime" ):
                listener.enterTriggeractiontime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggeractiontime" ):
                listener.exitTriggeractiontime(self)




    def triggeractiontime(self):

        localctx = PostgreSQLParser.TriggeractiontimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_triggeractiontime)
        try:
            self.state = 3936
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [183]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3932
                self.match(PostgreSQLParser.BEFORE)
                pass
            elif token in [173]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3933
                self.match(PostgreSQLParser.AFTER)
                pass
            elif token in [271]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3934
                self.match(PostgreSQLParser.INSTEAD)
                self.state = 3935
                self.match(PostgreSQLParser.OF)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggereventsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def triggeroneevent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TriggeroneeventContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TriggeroneeventContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.OR)
            else:
                return self.getToken(PostgreSQLParser.OR, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_triggerevents

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerevents" ):
                listener.enterTriggerevents(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerevents" ):
                listener.exitTriggerevents(self)




    def triggerevents(self):

        localctx = PostgreSQLParser.TriggereventsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_triggerevents)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3938
            self.triggeroneevent()
            self.state = 3943
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==120:
                self.state = 3939
                self.match(PostgreSQLParser.OR)
                self.state = 3940
                self.triggeroneevent()
                self.state = 3945
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggeroneeventContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(PostgreSQLParser.INSERT, 0)

        def DELETE_P(self):
            return self.getToken(PostgreSQLParser.DELETE_P, 0)

        def UPDATE(self):
            return self.getToken(PostgreSQLParser.UPDATE, 0)

        def OF(self):
            return self.getToken(PostgreSQLParser.OF, 0)

        def columnlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColumnlistContext,0)


        def TRUNCATE(self):
            return self.getToken(PostgreSQLParser.TRUNCATE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_triggeroneevent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggeroneevent" ):
                listener.enterTriggeroneevent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggeroneevent" ):
                listener.exitTriggeroneevent(self)




    def triggeroneevent(self):

        localctx = PostgreSQLParser.TriggeroneeventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_triggeroneevent)
        try:
            self.state = 3953
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3946
                self.match(PostgreSQLParser.INSERT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3947
                self.match(PostgreSQLParser.DELETE_P)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3948
                self.match(PostgreSQLParser.UPDATE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3949
                self.match(PostgreSQLParser.UPDATE)
                self.state = 3950
                self.match(PostgreSQLParser.OF)
                self.state = 3951
                self.columnlist()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3952
                self.match(PostgreSQLParser.TRUNCATE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerreferencingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCING(self):
            return self.getToken(PostgreSQLParser.REFERENCING, 0)

        def triggertransitions(self):
            return self.getTypedRuleContext(PostgreSQLParser.TriggertransitionsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_triggerreferencing

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerreferencing" ):
                listener.enterTriggerreferencing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerreferencing" ):
                listener.exitTriggerreferencing(self)




    def triggerreferencing(self):

        localctx = PostgreSQLParser.TriggerreferencingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_triggerreferencing)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3955
            self.match(PostgreSQLParser.REFERENCING)
            self.state = 3956
            self.triggertransitions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggertransitionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def triggertransition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TriggertransitionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TriggertransitionContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_triggertransitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggertransitions" ):
                listener.enterTriggertransitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggertransitions" ):
                listener.exitTriggertransitions(self)




    def triggertransitions(self):

        localctx = PostgreSQLParser.TriggertransitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_triggertransitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3959 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3958
                self.triggertransition()
                self.state = 3961 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==486 or _la==487):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggertransitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transitionoldornew(self):
            return self.getTypedRuleContext(PostgreSQLParser.TransitionoldornewContext,0)


        def transitionrowortable(self):
            return self.getTypedRuleContext(PostgreSQLParser.TransitionrowortableContext,0)


        def transitionrelname(self):
            return self.getTypedRuleContext(PostgreSQLParser.TransitionrelnameContext,0)


        def as_(self):
            return self.getTypedRuleContext(PostgreSQLParser.As_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_triggertransition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggertransition" ):
                listener.enterTriggertransition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggertransition" ):
                listener.exitTriggertransition(self)




    def triggertransition(self):

        localctx = PostgreSQLParser.TriggertransitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_triggertransition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3963
            self.transitionoldornew()
            self.state = 3964
            self.transitionrowortable()
            self.state = 3966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 3965
                self.as_()


            self.state = 3968
            self.transitionrelname()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransitionoldornewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(PostgreSQLParser.NEW, 0)

        def OLD(self):
            return self.getToken(PostgreSQLParser.OLD, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_transitionoldornew

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransitionoldornew" ):
                listener.enterTransitionoldornew(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransitionoldornew" ):
                listener.exitTransitionoldornew(self)




    def transitionoldornew(self):

        localctx = PostgreSQLParser.TransitionoldornewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_transitionoldornew)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3970
            _la = self._input.LA(1)
            if not(_la==486 or _la==487):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransitionrowortableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def ROW(self):
            return self.getToken(PostgreSQLParser.ROW, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_transitionrowortable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransitionrowortable" ):
                listener.enterTransitionrowortable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransitionrowortable" ):
                listener.exitTransitionrowortable(self)




    def transitionrowortable(self):

        localctx = PostgreSQLParser.TransitionrowortableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_transitionrowortable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3972
            _la = self._input.LA(1)
            if not(_la==130 or _la==445):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransitionrelnameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_transitionrelname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransitionrelname" ):
                listener.enterTransitionrelname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransitionrelname" ):
                listener.exitTransitionrelname(self)




    def transitionrelname(self):

        localctx = PostgreSQLParser.TransitionrelnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_transitionrelname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3974
            self.colid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerforspecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def triggerfortype(self):
            return self.getTypedRuleContext(PostgreSQLParser.TriggerfortypeContext,0)


        def triggerforopteach(self):
            return self.getTypedRuleContext(PostgreSQLParser.TriggerforopteachContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_triggerforspec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerforspec" ):
                listener.enterTriggerforspec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerforspec" ):
                listener.exitTriggerforspec(self)




    def triggerforspec(self):

        localctx = PostgreSQLParser.TriggerforspecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_triggerforspec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3976
            self.match(PostgreSQLParser.FOR)
            self.state = 3978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==230:
                self.state = 3977
                self.triggerforopteach()


            self.state = 3980
            self.triggerfortype()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerforopteachContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EACH(self):
            return self.getToken(PostgreSQLParser.EACH, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_triggerforopteach

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerforopteach" ):
                listener.enterTriggerforopteach(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerforopteach" ):
                listener.exitTriggerforopteach(self)




    def triggerforopteach(self):

        localctx = PostgreSQLParser.TriggerforopteachContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_triggerforopteach)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3982
            self.match(PostgreSQLParser.EACH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerfortypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROW(self):
            return self.getToken(PostgreSQLParser.ROW, 0)

        def STATEMENT(self):
            return self.getToken(PostgreSQLParser.STATEMENT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_triggerfortype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerfortype" ):
                listener.enterTriggerfortype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerfortype" ):
                listener.exitTriggerfortype(self)




    def triggerfortype(self):

        localctx = PostgreSQLParser.TriggerfortypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_triggerfortype)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3984
            _la = self._input.LA(1)
            if not(_la==372 or _la==445):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerwhenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(PostgreSQLParser.WHEN, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_triggerwhen

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerwhen" ):
                listener.enterTriggerwhen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerwhen" ):
                listener.exitTriggerwhen(self)




    def triggerwhen(self):

        localctx = PostgreSQLParser.TriggerwhenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_triggerwhen)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3986
            self.match(PostgreSQLParser.WHEN)
            self.state = 3987
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 3988
            self.a_expr()
            self.state = 3989
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_or_procedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def PROCEDURE(self):
            return self.getToken(PostgreSQLParser.PROCEDURE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_function_or_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_or_procedure" ):
                listener.enterFunction_or_procedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_or_procedure" ):
                listener.exitFunction_or_procedure(self)




    def function_or_procedure(self):

        localctx = PostgreSQLParser.Function_or_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_function_or_procedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3991
            _la = self._input.LA(1)
            if not(_la==249 or _la==327):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerfuncargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def triggerfuncarg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TriggerfuncargContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TriggerfuncargContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_triggerfuncargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerfuncargs" ):
                listener.enterTriggerfuncargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerfuncargs" ):
                listener.exitTriggerfuncargs(self)




    def triggerfuncargs(self):

        localctx = PostgreSQLParser.TriggerfuncargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_triggerfuncargs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3995
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 541, 542, 553, 554, 555, 559, 563, 565, 567, 576, 577, 578, 579, 581, 582, 590]:
                self.state = 3993
                self.triggerfuncarg()
                pass
            elif token in [3, 6]:
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 3997
                self.match(PostgreSQLParser.COMMA)
                self.state = 3998
                self.triggerfuncarg()
                self.state = 4003
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerfuncargContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def fconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.FconstContext,0)


        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def colLabel(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColLabelContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_triggerfuncarg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerfuncarg" ):
                listener.enterTriggerfuncarg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerfuncarg" ):
                listener.exitTriggerfuncarg(self)




    def triggerfuncarg(self):

        localctx = PostgreSQLParser.TriggerfuncargContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_triggerfuncarg)
        try:
            self.state = 4008
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [576, 577, 578, 579]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4004
                self.iconst()
                pass
            elif token in [581]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4005
                self.fconst()
                pass
            elif token in [563, 565, 567, 590]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4006
                self.sconst()
                pass
            elif token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 541, 542, 553, 554, 555, 559, 582]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4007
                self.colLabel()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptconstrfromtableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_optconstrfromtable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptconstrfromtable" ):
                listener.enterOptconstrfromtable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptconstrfromtable" ):
                listener.exitOptconstrfromtable(self)




    def optconstrfromtable(self):

        localctx = PostgreSQLParser.OptconstrfromtableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_optconstrfromtable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4010
            self.match(PostgreSQLParser.FROM)
            self.state = 4011
            self.qualified_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintattributespecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constraintattributeElem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ConstraintattributeElemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ConstraintattributeElemContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_constraintattributespec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintattributespec" ):
                listener.enterConstraintattributespec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintattributespec" ):
                listener.exitConstraintattributespec(self)




    def constraintattributespec(self):

        localctx = PostgreSQLParser.ConstraintattributespecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_constraintattributespec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4016
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 92)) & ~0x3f) == 0 and ((1 << (_la - 92)) & 8421377) != 0) or _la==300:
                self.state = 4013
                self.constraintattributeElem()
                self.state = 4018
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintattributeElemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def DEFERRABLE(self):
            return self.getToken(PostgreSQLParser.DEFERRABLE, 0)

        def INITIALLY(self):
            return self.getToken(PostgreSQLParser.INITIALLY, 0)

        def IMMEDIATE(self):
            return self.getToken(PostgreSQLParser.IMMEDIATE, 0)

        def DEFERRED(self):
            return self.getToken(PostgreSQLParser.DEFERRED, 0)

        def VALID(self):
            return self.getToken(PostgreSQLParser.VALID, 0)

        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def INHERIT(self):
            return self.getToken(PostgreSQLParser.INHERIT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_constraintattributeElem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintattributeElem" ):
                listener.enterConstraintattributeElem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintattributeElem" ):
                listener.exitConstraintattributeElem(self)




    def constraintattributeElem(self):

        localctx = PostgreSQLParser.ConstraintattributeElemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_constraintattributeElem)
        try:
            self.state = 4030
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4019
                self.match(PostgreSQLParser.NOT)
                self.state = 4020
                self.match(PostgreSQLParser.DEFERRABLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4021
                self.match(PostgreSQLParser.DEFERRABLE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4022
                self.match(PostgreSQLParser.INITIALLY)
                self.state = 4023
                self.match(PostgreSQLParser.IMMEDIATE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4024
                self.match(PostgreSQLParser.INITIALLY)
                self.state = 4025
                self.match(PostgreSQLParser.DEFERRED)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4026
                self.match(PostgreSQLParser.NOT)
                self.state = 4027
                self.match(PostgreSQLParser.VALID)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4028
                self.match(PostgreSQLParser.NO)
                self.state = 4029
                self.match(PostgreSQLParser.INHERIT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateeventtrigstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def EVENT(self):
            return self.getToken(PostgreSQLParser.EVENT, 0)

        def TRIGGER(self):
            return self.getToken(PostgreSQLParser.TRIGGER, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def colLabel(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColLabelContext,0)


        def EXECUTE(self):
            return self.getToken(PostgreSQLParser.EXECUTE, 0)

        def function_or_procedure(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_or_procedureContext,0)


        def func_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_nameContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def WHEN(self):
            return self.getToken(PostgreSQLParser.WHEN, 0)

        def event_trigger_when_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Event_trigger_when_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createeventtrigstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateeventtrigstmt" ):
                listener.enterCreateeventtrigstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateeventtrigstmt" ):
                listener.exitCreateeventtrigstmt(self)




    def createeventtrigstmt(self):

        localctx = PostgreSQLParser.CreateeventtrigstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_createeventtrigstmt)
        try:
            self.state = 4058
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,319,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4032
                self.match(PostgreSQLParser.CREATE)
                self.state = 4033
                self.match(PostgreSQLParser.EVENT)
                self.state = 4034
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 4035
                self.name()
                self.state = 4036
                self.match(PostgreSQLParser.ON)
                self.state = 4037
                self.colLabel()
                self.state = 4038
                self.match(PostgreSQLParser.EXECUTE)
                self.state = 4039
                self.function_or_procedure()
                self.state = 4040
                self.func_name()
                self.state = 4041
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 4042
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4044
                self.match(PostgreSQLParser.CREATE)
                self.state = 4045
                self.match(PostgreSQLParser.EVENT)
                self.state = 4046
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 4047
                self.name()
                self.state = 4048
                self.match(PostgreSQLParser.ON)
                self.state = 4049
                self.colLabel()
                self.state = 4050
                self.match(PostgreSQLParser.WHEN)
                self.state = 4051
                self.event_trigger_when_list()
                self.state = 4052
                self.match(PostgreSQLParser.EXECUTE)
                self.state = 4053
                self.function_or_procedure()
                self.state = 4054
                self.func_name()
                self.state = 4055
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 4056
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_trigger_when_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_trigger_when_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Event_trigger_when_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Event_trigger_when_itemContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.AND)
            else:
                return self.getToken(PostgreSQLParser.AND, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_event_trigger_when_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_trigger_when_list" ):
                listener.enterEvent_trigger_when_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_trigger_when_list" ):
                listener.exitEvent_trigger_when_list(self)




    def event_trigger_when_list(self):

        localctx = PostgreSQLParser.Event_trigger_when_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_event_trigger_when_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4060
            self.event_trigger_when_item()
            self.state = 4065
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==71:
                self.state = 4061
                self.match(PostgreSQLParser.AND)
                self.state = 4062
                self.event_trigger_when_item()
                self.state = 4067
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_trigger_when_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def IN_P(self):
            return self.getToken(PostgreSQLParser.IN_P, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def event_trigger_value_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Event_trigger_value_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_event_trigger_when_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_trigger_when_item" ):
                listener.enterEvent_trigger_when_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_trigger_when_item" ):
                listener.exitEvent_trigger_when_item(self)




    def event_trigger_when_item(self):

        localctx = PostgreSQLParser.Event_trigger_when_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_event_trigger_when_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4068
            self.colid()
            self.state = 4069
            self.match(PostgreSQLParser.IN_P)
            self.state = 4070
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 4071
            self.event_trigger_value_list()
            self.state = 4072
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_trigger_value_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sconst(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SconstContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SconstContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_event_trigger_value_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_trigger_value_list" ):
                listener.enterEvent_trigger_value_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_trigger_value_list" ):
                listener.exitEvent_trigger_value_list(self)




    def event_trigger_value_list(self):

        localctx = PostgreSQLParser.Event_trigger_value_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_event_trigger_value_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4074
            self.sconst()
            self.state = 4079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 4075
                self.match(PostgreSQLParser.COMMA)
                self.state = 4076
                self.sconst()
                self.state = 4081
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AltereventtrigstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def EVENT(self):
            return self.getToken(PostgreSQLParser.EVENT, 0)

        def TRIGGER(self):
            return self.getToken(PostgreSQLParser.TRIGGER, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def enable_trigger(self):
            return self.getTypedRuleContext(PostgreSQLParser.Enable_triggerContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_altereventtrigstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAltereventtrigstmt" ):
                listener.enterAltereventtrigstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAltereventtrigstmt" ):
                listener.exitAltereventtrigstmt(self)




    def altereventtrigstmt(self):

        localctx = PostgreSQLParser.AltereventtrigstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_altereventtrigstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4082
            self.match(PostgreSQLParser.ALTER)
            self.state = 4083
            self.match(PostgreSQLParser.EVENT)
            self.state = 4084
            self.match(PostgreSQLParser.TRIGGER)
            self.state = 4085
            self.name()
            self.state = 4086
            self.enable_trigger()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enable_triggerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE_P(self):
            return self.getToken(PostgreSQLParser.ENABLE_P, 0)

        def REPLICA(self):
            return self.getToken(PostgreSQLParser.REPLICA, 0)

        def ALWAYS(self):
            return self.getToken(PostgreSQLParser.ALWAYS, 0)

        def DISABLE_P(self):
            return self.getToken(PostgreSQLParser.DISABLE_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_enable_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnable_trigger" ):
                listener.enterEnable_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnable_trigger" ):
                listener.exitEnable_trigger(self)




    def enable_trigger(self):

        localctx = PostgreSQLParser.Enable_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_enable_trigger)
        try:
            self.state = 4094
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,322,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4088
                self.match(PostgreSQLParser.ENABLE_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4089
                self.match(PostgreSQLParser.ENABLE_P)
                self.state = 4090
                self.match(PostgreSQLParser.REPLICA)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4091
                self.match(PostgreSQLParser.ENABLE_P)
                self.state = 4092
                self.match(PostgreSQLParser.ALWAYS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4093
                self.match(PostgreSQLParser.DISABLE_P)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateassertionstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def ASSERTION(self):
            return self.getToken(PostgreSQLParser.ASSERTION, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def CHECK(self):
            return self.getToken(PostgreSQLParser.CHECK, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def constraintattributespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.ConstraintattributespecContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createassertionstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateassertionstmt" ):
                listener.enterCreateassertionstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateassertionstmt" ):
                listener.exitCreateassertionstmt(self)




    def createassertionstmt(self):

        localctx = PostgreSQLParser.CreateassertionstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_createassertionstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4096
            self.match(PostgreSQLParser.CREATE)
            self.state = 4097
            self.match(PostgreSQLParser.ASSERTION)
            self.state = 4098
            self.any_name()
            self.state = 4099
            self.match(PostgreSQLParser.CHECK)
            self.state = 4100
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 4101
            self.a_expr()
            self.state = 4102
            self.match(PostgreSQLParser.CLOSE_PAREN)
            self.state = 4103
            self.constraintattributespec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefinestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def AGGREGATE(self):
            return self.getToken(PostgreSQLParser.AGGREGATE, 0)

        def func_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_nameContext,0)


        def aggr_args(self):
            return self.getTypedRuleContext(PostgreSQLParser.Aggr_argsContext,0)


        def definition(self):
            return self.getTypedRuleContext(PostgreSQLParser.DefinitionContext,0)


        def or_replace_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Or_replace_Context,0)


        def old_aggr_definition(self):
            return self.getTypedRuleContext(PostgreSQLParser.Old_aggr_definitionContext,0)


        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def any_operator(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_operatorContext,0)


        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def any_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Any_nameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,i)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def opttablefuncelementlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttablefuncelementlistContext,0)


        def ENUM_P(self):
            return self.getToken(PostgreSQLParser.ENUM_P, 0)

        def enum_val_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Enum_val_list_Context,0)


        def RANGE(self):
            return self.getToken(PostgreSQLParser.RANGE, 0)

        def TEXT_P(self):
            return self.getToken(PostgreSQLParser.TEXT_P, 0)

        def SEARCH(self):
            return self.getToken(PostgreSQLParser.SEARCH, 0)

        def PARSER(self):
            return self.getToken(PostgreSQLParser.PARSER, 0)

        def DICTIONARY(self):
            return self.getToken(PostgreSQLParser.DICTIONARY, 0)

        def TEMPLATE(self):
            return self.getToken(PostgreSQLParser.TEMPLATE, 0)

        def CONFIGURATION(self):
            return self.getToken(PostgreSQLParser.CONFIGURATION, 0)

        def COLLATION(self):
            return self.getToken(PostgreSQLParser.COLLATION, 0)

        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_definestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinestmt" ):
                listener.enterDefinestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinestmt" ):
                listener.exitDefinestmt(self)




    def definestmt(self):

        localctx = PostgreSQLParser.DefinestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_definestmt)
        self._la = 0 # Token type
        try:
            self.state = 4219
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,327,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4105
                self.match(PostgreSQLParser.CREATE)
                self.state = 4107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==120:
                    self.state = 4106
                    self.or_replace_()


                self.state = 4109
                self.match(PostgreSQLParser.AGGREGATE)
                self.state = 4110
                self.func_name()
                self.state = 4111
                self.aggr_args()
                self.state = 4112
                self.definition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4114
                self.match(PostgreSQLParser.CREATE)
                self.state = 4116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==120:
                    self.state = 4115
                    self.or_replace_()


                self.state = 4118
                self.match(PostgreSQLParser.AGGREGATE)
                self.state = 4119
                self.func_name()
                self.state = 4120
                self.old_aggr_definition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4122
                self.match(PostgreSQLParser.CREATE)
                self.state = 4123
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 4124
                self.any_operator()
                self.state = 4125
                self.definition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4127
                self.match(PostgreSQLParser.CREATE)
                self.state = 4128
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 4129
                self.any_name()
                self.state = 4130
                self.definition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4132
                self.match(PostgreSQLParser.CREATE)
                self.state = 4133
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 4134
                self.any_name()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4135
                self.match(PostgreSQLParser.CREATE)
                self.state = 4136
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 4137
                self.any_name()
                self.state = 4138
                self.match(PostgreSQLParser.AS)
                self.state = 4139
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 4141
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & 137438949375) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & -31) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & -1) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & -8796093022209) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & -1) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & -34909494181889) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & 1153132601981008895) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & 536870983) != 0):
                    self.state = 4140
                    self.opttablefuncelementlist()


                self.state = 4143
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4145
                self.match(PostgreSQLParser.CREATE)
                self.state = 4146
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 4147
                self.any_name()
                self.state = 4148
                self.match(PostgreSQLParser.AS)
                self.state = 4149
                self.match(PostgreSQLParser.ENUM_P)
                self.state = 4150
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 4152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 563)) & ~0x3f) == 0 and ((1 << (_la - 563)) & 134217749) != 0):
                    self.state = 4151
                    self.enum_val_list_()


                self.state = 4154
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4156
                self.match(PostgreSQLParser.CREATE)
                self.state = 4157
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 4158
                self.any_name()
                self.state = 4159
                self.match(PostgreSQLParser.AS)
                self.state = 4160
                self.match(PostgreSQLParser.RANGE)
                self.state = 4161
                self.definition()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4163
                self.match(PostgreSQLParser.CREATE)
                self.state = 4164
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 4165
                self.match(PostgreSQLParser.SEARCH)
                self.state = 4166
                self.match(PostgreSQLParser.PARSER)
                self.state = 4167
                self.any_name()
                self.state = 4168
                self.definition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4170
                self.match(PostgreSQLParser.CREATE)
                self.state = 4171
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 4172
                self.match(PostgreSQLParser.SEARCH)
                self.state = 4173
                self.match(PostgreSQLParser.DICTIONARY)
                self.state = 4174
                self.any_name()
                self.state = 4175
                self.definition()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4177
                self.match(PostgreSQLParser.CREATE)
                self.state = 4178
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 4179
                self.match(PostgreSQLParser.SEARCH)
                self.state = 4180
                self.match(PostgreSQLParser.TEMPLATE)
                self.state = 4181
                self.any_name()
                self.state = 4182
                self.definition()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4184
                self.match(PostgreSQLParser.CREATE)
                self.state = 4185
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 4186
                self.match(PostgreSQLParser.SEARCH)
                self.state = 4187
                self.match(PostgreSQLParser.CONFIGURATION)
                self.state = 4188
                self.any_name()
                self.state = 4189
                self.definition()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 4191
                self.match(PostgreSQLParser.CREATE)
                self.state = 4192
                self.match(PostgreSQLParser.COLLATION)
                self.state = 4193
                self.any_name()
                self.state = 4194
                self.definition()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 4196
                self.match(PostgreSQLParser.CREATE)
                self.state = 4197
                self.match(PostgreSQLParser.COLLATION)
                self.state = 4198
                self.match(PostgreSQLParser.IF_P)
                self.state = 4199
                self.match(PostgreSQLParser.NOT)
                self.state = 4200
                self.match(PostgreSQLParser.EXISTS)
                self.state = 4201
                self.any_name()
                self.state = 4202
                self.definition()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 4204
                self.match(PostgreSQLParser.CREATE)
                self.state = 4205
                self.match(PostgreSQLParser.COLLATION)
                self.state = 4206
                self.any_name()
                self.state = 4207
                self.match(PostgreSQLParser.FROM)
                self.state = 4208
                self.any_name()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 4210
                self.match(PostgreSQLParser.CREATE)
                self.state = 4211
                self.match(PostgreSQLParser.COLLATION)
                self.state = 4212
                self.match(PostgreSQLParser.IF_P)
                self.state = 4213
                self.match(PostgreSQLParser.NOT)
                self.state = 4214
                self.match(PostgreSQLParser.EXISTS)
                self.state = 4215
                self.any_name()
                self.state = 4216
                self.match(PostgreSQLParser.FROM)
                self.state = 4217
                self.any_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def def_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Def_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinition" ):
                listener.enterDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinition" ):
                listener.exitDefinition(self)




    def definition(self):

        localctx = PostgreSQLParser.DefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4221
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 4222
            self.def_list()
            self.state = 4223
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Def_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def def_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Def_elemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Def_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_def_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDef_list" ):
                listener.enterDef_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDef_list" ):
                listener.exitDef_list(self)




    def def_list(self):

        localctx = PostgreSQLParser.Def_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_def_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4225
            self.def_elem()
            self.state = 4230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 4226
                self.match(PostgreSQLParser.COMMA)
                self.state = 4227
                self.def_elem()
                self.state = 4232
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Def_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colLabel(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColLabelContext,0)


        def EQUAL(self):
            return self.getToken(PostgreSQLParser.EQUAL, 0)

        def def_arg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Def_argContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_def_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDef_elem" ):
                listener.enterDef_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDef_elem" ):
                listener.exitDef_elem(self)




    def def_elem(self):

        localctx = PostgreSQLParser.Def_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_def_elem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4233
            self.colLabel()
            self.state = 4236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 4234
                self.match(PostgreSQLParser.EQUAL)
                self.state = 4235
                self.def_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Def_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_type(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_typeContext,0)


        def reserved_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Reserved_keywordContext,0)


        def qual_all_op(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qual_all_opContext,0)


        def numericonly(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericonlyContext,0)


        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def NONE(self):
            return self.getToken(PostgreSQLParser.NONE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_def_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDef_arg" ):
                listener.enterDef_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDef_arg" ):
                listener.exitDef_arg(self)




    def def_arg(self):

        localctx = PostgreSQLParser.Def_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_def_arg)
        try:
            self.state = 4244
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4238
                self.func_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4239
                self.reserved_keyword()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4240
                self.qual_all_op()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4241
                self.numericonly()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4242
                self.sconst()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4243
                self.match(PostgreSQLParser.NONE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Old_aggr_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def old_aggr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Old_aggr_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_old_aggr_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOld_aggr_definition" ):
                listener.enterOld_aggr_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOld_aggr_definition" ):
                listener.exitOld_aggr_definition(self)




    def old_aggr_definition(self):

        localctx = PostgreSQLParser.Old_aggr_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_old_aggr_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4246
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 4247
            self.old_aggr_list()
            self.state = 4248
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Old_aggr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def old_aggr_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Old_aggr_elemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Old_aggr_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_old_aggr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOld_aggr_list" ):
                listener.enterOld_aggr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOld_aggr_list" ):
                listener.exitOld_aggr_list(self)




    def old_aggr_list(self):

        localctx = PostgreSQLParser.Old_aggr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_old_aggr_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4250
            self.old_aggr_elem()
            self.state = 4255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 4251
                self.match(PostgreSQLParser.COMMA)
                self.state = 4252
                self.old_aggr_elem()
                self.state = 4257
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Old_aggr_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PostgreSQLParser.IdentifierContext,0)


        def EQUAL(self):
            return self.getToken(PostgreSQLParser.EQUAL, 0)

        def def_arg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Def_argContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_old_aggr_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOld_aggr_elem" ):
                listener.enterOld_aggr_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOld_aggr_elem" ):
                listener.exitOld_aggr_elem(self)




    def old_aggr_elem(self):

        localctx = PostgreSQLParser.Old_aggr_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_old_aggr_elem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4258
            self.identifier()
            self.state = 4259
            self.match(PostgreSQLParser.EQUAL)
            self.state = 4260
            self.def_arg()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_val_list_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enum_val_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Enum_val_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_enum_val_list_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_val_list_" ):
                listener.enterEnum_val_list_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_val_list_" ):
                listener.exitEnum_val_list_(self)




    def enum_val_list_(self):

        localctx = PostgreSQLParser.Enum_val_list_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_enum_val_list_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4262
            self.enum_val_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_val_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sconst(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SconstContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SconstContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_enum_val_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_val_list" ):
                listener.enterEnum_val_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_val_list" ):
                listener.exitEnum_val_list(self)




    def enum_val_list(self):

        localctx = PostgreSQLParser.Enum_val_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_enum_val_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4264
            self.sconst()
            self.state = 4269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 4265
                self.match(PostgreSQLParser.COMMA)
                self.state = 4266
                self.sconst()
                self.state = 4271
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterenumstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def ADD_P(self):
            return self.getToken(PostgreSQLParser.ADD_P, 0)

        def VALUE_P(self):
            return self.getToken(PostgreSQLParser.VALUE_P, 0)

        def sconst(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SconstContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SconstContext,i)


        def if_not_exists_(self):
            return self.getTypedRuleContext(PostgreSQLParser.If_not_exists_Context,0)


        def BEFORE(self):
            return self.getToken(PostgreSQLParser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(PostgreSQLParser.AFTER, 0)

        def RENAME(self):
            return self.getToken(PostgreSQLParser.RENAME, 0)

        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterenumstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterenumstmt" ):
                listener.enterAlterenumstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterenumstmt" ):
                listener.exitAlterenumstmt(self)




    def alterenumstmt(self):

        localctx = PostgreSQLParser.AlterenumstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_alterenumstmt)
        self._la = 0 # Token type
        try:
            self.state = 4315
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4272
                self.match(PostgreSQLParser.ALTER)
                self.state = 4273
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 4274
                self.any_name()
                self.state = 4275
                self.match(PostgreSQLParser.ADD_P)
                self.state = 4276
                self.match(PostgreSQLParser.VALUE_P)
                self.state = 4278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258:
                    self.state = 4277
                    self.if_not_exists_()


                self.state = 4280
                self.sconst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4282
                self.match(PostgreSQLParser.ALTER)
                self.state = 4283
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 4284
                self.any_name()
                self.state = 4285
                self.match(PostgreSQLParser.ADD_P)
                self.state = 4286
                self.match(PostgreSQLParser.VALUE_P)
                self.state = 4288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258:
                    self.state = 4287
                    self.if_not_exists_()


                self.state = 4290
                self.sconst()
                self.state = 4291
                self.match(PostgreSQLParser.BEFORE)
                self.state = 4292
                self.sconst()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4294
                self.match(PostgreSQLParser.ALTER)
                self.state = 4295
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 4296
                self.any_name()
                self.state = 4297
                self.match(PostgreSQLParser.ADD_P)
                self.state = 4298
                self.match(PostgreSQLParser.VALUE_P)
                self.state = 4300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258:
                    self.state = 4299
                    self.if_not_exists_()


                self.state = 4302
                self.sconst()
                self.state = 4303
                self.match(PostgreSQLParser.AFTER)
                self.state = 4304
                self.sconst()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4306
                self.match(PostgreSQLParser.ALTER)
                self.state = 4307
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 4308
                self.any_name()
                self.state = 4309
                self.match(PostgreSQLParser.RENAME)
                self.state = 4310
                self.match(PostgreSQLParser.VALUE_P)
                self.state = 4311
                self.sconst()
                self.state = 4312
                self.match(PostgreSQLParser.TO)
                self.state = 4313
                self.sconst()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_not_exists_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_if_not_exists_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_not_exists_" ):
                listener.enterIf_not_exists_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_not_exists_" ):
                listener.exitIf_not_exists_(self)




    def if_not_exists_(self):

        localctx = PostgreSQLParser.If_not_exists_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_if_not_exists_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4317
            self.match(PostgreSQLParser.IF_P)
            self.state = 4318
            self.match(PostgreSQLParser.NOT)
            self.state = 4319
            self.match(PostgreSQLParser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateopclassstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def CLASS(self):
            return self.getToken(PostgreSQLParser.CLASS, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def typename(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,0)


        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def opclass_item_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Opclass_item_listContext,0)


        def default_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Default_Context,0)


        def opfamily_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Opfamily_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createopclassstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateopclassstmt" ):
                listener.enterCreateopclassstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateopclassstmt" ):
                listener.exitCreateopclassstmt(self)




    def createopclassstmt(self):

        localctx = PostgreSQLParser.CreateopclassstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_createopclassstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4321
            self.match(PostgreSQLParser.CREATE)
            self.state = 4322
            self.match(PostgreSQLParser.OPERATOR)
            self.state = 4323
            self.match(PostgreSQLParser.CLASS)
            self.state = 4324
            self.any_name()
            self.state = 4326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 4325
                self.default_()


            self.state = 4328
            self.match(PostgreSQLParser.FOR)
            self.state = 4329
            self.match(PostgreSQLParser.TYPE_P)
            self.state = 4330
            self.typename()
            self.state = 4331
            self.match(PostgreSQLParser.USING)
            self.state = 4332
            self.name()
            self.state = 4334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==244:
                self.state = 4333
                self.opfamily_()


            self.state = 4336
            self.match(PostgreSQLParser.AS)
            self.state = 4337
            self.opclass_item_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opclass_item_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opclass_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Opclass_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Opclass_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_opclass_item_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpclass_item_list" ):
                listener.enterOpclass_item_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpclass_item_list" ):
                listener.exitOpclass_item_list(self)




    def opclass_item_list(self):

        localctx = PostgreSQLParser.Opclass_item_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_opclass_item_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4339
            self.opclass_item()
            self.state = 4344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 4340
                self.match(PostgreSQLParser.COMMA)
                self.state = 4341
                self.opclass_item()
                self.state = 4346
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opclass_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def any_operator(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_operatorContext,0)


        def opclass_purpose(self):
            return self.getTypedRuleContext(PostgreSQLParser.Opclass_purposeContext,0)


        def recheck_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Recheck_Context,0)


        def operator_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Operator_with_argtypesContext,0)


        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_with_argtypesContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def type_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def STORAGE(self):
            return self.getToken(PostgreSQLParser.STORAGE, 0)

        def typename(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_opclass_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpclass_item" ):
                listener.enterOpclass_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpclass_item" ):
                listener.exitOpclass_item(self)




    def opclass_item(self):

        localctx = PostgreSQLParser.Opclass_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_opclass_item)
        self._la = 0 # Token type
        try:
            self.state = 4378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4347
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 4348
                self.iconst()
                self.state = 4349
                self.any_operator()
                self.state = 4351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==100:
                    self.state = 4350
                    self.opclass_purpose()


                self.state = 4354
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==333:
                    self.state = 4353
                    self.recheck_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4356
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 4357
                self.iconst()
                self.state = 4358
                self.operator_with_argtypes()
                self.state = 4360
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==100:
                    self.state = 4359
                    self.opclass_purpose()


                self.state = 4363
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==333:
                    self.state = 4362
                    self.recheck_()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4365
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 4366
                self.iconst()
                self.state = 4367
                self.function_with_argtypes()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4369
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 4370
                self.iconst()
                self.state = 4371
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 4372
                self.type_list()
                self.state = 4373
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 4374
                self.function_with_argtypes()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4376
                self.match(PostgreSQLParser.STORAGE)
                self.state = 4377
                self.typename()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_default_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_" ):
                listener.enterDefault_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_" ):
                listener.exitDefault_(self)




    def default_(self):

        localctx = PostgreSQLParser.Default_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_default_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4380
            self.match(PostgreSQLParser.DEFAULT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opfamily_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FAMILY(self):
            return self.getToken(PostgreSQLParser.FAMILY, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_opfamily_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpfamily_" ):
                listener.enterOpfamily_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpfamily_" ):
                listener.exitOpfamily_(self)




    def opfamily_(self):

        localctx = PostgreSQLParser.Opfamily_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_opfamily_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4382
            self.match(PostgreSQLParser.FAMILY)
            self.state = 4383
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opclass_purposeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def SEARCH(self):
            return self.getToken(PostgreSQLParser.SEARCH, 0)

        def ORDER(self):
            return self.getToken(PostgreSQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_opclass_purpose

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpclass_purpose" ):
                listener.enterOpclass_purpose(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpclass_purpose" ):
                listener.exitOpclass_purpose(self)




    def opclass_purpose(self):

        localctx = PostgreSQLParser.Opclass_purposeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_opclass_purpose)
        try:
            self.state = 4391
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4385
                self.match(PostgreSQLParser.FOR)
                self.state = 4386
                self.match(PostgreSQLParser.SEARCH)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4387
                self.match(PostgreSQLParser.FOR)
                self.state = 4388
                self.match(PostgreSQLParser.ORDER)
                self.state = 4389
                self.match(PostgreSQLParser.BY)
                self.state = 4390
                self.any_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Recheck_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECHECK(self):
            return self.getToken(PostgreSQLParser.RECHECK, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_recheck_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecheck_" ):
                listener.enterRecheck_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecheck_" ):
                listener.exitRecheck_(self)




    def recheck_(self):

        localctx = PostgreSQLParser.Recheck_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_recheck_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4393
            self.match(PostgreSQLParser.RECHECK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateopfamilystmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def FAMILY(self):
            return self.getToken(PostgreSQLParser.FAMILY, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createopfamilystmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateopfamilystmt" ):
                listener.enterCreateopfamilystmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateopfamilystmt" ):
                listener.exitCreateopfamilystmt(self)




    def createopfamilystmt(self):

        localctx = PostgreSQLParser.CreateopfamilystmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_createopfamilystmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4395
            self.match(PostgreSQLParser.CREATE)
            self.state = 4396
            self.match(PostgreSQLParser.OPERATOR)
            self.state = 4397
            self.match(PostgreSQLParser.FAMILY)
            self.state = 4398
            self.any_name()
            self.state = 4399
            self.match(PostgreSQLParser.USING)
            self.state = 4400
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlteropfamilystmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def FAMILY(self):
            return self.getToken(PostgreSQLParser.FAMILY, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def ADD_P(self):
            return self.getToken(PostgreSQLParser.ADD_P, 0)

        def opclass_item_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Opclass_item_listContext,0)


        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def opclass_drop_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Opclass_drop_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alteropfamilystmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlteropfamilystmt" ):
                listener.enterAlteropfamilystmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlteropfamilystmt" ):
                listener.exitAlteropfamilystmt(self)




    def alteropfamilystmt(self):

        localctx = PostgreSQLParser.AlteropfamilystmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_alteropfamilystmt)
        try:
            self.state = 4420
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,346,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4402
                self.match(PostgreSQLParser.ALTER)
                self.state = 4403
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 4404
                self.match(PostgreSQLParser.FAMILY)
                self.state = 4405
                self.any_name()
                self.state = 4406
                self.match(PostgreSQLParser.USING)
                self.state = 4407
                self.name()
                self.state = 4408
                self.match(PostgreSQLParser.ADD_P)
                self.state = 4409
                self.opclass_item_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4411
                self.match(PostgreSQLParser.ALTER)
                self.state = 4412
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 4413
                self.match(PostgreSQLParser.FAMILY)
                self.state = 4414
                self.any_name()
                self.state = 4415
                self.match(PostgreSQLParser.USING)
                self.state = 4416
                self.name()
                self.state = 4417
                self.match(PostgreSQLParser.DROP)
                self.state = 4418
                self.opclass_drop_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opclass_drop_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def opclass_drop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Opclass_dropContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Opclass_dropContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_opclass_drop_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpclass_drop_list" ):
                listener.enterOpclass_drop_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpclass_drop_list" ):
                listener.exitOpclass_drop_list(self)




    def opclass_drop_list(self):

        localctx = PostgreSQLParser.Opclass_drop_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_opclass_drop_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4422
            self.opclass_drop()
            self.state = 4427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 4423
                self.match(PostgreSQLParser.COMMA)
                self.state = 4424
                self.opclass_drop()
                self.state = 4429
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opclass_dropContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def type_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_opclass_drop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpclass_drop" ):
                listener.enterOpclass_drop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpclass_drop" ):
                listener.exitOpclass_drop(self)




    def opclass_drop(self):

        localctx = PostgreSQLParser.Opclass_dropContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_opclass_drop)
        try:
            self.state = 4442
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [309]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4430
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 4431
                self.iconst()
                self.state = 4432
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 4433
                self.type_list()
                self.state = 4434
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [249]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4436
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 4437
                self.iconst()
                self.state = 4438
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 4439
                self.type_list()
                self.state = 4440
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropopclassstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def CLASS(self):
            return self.getToken(PostgreSQLParser.CLASS, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_dropopclassstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropopclassstmt" ):
                listener.enterDropopclassstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropopclassstmt" ):
                listener.exitDropopclassstmt(self)




    def dropopclassstmt(self):

        localctx = PostgreSQLParser.DropopclassstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_dropopclassstmt)
        self._la = 0 # Token type
        try:
            self.state = 4464
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,351,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4444
                self.match(PostgreSQLParser.DROP)
                self.state = 4445
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 4446
                self.match(PostgreSQLParser.CLASS)
                self.state = 4447
                self.any_name()
                self.state = 4448
                self.match(PostgreSQLParser.USING)
                self.state = 4449
                self.name()
                self.state = 4451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 4450
                    self.drop_behavior_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4453
                self.match(PostgreSQLParser.DROP)
                self.state = 4454
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 4455
                self.match(PostgreSQLParser.CLASS)
                self.state = 4456
                self.match(PostgreSQLParser.IF_P)
                self.state = 4457
                self.match(PostgreSQLParser.EXISTS)
                self.state = 4458
                self.any_name()
                self.state = 4459
                self.match(PostgreSQLParser.USING)
                self.state = 4460
                self.name()
                self.state = 4462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 4461
                    self.drop_behavior_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropopfamilystmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def FAMILY(self):
            return self.getToken(PostgreSQLParser.FAMILY, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_dropopfamilystmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropopfamilystmt" ):
                listener.enterDropopfamilystmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropopfamilystmt" ):
                listener.exitDropopfamilystmt(self)




    def dropopfamilystmt(self):

        localctx = PostgreSQLParser.DropopfamilystmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_dropopfamilystmt)
        self._la = 0 # Token type
        try:
            self.state = 4486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,354,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4466
                self.match(PostgreSQLParser.DROP)
                self.state = 4467
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 4468
                self.match(PostgreSQLParser.FAMILY)
                self.state = 4469
                self.any_name()
                self.state = 4470
                self.match(PostgreSQLParser.USING)
                self.state = 4471
                self.name()
                self.state = 4473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 4472
                    self.drop_behavior_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4475
                self.match(PostgreSQLParser.DROP)
                self.state = 4476
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 4477
                self.match(PostgreSQLParser.FAMILY)
                self.state = 4478
                self.match(PostgreSQLParser.IF_P)
                self.state = 4479
                self.match(PostgreSQLParser.EXISTS)
                self.state = 4480
                self.any_name()
                self.state = 4481
                self.match(PostgreSQLParser.USING)
                self.state = 4482
                self.name()
                self.state = 4484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 4483
                    self.drop_behavior_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropownedstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def OWNED(self):
            return self.getToken(PostgreSQLParser.OWNED, 0)

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def role_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Role_listContext,0)


        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_dropownedstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropownedstmt" ):
                listener.enterDropownedstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropownedstmt" ):
                listener.exitDropownedstmt(self)




    def dropownedstmt(self):

        localctx = PostgreSQLParser.DropownedstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_dropownedstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4488
            self.match(PostgreSQLParser.DROP)
            self.state = 4489
            self.match(PostgreSQLParser.OWNED)
            self.state = 4490
            self.match(PostgreSQLParser.BY)
            self.state = 4491
            self.role_list()
            self.state = 4493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==188 or _la==346:
                self.state = 4492
                self.drop_behavior_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReassignownedstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REASSIGN(self):
            return self.getToken(PostgreSQLParser.REASSIGN, 0)

        def OWNED(self):
            return self.getToken(PostgreSQLParser.OWNED, 0)

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def role_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Role_listContext,0)


        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def rolespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.RolespecContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_reassignownedstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReassignownedstmt" ):
                listener.enterReassignownedstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReassignownedstmt" ):
                listener.exitReassignownedstmt(self)




    def reassignownedstmt(self):

        localctx = PostgreSQLParser.ReassignownedstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_reassignownedstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4495
            self.match(PostgreSQLParser.REASSIGN)
            self.state = 4496
            self.match(PostgreSQLParser.OWNED)
            self.state = 4497
            self.match(PostgreSQLParser.BY)
            self.state = 4498
            self.role_list()
            self.state = 4499
            self.match(PostgreSQLParser.TO)
            self.state = 4500
            self.rolespec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def object_type_any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Object_type_any_nameContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def any_name_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_name_list_Context,0)


        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def drop_type_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_type_nameContext,0)


        def name_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Name_listContext,0)


        def object_type_name_on_any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Object_type_name_on_any_nameContext,0)


        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def type_name_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_name_listContext,0)


        def DOMAIN_P(self):
            return self.getToken(PostgreSQLParser.DOMAIN_P, 0)

        def INDEX(self):
            return self.getToken(PostgreSQLParser.INDEX, 0)

        def CONCURRENTLY(self):
            return self.getToken(PostgreSQLParser.CONCURRENTLY, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_dropstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropstmt" ):
                listener.enterDropstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropstmt" ):
                listener.exitDropstmt(self)




    def dropstmt(self):

        localctx = PostgreSQLParser.DropstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_dropstmt)
        self._la = 0 # Token type
        try:
            self.state = 4592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4502
                self.match(PostgreSQLParser.DROP)
                self.state = 4503
                self.object_type_any_name()
                self.state = 4504
                self.match(PostgreSQLParser.IF_P)
                self.state = 4505
                self.match(PostgreSQLParser.EXISTS)
                self.state = 4506
                self.any_name_list_()
                self.state = 4508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 4507
                    self.drop_behavior_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4510
                self.match(PostgreSQLParser.DROP)
                self.state = 4511
                self.object_type_any_name()
                self.state = 4512
                self.any_name_list_()
                self.state = 4514
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 4513
                    self.drop_behavior_()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4516
                self.match(PostgreSQLParser.DROP)
                self.state = 4517
                self.drop_type_name()
                self.state = 4518
                self.match(PostgreSQLParser.IF_P)
                self.state = 4519
                self.match(PostgreSQLParser.EXISTS)
                self.state = 4520
                self.name_list()
                self.state = 4522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 4521
                    self.drop_behavior_()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4524
                self.match(PostgreSQLParser.DROP)
                self.state = 4525
                self.drop_type_name()
                self.state = 4526
                self.name_list()
                self.state = 4528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 4527
                    self.drop_behavior_()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4530
                self.match(PostgreSQLParser.DROP)
                self.state = 4531
                self.object_type_name_on_any_name()
                self.state = 4532
                self.name()
                self.state = 4533
                self.match(PostgreSQLParser.ON)
                self.state = 4534
                self.any_name()
                self.state = 4536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 4535
                    self.drop_behavior_()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4538
                self.match(PostgreSQLParser.DROP)
                self.state = 4539
                self.object_type_name_on_any_name()
                self.state = 4540
                self.match(PostgreSQLParser.IF_P)
                self.state = 4541
                self.match(PostgreSQLParser.EXISTS)
                self.state = 4542
                self.name()
                self.state = 4543
                self.match(PostgreSQLParser.ON)
                self.state = 4544
                self.any_name()
                self.state = 4546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 4545
                    self.drop_behavior_()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4548
                self.match(PostgreSQLParser.DROP)
                self.state = 4549
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 4550
                self.type_name_list()
                self.state = 4552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 4551
                    self.drop_behavior_()


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4554
                self.match(PostgreSQLParser.DROP)
                self.state = 4555
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 4556
                self.match(PostgreSQLParser.IF_P)
                self.state = 4557
                self.match(PostgreSQLParser.EXISTS)
                self.state = 4558
                self.type_name_list()
                self.state = 4560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 4559
                    self.drop_behavior_()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4562
                self.match(PostgreSQLParser.DROP)
                self.state = 4563
                self.match(PostgreSQLParser.DOMAIN_P)
                self.state = 4564
                self.type_name_list()
                self.state = 4566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 4565
                    self.drop_behavior_()


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4568
                self.match(PostgreSQLParser.DROP)
                self.state = 4569
                self.match(PostgreSQLParser.DOMAIN_P)
                self.state = 4570
                self.match(PostgreSQLParser.IF_P)
                self.state = 4571
                self.match(PostgreSQLParser.EXISTS)
                self.state = 4572
                self.type_name_list()
                self.state = 4574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 4573
                    self.drop_behavior_()


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4576
                self.match(PostgreSQLParser.DROP)
                self.state = 4577
                self.match(PostgreSQLParser.INDEX)
                self.state = 4578
                self.match(PostgreSQLParser.CONCURRENTLY)
                self.state = 4579
                self.any_name_list_()
                self.state = 4581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 4580
                    self.drop_behavior_()


                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4583
                self.match(PostgreSQLParser.DROP)
                self.state = 4584
                self.match(PostgreSQLParser.INDEX)
                self.state = 4585
                self.match(PostgreSQLParser.CONCURRENTLY)
                self.state = 4586
                self.match(PostgreSQLParser.IF_P)
                self.state = 4587
                self.match(PostgreSQLParser.EXISTS)
                self.state = 4588
                self.any_name_list_()
                self.state = 4590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 4589
                    self.drop_behavior_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_type_any_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def SEQUENCE(self):
            return self.getToken(PostgreSQLParser.SEQUENCE, 0)

        def VIEW(self):
            return self.getToken(PostgreSQLParser.VIEW, 0)

        def MATERIALIZED(self):
            return self.getToken(PostgreSQLParser.MATERIALIZED, 0)

        def INDEX(self):
            return self.getToken(PostgreSQLParser.INDEX, 0)

        def FOREIGN(self):
            return self.getToken(PostgreSQLParser.FOREIGN, 0)

        def COLLATION(self):
            return self.getToken(PostgreSQLParser.COLLATION, 0)

        def CONVERSION_P(self):
            return self.getToken(PostgreSQLParser.CONVERSION_P, 0)

        def STATISTICS(self):
            return self.getToken(PostgreSQLParser.STATISTICS, 0)

        def TEXT_P(self):
            return self.getToken(PostgreSQLParser.TEXT_P, 0)

        def SEARCH(self):
            return self.getToken(PostgreSQLParser.SEARCH, 0)

        def PARSER(self):
            return self.getToken(PostgreSQLParser.PARSER, 0)

        def DICTIONARY(self):
            return self.getToken(PostgreSQLParser.DICTIONARY, 0)

        def TEMPLATE(self):
            return self.getToken(PostgreSQLParser.TEMPLATE, 0)

        def CONFIGURATION(self):
            return self.getToken(PostgreSQLParser.CONFIGURATION, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_object_type_any_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_type_any_name" ):
                listener.enterObject_type_any_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_type_any_name" ):
                listener.exitObject_type_any_name(self)




    def object_type_any_name(self):

        localctx = PostgreSQLParser.Object_type_any_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_object_type_any_name)
        try:
            self.state = 4617
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,369,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4594
                self.match(PostgreSQLParser.TABLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4595
                self.match(PostgreSQLParser.SEQUENCE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4596
                self.match(PostgreSQLParser.VIEW)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4597
                self.match(PostgreSQLParser.MATERIALIZED)
                self.state = 4598
                self.match(PostgreSQLParser.VIEW)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4599
                self.match(PostgreSQLParser.INDEX)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4600
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 4601
                self.match(PostgreSQLParser.TABLE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4602
                self.match(PostgreSQLParser.COLLATION)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4603
                self.match(PostgreSQLParser.CONVERSION_P)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4604
                self.match(PostgreSQLParser.STATISTICS)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4605
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 4606
                self.match(PostgreSQLParser.SEARCH)
                self.state = 4607
                self.match(PostgreSQLParser.PARSER)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4608
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 4609
                self.match(PostgreSQLParser.SEARCH)
                self.state = 4610
                self.match(PostgreSQLParser.DICTIONARY)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4611
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 4612
                self.match(PostgreSQLParser.SEARCH)
                self.state = 4613
                self.match(PostgreSQLParser.TEMPLATE)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 4614
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 4615
                self.match(PostgreSQLParser.SEARCH)
                self.state = 4616
                self.match(PostgreSQLParser.CONFIGURATION)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def drop_type_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_type_nameContext,0)


        def DATABASE(self):
            return self.getToken(PostgreSQLParser.DATABASE, 0)

        def ROLE(self):
            return self.getToken(PostgreSQLParser.ROLE, 0)

        def SUBSCRIPTION(self):
            return self.getToken(PostgreSQLParser.SUBSCRIPTION, 0)

        def TABLESPACE(self):
            return self.getToken(PostgreSQLParser.TABLESPACE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_object_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_type_name" ):
                listener.enterObject_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_type_name" ):
                listener.exitObject_type_name(self)




    def object_type_name(self):

        localctx = PostgreSQLParser.Object_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_object_type_name)
        try:
            self.state = 4624
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [101, 169, 236, 242, 276, 326, 354, 362, 490]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4619
                self.drop_type_name()
                pass
            elif token in [213]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4620
                self.match(PostgreSQLParser.DATABASE)
                pass
            elif token in [349]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4621
                self.match(PostgreSQLParser.ROLE)
                pass
            elif token in [489]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4622
                self.match(PostgreSQLParser.SUBSCRIPTION)
                pass
            elif token in [382]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4623
                self.match(PostgreSQLParser.TABLESPACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCESS(self):
            return self.getToken(PostgreSQLParser.ACCESS, 0)

        def METHOD(self):
            return self.getToken(PostgreSQLParser.METHOD, 0)

        def EVENT(self):
            return self.getToken(PostgreSQLParser.EVENT, 0)

        def TRIGGER(self):
            return self.getToken(PostgreSQLParser.TRIGGER, 0)

        def EXTENSION(self):
            return self.getToken(PostgreSQLParser.EXTENSION, 0)

        def FOREIGN(self):
            return self.getToken(PostgreSQLParser.FOREIGN, 0)

        def DATA_P(self):
            return self.getToken(PostgreSQLParser.DATA_P, 0)

        def WRAPPER(self):
            return self.getToken(PostgreSQLParser.WRAPPER, 0)

        def LANGUAGE(self):
            return self.getToken(PostgreSQLParser.LANGUAGE, 0)

        def procedural_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Procedural_Context,0)


        def PUBLICATION(self):
            return self.getToken(PostgreSQLParser.PUBLICATION, 0)

        def SCHEMA(self):
            return self.getToken(PostgreSQLParser.SCHEMA, 0)

        def SERVER(self):
            return self.getToken(PostgreSQLParser.SERVER, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_drop_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_type_name" ):
                listener.enterDrop_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_type_name" ):
                listener.exitDrop_type_name(self)




    def drop_type_name(self):

        localctx = PostgreSQLParser.Drop_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_drop_type_name)
        self._la = 0 # Token type
        try:
            self.state = 4641
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [169]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4626
                self.match(PostgreSQLParser.ACCESS)
                self.state = 4627
                self.match(PostgreSQLParser.METHOD)
                pass
            elif token in [236]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4628
                self.match(PostgreSQLParser.EVENT)
                self.state = 4629
                self.match(PostgreSQLParser.TRIGGER)
                pass
            elif token in [242]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4630
                self.match(PostgreSQLParser.EXTENSION)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4631
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 4632
                self.match(PostgreSQLParser.DATA_P)
                self.state = 4633
                self.match(PostgreSQLParser.WRAPPER)
                pass
            elif token in [276, 326]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==326:
                    self.state = 4634
                    self.procedural_()


                self.state = 4637
                self.match(PostgreSQLParser.LANGUAGE)
                pass
            elif token in [490]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4638
                self.match(PostgreSQLParser.PUBLICATION)
                pass
            elif token in [354]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4639
                self.match(PostgreSQLParser.SCHEMA)
                pass
            elif token in [362]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4640
                self.match(PostgreSQLParser.SERVER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_type_name_on_any_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POLICY(self):
            return self.getToken(PostgreSQLParser.POLICY, 0)

        def RULE(self):
            return self.getToken(PostgreSQLParser.RULE, 0)

        def TRIGGER(self):
            return self.getToken(PostgreSQLParser.TRIGGER, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_object_type_name_on_any_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_type_name_on_any_name" ):
                listener.enterObject_type_name_on_any_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_type_name_on_any_name" ):
                listener.exitObject_type_name_on_any_name(self)




    def object_type_name_on_any_name(self):

        localctx = PostgreSQLParser.Object_type_name_on_any_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_object_type_name_on_any_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4643
            _la = self._input.LA(1)
            if not(_la==352 or _la==388 or _la==483):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_name_list_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Any_nameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_any_name_list_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_name_list_" ):
                listener.enterAny_name_list_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_name_list_" ):
                listener.exitAny_name_list_(self)




    def any_name_list_(self):

        localctx = PostgreSQLParser.Any_name_list_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_any_name_list_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4645
            self.any_name()
            self.state = 4650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 4646
                self.match(PostgreSQLParser.COMMA)
                self.state = 4647
                self.any_name()
                self.state = 4652
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def attrs(self):
            return self.getTypedRuleContext(PostgreSQLParser.AttrsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_any_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_name" ):
                listener.enterAny_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_name" ):
                listener.exitAny_name(self)




    def any_name(self):

        localctx = PostgreSQLParser.Any_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_any_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4653
            self.colid()
            self.state = 4655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,374,self._ctx)
            if la_ == 1:
                self.state = 4654
                self.attrs()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.DOT)
            else:
                return self.getToken(PostgreSQLParser.DOT, i)

        def attr_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Attr_nameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Attr_nameContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_attrs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrs" ):
                listener.enterAttrs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrs" ):
                listener.exitAttrs(self)




    def attrs(self):

        localctx = PostgreSQLParser.AttrsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_attrs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4659 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4657
                    self.match(PostgreSQLParser.DOT)
                    self.state = 4658
                    self.attr_name()

                else:
                    raise NoViableAltException(self)
                self.state = 4661 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,375,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typename(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TypenameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_type_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name_list" ):
                listener.enterType_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name_list" ):
                listener.exitType_name_list(self)




    def type_name_list(self):

        localctx = PostgreSQLParser.Type_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_type_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4663
            self.typename()
            self.state = 4668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 4664
                self.match(PostgreSQLParser.COMMA)
                self.state = 4665
                self.typename()
                self.state = 4670
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TruncatestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUNCATE(self):
            return self.getToken(PostgreSQLParser.TRUNCATE, 0)

        def relation_expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relation_expr_listContext,0)


        def table_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_Context,0)


        def restart_seqs_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Restart_seqs_Context,0)


        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_truncatestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncatestmt" ):
                listener.enterTruncatestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncatestmt" ):
                listener.exitTruncatestmt(self)




    def truncatestmt(self):

        localctx = PostgreSQLParser.TruncatestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_truncatestmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4671
            self.match(PostgreSQLParser.TRUNCATE)
            self.state = 4673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==130:
                self.state = 4672
                self.table_()


            self.state = 4675
            self.relation_expr_list()
            self.state = 4677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==205 or _la==345:
                self.state = 4676
                self.restart_seqs_()


            self.state = 4680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==188 or _la==346:
                self.state = 4679
                self.drop_behavior_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Restart_seqs_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE_P(self):
            return self.getToken(PostgreSQLParser.CONTINUE_P, 0)

        def IDENTITY_P(self):
            return self.getToken(PostgreSQLParser.IDENTITY_P, 0)

        def RESTART(self):
            return self.getToken(PostgreSQLParser.RESTART, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_restart_seqs_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestart_seqs_" ):
                listener.enterRestart_seqs_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestart_seqs_" ):
                listener.exitRestart_seqs_(self)




    def restart_seqs_(self):

        localctx = PostgreSQLParser.Restart_seqs_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_restart_seqs_)
        try:
            self.state = 4686
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [205]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4682
                self.match(PostgreSQLParser.CONTINUE_P)
                self.state = 4683
                self.match(PostgreSQLParser.IDENTITY_P)
                pass
            elif token in [345]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4684
                self.match(PostgreSQLParser.RESTART)
                self.state = 4685
                self.match(PostgreSQLParser.IDENTITY_P)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(PostgreSQLParser.COMMENT, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.ON)
            else:
                return self.getToken(PostgreSQLParser.ON, i)

        def object_type_any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Object_type_any_nameContext,0)


        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def IS(self):
            return self.getToken(PostgreSQLParser.IS, 0)

        def comment_text(self):
            return self.getTypedRuleContext(PostgreSQLParser.Comment_textContext,0)


        def COLUMN(self):
            return self.getToken(PostgreSQLParser.COLUMN, 0)

        def object_type_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Object_type_nameContext,0)


        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def typename(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TypenameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,i)


        def DOMAIN_P(self):
            return self.getToken(PostgreSQLParser.DOMAIN_P, 0)

        def AGGREGATE(self):
            return self.getToken(PostgreSQLParser.AGGREGATE, 0)

        def aggregate_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Aggregate_with_argtypesContext,0)


        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_with_argtypesContext,0)


        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def operator_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Operator_with_argtypesContext,0)


        def CONSTRAINT(self):
            return self.getToken(PostgreSQLParser.CONSTRAINT, 0)

        def object_type_name_on_any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Object_type_name_on_any_nameContext,0)


        def PROCEDURE(self):
            return self.getToken(PostgreSQLParser.PROCEDURE, 0)

        def ROUTINE(self):
            return self.getToken(PostgreSQLParser.ROUTINE, 0)

        def TRANSFORM(self):
            return self.getToken(PostgreSQLParser.TRANSFORM, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def LANGUAGE(self):
            return self.getToken(PostgreSQLParser.LANGUAGE, 0)

        def CLASS(self):
            return self.getToken(PostgreSQLParser.CLASS, 0)

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def FAMILY(self):
            return self.getToken(PostgreSQLParser.FAMILY, 0)

        def LARGE_P(self):
            return self.getToken(PostgreSQLParser.LARGE_P, 0)

        def OBJECT_P(self):
            return self.getToken(PostgreSQLParser.OBJECT_P, 0)

        def numericonly(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericonlyContext,0)


        def CAST(self):
            return self.getToken(PostgreSQLParser.CAST, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_commentstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentstmt" ):
                listener.enterCommentstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentstmt" ):
                listener.exitCommentstmt(self)




    def commentstmt(self):

        localctx = PostgreSQLParser.CommentstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_commentstmt)
        try:
            self.state = 4835
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,381,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4688
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4689
                self.match(PostgreSQLParser.ON)
                self.state = 4690
                self.object_type_any_name()
                self.state = 4691
                self.any_name()
                self.state = 4692
                self.match(PostgreSQLParser.IS)
                self.state = 4693
                self.comment_text()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4695
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4696
                self.match(PostgreSQLParser.ON)
                self.state = 4697
                self.match(PostgreSQLParser.COLUMN)
                self.state = 4698
                self.any_name()
                self.state = 4699
                self.match(PostgreSQLParser.IS)
                self.state = 4700
                self.comment_text()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4702
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4703
                self.match(PostgreSQLParser.ON)
                self.state = 4704
                self.object_type_name()
                self.state = 4705
                self.name()
                self.state = 4706
                self.match(PostgreSQLParser.IS)
                self.state = 4707
                self.comment_text()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4709
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4710
                self.match(PostgreSQLParser.ON)
                self.state = 4711
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 4712
                self.typename()
                self.state = 4713
                self.match(PostgreSQLParser.IS)
                self.state = 4714
                self.comment_text()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4716
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4717
                self.match(PostgreSQLParser.ON)
                self.state = 4718
                self.match(PostgreSQLParser.DOMAIN_P)
                self.state = 4719
                self.typename()
                self.state = 4720
                self.match(PostgreSQLParser.IS)
                self.state = 4721
                self.comment_text()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4723
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4724
                self.match(PostgreSQLParser.ON)
                self.state = 4725
                self.match(PostgreSQLParser.AGGREGATE)
                self.state = 4726
                self.aggregate_with_argtypes()
                self.state = 4727
                self.match(PostgreSQLParser.IS)
                self.state = 4728
                self.comment_text()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4730
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4731
                self.match(PostgreSQLParser.ON)
                self.state = 4732
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 4733
                self.function_with_argtypes()
                self.state = 4734
                self.match(PostgreSQLParser.IS)
                self.state = 4735
                self.comment_text()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4737
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4738
                self.match(PostgreSQLParser.ON)
                self.state = 4739
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 4740
                self.operator_with_argtypes()
                self.state = 4741
                self.match(PostgreSQLParser.IS)
                self.state = 4742
                self.comment_text()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4744
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4745
                self.match(PostgreSQLParser.ON)
                self.state = 4746
                self.match(PostgreSQLParser.CONSTRAINT)
                self.state = 4747
                self.name()
                self.state = 4748
                self.match(PostgreSQLParser.ON)
                self.state = 4749
                self.any_name()
                self.state = 4750
                self.match(PostgreSQLParser.IS)
                self.state = 4751
                self.comment_text()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4753
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4754
                self.match(PostgreSQLParser.ON)
                self.state = 4755
                self.match(PostgreSQLParser.CONSTRAINT)
                self.state = 4756
                self.name()
                self.state = 4757
                self.match(PostgreSQLParser.ON)
                self.state = 4758
                self.match(PostgreSQLParser.DOMAIN_P)
                self.state = 4759
                self.any_name()
                self.state = 4760
                self.match(PostgreSQLParser.IS)
                self.state = 4761
                self.comment_text()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4763
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4764
                self.match(PostgreSQLParser.ON)
                self.state = 4765
                self.object_type_name_on_any_name()
                self.state = 4766
                self.name()
                self.state = 4767
                self.match(PostgreSQLParser.ON)
                self.state = 4768
                self.any_name()
                self.state = 4769
                self.match(PostgreSQLParser.IS)
                self.state = 4770
                self.comment_text()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4772
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4773
                self.match(PostgreSQLParser.ON)
                self.state = 4774
                self.match(PostgreSQLParser.PROCEDURE)
                self.state = 4775
                self.function_with_argtypes()
                self.state = 4776
                self.match(PostgreSQLParser.IS)
                self.state = 4777
                self.comment_text()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 4779
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4780
                self.match(PostgreSQLParser.ON)
                self.state = 4781
                self.match(PostgreSQLParser.ROUTINE)
                self.state = 4782
                self.function_with_argtypes()
                self.state = 4783
                self.match(PostgreSQLParser.IS)
                self.state = 4784
                self.comment_text()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 4786
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4787
                self.match(PostgreSQLParser.ON)
                self.state = 4788
                self.match(PostgreSQLParser.TRANSFORM)
                self.state = 4789
                self.match(PostgreSQLParser.FOR)
                self.state = 4790
                self.typename()
                self.state = 4791
                self.match(PostgreSQLParser.LANGUAGE)
                self.state = 4792
                self.name()
                self.state = 4793
                self.match(PostgreSQLParser.IS)
                self.state = 4794
                self.comment_text()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 4796
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4797
                self.match(PostgreSQLParser.ON)
                self.state = 4798
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 4799
                self.match(PostgreSQLParser.CLASS)
                self.state = 4800
                self.any_name()
                self.state = 4801
                self.match(PostgreSQLParser.USING)
                self.state = 4802
                self.name()
                self.state = 4803
                self.match(PostgreSQLParser.IS)
                self.state = 4804
                self.comment_text()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 4806
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4807
                self.match(PostgreSQLParser.ON)
                self.state = 4808
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 4809
                self.match(PostgreSQLParser.FAMILY)
                self.state = 4810
                self.any_name()
                self.state = 4811
                self.match(PostgreSQLParser.USING)
                self.state = 4812
                self.name()
                self.state = 4813
                self.match(PostgreSQLParser.IS)
                self.state = 4814
                self.comment_text()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 4816
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4817
                self.match(PostgreSQLParser.ON)
                self.state = 4818
                self.match(PostgreSQLParser.LARGE_P)
                self.state = 4819
                self.match(PostgreSQLParser.OBJECT_P)
                self.state = 4820
                self.numericonly()
                self.state = 4821
                self.match(PostgreSQLParser.IS)
                self.state = 4822
                self.comment_text()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 4824
                self.match(PostgreSQLParser.COMMENT)
                self.state = 4825
                self.match(PostgreSQLParser.ON)
                self.state = 4826
                self.match(PostgreSQLParser.CAST)
                self.state = 4827
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 4828
                self.typename()
                self.state = 4829
                self.match(PostgreSQLParser.AS)
                self.state = 4830
                self.typename()
                self.state = 4831
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 4832
                self.match(PostgreSQLParser.IS)
                self.state = 4833
                self.comment_text()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comment_textContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def NULL_P(self):
            return self.getToken(PostgreSQLParser.NULL_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_comment_text

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment_text" ):
                listener.enterComment_text(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment_text" ):
                listener.exitComment_text(self)




    def comment_text(self):

        localctx = PostgreSQLParser.Comment_textContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_comment_text)
        try:
            self.state = 4839
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [563, 565, 567, 590]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4837
                self.sconst()
                pass
            elif token in [116]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4838
                self.match(PostgreSQLParser.NULL_P)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SeclabelstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECURITY(self):
            return self.getToken(PostgreSQLParser.SECURITY, 0)

        def LABEL(self):
            return self.getToken(PostgreSQLParser.LABEL, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def object_type_any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Object_type_any_nameContext,0)


        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def IS(self):
            return self.getToken(PostgreSQLParser.IS, 0)

        def security_label(self):
            return self.getTypedRuleContext(PostgreSQLParser.Security_labelContext,0)


        def provider_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Provider_Context,0)


        def COLUMN(self):
            return self.getToken(PostgreSQLParser.COLUMN, 0)

        def object_type_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Object_type_nameContext,0)


        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def typename(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,0)


        def DOMAIN_P(self):
            return self.getToken(PostgreSQLParser.DOMAIN_P, 0)

        def AGGREGATE(self):
            return self.getToken(PostgreSQLParser.AGGREGATE, 0)

        def aggregate_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Aggregate_with_argtypesContext,0)


        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_with_argtypesContext,0)


        def LARGE_P(self):
            return self.getToken(PostgreSQLParser.LARGE_P, 0)

        def OBJECT_P(self):
            return self.getToken(PostgreSQLParser.OBJECT_P, 0)

        def numericonly(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericonlyContext,0)


        def PROCEDURE(self):
            return self.getToken(PostgreSQLParser.PROCEDURE, 0)

        def ROUTINE(self):
            return self.getToken(PostgreSQLParser.ROUTINE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_seclabelstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeclabelstmt" ):
                listener.enterSeclabelstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeclabelstmt" ):
                listener.exitSeclabelstmt(self)




    def seclabelstmt(self):

        localctx = PostgreSQLParser.SeclabelstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_seclabelstmt)
        self._la = 0 # Token type
        try:
            self.state = 4952
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,393,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4841
                self.match(PostgreSQLParser.SECURITY)
                self.state = 4842
                self.match(PostgreSQLParser.LABEL)
                self.state = 4844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==100:
                    self.state = 4843
                    self.provider_()


                self.state = 4846
                self.match(PostgreSQLParser.ON)
                self.state = 4847
                self.object_type_any_name()
                self.state = 4848
                self.any_name()
                self.state = 4849
                self.match(PostgreSQLParser.IS)
                self.state = 4850
                self.security_label()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4852
                self.match(PostgreSQLParser.SECURITY)
                self.state = 4853
                self.match(PostgreSQLParser.LABEL)
                self.state = 4855
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==100:
                    self.state = 4854
                    self.provider_()


                self.state = 4857
                self.match(PostgreSQLParser.ON)
                self.state = 4858
                self.match(PostgreSQLParser.COLUMN)
                self.state = 4859
                self.any_name()
                self.state = 4860
                self.match(PostgreSQLParser.IS)
                self.state = 4861
                self.security_label()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4863
                self.match(PostgreSQLParser.SECURITY)
                self.state = 4864
                self.match(PostgreSQLParser.LABEL)
                self.state = 4866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==100:
                    self.state = 4865
                    self.provider_()


                self.state = 4868
                self.match(PostgreSQLParser.ON)
                self.state = 4869
                self.object_type_name()
                self.state = 4870
                self.name()
                self.state = 4871
                self.match(PostgreSQLParser.IS)
                self.state = 4872
                self.security_label()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4874
                self.match(PostgreSQLParser.SECURITY)
                self.state = 4875
                self.match(PostgreSQLParser.LABEL)
                self.state = 4877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==100:
                    self.state = 4876
                    self.provider_()


                self.state = 4879
                self.match(PostgreSQLParser.ON)
                self.state = 4880
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 4881
                self.typename()
                self.state = 4882
                self.match(PostgreSQLParser.IS)
                self.state = 4883
                self.security_label()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4885
                self.match(PostgreSQLParser.SECURITY)
                self.state = 4886
                self.match(PostgreSQLParser.LABEL)
                self.state = 4888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==100:
                    self.state = 4887
                    self.provider_()


                self.state = 4890
                self.match(PostgreSQLParser.ON)
                self.state = 4891
                self.match(PostgreSQLParser.DOMAIN_P)
                self.state = 4892
                self.typename()
                self.state = 4893
                self.match(PostgreSQLParser.IS)
                self.state = 4894
                self.security_label()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4896
                self.match(PostgreSQLParser.SECURITY)
                self.state = 4897
                self.match(PostgreSQLParser.LABEL)
                self.state = 4899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==100:
                    self.state = 4898
                    self.provider_()


                self.state = 4901
                self.match(PostgreSQLParser.ON)
                self.state = 4902
                self.match(PostgreSQLParser.AGGREGATE)
                self.state = 4903
                self.aggregate_with_argtypes()
                self.state = 4904
                self.match(PostgreSQLParser.IS)
                self.state = 4905
                self.security_label()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4907
                self.match(PostgreSQLParser.SECURITY)
                self.state = 4908
                self.match(PostgreSQLParser.LABEL)
                self.state = 4910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==100:
                    self.state = 4909
                    self.provider_()


                self.state = 4912
                self.match(PostgreSQLParser.ON)
                self.state = 4913
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 4914
                self.function_with_argtypes()
                self.state = 4915
                self.match(PostgreSQLParser.IS)
                self.state = 4916
                self.security_label()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4918
                self.match(PostgreSQLParser.SECURITY)
                self.state = 4919
                self.match(PostgreSQLParser.LABEL)
                self.state = 4921
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==100:
                    self.state = 4920
                    self.provider_()


                self.state = 4923
                self.match(PostgreSQLParser.ON)
                self.state = 4924
                self.match(PostgreSQLParser.LARGE_P)
                self.state = 4925
                self.match(PostgreSQLParser.OBJECT_P)
                self.state = 4926
                self.numericonly()
                self.state = 4927
                self.match(PostgreSQLParser.IS)
                self.state = 4928
                self.security_label()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4930
                self.match(PostgreSQLParser.SECURITY)
                self.state = 4931
                self.match(PostgreSQLParser.LABEL)
                self.state = 4933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==100:
                    self.state = 4932
                    self.provider_()


                self.state = 4935
                self.match(PostgreSQLParser.ON)
                self.state = 4936
                self.match(PostgreSQLParser.PROCEDURE)
                self.state = 4937
                self.function_with_argtypes()
                self.state = 4938
                self.match(PostgreSQLParser.IS)
                self.state = 4939
                self.security_label()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4941
                self.match(PostgreSQLParser.SECURITY)
                self.state = 4942
                self.match(PostgreSQLParser.LABEL)
                self.state = 4944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==100:
                    self.state = 4943
                    self.provider_()


                self.state = 4946
                self.match(PostgreSQLParser.ON)
                self.state = 4947
                self.match(PostgreSQLParser.ROUTINE)
                self.state = 4948
                self.function_with_argtypes()
                self.state = 4949
                self.match(PostgreSQLParser.IS)
                self.state = 4950
                self.security_label()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Provider_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def nonreservedword_or_sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.Nonreservedword_or_sconstContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_provider_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProvider_" ):
                listener.enterProvider_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProvider_" ):
                listener.exitProvider_(self)




    def provider_(self):

        localctx = PostgreSQLParser.Provider_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_provider_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4954
            self.match(PostgreSQLParser.FOR)
            self.state = 4955
            self.nonreservedword_or_sconst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Security_labelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def NULL_P(self):
            return self.getToken(PostgreSQLParser.NULL_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_security_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecurity_label" ):
                listener.enterSecurity_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecurity_label" ):
                listener.exitSecurity_label(self)




    def security_label(self):

        localctx = PostgreSQLParser.Security_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_security_label)
        try:
            self.state = 4959
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [563, 565, 567, 590]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4957
                self.sconst()
                pass
            elif token in [116]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4958
                self.match(PostgreSQLParser.NULL_P)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FetchstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FETCH(self):
            return self.getToken(PostgreSQLParser.FETCH, 0)

        def fetch_args(self):
            return self.getTypedRuleContext(PostgreSQLParser.Fetch_argsContext,0)


        def MOVE(self):
            return self.getToken(PostgreSQLParser.MOVE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_fetchstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetchstmt" ):
                listener.enterFetchstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetchstmt" ):
                listener.exitFetchstmt(self)




    def fetchstmt(self):

        localctx = PostgreSQLParser.FetchstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_fetchstmt)
        try:
            self.state = 4965
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [99]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4961
                self.match(PostgreSQLParser.FETCH)
                self.state = 4962
                self.fetch_args()
                pass
            elif token in [296]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4963
                self.match(PostgreSQLParser.MOVE)
                self.state = 4964
                self.fetch_args()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fetch_argsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cursor_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Cursor_nameContext,0)


        def from_in(self):
            return self.getTypedRuleContext(PostgreSQLParser.From_inContext,0)


        def NEXT(self):
            return self.getToken(PostgreSQLParser.NEXT, 0)

        def from_in_(self):
            return self.getTypedRuleContext(PostgreSQLParser.From_in_Context,0)


        def PRIOR(self):
            return self.getToken(PostgreSQLParser.PRIOR, 0)

        def FIRST_P(self):
            return self.getToken(PostgreSQLParser.FIRST_P, 0)

        def LAST_P(self):
            return self.getToken(PostgreSQLParser.LAST_P, 0)

        def ABSOLUTE_P(self):
            return self.getToken(PostgreSQLParser.ABSOLUTE_P, 0)

        def signediconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SignediconstContext,0)


        def RELATIVE_P(self):
            return self.getToken(PostgreSQLParser.RELATIVE_P, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def FORWARD(self):
            return self.getToken(PostgreSQLParser.FORWARD, 0)

        def BACKWARD(self):
            return self.getToken(PostgreSQLParser.BACKWARD, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_fetch_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetch_args" ):
                listener.enterFetch_args(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetch_args" ):
                listener.exitFetch_args(self)




    def fetch_args(self):

        localctx = PostgreSQLParser.Fetch_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_fetch_args)
        self._la = 0 # Token type
        try:
            self.state = 5052
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,410,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4967
                self.cursor_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4968
                self.from_in()
                self.state = 4969
                self.cursor_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4971
                self.match(PostgreSQLParser.NEXT)
                self.state = 4973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102 or _la==106:
                    self.state = 4972
                    self.from_in_()


                self.state = 4975
                self.cursor_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4976
                self.match(PostgreSQLParser.PRIOR)
                self.state = 4978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102 or _la==106:
                    self.state = 4977
                    self.from_in_()


                self.state = 4980
                self.cursor_name()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4981
                self.match(PostgreSQLParser.FIRST_P)
                self.state = 4983
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102 or _la==106:
                    self.state = 4982
                    self.from_in_()


                self.state = 4985
                self.cursor_name()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4986
                self.match(PostgreSQLParser.LAST_P)
                self.state = 4988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102 or _la==106:
                    self.state = 4987
                    self.from_in_()


                self.state = 4990
                self.cursor_name()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4991
                self.match(PostgreSQLParser.ABSOLUTE_P)
                self.state = 4992
                self.signediconst()
                self.state = 4994
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102 or _la==106:
                    self.state = 4993
                    self.from_in_()


                self.state = 4996
                self.cursor_name()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4998
                self.match(PostgreSQLParser.RELATIVE_P)
                self.state = 4999
                self.signediconst()
                self.state = 5001
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102 or _la==106:
                    self.state = 5000
                    self.from_in_()


                self.state = 5003
                self.cursor_name()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5005
                self.signediconst()
                self.state = 5007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102 or _la==106:
                    self.state = 5006
                    self.from_in_()


                self.state = 5009
                self.cursor_name()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5011
                self.match(PostgreSQLParser.ALL)
                self.state = 5013
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102 or _la==106:
                    self.state = 5012
                    self.from_in_()


                self.state = 5015
                self.cursor_name()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5016
                self.match(PostgreSQLParser.FORWARD)
                self.state = 5018
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102 or _la==106:
                    self.state = 5017
                    self.from_in_()


                self.state = 5020
                self.cursor_name()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 5021
                self.match(PostgreSQLParser.FORWARD)
                self.state = 5022
                self.signediconst()
                self.state = 5024
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102 or _la==106:
                    self.state = 5023
                    self.from_in_()


                self.state = 5026
                self.cursor_name()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 5028
                self.match(PostgreSQLParser.FORWARD)
                self.state = 5029
                self.match(PostgreSQLParser.ALL)
                self.state = 5031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102 or _la==106:
                    self.state = 5030
                    self.from_in_()


                self.state = 5033
                self.cursor_name()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 5034
                self.match(PostgreSQLParser.BACKWARD)
                self.state = 5036
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102 or _la==106:
                    self.state = 5035
                    self.from_in_()


                self.state = 5038
                self.cursor_name()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 5039
                self.match(PostgreSQLParser.BACKWARD)
                self.state = 5040
                self.signediconst()
                self.state = 5042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102 or _la==106:
                    self.state = 5041
                    self.from_in_()


                self.state = 5044
                self.cursor_name()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 5046
                self.match(PostgreSQLParser.BACKWARD)
                self.state = 5047
                self.match(PostgreSQLParser.ALL)
                self.state = 5049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102 or _la==106:
                    self.state = 5048
                    self.from_in_()


                self.state = 5051
                self.cursor_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_inContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def IN_P(self):
            return self.getToken(PostgreSQLParser.IN_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_from_in

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_in" ):
                listener.enterFrom_in(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_in" ):
                listener.exitFrom_in(self)




    def from_in(self):

        localctx = PostgreSQLParser.From_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_from_in)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5054
            _la = self._input.LA(1)
            if not(_la==102 or _la==106):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_in_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def from_in(self):
            return self.getTypedRuleContext(PostgreSQLParser.From_inContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_from_in_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_in_" ):
                listener.enterFrom_in_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_in_" ):
                listener.exitFrom_in_(self)




    def from_in_(self):

        localctx = PostgreSQLParser.From_in_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_from_in_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5056
            self.from_in()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT(self):
            return self.getToken(PostgreSQLParser.GRANT, 0)

        def privileges(self):
            return self.getTypedRuleContext(PostgreSQLParser.PrivilegesContext,0)


        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def privilege_target(self):
            return self.getTypedRuleContext(PostgreSQLParser.Privilege_targetContext,0)


        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def grantee_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Grantee_listContext,0)


        def grant_grant_option_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Grant_grant_option_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_grantstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantstmt" ):
                listener.enterGrantstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantstmt" ):
                listener.exitGrantstmt(self)




    def grantstmt(self):

        localctx = PostgreSQLParser.GrantstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_grantstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5058
            self.match(PostgreSQLParser.GRANT)
            self.state = 5059
            self.privileges()
            self.state = 5060
            self.match(PostgreSQLParser.ON)
            self.state = 5061
            self.privilege_target()
            self.state = 5062
            self.match(PostgreSQLParser.TO)
            self.state = 5063
            self.grantee_list()
            self.state = 5065
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 5064
                self.grant_grant_option_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE(self):
            return self.getToken(PostgreSQLParser.REVOKE, 0)

        def privileges(self):
            return self.getTypedRuleContext(PostgreSQLParser.PrivilegesContext,0)


        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def privilege_target(self):
            return self.getTypedRuleContext(PostgreSQLParser.Privilege_targetContext,0)


        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def grantee_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Grantee_listContext,0)


        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def GRANT(self):
            return self.getToken(PostgreSQLParser.GRANT, 0)

        def OPTION(self):
            return self.getToken(PostgreSQLParser.OPTION, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_revokestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokestmt" ):
                listener.enterRevokestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokestmt" ):
                listener.exitRevokestmt(self)




    def revokestmt(self):

        localctx = PostgreSQLParser.RevokestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_revokestmt)
        self._la = 0 # Token type
        try:
            self.state = 5088
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,414,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5067
                self.match(PostgreSQLParser.REVOKE)
                self.state = 5068
                self.privileges()
                self.state = 5069
                self.match(PostgreSQLParser.ON)
                self.state = 5070
                self.privilege_target()
                self.state = 5071
                self.match(PostgreSQLParser.FROM)
                self.state = 5072
                self.grantee_list()
                self.state = 5074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 5073
                    self.drop_behavior_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5076
                self.match(PostgreSQLParser.REVOKE)
                self.state = 5077
                self.match(PostgreSQLParser.GRANT)
                self.state = 5078
                self.match(PostgreSQLParser.OPTION)
                self.state = 5079
                self.match(PostgreSQLParser.FOR)
                self.state = 5080
                self.privileges()
                self.state = 5081
                self.match(PostgreSQLParser.ON)
                self.state = 5082
                self.privilege_target()
                self.state = 5083
                self.match(PostgreSQLParser.FROM)
                self.state = 5084
                self.grantee_list()
                self.state = 5086
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 5085
                    self.drop_behavior_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privilege_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Privilege_listContext,0)


        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def PRIVILEGES(self):
            return self.getToken(PostgreSQLParser.PRIVILEGES, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def columnlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColumnlistContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_privileges

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivileges" ):
                listener.enterPrivileges(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivileges" ):
                listener.exitPrivileges(self)




    def privileges(self):

        localctx = PostgreSQLParser.PrivilegesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_privileges)
        try:
            self.state = 5105
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,415,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5090
                self.privilege_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5091
                self.match(PostgreSQLParser.ALL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5092
                self.match(PostgreSQLParser.ALL)
                self.state = 5093
                self.match(PostgreSQLParser.PRIVILEGES)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5094
                self.match(PostgreSQLParser.ALL)
                self.state = 5095
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 5096
                self.columnlist()
                self.state = 5097
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5099
                self.match(PostgreSQLParser.ALL)
                self.state = 5100
                self.match(PostgreSQLParser.PRIVILEGES)
                self.state = 5101
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 5102
                self.columnlist()
                self.state = 5103
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Privilege_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.PrivilegeContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.PrivilegeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_privilege_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilege_list" ):
                listener.enterPrivilege_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilege_list" ):
                listener.exitPrivilege_list(self)




    def privilege_list(self):

        localctx = PostgreSQLParser.Privilege_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_privilege_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5107
            self.privilege()
            self.state = 5112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 5108
                self.match(PostgreSQLParser.COMMA)
                self.state = 5109
                self.privilege()
                self.state = 5114
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(PostgreSQLParser.SELECT, 0)

        def column_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_list_Context,0)


        def REFERENCES(self):
            return self.getToken(PostgreSQLParser.REFERENCES, 0)

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilege" ):
                listener.enterPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilege" ):
                listener.exitPrivilege(self)




    def privilege(self):

        localctx = PostgreSQLParser.PrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_privilege)
        self._la = 0 # Token type
        try:
            self.state = 5131
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [126]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5115
                self.match(PostgreSQLParser.SELECT)
                self.state = 5117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 5116
                    self.column_list_()


                pass
            elif token in [124]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5119
                self.match(PostgreSQLParser.REFERENCES)
                self.state = 5121
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 5120
                    self.column_list_()


                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5123
                self.match(PostgreSQLParser.CREATE)
                self.state = 5125
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 5124
                    self.column_list_()


                pass
            elif token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 162, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 582]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5127
                self.colid()
                self.state = 5129
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 5128
                    self.column_list_()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Privilege_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_name_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_name_listContext,0)


        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def SEQUENCE(self):
            return self.getToken(PostgreSQLParser.SEQUENCE, 0)

        def FOREIGN(self):
            return self.getToken(PostgreSQLParser.FOREIGN, 0)

        def DATA_P(self):
            return self.getToken(PostgreSQLParser.DATA_P, 0)

        def WRAPPER(self):
            return self.getToken(PostgreSQLParser.WRAPPER, 0)

        def name_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Name_listContext,0)


        def SERVER(self):
            return self.getToken(PostgreSQLParser.SERVER, 0)

        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def function_with_argtypes_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_with_argtypes_listContext,0)


        def PROCEDURE(self):
            return self.getToken(PostgreSQLParser.PROCEDURE, 0)

        def ROUTINE(self):
            return self.getToken(PostgreSQLParser.ROUTINE, 0)

        def DATABASE(self):
            return self.getToken(PostgreSQLParser.DATABASE, 0)

        def DOMAIN_P(self):
            return self.getToken(PostgreSQLParser.DOMAIN_P, 0)

        def any_name_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_name_list_Context,0)


        def LANGUAGE(self):
            return self.getToken(PostgreSQLParser.LANGUAGE, 0)

        def LARGE_P(self):
            return self.getToken(PostgreSQLParser.LARGE_P, 0)

        def OBJECT_P(self):
            return self.getToken(PostgreSQLParser.OBJECT_P, 0)

        def numericonly_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Numericonly_listContext,0)


        def SCHEMA(self):
            return self.getToken(PostgreSQLParser.SCHEMA, 0)

        def TABLESPACE(self):
            return self.getToken(PostgreSQLParser.TABLESPACE, 0)

        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def TABLES(self):
            return self.getToken(PostgreSQLParser.TABLES, 0)

        def IN_P(self):
            return self.getToken(PostgreSQLParser.IN_P, 0)

        def SEQUENCES(self):
            return self.getToken(PostgreSQLParser.SEQUENCES, 0)

        def FUNCTIONS(self):
            return self.getToken(PostgreSQLParser.FUNCTIONS, 0)

        def PROCEDURES(self):
            return self.getToken(PostgreSQLParser.PROCEDURES, 0)

        def ROUTINES(self):
            return self.getToken(PostgreSQLParser.ROUTINES, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_privilege_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilege_target" ):
                listener.enterPrivilege_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilege_target" ):
                listener.exitPrivilege_target(self)




    def privilege_target(self):

        localctx = PostgreSQLParser.Privilege_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_privilege_target)
        try:
            self.state = 5191
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,422,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5133
                self.qualified_name_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5134
                self.match(PostgreSQLParser.TABLE)
                self.state = 5135
                self.qualified_name_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5136
                self.match(PostgreSQLParser.SEQUENCE)
                self.state = 5137
                self.qualified_name_list()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5138
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 5139
                self.match(PostgreSQLParser.DATA_P)
                self.state = 5140
                self.match(PostgreSQLParser.WRAPPER)
                self.state = 5141
                self.name_list()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5142
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 5143
                self.match(PostgreSQLParser.SERVER)
                self.state = 5144
                self.name_list()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5145
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 5146
                self.function_with_argtypes_list()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5147
                self.match(PostgreSQLParser.PROCEDURE)
                self.state = 5148
                self.function_with_argtypes_list()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5149
                self.match(PostgreSQLParser.ROUTINE)
                self.state = 5150
                self.function_with_argtypes_list()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5151
                self.match(PostgreSQLParser.DATABASE)
                self.state = 5152
                self.name_list()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5153
                self.match(PostgreSQLParser.DOMAIN_P)
                self.state = 5154
                self.any_name_list_()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5155
                self.match(PostgreSQLParser.LANGUAGE)
                self.state = 5156
                self.name_list()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 5157
                self.match(PostgreSQLParser.LARGE_P)
                self.state = 5158
                self.match(PostgreSQLParser.OBJECT_P)
                self.state = 5159
                self.numericonly_list()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 5160
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 5161
                self.name_list()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 5162
                self.match(PostgreSQLParser.TABLESPACE)
                self.state = 5163
                self.name_list()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 5164
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 5165
                self.any_name_list_()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 5166
                self.match(PostgreSQLParser.ALL)
                self.state = 5167
                self.match(PostgreSQLParser.TABLES)
                self.state = 5168
                self.match(PostgreSQLParser.IN_P)
                self.state = 5169
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 5170
                self.name_list()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 5171
                self.match(PostgreSQLParser.ALL)
                self.state = 5172
                self.match(PostgreSQLParser.SEQUENCES)
                self.state = 5173
                self.match(PostgreSQLParser.IN_P)
                self.state = 5174
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 5175
                self.name_list()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 5176
                self.match(PostgreSQLParser.ALL)
                self.state = 5177
                self.match(PostgreSQLParser.FUNCTIONS)
                self.state = 5178
                self.match(PostgreSQLParser.IN_P)
                self.state = 5179
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 5180
                self.name_list()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 5181
                self.match(PostgreSQLParser.ALL)
                self.state = 5182
                self.match(PostgreSQLParser.PROCEDURES)
                self.state = 5183
                self.match(PostgreSQLParser.IN_P)
                self.state = 5184
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 5185
                self.name_list()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 5186
                self.match(PostgreSQLParser.ALL)
                self.state = 5187
                self.match(PostgreSQLParser.ROUTINES)
                self.state = 5188
                self.match(PostgreSQLParser.IN_P)
                self.state = 5189
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 5190
                self.name_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grantee_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def grantee(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.GranteeContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.GranteeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_grantee_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantee_list" ):
                listener.enterGrantee_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantee_list" ):
                listener.exitGrantee_list(self)




    def grantee_list(self):

        localctx = PostgreSQLParser.Grantee_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_grantee_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5193
            self.grantee()
            self.state = 5198
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 5194
                self.match(PostgreSQLParser.COMMA)
                self.state = 5195
                self.grantee()
                self.state = 5200
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GranteeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rolespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.RolespecContext,0)


        def GROUP_P(self):
            return self.getToken(PostgreSQLParser.GROUP_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_grantee

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantee" ):
                listener.enterGrantee(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantee" ):
                listener.exitGrantee(self)




    def grantee(self):

        localctx = PostgreSQLParser.GranteeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_grantee)
        try:
            self.state = 5204
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 90, 127, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 582]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5201
                self.rolespec()
                pass
            elif token in [104]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5202
                self.match(PostgreSQLParser.GROUP_P)
                self.state = 5203
                self.rolespec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_grant_option_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def GRANT(self):
            return self.getToken(PostgreSQLParser.GRANT, 0)

        def OPTION(self):
            return self.getToken(PostgreSQLParser.OPTION, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_grant_grant_option_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_grant_option_" ):
                listener.enterGrant_grant_option_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_grant_option_" ):
                listener.exitGrant_grant_option_(self)




    def grant_grant_option_(self):

        localctx = PostgreSQLParser.Grant_grant_option_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_grant_grant_option_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5206
            self.match(PostgreSQLParser.WITH)
            self.state = 5207
            self.match(PostgreSQLParser.GRANT)
            self.state = 5208
            self.match(PostgreSQLParser.OPTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantrolestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT(self):
            return self.getToken(PostgreSQLParser.GRANT, 0)

        def privilege_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Privilege_listContext,0)


        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def role_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Role_listContext,0)


        def grant_admin_option_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Grant_admin_option_Context,0)


        def granted_by_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Granted_by_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_grantrolestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantrolestmt" ):
                listener.enterGrantrolestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantrolestmt" ):
                listener.exitGrantrolestmt(self)




    def grantrolestmt(self):

        localctx = PostgreSQLParser.GrantrolestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_grantrolestmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5210
            self.match(PostgreSQLParser.GRANT)
            self.state = 5211
            self.privilege_list()
            self.state = 5212
            self.match(PostgreSQLParser.TO)
            self.state = 5213
            self.role_list()
            self.state = 5215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 5214
                self.grant_admin_option_()


            self.state = 5218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==252:
                self.state = 5217
                self.granted_by_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokerolestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE(self):
            return self.getToken(PostgreSQLParser.REVOKE, 0)

        def privilege_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Privilege_listContext,0)


        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def role_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Role_listContext,0)


        def granted_by_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Granted_by_Context,0)


        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def ADMIN(self):
            return self.getToken(PostgreSQLParser.ADMIN, 0)

        def OPTION(self):
            return self.getToken(PostgreSQLParser.OPTION, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_revokerolestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokerolestmt" ):
                listener.enterRevokerolestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokerolestmt" ):
                listener.exitRevokerolestmt(self)




    def revokerolestmt(self):

        localctx = PostgreSQLParser.RevokerolestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_revokerolestmt)
        self._la = 0 # Token type
        try:
            self.state = 5243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,431,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5220
                self.match(PostgreSQLParser.REVOKE)
                self.state = 5221
                self.privilege_list()
                self.state = 5222
                self.match(PostgreSQLParser.FROM)
                self.state = 5223
                self.role_list()
                self.state = 5225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==252:
                    self.state = 5224
                    self.granted_by_()


                self.state = 5228
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 5227
                    self.drop_behavior_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5230
                self.match(PostgreSQLParser.REVOKE)
                self.state = 5231
                self.match(PostgreSQLParser.ADMIN)
                self.state = 5232
                self.match(PostgreSQLParser.OPTION)
                self.state = 5233
                self.match(PostgreSQLParser.FOR)
                self.state = 5234
                self.privilege_list()
                self.state = 5235
                self.match(PostgreSQLParser.FROM)
                self.state = 5236
                self.role_list()
                self.state = 5238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==252:
                    self.state = 5237
                    self.granted_by_()


                self.state = 5241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 5240
                    self.drop_behavior_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_admin_option_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def ADMIN(self):
            return self.getToken(PostgreSQLParser.ADMIN, 0)

        def OPTION(self):
            return self.getToken(PostgreSQLParser.OPTION, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_grant_admin_option_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_admin_option_" ):
                listener.enterGrant_admin_option_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_admin_option_" ):
                listener.exitGrant_admin_option_(self)




    def grant_admin_option_(self):

        localctx = PostgreSQLParser.Grant_admin_option_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_grant_admin_option_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5245
            self.match(PostgreSQLParser.WITH)
            self.state = 5246
            self.match(PostgreSQLParser.ADMIN)
            self.state = 5247
            self.match(PostgreSQLParser.OPTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Granted_by_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANTED(self):
            return self.getToken(PostgreSQLParser.GRANTED, 0)

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def rolespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.RolespecContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_granted_by_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGranted_by_" ):
                listener.enterGranted_by_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGranted_by_" ):
                listener.exitGranted_by_(self)




    def granted_by_(self):

        localctx = PostgreSQLParser.Granted_by_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_granted_by_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5249
            self.match(PostgreSQLParser.GRANTED)
            self.state = 5250
            self.match(PostgreSQLParser.BY)
            self.state = 5251
            self.rolespec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterdefaultprivilegesstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def PRIVILEGES(self):
            return self.getToken(PostgreSQLParser.PRIVILEGES, 0)

        def defacloptionlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.DefacloptionlistContext,0)


        def defaclaction(self):
            return self.getTypedRuleContext(PostgreSQLParser.DefaclactionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterdefaultprivilegesstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterdefaultprivilegesstmt" ):
                listener.enterAlterdefaultprivilegesstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterdefaultprivilegesstmt" ):
                listener.exitAlterdefaultprivilegesstmt(self)




    def alterdefaultprivilegesstmt(self):

        localctx = PostgreSQLParser.AlterdefaultprivilegesstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_alterdefaultprivilegesstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5253
            self.match(PostgreSQLParser.ALTER)
            self.state = 5254
            self.match(PostgreSQLParser.DEFAULT)
            self.state = 5255
            self.match(PostgreSQLParser.PRIVILEGES)
            self.state = 5256
            self.defacloptionlist()
            self.state = 5257
            self.defaclaction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefacloptionlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def defacloption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.DefacloptionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.DefacloptionContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_defacloptionlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefacloptionlist" ):
                listener.enterDefacloptionlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefacloptionlist" ):
                listener.exitDefacloptionlist(self)




    def defacloptionlist(self):

        localctx = PostgreSQLParser.DefacloptionlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_defacloptionlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==100 or _la==106:
                self.state = 5259
                self.defacloption()
                self.state = 5264
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefacloptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN_P(self):
            return self.getToken(PostgreSQLParser.IN_P, 0)

        def SCHEMA(self):
            return self.getToken(PostgreSQLParser.SCHEMA, 0)

        def name_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Name_listContext,0)


        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def ROLE(self):
            return self.getToken(PostgreSQLParser.ROLE, 0)

        def role_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Role_listContext,0)


        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_defacloption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefacloption" ):
                listener.enterDefacloption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefacloption" ):
                listener.exitDefacloption(self)




    def defacloption(self):

        localctx = PostgreSQLParser.DefacloptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_defacloption)
        try:
            self.state = 5274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,433,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5265
                self.match(PostgreSQLParser.IN_P)
                self.state = 5266
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 5267
                self.name_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5268
                self.match(PostgreSQLParser.FOR)
                self.state = 5269
                self.match(PostgreSQLParser.ROLE)
                self.state = 5270
                self.role_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5271
                self.match(PostgreSQLParser.FOR)
                self.state = 5272
                self.match(PostgreSQLParser.USER)
                self.state = 5273
                self.role_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaclactionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT(self):
            return self.getToken(PostgreSQLParser.GRANT, 0)

        def privileges(self):
            return self.getTypedRuleContext(PostgreSQLParser.PrivilegesContext,0)


        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def defacl_privilege_target(self):
            return self.getTypedRuleContext(PostgreSQLParser.Defacl_privilege_targetContext,0)


        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def grantee_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Grantee_listContext,0)


        def grant_grant_option_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Grant_grant_option_Context,0)


        def REVOKE(self):
            return self.getToken(PostgreSQLParser.REVOKE, 0)

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def OPTION(self):
            return self.getToken(PostgreSQLParser.OPTION, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_defaclaction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaclaction" ):
                listener.enterDefaclaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaclaction" ):
                listener.exitDefaclaction(self)




    def defaclaction(self):

        localctx = PostgreSQLParser.DefaclactionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_defaclaction)
        self._la = 0 # Token type
        try:
            self.state = 5306
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,437,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5276
                self.match(PostgreSQLParser.GRANT)
                self.state = 5277
                self.privileges()
                self.state = 5278
                self.match(PostgreSQLParser.ON)
                self.state = 5279
                self.defacl_privilege_target()
                self.state = 5280
                self.match(PostgreSQLParser.TO)
                self.state = 5281
                self.grantee_list()
                self.state = 5283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143:
                    self.state = 5282
                    self.grant_grant_option_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5285
                self.match(PostgreSQLParser.REVOKE)
                self.state = 5286
                self.privileges()
                self.state = 5287
                self.match(PostgreSQLParser.ON)
                self.state = 5288
                self.defacl_privilege_target()
                self.state = 5289
                self.match(PostgreSQLParser.FROM)
                self.state = 5290
                self.grantee_list()
                self.state = 5292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 5291
                    self.drop_behavior_()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5294
                self.match(PostgreSQLParser.REVOKE)
                self.state = 5295
                self.match(PostgreSQLParser.GRANT)
                self.state = 5296
                self.match(PostgreSQLParser.OPTION)
                self.state = 5297
                self.match(PostgreSQLParser.FOR)
                self.state = 5298
                self.privileges()
                self.state = 5299
                self.match(PostgreSQLParser.ON)
                self.state = 5300
                self.defacl_privilege_target()
                self.state = 5301
                self.match(PostgreSQLParser.FROM)
                self.state = 5302
                self.grantee_list()
                self.state = 5304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 5303
                    self.drop_behavior_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Defacl_privilege_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLES(self):
            return self.getToken(PostgreSQLParser.TABLES, 0)

        def FUNCTIONS(self):
            return self.getToken(PostgreSQLParser.FUNCTIONS, 0)

        def ROUTINES(self):
            return self.getToken(PostgreSQLParser.ROUTINES, 0)

        def SEQUENCES(self):
            return self.getToken(PostgreSQLParser.SEQUENCES, 0)

        def TYPES_P(self):
            return self.getToken(PostgreSQLParser.TYPES_P, 0)

        def SCHEMAS(self):
            return self.getToken(PostgreSQLParser.SCHEMAS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_defacl_privilege_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefacl_privilege_target" ):
                listener.enterDefacl_privilege_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefacl_privilege_target" ):
                listener.exitDefacl_privilege_target(self)




    def defacl_privilege_target(self):

        localctx = PostgreSQLParser.Defacl_privilege_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_defacl_privilege_target)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5308
            _la = self._input.LA(1)
            if not(_la==250 or ((((_la - 360)) & ~0x3f) == 0 and ((1 << (_la - 360)) & 4297064449) != 0) or _la==493 or _la==494):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def INDEX(self):
            return self.getToken(PostgreSQLParser.INDEX, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def relation_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relation_exprContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def index_params(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_paramsContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def unique_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Unique_Context,0)


        def concurrently_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Concurrently_Context,0)


        def index_name_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_name_Context,0)


        def access_method_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Access_method_clauseContext,0)


        def include_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Include_Context,0)


        def reloptions_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Reloptions_Context,0)


        def opttablespace(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttablespaceContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Where_clauseContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_indexstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexstmt" ):
                listener.enterIndexstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexstmt" ):
                listener.exitIndexstmt(self)




    def indexstmt(self):

        localctx = PostgreSQLParser.IndexstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_indexstmt)
        self._la = 0 # Token type
        try:
            self.state = 5373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,453,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5310
                self.match(PostgreSQLParser.CREATE)
                self.state = 5312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 5311
                    self.unique_()


                self.state = 5314
                self.match(PostgreSQLParser.INDEX)
                self.state = 5316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==147:
                    self.state = 5315
                    self.concurrently_()


                self.state = 5319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & 137438949375) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & -31) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & -1) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & -8796093022209) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & -1) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & -34909494181889) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & 1153132601981008895) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & 536870983) != 0):
                    self.state = 5318
                    self.index_name_()


                self.state = 5321
                self.match(PostgreSQLParser.ON)
                self.state = 5322
                self.relation_expr()
                self.state = 5324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 5323
                    self.access_method_clause()


                self.state = 5326
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 5327
                self.index_params()
                self.state = 5328
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 5330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==479:
                    self.state = 5329
                    self.include_()


                self.state = 5333
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143:
                    self.state = 5332
                    self.reloptions_()


                self.state = 5336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==382:
                    self.state = 5335
                    self.opttablespace()


                self.state = 5339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==141:
                    self.state = 5338
                    self.where_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5341
                self.match(PostgreSQLParser.CREATE)
                self.state = 5343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 5342
                    self.unique_()


                self.state = 5345
                self.match(PostgreSQLParser.INDEX)
                self.state = 5347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==147:
                    self.state = 5346
                    self.concurrently_()


                self.state = 5349
                self.match(PostgreSQLParser.IF_P)
                self.state = 5350
                self.match(PostgreSQLParser.NOT)
                self.state = 5351
                self.match(PostgreSQLParser.EXISTS)
                self.state = 5352
                self.name()
                self.state = 5353
                self.match(PostgreSQLParser.ON)
                self.state = 5354
                self.relation_expr()
                self.state = 5356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 5355
                    self.access_method_clause()


                self.state = 5358
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 5359
                self.index_params()
                self.state = 5360
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 5362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==479:
                    self.state = 5361
                    self.include_()


                self.state = 5365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143:
                    self.state = 5364
                    self.reloptions_()


                self.state = 5368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==382:
                    self.state = 5367
                    self.opttablespace()


                self.state = 5371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==141:
                    self.state = 5370
                    self.where_clause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unique_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNIQUE(self):
            return self.getToken(PostgreSQLParser.UNIQUE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_unique_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnique_" ):
                listener.enterUnique_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnique_" ):
                listener.exitUnique_(self)




    def unique_(self):

        localctx = PostgreSQLParser.Unique_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_unique_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5375
            self.match(PostgreSQLParser.UNIQUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_name_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_single_name_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_name_" ):
                listener.enterSingle_name_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_name_" ):
                listener.exitSingle_name_(self)




    def single_name_(self):

        localctx = PostgreSQLParser.Single_name_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_single_name_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5377
            self.colid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Concurrently_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONCURRENTLY(self):
            return self.getToken(PostgreSQLParser.CONCURRENTLY, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_concurrently_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcurrently_" ):
                listener.enterConcurrently_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcurrently_" ):
                listener.exitConcurrently_(self)




    def concurrently_(self):

        localctx = PostgreSQLParser.Concurrently_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_concurrently_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5379
            self.match(PostgreSQLParser.CONCURRENTLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_name_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_name_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name_" ):
                listener.enterIndex_name_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name_" ):
                listener.exitIndex_name_(self)




    def index_name_(self):

        localctx = PostgreSQLParser.Index_name_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_index_name_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5381
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Access_method_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_access_method_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccess_method_clause" ):
                listener.enterAccess_method_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccess_method_clause" ):
                listener.exitAccess_method_clause(self)




    def access_method_clause(self):

        localctx = PostgreSQLParser.Access_method_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_access_method_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5383
            self.match(PostgreSQLParser.USING)
            self.state = 5384
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Index_elemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Index_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_params" ):
                listener.enterIndex_params(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_params" ):
                listener.exitIndex_params(self)




    def index_params(self):

        localctx = PostgreSQLParser.Index_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_index_params)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5386
            self.index_elem()
            self.state = 5391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 5387
                self.match(PostgreSQLParser.COMMA)
                self.state = 5388
                self.index_elem()
                self.state = 5393
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_elem_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def collate_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Collate_Context,0)


        def class_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Class_Context,0)


        def asc_desc_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Asc_desc_Context,0)


        def nulls_order_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Nulls_order_Context,0)


        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def reloptions(self):
            return self.getTypedRuleContext(PostgreSQLParser.ReloptionsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_elem_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_elem_options" ):
                listener.enterIndex_elem_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_elem_options" ):
                listener.exitIndex_elem_options(self)




    def index_elem_options(self):

        localctx = PostgreSQLParser.Index_elem_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_index_elem_options)
        self._la = 0 # Token type
        try:
            self.state = 5417
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,462,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 5394
                    self.collate_()


                self.state = 5398
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,456,self._ctx)
                if la_ == 1:
                    self.state = 5397
                    self.class_()


                self.state = 5401
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75 or _la==93:
                    self.state = 5400
                    self.asc_desc_()


                self.state = 5404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==304:
                    self.state = 5403
                    self.nulls_order_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 5406
                    self.collate_()


                self.state = 5409
                self.any_name()
                self.state = 5410
                self.reloptions()
                self.state = 5412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75 or _la==93:
                    self.state = 5411
                    self.asc_desc_()


                self.state = 5415
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==304:
                    self.state = 5414
                    self.nulls_order_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def index_elem_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_elem_optionsContext,0)


        def func_expr_windowless(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_expr_windowlessContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_elem" ):
                listener.enterIndex_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_elem" ):
                listener.exitIndex_elem(self)




    def index_elem(self):

        localctx = PostgreSQLParser.Index_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_index_elem)
        try:
            self.state = 5430
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,463,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5419
                self.colid()
                self.state = 5420
                self.index_elem_options()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5422
                self.func_expr_windowless()
                self.state = 5423
                self.index_elem_options()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5425
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 5426
                self.a_expr()
                self.state = 5427
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 5428
                self.index_elem_options()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Include_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCLUDE(self):
            return self.getToken(PostgreSQLParser.INCLUDE, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def index_including_params(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_including_paramsContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_include_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclude_" ):
                listener.enterInclude_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclude_" ):
                listener.exitInclude_(self)




    def include_(self):

        localctx = PostgreSQLParser.Include_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_include_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5432
            self.match(PostgreSQLParser.INCLUDE)
            self.state = 5433
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 5434
            self.index_including_params()
            self.state = 5435
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_including_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Index_elemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Index_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_including_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_including_params" ):
                listener.enterIndex_including_params(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_including_params" ):
                listener.exitIndex_including_params(self)




    def index_including_params(self):

        localctx = PostgreSQLParser.Index_including_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_index_including_params)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5437
            self.index_elem()
            self.state = 5442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 5438
                self.match(PostgreSQLParser.COMMA)
                self.state = 5439
                self.index_elem()
                self.state = 5444
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collate_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLLATE(self):
            return self.getToken(PostgreSQLParser.COLLATE, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_collate_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollate_" ):
                listener.enterCollate_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollate_" ):
                listener.exitCollate_(self)




    def collate_(self):

        localctx = PostgreSQLParser.Collate_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_collate_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5445
            self.match(PostgreSQLParser.COLLATE)
            self.state = 5446
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_class_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_" ):
                listener.enterClass_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_" ):
                listener.exitClass_(self)




    def class_(self):

        localctx = PostgreSQLParser.Class_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_class_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5448
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Asc_desc_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASC(self):
            return self.getToken(PostgreSQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(PostgreSQLParser.DESC, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_asc_desc_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsc_desc_" ):
                listener.enterAsc_desc_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsc_desc_" ):
                listener.exitAsc_desc_(self)




    def asc_desc_(self):

        localctx = PostgreSQLParser.Asc_desc_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_asc_desc_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5450
            _la = self._input.LA(1)
            if not(_la==75 or _la==93):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nulls_order_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLS_P(self):
            return self.getToken(PostgreSQLParser.NULLS_P, 0)

        def FIRST_P(self):
            return self.getToken(PostgreSQLParser.FIRST_P, 0)

        def LAST_P(self):
            return self.getToken(PostgreSQLParser.LAST_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_nulls_order_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNulls_order_" ):
                listener.enterNulls_order_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNulls_order_" ):
                listener.exitNulls_order_(self)




    def nulls_order_(self):

        localctx = PostgreSQLParser.Nulls_order_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_nulls_order_)
        try:
            self.state = 5456
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,465,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5452
                self.match(PostgreSQLParser.NULLS_P)
                self.state = 5453
                self.match(PostgreSQLParser.FIRST_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5454
                self.match(PostgreSQLParser.NULLS_P)
                self.state = 5455
                self.match(PostgreSQLParser.LAST_P)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatefunctionstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def func_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_nameContext,0)


        def func_args_with_defaults(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_args_with_defaultsContext,0)


        def createfunc_opt_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Createfunc_opt_listContext,0)


        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def PROCEDURE(self):
            return self.getToken(PostgreSQLParser.PROCEDURE, 0)

        def or_replace_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Or_replace_Context,0)


        def RETURNS(self):
            return self.getToken(PostgreSQLParser.RETURNS, 0)

        def func_return(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_returnContext,0)


        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def table_func_column_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_func_column_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createfunctionstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatefunctionstmt" ):
                listener.enterCreatefunctionstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatefunctionstmt" ):
                listener.exitCreatefunctionstmt(self)




    def createfunctionstmt(self):

        localctx = PostgreSQLParser.CreatefunctionstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_createfunctionstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5458
            self.match(PostgreSQLParser.CREATE)
            self.state = 5460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 5459
                self.or_replace_()


            self.state = 5462
            _la = self._input.LA(1)
            if not(_la==249 or _la==327):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5463
            self.func_name()
            self.state = 5464
            self.func_args_with_defaults()
            self.state = 5474
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,468,self._ctx)
            if la_ == 1:
                self.state = 5465
                self.match(PostgreSQLParser.RETURNS)
                self.state = 5472
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 429, 432, 433, 434, 436, 437, 440, 444, 446, 447, 449, 450, 454, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 529, 542, 553, 554, 555, 559, 582]:
                    self.state = 5466
                    self.func_return()
                    pass
                elif token in [130]:
                    self.state = 5467
                    self.match(PostgreSQLParser.TABLE)
                    self.state = 5468
                    self.match(PostgreSQLParser.OPEN_PAREN)
                    self.state = 5469
                    self.table_func_column_list()
                    self.state = 5470
                    self.match(PostgreSQLParser.CLOSE_PAREN)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 5476
            self.createfunc_opt_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_replace_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(PostgreSQLParser.OR, 0)

        def REPLACE(self):
            return self.getToken(PostgreSQLParser.REPLACE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_or_replace_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_replace_" ):
                listener.enterOr_replace_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_replace_" ):
                listener.exitOr_replace_(self)




    def or_replace_(self):

        localctx = PostgreSQLParser.Or_replace_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_or_replace_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5478
            self.match(PostgreSQLParser.OR)
            self.state = 5479
            self.match(PostgreSQLParser.REPLACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_argsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def func_args_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_args_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_args" ):
                listener.enterFunc_args(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_args" ):
                listener.exitFunc_args(self)




    def func_args(self):

        localctx = PostgreSQLParser.Func_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_func_args)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5481
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 5483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8795019280384) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4398046511111) != 0) or ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & -31) != 0) or ((((_la - 203)) & ~0x3f) == 0 and ((1 << (_la - 203)) & -1) != 0) or ((((_la - 267)) & ~0x3f) == 0 and ((1 << (_la - 267)) & -1) != 0) or ((((_la - 331)) & ~0x3f) == 0 and ((1 << (_la - 331)) & -5) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & 637865130389929983) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & 360259245446266879) != 0) or ((((_la - 542)) & ~0x3f) == 0 and ((1 << (_la - 542)) & 1099511773185) != 0):
                self.state = 5482
                self.func_args_list()


            self.state = 5485
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_args_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Func_argContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Func_argContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_args_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_args_list" ):
                listener.enterFunc_args_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_args_list" ):
                listener.exitFunc_args_list(self)




    def func_args_list(self):

        localctx = PostgreSQLParser.Func_args_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_func_args_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5487
            self.func_arg()
            self.state = 5492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 5488
                self.match(PostgreSQLParser.COMMA)
                self.state = 5489
                self.func_arg()
                self.state = 5494
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_with_argtypes_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_with_argtypes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Function_with_argtypesContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Function_with_argtypesContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_function_with_argtypes_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_with_argtypes_list" ):
                listener.enterFunction_with_argtypes_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_with_argtypes_list" ):
                listener.exitFunction_with_argtypes_list(self)




    def function_with_argtypes_list(self):

        localctx = PostgreSQLParser.Function_with_argtypes_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_function_with_argtypes_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5495
            self.function_with_argtypes()
            self.state = 5500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 5496
                self.match(PostgreSQLParser.COMMA)
                self.state = 5497
                self.function_with_argtypes()
                self.state = 5502
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_with_argtypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_nameContext,0)


        def func_args(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_argsContext,0)


        def type_func_name_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_func_name_keywordContext,0)


        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def indirection(self):
            return self.getTypedRuleContext(PostgreSQLParser.IndirectionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_function_with_argtypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_with_argtypes" ):
                listener.enterFunction_with_argtypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_with_argtypes" ):
                listener.exitFunction_with_argtypes(self)




    def function_with_argtypes(self):

        localctx = PostgreSQLParser.Function_with_argtypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_function_with_argtypes)
        self._la = 0 # Token type
        try:
            self.state = 5511
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,473,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5503
                self.func_name()
                self.state = 5504
                self.func_args()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5506
                self.type_func_name_keyword()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5507
                self.colid()
                self.state = 5509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4 or _la==11:
                    self.state = 5508
                    self.indirection()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_args_with_defaultsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def func_args_with_defaults_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_args_with_defaults_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_args_with_defaults

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_args_with_defaults" ):
                listener.enterFunc_args_with_defaults(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_args_with_defaults" ):
                listener.exitFunc_args_with_defaults(self)




    def func_args_with_defaults(self):

        localctx = PostgreSQLParser.Func_args_with_defaultsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_func_args_with_defaults)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5513
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 5515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8795019280384) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4398046511111) != 0) or ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & -31) != 0) or ((((_la - 203)) & ~0x3f) == 0 and ((1 << (_la - 203)) & -1) != 0) or ((((_la - 267)) & ~0x3f) == 0 and ((1 << (_la - 267)) & -1) != 0) or ((((_la - 331)) & ~0x3f) == 0 and ((1 << (_la - 331)) & -5) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & 637865130389929983) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & 360259245446266879) != 0) or ((((_la - 542)) & ~0x3f) == 0 and ((1 << (_la - 542)) & 1099511773185) != 0):
                self.state = 5514
                self.func_args_with_defaults_list()


            self.state = 5517
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_args_with_defaults_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_arg_with_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Func_arg_with_defaultContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Func_arg_with_defaultContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_args_with_defaults_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_args_with_defaults_list" ):
                listener.enterFunc_args_with_defaults_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_args_with_defaults_list" ):
                listener.exitFunc_args_with_defaults_list(self)




    def func_args_with_defaults_list(self):

        localctx = PostgreSQLParser.Func_args_with_defaults_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_func_args_with_defaults_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5519
            self.func_arg_with_default()
            self.state = 5524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 5520
                self.match(PostgreSQLParser.COMMA)
                self.state = 5521
                self.func_arg_with_default()
                self.state = 5526
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arg_class(self):
            return self.getTypedRuleContext(PostgreSQLParser.Arg_classContext,0)


        def func_type(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_typeContext,0)


        def param_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Param_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_arg" ):
                listener.enterFunc_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_arg" ):
                listener.exitFunc_arg(self)




    def func_arg(self):

        localctx = PostgreSQLParser.Func_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_func_arg)
        self._la = 0 # Token type
        try:
            self.state = 5540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,478,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5527
                self.arg_class()
                self.state = 5529
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,476,self._ctx)
                if la_ == 1:
                    self.state = 5528
                    self.param_name()


                self.state = 5531
                self.func_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5533
                self.param_name()
                self.state = 5535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==106 or _la==139 or _la==431 or _la==491:
                    self.state = 5534
                    self.arg_class()


                self.state = 5537
                self.func_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5539
                self.func_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arg_classContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN_P(self):
            return self.getToken(PostgreSQLParser.IN_P, 0)

        def OUT_P(self):
            return self.getToken(PostgreSQLParser.OUT_P, 0)

        def INOUT(self):
            return self.getToken(PostgreSQLParser.INOUT, 0)

        def VARIADIC(self):
            return self.getToken(PostgreSQLParser.VARIADIC, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_arg_class

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg_class" ):
                listener.enterArg_class(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg_class" ):
                listener.exitArg_class(self)




    def arg_class(self):

        localctx = PostgreSQLParser.Arg_classContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_arg_class)
        self._la = 0 # Token type
        try:
            self.state = 5549
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [106]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5542
                self.match(PostgreSQLParser.IN_P)
                self.state = 5544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==491:
                    self.state = 5543
                    self.match(PostgreSQLParser.OUT_P)


                pass
            elif token in [491]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5546
                self.match(PostgreSQLParser.OUT_P)
                pass
            elif token in [431]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5547
                self.match(PostgreSQLParser.INOUT)
                pass
            elif token in [139]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5548
                self.match(PostgreSQLParser.VARIADIC)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_function_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_function_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_param_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_name" ):
                listener.enterParam_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_name" ):
                listener.exitParam_name(self)




    def param_name(self):

        localctx = PostgreSQLParser.Param_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_param_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5551
            self.type_function_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_returnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_type(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_typeContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_return" ):
                listener.enterFunc_return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_return" ):
                listener.exitFunc_return(self)




    def func_return(self):

        localctx = PostgreSQLParser.Func_returnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_func_return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5553
            self.func_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typename(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,0)


        def type_function_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_function_nameContext,0)


        def attrs(self):
            return self.getTypedRuleContext(PostgreSQLParser.AttrsContext,0)


        def PERCENT(self):
            return self.getToken(PostgreSQLParser.PERCENT, 0)

        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def SETOF(self):
            return self.getToken(PostgreSQLParser.SETOF, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_type" ):
                listener.enterFunc_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_type" ):
                listener.exitFunc_type(self)




    def func_type(self):

        localctx = PostgreSQLParser.Func_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_func_type)
        self._la = 0 # Token type
        try:
            self.state = 5564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,482,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5555
                self.typename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==446:
                    self.state = 5556
                    self.match(PostgreSQLParser.SETOF)


                self.state = 5559
                self.type_function_name()
                self.state = 5560
                self.attrs()
                self.state = 5561
                self.match(PostgreSQLParser.PERCENT)
                self.state = 5562
                self.match(PostgreSQLParser.TYPE_P)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_arg_with_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_arg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_argContext,0)


        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def EQUAL(self):
            return self.getToken(PostgreSQLParser.EQUAL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_arg_with_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_arg_with_default" ):
                listener.enterFunc_arg_with_default(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_arg_with_default" ):
                listener.exitFunc_arg_with_default(self)




    def func_arg_with_default(self):

        localctx = PostgreSQLParser.Func_arg_with_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_func_arg_with_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5566
            self.func_arg()
            self.state = 5569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10 or _la==91:
                self.state = 5567
                _la = self._input.LA(1)
                if not(_la==10 or _la==91):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5568
                self.a_expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggr_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_arg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_argContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_aggr_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggr_arg" ):
                listener.enterAggr_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggr_arg" ):
                listener.exitAggr_arg(self)




    def aggr_arg(self):

        localctx = PostgreSQLParser.Aggr_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_aggr_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5571
            self.func_arg()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggr_argsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def STAR(self):
            return self.getToken(PostgreSQLParser.STAR, 0)

        def aggr_args_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Aggr_args_listContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Aggr_args_listContext,i)


        def ORDER(self):
            return self.getToken(PostgreSQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_aggr_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggr_args" ):
                listener.enterAggr_args(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggr_args" ):
                listener.exitAggr_args(self)




    def aggr_args(self):

        localctx = PostgreSQLParser.Aggr_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_aggr_args)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5573
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 5584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,484,self._ctx)
            if la_ == 1:
                self.state = 5574
                self.match(PostgreSQLParser.STAR)
                pass

            elif la_ == 2:
                self.state = 5575
                self.aggr_args_list()
                pass

            elif la_ == 3:
                self.state = 5576
                self.match(PostgreSQLParser.ORDER)
                self.state = 5577
                self.match(PostgreSQLParser.BY)
                self.state = 5578
                self.aggr_args_list()
                pass

            elif la_ == 4:
                self.state = 5579
                self.aggr_args_list()
                self.state = 5580
                self.match(PostgreSQLParser.ORDER)
                self.state = 5581
                self.match(PostgreSQLParser.BY)
                self.state = 5582
                self.aggr_args_list()
                pass


            self.state = 5586
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggr_args_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggr_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Aggr_argContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Aggr_argContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_aggr_args_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggr_args_list" ):
                listener.enterAggr_args_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggr_args_list" ):
                listener.exitAggr_args_list(self)




    def aggr_args_list(self):

        localctx = PostgreSQLParser.Aggr_args_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_aggr_args_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5588
            self.aggr_arg()
            self.state = 5593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 5589
                self.match(PostgreSQLParser.COMMA)
                self.state = 5590
                self.aggr_arg()
                self.state = 5595
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_with_argtypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_nameContext,0)


        def aggr_args(self):
            return self.getTypedRuleContext(PostgreSQLParser.Aggr_argsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_aggregate_with_argtypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_with_argtypes" ):
                listener.enterAggregate_with_argtypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_with_argtypes" ):
                listener.exitAggregate_with_argtypes(self)




    def aggregate_with_argtypes(self):

        localctx = PostgreSQLParser.Aggregate_with_argtypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_aggregate_with_argtypes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5596
            self.func_name()
            self.state = 5597
            self.aggr_args()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_with_argtypes_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_with_argtypes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Aggregate_with_argtypesContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Aggregate_with_argtypesContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_aggregate_with_argtypes_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_with_argtypes_list" ):
                listener.enterAggregate_with_argtypes_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_with_argtypes_list" ):
                listener.exitAggregate_with_argtypes_list(self)




    def aggregate_with_argtypes_list(self):

        localctx = PostgreSQLParser.Aggregate_with_argtypes_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_aggregate_with_argtypes_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5599
            self.aggregate_with_argtypes()
            self.state = 5604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 5600
                self.match(PostgreSQLParser.COMMA)
                self.state = 5601
                self.aggregate_with_argtypes()
                self.state = 5606
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Createfunc_opt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createfunc_opt_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Createfunc_opt_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Createfunc_opt_itemContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createfunc_opt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatefunc_opt_list" ):
                listener.enterCreatefunc_opt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatefunc_opt_list" ):
                listener.exitCreatefunc_opt_list(self)




    def createfunc_opt_list(self):

        localctx = PostgreSQLParser.Createfunc_opt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_createfunc_opt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5608 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5607
                self.createfunc_opt_item()
                self.state = 5610 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==74 or _la==115 or _la==142 or _la==187 or ((((_la - 208)) & ~0x3f) == 0 and ((1 << (_la - 208)) & 4503633987108865) != 0) or _la==276 or _la==279 or ((((_la - 344)) & ~0x3f) == 0 and ((1 << (_la - 344)) & 8624554121) != 0) or _la==408 or ((((_la - 481)) & ~0x3f) == 0 and ((1 << (_la - 481)) & 196609) != 0)):
                    break

            self.ParseRoutineBody();
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_func_opt_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALLED(self):
            return self.getToken(PostgreSQLParser.CALLED, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def NULL_P(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.NULL_P)
            else:
                return self.getToken(PostgreSQLParser.NULL_P, i)

        def INPUT_P(self):
            return self.getToken(PostgreSQLParser.INPUT_P, 0)

        def RETURNS(self):
            return self.getToken(PostgreSQLParser.RETURNS, 0)

        def STRICT_P(self):
            return self.getToken(PostgreSQLParser.STRICT_P, 0)

        def IMMUTABLE(self):
            return self.getToken(PostgreSQLParser.IMMUTABLE, 0)

        def STABLE(self):
            return self.getToken(PostgreSQLParser.STABLE, 0)

        def VOLATILE(self):
            return self.getToken(PostgreSQLParser.VOLATILE, 0)

        def EXTERNAL(self):
            return self.getToken(PostgreSQLParser.EXTERNAL, 0)

        def SECURITY(self):
            return self.getToken(PostgreSQLParser.SECURITY, 0)

        def DEFINER(self):
            return self.getToken(PostgreSQLParser.DEFINER, 0)

        def INVOKER(self):
            return self.getToken(PostgreSQLParser.INVOKER, 0)

        def LEAKPROOF(self):
            return self.getToken(PostgreSQLParser.LEAKPROOF, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def COST(self):
            return self.getToken(PostgreSQLParser.COST, 0)

        def numericonly(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericonlyContext,0)


        def ROWS(self):
            return self.getToken(PostgreSQLParser.ROWS, 0)

        def SUPPORT(self):
            return self.getToken(PostgreSQLParser.SUPPORT, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def functionsetresetclause(self):
            return self.getTypedRuleContext(PostgreSQLParser.FunctionsetresetclauseContext,0)


        def PARALLEL(self):
            return self.getToken(PostgreSQLParser.PARALLEL, 0)

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_common_func_opt_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_func_opt_item" ):
                listener.enterCommon_func_opt_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_func_opt_item" ):
                listener.exitCommon_func_opt_item(self)




    def common_func_opt_item(self):

        localctx = PostgreSQLParser.Common_func_opt_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_common_func_opt_item)
        try:
            self.state = 5649
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,488,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5614
                self.match(PostgreSQLParser.CALLED)
                self.state = 5615
                self.match(PostgreSQLParser.ON)
                self.state = 5616
                self.match(PostgreSQLParser.NULL_P)
                self.state = 5617
                self.match(PostgreSQLParser.INPUT_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5618
                self.match(PostgreSQLParser.RETURNS)
                self.state = 5619
                self.match(PostgreSQLParser.NULL_P)
                self.state = 5620
                self.match(PostgreSQLParser.ON)
                self.state = 5621
                self.match(PostgreSQLParser.NULL_P)
                self.state = 5622
                self.match(PostgreSQLParser.INPUT_P)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5623
                self.match(PostgreSQLParser.STRICT_P)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5624
                self.match(PostgreSQLParser.IMMUTABLE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5625
                self.match(PostgreSQLParser.STABLE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5626
                self.match(PostgreSQLParser.VOLATILE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5627
                self.match(PostgreSQLParser.EXTERNAL)
                self.state = 5628
                self.match(PostgreSQLParser.SECURITY)
                self.state = 5629
                self.match(PostgreSQLParser.DEFINER)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5630
                self.match(PostgreSQLParser.EXTERNAL)
                self.state = 5631
                self.match(PostgreSQLParser.SECURITY)
                self.state = 5632
                self.match(PostgreSQLParser.INVOKER)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5633
                self.match(PostgreSQLParser.SECURITY)
                self.state = 5634
                self.match(PostgreSQLParser.DEFINER)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5635
                self.match(PostgreSQLParser.SECURITY)
                self.state = 5636
                self.match(PostgreSQLParser.INVOKER)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5637
                self.match(PostgreSQLParser.LEAKPROOF)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 5638
                self.match(PostgreSQLParser.NOT)
                self.state = 5639
                self.match(PostgreSQLParser.LEAKPROOF)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 5640
                self.match(PostgreSQLParser.COST)
                self.state = 5641
                self.numericonly()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 5642
                self.match(PostgreSQLParser.ROWS)
                self.state = 5643
                self.numericonly()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 5644
                self.match(PostgreSQLParser.SUPPORT)
                self.state = 5645
                self.any_name()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 5646
                self.functionsetresetclause()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 5647
                self.match(PostgreSQLParser.PARALLEL)
                self.state = 5648
                self.colid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Createfunc_opt_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def func_as(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_asContext,0)


        def LANGUAGE(self):
            return self.getToken(PostgreSQLParser.LANGUAGE, 0)

        def nonreservedword_or_sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.Nonreservedword_or_sconstContext,0)


        def TRANSFORM(self):
            return self.getToken(PostgreSQLParser.TRANSFORM, 0)

        def transform_type_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Transform_type_listContext,0)


        def WINDOW(self):
            return self.getToken(PostgreSQLParser.WINDOW, 0)

        def common_func_opt_item(self):
            return self.getTypedRuleContext(PostgreSQLParser.Common_func_opt_itemContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createfunc_opt_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatefunc_opt_item" ):
                listener.enterCreatefunc_opt_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatefunc_opt_item" ):
                listener.exitCreatefunc_opt_item(self)




    def createfunc_opt_item(self):

        localctx = PostgreSQLParser.Createfunc_opt_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_createfunc_opt_item)
        try:
            self.state = 5659
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [74]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5651
                self.match(PostgreSQLParser.AS)
                self.state = 5652
                self.func_as()
                pass
            elif token in [276]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5653
                self.match(PostgreSQLParser.LANGUAGE)
                self.state = 5654
                self.nonreservedword_or_sconst()
                pass
            elif token in [481]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5655
                self.match(PostgreSQLParser.TRANSFORM)
                self.state = 5656
                self.transform_type_list()
                pass
            elif token in [142]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5657
                self.match(PostgreSQLParser.WINDOW)
                pass
            elif token in [115, 187, 208, 243, 260, 279, 344, 347, 351, 358, 364, 369, 377, 408, 497, 498]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5658
                self.common_func_opt_item()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_asContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.def_ = None # SconstContext

        def sconst(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SconstContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SconstContext,i)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_as

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_as" ):
                listener.enterFunc_as(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_as" ):
                listener.exitFunc_as(self)




    def func_as(self):

        localctx = PostgreSQLParser.Func_asContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_func_as)
        try:
            self.state = 5666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,490,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5661
                localctx.def_ = self.sconst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5662
                self.sconst()
                self.state = 5663
                self.match(PostgreSQLParser.COMMA)
                self.state = 5664
                self.sconst()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transform_type_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.FOR)
            else:
                return self.getToken(PostgreSQLParser.FOR, i)

        def TYPE_P(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.TYPE_P)
            else:
                return self.getToken(PostgreSQLParser.TYPE_P, i)

        def typename(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TypenameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_transform_type_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransform_type_list" ):
                listener.enterTransform_type_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransform_type_list" ):
                listener.exitTransform_type_list(self)




    def transform_type_list(self):

        localctx = PostgreSQLParser.Transform_type_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_transform_type_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5668
            self.match(PostgreSQLParser.FOR)
            self.state = 5669
            self.match(PostgreSQLParser.TYPE_P)
            self.state = 5670
            self.typename()
            self.state = 5677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 5671
                self.match(PostgreSQLParser.COMMA)
                self.state = 5672
                self.match(PostgreSQLParser.FOR)
                self.state = 5673
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 5674
                self.typename()
                self.state = 5679
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Definition_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def definition(self):
            return self.getTypedRuleContext(PostgreSQLParser.DefinitionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_definition_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinition_" ):
                listener.enterDefinition_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinition_" ):
                listener.exitDefinition_(self)




    def definition_(self):

        localctx = PostgreSQLParser.Definition_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_definition_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5680
            self.match(PostgreSQLParser.WITH)
            self.state = 5681
            self.definition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_func_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Param_nameContext,0)


        def func_type(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_typeContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_func_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_func_column" ):
                listener.enterTable_func_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_func_column" ):
                listener.exitTable_func_column(self)




    def table_func_column(self):

        localctx = PostgreSQLParser.Table_func_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_table_func_column)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5683
            self.param_name()
            self.state = 5684
            self.func_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_func_column_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_func_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_func_columnContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_func_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_func_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_func_column_list" ):
                listener.enterTable_func_column_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_func_column_list" ):
                listener.exitTable_func_column_list(self)




    def table_func_column_list(self):

        localctx = PostgreSQLParser.Table_func_column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_table_func_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5686
            self.table_func_column()
            self.state = 5691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 5687
                self.match(PostgreSQLParser.COMMA)
                self.state = 5688
                self.table_func_column()
                self.state = 5693
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterfunctionstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_with_argtypesContext,0)


        def alterfunc_opt_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Alterfunc_opt_listContext,0)


        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def PROCEDURE(self):
            return self.getToken(PostgreSQLParser.PROCEDURE, 0)

        def ROUTINE(self):
            return self.getToken(PostgreSQLParser.ROUTINE, 0)

        def restrict_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Restrict_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterfunctionstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterfunctionstmt" ):
                listener.enterAlterfunctionstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterfunctionstmt" ):
                listener.exitAlterfunctionstmt(self)




    def alterfunctionstmt(self):

        localctx = PostgreSQLParser.AlterfunctionstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_alterfunctionstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5694
            self.match(PostgreSQLParser.ALTER)
            self.state = 5695
            _la = self._input.LA(1)
            if not(_la==249 or _la==327 or _la==480):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5696
            self.function_with_argtypes()
            self.state = 5697
            self.alterfunc_opt_list()
            self.state = 5699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==346:
                self.state = 5698
                self.restrict_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alterfunc_opt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def common_func_opt_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Common_func_opt_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Common_func_opt_itemContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterfunc_opt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterfunc_opt_list" ):
                listener.enterAlterfunc_opt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterfunc_opt_list" ):
                listener.exitAlterfunc_opt_list(self)




    def alterfunc_opt_list(self):

        localctx = PostgreSQLParser.Alterfunc_opt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_alterfunc_opt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5702 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5701
                self.common_func_opt_item()
                self.state = 5704 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==115 or ((((_la - 187)) & ~0x3f) == 0 and ((1 << (_la - 187)) & 72057594040025089) != 0) or _la==260 or _la==279 or ((((_la - 344)) & ~0x3f) == 0 and ((1 << (_la - 344)) & 8624554121) != 0) or _la==408 or _la==497 or _la==498):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Restrict_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESTRICT(self):
            return self.getToken(PostgreSQLParser.RESTRICT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_restrict_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestrict_" ):
                listener.enterRestrict_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestrict_" ):
                listener.exitRestrict_(self)




    def restrict_(self):

        localctx = PostgreSQLParser.Restrict_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_restrict_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5706
            self.match(PostgreSQLParser.RESTRICT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemovefuncstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def function_with_argtypes_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_with_argtypes_listContext,0)


        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def PROCEDURE(self):
            return self.getToken(PostgreSQLParser.PROCEDURE, 0)

        def ROUTINE(self):
            return self.getToken(PostgreSQLParser.ROUTINE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_removefuncstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemovefuncstmt" ):
                listener.enterRemovefuncstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemovefuncstmt" ):
                listener.exitRemovefuncstmt(self)




    def removefuncstmt(self):

        localctx = PostgreSQLParser.RemovefuncstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_removefuncstmt)
        self._la = 0 # Token type
        try:
            self.state = 5750
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,501,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5708
                self.match(PostgreSQLParser.DROP)
                self.state = 5709
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 5710
                self.function_with_argtypes_list()
                self.state = 5712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 5711
                    self.drop_behavior_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5714
                self.match(PostgreSQLParser.DROP)
                self.state = 5715
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 5716
                self.match(PostgreSQLParser.IF_P)
                self.state = 5717
                self.match(PostgreSQLParser.EXISTS)
                self.state = 5718
                self.function_with_argtypes_list()
                self.state = 5720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 5719
                    self.drop_behavior_()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5722
                self.match(PostgreSQLParser.DROP)
                self.state = 5723
                self.match(PostgreSQLParser.PROCEDURE)
                self.state = 5724
                self.function_with_argtypes_list()
                self.state = 5726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 5725
                    self.drop_behavior_()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5728
                self.match(PostgreSQLParser.DROP)
                self.state = 5729
                self.match(PostgreSQLParser.PROCEDURE)
                self.state = 5730
                self.match(PostgreSQLParser.IF_P)
                self.state = 5731
                self.match(PostgreSQLParser.EXISTS)
                self.state = 5732
                self.function_with_argtypes_list()
                self.state = 5734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 5733
                    self.drop_behavior_()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5736
                self.match(PostgreSQLParser.DROP)
                self.state = 5737
                self.match(PostgreSQLParser.ROUTINE)
                self.state = 5738
                self.function_with_argtypes_list()
                self.state = 5740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 5739
                    self.drop_behavior_()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5742
                self.match(PostgreSQLParser.DROP)
                self.state = 5743
                self.match(PostgreSQLParser.ROUTINE)
                self.state = 5744
                self.match(PostgreSQLParser.IF_P)
                self.state = 5745
                self.match(PostgreSQLParser.EXISTS)
                self.state = 5746
                self.function_with_argtypes_list()
                self.state = 5748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 5747
                    self.drop_behavior_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemoveaggrstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def AGGREGATE(self):
            return self.getToken(PostgreSQLParser.AGGREGATE, 0)

        def aggregate_with_argtypes_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Aggregate_with_argtypes_listContext,0)


        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_removeaggrstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemoveaggrstmt" ):
                listener.enterRemoveaggrstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemoveaggrstmt" ):
                listener.exitRemoveaggrstmt(self)




    def removeaggrstmt(self):

        localctx = PostgreSQLParser.RemoveaggrstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_removeaggrstmt)
        self._la = 0 # Token type
        try:
            self.state = 5766
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,504,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5752
                self.match(PostgreSQLParser.DROP)
                self.state = 5753
                self.match(PostgreSQLParser.AGGREGATE)
                self.state = 5754
                self.aggregate_with_argtypes_list()
                self.state = 5756
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 5755
                    self.drop_behavior_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5758
                self.match(PostgreSQLParser.DROP)
                self.state = 5759
                self.match(PostgreSQLParser.AGGREGATE)
                self.state = 5760
                self.match(PostgreSQLParser.IF_P)
                self.state = 5761
                self.match(PostgreSQLParser.EXISTS)
                self.state = 5762
                self.aggregate_with_argtypes_list()
                self.state = 5764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 5763
                    self.drop_behavior_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemoveoperstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def operator_with_argtypes_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Operator_with_argtypes_listContext,0)


        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_removeoperstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemoveoperstmt" ):
                listener.enterRemoveoperstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemoveoperstmt" ):
                listener.exitRemoveoperstmt(self)




    def removeoperstmt(self):

        localctx = PostgreSQLParser.RemoveoperstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_removeoperstmt)
        self._la = 0 # Token type
        try:
            self.state = 5782
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,507,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5768
                self.match(PostgreSQLParser.DROP)
                self.state = 5769
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 5770
                self.operator_with_argtypes_list()
                self.state = 5772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 5771
                    self.drop_behavior_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5774
                self.match(PostgreSQLParser.DROP)
                self.state = 5775
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 5776
                self.match(PostgreSQLParser.IF_P)
                self.state = 5777
                self.match(PostgreSQLParser.EXISTS)
                self.state = 5778
                self.operator_with_argtypes_list()
                self.state = 5780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 5779
                    self.drop_behavior_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Oper_argtypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def typename(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TypenameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def NONE(self):
            return self.getToken(PostgreSQLParser.NONE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_oper_argtypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOper_argtypes" ):
                listener.enterOper_argtypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOper_argtypes" ):
                listener.exitOper_argtypes(self)




    def oper_argtypes(self):

        localctx = PostgreSQLParser.Oper_argtypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_oper_argtypes)
        try:
            self.state = 5806
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,508,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5784
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 5785
                self.typename()
                self.state = 5786
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5788
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 5789
                self.typename()
                self.state = 5790
                self.match(PostgreSQLParser.COMMA)
                self.state = 5791
                self.typename()
                self.state = 5792
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5794
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 5795
                self.match(PostgreSQLParser.NONE)
                self.state = 5796
                self.match(PostgreSQLParser.COMMA)
                self.state = 5797
                self.typename()
                self.state = 5798
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5800
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 5801
                self.typename()
                self.state = 5802
                self.match(PostgreSQLParser.COMMA)
                self.state = 5803
                self.match(PostgreSQLParser.NONE)
                self.state = 5804
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def all_op(self):
            return self.getTypedRuleContext(PostgreSQLParser.All_opContext,0)


        def colid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ColidContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ColidContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.DOT)
            else:
                return self.getToken(PostgreSQLParser.DOT, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_any_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_operator" ):
                listener.enterAny_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_operator" ):
                listener.exitAny_operator(self)




    def any_operator(self):

        localctx = PostgreSQLParser.Any_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_any_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & 137438949375) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & -31) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & -1) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & -8796093022209) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & -1) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & -34909494181889) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & 1153132601981008895) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & 536870983) != 0):
                self.state = 5808
                self.colid()
                self.state = 5809
                self.match(PostgreSQLParser.DOT)
                self.state = 5815
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5816
            self.all_op()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Operator_with_argtypes_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator_with_argtypes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Operator_with_argtypesContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Operator_with_argtypesContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_operator_with_argtypes_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_with_argtypes_list" ):
                listener.enterOperator_with_argtypes_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_with_argtypes_list" ):
                listener.exitOperator_with_argtypes_list(self)




    def operator_with_argtypes_list(self):

        localctx = PostgreSQLParser.Operator_with_argtypes_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_operator_with_argtypes_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5818
            self.operator_with_argtypes()
            self.state = 5823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 5819
                self.match(PostgreSQLParser.COMMA)
                self.state = 5820
                self.operator_with_argtypes()
                self.state = 5825
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Operator_with_argtypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_operator(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_operatorContext,0)


        def oper_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Oper_argtypesContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_operator_with_argtypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_with_argtypes" ):
                listener.enterOperator_with_argtypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_with_argtypes" ):
                listener.exitOperator_with_argtypes(self)




    def operator_with_argtypes(self):

        localctx = PostgreSQLParser.Operator_with_argtypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_operator_with_argtypes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5826
            self.any_operator()
            self.state = 5827
            self.oper_argtypes()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DostmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(PostgreSQLParser.DO, 0)

        def dostmt_opt_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Dostmt_opt_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_dostmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDostmt" ):
                listener.enterDostmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDostmt" ):
                listener.exitDostmt(self)




    def dostmt(self):

        localctx = PostgreSQLParser.DostmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_dostmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5829
            self.match(PostgreSQLParser.DO)
            self.state = 5830
            self.dostmt_opt_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dostmt_opt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dostmt_opt_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Dostmt_opt_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Dostmt_opt_itemContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_dostmt_opt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDostmt_opt_list" ):
                listener.enterDostmt_opt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDostmt_opt_list" ):
                listener.exitDostmt_opt_list(self)




    def dostmt_opt_list(self):

        localctx = PostgreSQLParser.Dostmt_opt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_dostmt_opt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5833 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5832
                self.dostmt_opt_item()
                self.state = 5835 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==276 or ((((_la - 563)) & ~0x3f) == 0 and ((1 << (_la - 563)) & 134217749) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dostmt_opt_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def LANGUAGE(self):
            return self.getToken(PostgreSQLParser.LANGUAGE, 0)

        def nonreservedword_or_sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.Nonreservedword_or_sconstContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_dostmt_opt_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDostmt_opt_item" ):
                listener.enterDostmt_opt_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDostmt_opt_item" ):
                listener.exitDostmt_opt_item(self)




    def dostmt_opt_item(self):

        localctx = PostgreSQLParser.Dostmt_opt_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_dostmt_opt_item)
        try:
            self.state = 5840
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [563, 565, 567, 590]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5837
                self.sconst()
                pass
            elif token in [276]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5838
                self.match(PostgreSQLParser.LANGUAGE)
                self.state = 5839
                self.nonreservedword_or_sconst()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatecaststmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def CAST(self):
            return self.getToken(PostgreSQLParser.CAST, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def typename(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TypenameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,i)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_with_argtypesContext,0)


        def cast_context(self):
            return self.getTypedRuleContext(PostgreSQLParser.Cast_contextContext,0)


        def WITHOUT(self):
            return self.getToken(PostgreSQLParser.WITHOUT, 0)

        def INOUT(self):
            return self.getToken(PostgreSQLParser.INOUT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createcaststmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatecaststmt" ):
                listener.enterCreatecaststmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatecaststmt" ):
                listener.exitCreatecaststmt(self)




    def createcaststmt(self):

        localctx = PostgreSQLParser.CreatecaststmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_createcaststmt)
        self._la = 0 # Token type
        try:
            self.state = 5879
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,516,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5842
                self.match(PostgreSQLParser.CREATE)
                self.state = 5843
                self.match(PostgreSQLParser.CAST)
                self.state = 5844
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 5845
                self.typename()
                self.state = 5846
                self.match(PostgreSQLParser.AS)
                self.state = 5847
                self.typename()
                self.state = 5848
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 5849
                self.match(PostgreSQLParser.WITH)
                self.state = 5850
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 5851
                self.function_with_argtypes()
                self.state = 5853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==74:
                    self.state = 5852
                    self.cast_context()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5855
                self.match(PostgreSQLParser.CREATE)
                self.state = 5856
                self.match(PostgreSQLParser.CAST)
                self.state = 5857
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 5858
                self.typename()
                self.state = 5859
                self.match(PostgreSQLParser.AS)
                self.state = 5860
                self.typename()
                self.state = 5861
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 5862
                self.match(PostgreSQLParser.WITHOUT)
                self.state = 5863
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 5865
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==74:
                    self.state = 5864
                    self.cast_context()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5867
                self.match(PostgreSQLParser.CREATE)
                self.state = 5868
                self.match(PostgreSQLParser.CAST)
                self.state = 5869
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 5870
                self.typename()
                self.state = 5871
                self.match(PostgreSQLParser.AS)
                self.state = 5872
                self.typename()
                self.state = 5873
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 5874
                self.match(PostgreSQLParser.WITH)
                self.state = 5875
                self.match(PostgreSQLParser.INOUT)
                self.state = 5877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==74:
                    self.state = 5876
                    self.cast_context()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cast_contextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def IMPLICIT_P(self):
            return self.getToken(PostgreSQLParser.IMPLICIT_P, 0)

        def ASSIGNMENT(self):
            return self.getToken(PostgreSQLParser.ASSIGNMENT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_cast_context

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_context" ):
                listener.enterCast_context(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_context" ):
                listener.exitCast_context(self)




    def cast_context(self):

        localctx = PostgreSQLParser.Cast_contextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_cast_context)
        try:
            self.state = 5885
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,517,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5881
                self.match(PostgreSQLParser.AS)
                self.state = 5882
                self.match(PostgreSQLParser.IMPLICIT_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5883
                self.match(PostgreSQLParser.AS)
                self.state = 5884
                self.match(PostgreSQLParser.ASSIGNMENT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropcaststmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def CAST(self):
            return self.getToken(PostgreSQLParser.CAST, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def typename(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TypenameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,i)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def if_exists_(self):
            return self.getTypedRuleContext(PostgreSQLParser.If_exists_Context,0)


        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_dropcaststmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropcaststmt" ):
                listener.enterDropcaststmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropcaststmt" ):
                listener.exitDropcaststmt(self)




    def dropcaststmt(self):

        localctx = PostgreSQLParser.DropcaststmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_dropcaststmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5887
            self.match(PostgreSQLParser.DROP)
            self.state = 5888
            self.match(PostgreSQLParser.CAST)
            self.state = 5890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258:
                self.state = 5889
                self.if_exists_()


            self.state = 5892
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 5893
            self.typename()
            self.state = 5894
            self.match(PostgreSQLParser.AS)
            self.state = 5895
            self.typename()
            self.state = 5896
            self.match(PostgreSQLParser.CLOSE_PAREN)
            self.state = 5898
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==188 or _la==346:
                self.state = 5897
                self.drop_behavior_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_exists_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_if_exists_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_exists_" ):
                listener.enterIf_exists_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_exists_" ):
                listener.exitIf_exists_(self)




    def if_exists_(self):

        localctx = PostgreSQLParser.If_exists_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_if_exists_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5900
            self.match(PostgreSQLParser.IF_P)
            self.state = 5901
            self.match(PostgreSQLParser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatetransformstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def TRANSFORM(self):
            return self.getToken(PostgreSQLParser.TRANSFORM, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def typename(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,0)


        def LANGUAGE(self):
            return self.getToken(PostgreSQLParser.LANGUAGE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def transform_element_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Transform_element_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def or_replace_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Or_replace_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createtransformstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatetransformstmt" ):
                listener.enterCreatetransformstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatetransformstmt" ):
                listener.exitCreatetransformstmt(self)




    def createtransformstmt(self):

        localctx = PostgreSQLParser.CreatetransformstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 702, self.RULE_createtransformstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5903
            self.match(PostgreSQLParser.CREATE)
            self.state = 5905
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 5904
                self.or_replace_()


            self.state = 5907
            self.match(PostgreSQLParser.TRANSFORM)
            self.state = 5908
            self.match(PostgreSQLParser.FOR)
            self.state = 5909
            self.typename()
            self.state = 5910
            self.match(PostgreSQLParser.LANGUAGE)
            self.state = 5911
            self.name()
            self.state = 5912
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 5913
            self.transform_element_list()
            self.state = 5914
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transform_element_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def SQL_P(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.SQL_P)
            else:
                return self.getToken(PostgreSQLParser.SQL_P, i)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.WITH)
            else:
                return self.getToken(PostgreSQLParser.WITH, i)

        def FUNCTION(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.FUNCTION)
            else:
                return self.getToken(PostgreSQLParser.FUNCTION, i)

        def function_with_argtypes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Function_with_argtypesContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Function_with_argtypesContext,i)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_transform_element_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransform_element_list" ):
                listener.enterTransform_element_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransform_element_list" ):
                listener.exitTransform_element_list(self)




    def transform_element_list(self):

        localctx = PostgreSQLParser.Transform_element_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 704, self.RULE_transform_element_list)
        try:
            self.state = 5950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,521,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5916
                self.match(PostgreSQLParser.FROM)
                self.state = 5917
                self.match(PostgreSQLParser.SQL_P)
                self.state = 5918
                self.match(PostgreSQLParser.WITH)
                self.state = 5919
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 5920
                self.function_with_argtypes()
                self.state = 5921
                self.match(PostgreSQLParser.COMMA)
                self.state = 5922
                self.match(PostgreSQLParser.TO)
                self.state = 5923
                self.match(PostgreSQLParser.SQL_P)
                self.state = 5924
                self.match(PostgreSQLParser.WITH)
                self.state = 5925
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 5926
                self.function_with_argtypes()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5928
                self.match(PostgreSQLParser.TO)
                self.state = 5929
                self.match(PostgreSQLParser.SQL_P)
                self.state = 5930
                self.match(PostgreSQLParser.WITH)
                self.state = 5931
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 5932
                self.function_with_argtypes()
                self.state = 5933
                self.match(PostgreSQLParser.COMMA)
                self.state = 5934
                self.match(PostgreSQLParser.FROM)
                self.state = 5935
                self.match(PostgreSQLParser.SQL_P)
                self.state = 5936
                self.match(PostgreSQLParser.WITH)
                self.state = 5937
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 5938
                self.function_with_argtypes()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5940
                self.match(PostgreSQLParser.FROM)
                self.state = 5941
                self.match(PostgreSQLParser.SQL_P)
                self.state = 5942
                self.match(PostgreSQLParser.WITH)
                self.state = 5943
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 5944
                self.function_with_argtypes()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5945
                self.match(PostgreSQLParser.TO)
                self.state = 5946
                self.match(PostgreSQLParser.SQL_P)
                self.state = 5947
                self.match(PostgreSQLParser.WITH)
                self.state = 5948
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 5949
                self.function_with_argtypes()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DroptransformstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def TRANSFORM(self):
            return self.getToken(PostgreSQLParser.TRANSFORM, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def typename(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,0)


        def LANGUAGE(self):
            return self.getToken(PostgreSQLParser.LANGUAGE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def if_exists_(self):
            return self.getTypedRuleContext(PostgreSQLParser.If_exists_Context,0)


        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_droptransformstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDroptransformstmt" ):
                listener.enterDroptransformstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDroptransformstmt" ):
                listener.exitDroptransformstmt(self)




    def droptransformstmt(self):

        localctx = PostgreSQLParser.DroptransformstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_droptransformstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5952
            self.match(PostgreSQLParser.DROP)
            self.state = 5953
            self.match(PostgreSQLParser.TRANSFORM)
            self.state = 5955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258:
                self.state = 5954
                self.if_exists_()


            self.state = 5957
            self.match(PostgreSQLParser.FOR)
            self.state = 5958
            self.typename()
            self.state = 5959
            self.match(PostgreSQLParser.LANGUAGE)
            self.state = 5960
            self.name()
            self.state = 5962
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==188 or _la==346:
                self.state = 5961
                self.drop_behavior_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReindexstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REINDEX(self):
            return self.getToken(PostgreSQLParser.REINDEX, 0)

        def reindex_target_relation(self):
            return self.getTypedRuleContext(PostgreSQLParser.Reindex_target_relationContext,0)


        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def reindex_option_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Reindex_option_listContext,0)


        def concurrently_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Concurrently_Context,0)


        def SCHEMA(self):
            return self.getToken(PostgreSQLParser.SCHEMA, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def reindex_target_all(self):
            return self.getTypedRuleContext(PostgreSQLParser.Reindex_target_allContext,0)


        def single_name_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Single_name_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_reindexstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReindexstmt" ):
                listener.enterReindexstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReindexstmt" ):
                listener.exitReindexstmt(self)




    def reindexstmt(self):

        localctx = PostgreSQLParser.ReindexstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_reindexstmt)
        self._la = 0 # Token type
        try:
            self.state = 5994
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,531,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5964
                self.match(PostgreSQLParser.REINDEX)
                self.state = 5966
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 5965
                    self.reindex_option_list()


                self.state = 5968
                self.reindex_target_relation()
                self.state = 5970
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==147:
                    self.state = 5969
                    self.concurrently_()


                self.state = 5972
                self.qualified_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5974
                self.match(PostgreSQLParser.REINDEX)
                self.state = 5976
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 5975
                    self.reindex_option_list()


                self.state = 5978
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 5980
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==147:
                    self.state = 5979
                    self.concurrently_()


                self.state = 5982
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5983
                self.match(PostgreSQLParser.REINDEX)
                self.state = 5985
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 5984
                    self.reindex_option_list()


                self.state = 5987
                self.reindex_target_all()
                self.state = 5989
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==147:
                    self.state = 5988
                    self.concurrently_()


                self.state = 5992
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & 137438949375) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & -31) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & -1) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & -8796093022209) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & -1) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & -34909494181889) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & 1153132601981008895) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & 536870983) != 0):
                    self.state = 5991
                    self.single_name_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reindex_target_relationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDEX(self):
            return self.getToken(PostgreSQLParser.INDEX, 0)

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_reindex_target_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReindex_target_relation" ):
                listener.enterReindex_target_relation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReindex_target_relation" ):
                listener.exitReindex_target_relation(self)




    def reindex_target_relation(self):

        localctx = PostgreSQLParser.Reindex_target_relationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_reindex_target_relation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5996
            _la = self._input.LA(1)
            if not(_la==130 or _la==264):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reindex_target_allContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYSTEM_P(self):
            return self.getToken(PostgreSQLParser.SYSTEM_P, 0)

        def DATABASE(self):
            return self.getToken(PostgreSQLParser.DATABASE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_reindex_target_all

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReindex_target_all" ):
                listener.enterReindex_target_all(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReindex_target_all" ):
                listener.exitReindex_target_all(self)




    def reindex_target_all(self):

        localctx = PostgreSQLParser.Reindex_target_allContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_reindex_target_all)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5998
            _la = self._input.LA(1)
            if not(_la==213 or _la==380):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reindex_option_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def utility_option_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Utility_option_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_reindex_option_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReindex_option_list" ):
                listener.enterReindex_option_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReindex_option_list" ):
                listener.exitReindex_option_list(self)




    def reindex_option_list(self):

        localctx = PostgreSQLParser.Reindex_option_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 714, self.RULE_reindex_option_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6000
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 6001
            self.utility_option_list()
            self.state = 6002
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AltertblspcstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def TABLESPACE(self):
            return self.getToken(PostgreSQLParser.TABLESPACE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def reloptions(self):
            return self.getTypedRuleContext(PostgreSQLParser.ReloptionsContext,0)


        def RESET(self):
            return self.getToken(PostgreSQLParser.RESET, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_altertblspcstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAltertblspcstmt" ):
                listener.enterAltertblspcstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAltertblspcstmt" ):
                listener.exitAltertblspcstmt(self)




    def altertblspcstmt(self):

        localctx = PostgreSQLParser.AltertblspcstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_altertblspcstmt)
        try:
            self.state = 6016
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,532,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6004
                self.match(PostgreSQLParser.ALTER)
                self.state = 6005
                self.match(PostgreSQLParser.TABLESPACE)
                self.state = 6006
                self.name()
                self.state = 6007
                self.match(PostgreSQLParser.SET)
                self.state = 6008
                self.reloptions()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6010
                self.match(PostgreSQLParser.ALTER)
                self.state = 6011
                self.match(PostgreSQLParser.TABLESPACE)
                self.state = 6012
                self.name()
                self.state = 6013
                self.match(PostgreSQLParser.RESET)
                self.state = 6014
                self.reloptions()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenamestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def AGGREGATE(self):
            return self.getToken(PostgreSQLParser.AGGREGATE, 0)

        def aggregate_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Aggregate_with_argtypesContext,0)


        def RENAME(self):
            return self.getToken(PostgreSQLParser.RENAME, 0)

        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.NameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.NameContext,i)


        def COLLATION(self):
            return self.getToken(PostgreSQLParser.COLLATION, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def CONVERSION_P(self):
            return self.getToken(PostgreSQLParser.CONVERSION_P, 0)

        def DATABASE(self):
            return self.getToken(PostgreSQLParser.DATABASE, 0)

        def DOMAIN_P(self):
            return self.getToken(PostgreSQLParser.DOMAIN_P, 0)

        def CONSTRAINT(self):
            return self.getToken(PostgreSQLParser.CONSTRAINT, 0)

        def FOREIGN(self):
            return self.getToken(PostgreSQLParser.FOREIGN, 0)

        def DATA_P(self):
            return self.getToken(PostgreSQLParser.DATA_P, 0)

        def WRAPPER(self):
            return self.getToken(PostgreSQLParser.WRAPPER, 0)

        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_with_argtypesContext,0)


        def GROUP_P(self):
            return self.getToken(PostgreSQLParser.GROUP_P, 0)

        def roleid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.RoleidContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.RoleidContext,i)


        def LANGUAGE(self):
            return self.getToken(PostgreSQLParser.LANGUAGE, 0)

        def procedural_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Procedural_Context,0)


        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def CLASS(self):
            return self.getToken(PostgreSQLParser.CLASS, 0)

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def FAMILY(self):
            return self.getToken(PostgreSQLParser.FAMILY, 0)

        def POLICY(self):
            return self.getToken(PostgreSQLParser.POLICY, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def PROCEDURE(self):
            return self.getToken(PostgreSQLParser.PROCEDURE, 0)

        def PUBLICATION(self):
            return self.getToken(PostgreSQLParser.PUBLICATION, 0)

        def ROUTINE(self):
            return self.getToken(PostgreSQLParser.ROUTINE, 0)

        def SCHEMA(self):
            return self.getToken(PostgreSQLParser.SCHEMA, 0)

        def SERVER(self):
            return self.getToken(PostgreSQLParser.SERVER, 0)

        def SUBSCRIPTION(self):
            return self.getToken(PostgreSQLParser.SUBSCRIPTION, 0)

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def relation_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relation_exprContext,0)


        def SEQUENCE(self):
            return self.getToken(PostgreSQLParser.SEQUENCE, 0)

        def VIEW(self):
            return self.getToken(PostgreSQLParser.VIEW, 0)

        def MATERIALIZED(self):
            return self.getToken(PostgreSQLParser.MATERIALIZED, 0)

        def INDEX(self):
            return self.getToken(PostgreSQLParser.INDEX, 0)

        def column_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_Context,0)


        def RULE(self):
            return self.getToken(PostgreSQLParser.RULE, 0)

        def TRIGGER(self):
            return self.getToken(PostgreSQLParser.TRIGGER, 0)

        def EVENT(self):
            return self.getToken(PostgreSQLParser.EVENT, 0)

        def ROLE(self):
            return self.getToken(PostgreSQLParser.ROLE, 0)

        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def TABLESPACE(self):
            return self.getToken(PostgreSQLParser.TABLESPACE, 0)

        def STATISTICS(self):
            return self.getToken(PostgreSQLParser.STATISTICS, 0)

        def TEXT_P(self):
            return self.getToken(PostgreSQLParser.TEXT_P, 0)

        def SEARCH(self):
            return self.getToken(PostgreSQLParser.SEARCH, 0)

        def PARSER(self):
            return self.getToken(PostgreSQLParser.PARSER, 0)

        def DICTIONARY(self):
            return self.getToken(PostgreSQLParser.DICTIONARY, 0)

        def TEMPLATE(self):
            return self.getToken(PostgreSQLParser.TEMPLATE, 0)

        def CONFIGURATION(self):
            return self.getToken(PostgreSQLParser.CONFIGURATION, 0)

        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def ATTRIBUTE(self):
            return self.getToken(PostgreSQLParser.ATTRIBUTE, 0)

        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_renamestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenamestmt" ):
                listener.enterRenamestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenamestmt" ):
                listener.exitRenamestmt(self)




    def renamestmt(self):

        localctx = PostgreSQLParser.RenamestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_renamestmt)
        self._la = 0 # Token type
        try:
            self.state = 6505
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,543,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6018
                self.match(PostgreSQLParser.ALTER)
                self.state = 6019
                self.match(PostgreSQLParser.AGGREGATE)
                self.state = 6020
                self.aggregate_with_argtypes()
                self.state = 6021
                self.match(PostgreSQLParser.RENAME)
                self.state = 6022
                self.match(PostgreSQLParser.TO)
                self.state = 6023
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6025
                self.match(PostgreSQLParser.ALTER)
                self.state = 6026
                self.match(PostgreSQLParser.COLLATION)
                self.state = 6027
                self.any_name()
                self.state = 6028
                self.match(PostgreSQLParser.RENAME)
                self.state = 6029
                self.match(PostgreSQLParser.TO)
                self.state = 6030
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6032
                self.match(PostgreSQLParser.ALTER)
                self.state = 6033
                self.match(PostgreSQLParser.CONVERSION_P)
                self.state = 6034
                self.any_name()
                self.state = 6035
                self.match(PostgreSQLParser.RENAME)
                self.state = 6036
                self.match(PostgreSQLParser.TO)
                self.state = 6037
                self.name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6039
                self.match(PostgreSQLParser.ALTER)
                self.state = 6040
                self.match(PostgreSQLParser.DATABASE)
                self.state = 6041
                self.name()
                self.state = 6042
                self.match(PostgreSQLParser.RENAME)
                self.state = 6043
                self.match(PostgreSQLParser.TO)
                self.state = 6044
                self.name()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6046
                self.match(PostgreSQLParser.ALTER)
                self.state = 6047
                self.match(PostgreSQLParser.DOMAIN_P)
                self.state = 6048
                self.any_name()
                self.state = 6049
                self.match(PostgreSQLParser.RENAME)
                self.state = 6050
                self.match(PostgreSQLParser.TO)
                self.state = 6051
                self.name()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6053
                self.match(PostgreSQLParser.ALTER)
                self.state = 6054
                self.match(PostgreSQLParser.DOMAIN_P)
                self.state = 6055
                self.any_name()
                self.state = 6056
                self.match(PostgreSQLParser.RENAME)
                self.state = 6057
                self.match(PostgreSQLParser.CONSTRAINT)
                self.state = 6058
                self.name()
                self.state = 6059
                self.match(PostgreSQLParser.TO)
                self.state = 6060
                self.name()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6062
                self.match(PostgreSQLParser.ALTER)
                self.state = 6063
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 6064
                self.match(PostgreSQLParser.DATA_P)
                self.state = 6065
                self.match(PostgreSQLParser.WRAPPER)
                self.state = 6066
                self.name()
                self.state = 6067
                self.match(PostgreSQLParser.RENAME)
                self.state = 6068
                self.match(PostgreSQLParser.TO)
                self.state = 6069
                self.name()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6071
                self.match(PostgreSQLParser.ALTER)
                self.state = 6072
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 6073
                self.function_with_argtypes()
                self.state = 6074
                self.match(PostgreSQLParser.RENAME)
                self.state = 6075
                self.match(PostgreSQLParser.TO)
                self.state = 6076
                self.name()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6078
                self.match(PostgreSQLParser.ALTER)
                self.state = 6079
                self.match(PostgreSQLParser.GROUP_P)
                self.state = 6080
                self.roleid()
                self.state = 6081
                self.match(PostgreSQLParser.RENAME)
                self.state = 6082
                self.match(PostgreSQLParser.TO)
                self.state = 6083
                self.roleid()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 6085
                self.match(PostgreSQLParser.ALTER)
                self.state = 6087
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==326:
                    self.state = 6086
                    self.procedural_()


                self.state = 6089
                self.match(PostgreSQLParser.LANGUAGE)
                self.state = 6090
                self.name()
                self.state = 6091
                self.match(PostgreSQLParser.RENAME)
                self.state = 6092
                self.match(PostgreSQLParser.TO)
                self.state = 6093
                self.name()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 6095
                self.match(PostgreSQLParser.ALTER)
                self.state = 6096
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 6097
                self.match(PostgreSQLParser.CLASS)
                self.state = 6098
                self.any_name()
                self.state = 6099
                self.match(PostgreSQLParser.USING)
                self.state = 6100
                self.name()
                self.state = 6101
                self.match(PostgreSQLParser.RENAME)
                self.state = 6102
                self.match(PostgreSQLParser.TO)
                self.state = 6103
                self.name()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 6105
                self.match(PostgreSQLParser.ALTER)
                self.state = 6106
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 6107
                self.match(PostgreSQLParser.FAMILY)
                self.state = 6108
                self.any_name()
                self.state = 6109
                self.match(PostgreSQLParser.USING)
                self.state = 6110
                self.name()
                self.state = 6111
                self.match(PostgreSQLParser.RENAME)
                self.state = 6112
                self.match(PostgreSQLParser.TO)
                self.state = 6113
                self.name()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 6115
                self.match(PostgreSQLParser.ALTER)
                self.state = 6116
                self.match(PostgreSQLParser.POLICY)
                self.state = 6117
                self.name()
                self.state = 6118
                self.match(PostgreSQLParser.ON)
                self.state = 6119
                self.qualified_name()
                self.state = 6120
                self.match(PostgreSQLParser.RENAME)
                self.state = 6121
                self.match(PostgreSQLParser.TO)
                self.state = 6122
                self.name()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 6124
                self.match(PostgreSQLParser.ALTER)
                self.state = 6125
                self.match(PostgreSQLParser.POLICY)
                self.state = 6126
                self.match(PostgreSQLParser.IF_P)
                self.state = 6127
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6128
                self.name()
                self.state = 6129
                self.match(PostgreSQLParser.ON)
                self.state = 6130
                self.qualified_name()
                self.state = 6131
                self.match(PostgreSQLParser.RENAME)
                self.state = 6132
                self.match(PostgreSQLParser.TO)
                self.state = 6133
                self.name()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 6135
                self.match(PostgreSQLParser.ALTER)
                self.state = 6136
                self.match(PostgreSQLParser.PROCEDURE)
                self.state = 6137
                self.function_with_argtypes()
                self.state = 6138
                self.match(PostgreSQLParser.RENAME)
                self.state = 6139
                self.match(PostgreSQLParser.TO)
                self.state = 6140
                self.name()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 6142
                self.match(PostgreSQLParser.ALTER)
                self.state = 6143
                self.match(PostgreSQLParser.PUBLICATION)
                self.state = 6144
                self.name()
                self.state = 6145
                self.match(PostgreSQLParser.RENAME)
                self.state = 6146
                self.match(PostgreSQLParser.TO)
                self.state = 6147
                self.name()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 6149
                self.match(PostgreSQLParser.ALTER)
                self.state = 6150
                self.match(PostgreSQLParser.ROUTINE)
                self.state = 6151
                self.function_with_argtypes()
                self.state = 6152
                self.match(PostgreSQLParser.RENAME)
                self.state = 6153
                self.match(PostgreSQLParser.TO)
                self.state = 6154
                self.name()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 6156
                self.match(PostgreSQLParser.ALTER)
                self.state = 6157
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6158
                self.name()
                self.state = 6159
                self.match(PostgreSQLParser.RENAME)
                self.state = 6160
                self.match(PostgreSQLParser.TO)
                self.state = 6161
                self.name()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 6163
                self.match(PostgreSQLParser.ALTER)
                self.state = 6164
                self.match(PostgreSQLParser.SERVER)
                self.state = 6165
                self.name()
                self.state = 6166
                self.match(PostgreSQLParser.RENAME)
                self.state = 6167
                self.match(PostgreSQLParser.TO)
                self.state = 6168
                self.name()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 6170
                self.match(PostgreSQLParser.ALTER)
                self.state = 6171
                self.match(PostgreSQLParser.SUBSCRIPTION)
                self.state = 6172
                self.name()
                self.state = 6173
                self.match(PostgreSQLParser.RENAME)
                self.state = 6174
                self.match(PostgreSQLParser.TO)
                self.state = 6175
                self.name()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 6177
                self.match(PostgreSQLParser.ALTER)
                self.state = 6178
                self.match(PostgreSQLParser.TABLE)
                self.state = 6179
                self.relation_expr()
                self.state = 6180
                self.match(PostgreSQLParser.RENAME)
                self.state = 6181
                self.match(PostgreSQLParser.TO)
                self.state = 6182
                self.name()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 6184
                self.match(PostgreSQLParser.ALTER)
                self.state = 6185
                self.match(PostgreSQLParser.TABLE)
                self.state = 6186
                self.match(PostgreSQLParser.IF_P)
                self.state = 6187
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6188
                self.relation_expr()
                self.state = 6189
                self.match(PostgreSQLParser.RENAME)
                self.state = 6190
                self.match(PostgreSQLParser.TO)
                self.state = 6191
                self.name()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 6193
                self.match(PostgreSQLParser.ALTER)
                self.state = 6194
                self.match(PostgreSQLParser.SEQUENCE)
                self.state = 6195
                self.qualified_name()
                self.state = 6196
                self.match(PostgreSQLParser.RENAME)
                self.state = 6197
                self.match(PostgreSQLParser.TO)
                self.state = 6198
                self.name()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 6200
                self.match(PostgreSQLParser.ALTER)
                self.state = 6201
                self.match(PostgreSQLParser.SEQUENCE)
                self.state = 6202
                self.match(PostgreSQLParser.IF_P)
                self.state = 6203
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6204
                self.qualified_name()
                self.state = 6205
                self.match(PostgreSQLParser.RENAME)
                self.state = 6206
                self.match(PostgreSQLParser.TO)
                self.state = 6207
                self.name()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 6209
                self.match(PostgreSQLParser.ALTER)
                self.state = 6210
                self.match(PostgreSQLParser.VIEW)
                self.state = 6211
                self.qualified_name()
                self.state = 6212
                self.match(PostgreSQLParser.RENAME)
                self.state = 6213
                self.match(PostgreSQLParser.TO)
                self.state = 6214
                self.name()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 6216
                self.match(PostgreSQLParser.ALTER)
                self.state = 6217
                self.match(PostgreSQLParser.VIEW)
                self.state = 6218
                self.match(PostgreSQLParser.IF_P)
                self.state = 6219
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6220
                self.qualified_name()
                self.state = 6221
                self.match(PostgreSQLParser.RENAME)
                self.state = 6222
                self.match(PostgreSQLParser.TO)
                self.state = 6223
                self.name()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 6225
                self.match(PostgreSQLParser.ALTER)
                self.state = 6226
                self.match(PostgreSQLParser.MATERIALIZED)
                self.state = 6227
                self.match(PostgreSQLParser.VIEW)
                self.state = 6228
                self.qualified_name()
                self.state = 6229
                self.match(PostgreSQLParser.RENAME)
                self.state = 6230
                self.match(PostgreSQLParser.TO)
                self.state = 6231
                self.name()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 6233
                self.match(PostgreSQLParser.ALTER)
                self.state = 6234
                self.match(PostgreSQLParser.MATERIALIZED)
                self.state = 6235
                self.match(PostgreSQLParser.VIEW)
                self.state = 6236
                self.match(PostgreSQLParser.IF_P)
                self.state = 6237
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6238
                self.qualified_name()
                self.state = 6239
                self.match(PostgreSQLParser.RENAME)
                self.state = 6240
                self.match(PostgreSQLParser.TO)
                self.state = 6241
                self.name()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 6243
                self.match(PostgreSQLParser.ALTER)
                self.state = 6244
                self.match(PostgreSQLParser.INDEX)
                self.state = 6245
                self.qualified_name()
                self.state = 6246
                self.match(PostgreSQLParser.RENAME)
                self.state = 6247
                self.match(PostgreSQLParser.TO)
                self.state = 6248
                self.name()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 6250
                self.match(PostgreSQLParser.ALTER)
                self.state = 6251
                self.match(PostgreSQLParser.INDEX)
                self.state = 6252
                self.match(PostgreSQLParser.IF_P)
                self.state = 6253
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6254
                self.qualified_name()
                self.state = 6255
                self.match(PostgreSQLParser.RENAME)
                self.state = 6256
                self.match(PostgreSQLParser.TO)
                self.state = 6257
                self.name()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 6259
                self.match(PostgreSQLParser.ALTER)
                self.state = 6260
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 6261
                self.match(PostgreSQLParser.TABLE)
                self.state = 6262
                self.relation_expr()
                self.state = 6263
                self.match(PostgreSQLParser.RENAME)
                self.state = 6264
                self.match(PostgreSQLParser.TO)
                self.state = 6265
                self.name()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 6267
                self.match(PostgreSQLParser.ALTER)
                self.state = 6268
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 6269
                self.match(PostgreSQLParser.TABLE)
                self.state = 6270
                self.match(PostgreSQLParser.IF_P)
                self.state = 6271
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6272
                self.relation_expr()
                self.state = 6273
                self.match(PostgreSQLParser.RENAME)
                self.state = 6274
                self.match(PostgreSQLParser.TO)
                self.state = 6275
                self.name()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 6277
                self.match(PostgreSQLParser.ALTER)
                self.state = 6278
                self.match(PostgreSQLParser.TABLE)
                self.state = 6279
                self.relation_expr()
                self.state = 6280
                self.match(PostgreSQLParser.RENAME)
                self.state = 6282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 6281
                    self.column_()


                self.state = 6284
                self.name()
                self.state = 6285
                self.match(PostgreSQLParser.TO)
                self.state = 6286
                self.name()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 6288
                self.match(PostgreSQLParser.ALTER)
                self.state = 6289
                self.match(PostgreSQLParser.TABLE)
                self.state = 6290
                self.match(PostgreSQLParser.IF_P)
                self.state = 6291
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6292
                self.relation_expr()
                self.state = 6293
                self.match(PostgreSQLParser.RENAME)
                self.state = 6295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 6294
                    self.column_()


                self.state = 6297
                self.name()
                self.state = 6298
                self.match(PostgreSQLParser.TO)
                self.state = 6299
                self.name()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 6301
                self.match(PostgreSQLParser.ALTER)
                self.state = 6302
                self.match(PostgreSQLParser.VIEW)
                self.state = 6303
                self.qualified_name()
                self.state = 6304
                self.match(PostgreSQLParser.RENAME)
                self.state = 6306
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 6305
                    self.column_()


                self.state = 6308
                self.name()
                self.state = 6309
                self.match(PostgreSQLParser.TO)
                self.state = 6310
                self.name()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 6312
                self.match(PostgreSQLParser.ALTER)
                self.state = 6313
                self.match(PostgreSQLParser.VIEW)
                self.state = 6314
                self.match(PostgreSQLParser.IF_P)
                self.state = 6315
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6316
                self.qualified_name()
                self.state = 6317
                self.match(PostgreSQLParser.RENAME)
                self.state = 6319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 6318
                    self.column_()


                self.state = 6321
                self.name()
                self.state = 6322
                self.match(PostgreSQLParser.TO)
                self.state = 6323
                self.name()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 6325
                self.match(PostgreSQLParser.ALTER)
                self.state = 6326
                self.match(PostgreSQLParser.MATERIALIZED)
                self.state = 6327
                self.match(PostgreSQLParser.VIEW)
                self.state = 6328
                self.qualified_name()
                self.state = 6329
                self.match(PostgreSQLParser.RENAME)
                self.state = 6331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 6330
                    self.column_()


                self.state = 6333
                self.name()
                self.state = 6334
                self.match(PostgreSQLParser.TO)
                self.state = 6335
                self.name()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 6337
                self.match(PostgreSQLParser.ALTER)
                self.state = 6338
                self.match(PostgreSQLParser.MATERIALIZED)
                self.state = 6339
                self.match(PostgreSQLParser.VIEW)
                self.state = 6340
                self.match(PostgreSQLParser.IF_P)
                self.state = 6341
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6342
                self.qualified_name()
                self.state = 6343
                self.match(PostgreSQLParser.RENAME)
                self.state = 6345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 6344
                    self.column_()


                self.state = 6347
                self.name()
                self.state = 6348
                self.match(PostgreSQLParser.TO)
                self.state = 6349
                self.name()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 6351
                self.match(PostgreSQLParser.ALTER)
                self.state = 6352
                self.match(PostgreSQLParser.TABLE)
                self.state = 6353
                self.relation_expr()
                self.state = 6354
                self.match(PostgreSQLParser.RENAME)
                self.state = 6355
                self.match(PostgreSQLParser.CONSTRAINT)
                self.state = 6356
                self.name()
                self.state = 6357
                self.match(PostgreSQLParser.TO)
                self.state = 6358
                self.name()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 6360
                self.match(PostgreSQLParser.ALTER)
                self.state = 6361
                self.match(PostgreSQLParser.TABLE)
                self.state = 6362
                self.match(PostgreSQLParser.IF_P)
                self.state = 6363
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6364
                self.relation_expr()
                self.state = 6365
                self.match(PostgreSQLParser.RENAME)
                self.state = 6366
                self.match(PostgreSQLParser.CONSTRAINT)
                self.state = 6367
                self.name()
                self.state = 6368
                self.match(PostgreSQLParser.TO)
                self.state = 6369
                self.name()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 6371
                self.match(PostgreSQLParser.ALTER)
                self.state = 6372
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 6373
                self.match(PostgreSQLParser.TABLE)
                self.state = 6374
                self.relation_expr()
                self.state = 6375
                self.match(PostgreSQLParser.RENAME)
                self.state = 6377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 6376
                    self.column_()


                self.state = 6379
                self.name()
                self.state = 6380
                self.match(PostgreSQLParser.TO)
                self.state = 6381
                self.name()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 6383
                self.match(PostgreSQLParser.ALTER)
                self.state = 6384
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 6385
                self.match(PostgreSQLParser.TABLE)
                self.state = 6386
                self.match(PostgreSQLParser.IF_P)
                self.state = 6387
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6388
                self.relation_expr()
                self.state = 6389
                self.match(PostgreSQLParser.RENAME)
                self.state = 6391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 6390
                    self.column_()


                self.state = 6393
                self.name()
                self.state = 6394
                self.match(PostgreSQLParser.TO)
                self.state = 6395
                self.name()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 6397
                self.match(PostgreSQLParser.ALTER)
                self.state = 6398
                self.match(PostgreSQLParser.RULE)
                self.state = 6399
                self.name()
                self.state = 6400
                self.match(PostgreSQLParser.ON)
                self.state = 6401
                self.qualified_name()
                self.state = 6402
                self.match(PostgreSQLParser.RENAME)
                self.state = 6403
                self.match(PostgreSQLParser.TO)
                self.state = 6404
                self.name()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 6406
                self.match(PostgreSQLParser.ALTER)
                self.state = 6407
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 6408
                self.name()
                self.state = 6409
                self.match(PostgreSQLParser.ON)
                self.state = 6410
                self.qualified_name()
                self.state = 6411
                self.match(PostgreSQLParser.RENAME)
                self.state = 6412
                self.match(PostgreSQLParser.TO)
                self.state = 6413
                self.name()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 6415
                self.match(PostgreSQLParser.ALTER)
                self.state = 6416
                self.match(PostgreSQLParser.EVENT)
                self.state = 6417
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 6418
                self.name()
                self.state = 6419
                self.match(PostgreSQLParser.RENAME)
                self.state = 6420
                self.match(PostgreSQLParser.TO)
                self.state = 6421
                self.name()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 6423
                self.match(PostgreSQLParser.ALTER)
                self.state = 6424
                self.match(PostgreSQLParser.ROLE)
                self.state = 6425
                self.roleid()
                self.state = 6426
                self.match(PostgreSQLParser.RENAME)
                self.state = 6427
                self.match(PostgreSQLParser.TO)
                self.state = 6428
                self.roleid()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 6430
                self.match(PostgreSQLParser.ALTER)
                self.state = 6431
                self.match(PostgreSQLParser.USER)
                self.state = 6432
                self.roleid()
                self.state = 6433
                self.match(PostgreSQLParser.RENAME)
                self.state = 6434
                self.match(PostgreSQLParser.TO)
                self.state = 6435
                self.roleid()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 6437
                self.match(PostgreSQLParser.ALTER)
                self.state = 6438
                self.match(PostgreSQLParser.TABLESPACE)
                self.state = 6439
                self.name()
                self.state = 6440
                self.match(PostgreSQLParser.RENAME)
                self.state = 6441
                self.match(PostgreSQLParser.TO)
                self.state = 6442
                self.name()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 6444
                self.match(PostgreSQLParser.ALTER)
                self.state = 6445
                self.match(PostgreSQLParser.STATISTICS)
                self.state = 6446
                self.any_name()
                self.state = 6447
                self.match(PostgreSQLParser.RENAME)
                self.state = 6448
                self.match(PostgreSQLParser.TO)
                self.state = 6449
                self.name()
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 6451
                self.match(PostgreSQLParser.ALTER)
                self.state = 6452
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 6453
                self.match(PostgreSQLParser.SEARCH)
                self.state = 6454
                self.match(PostgreSQLParser.PARSER)
                self.state = 6455
                self.any_name()
                self.state = 6456
                self.match(PostgreSQLParser.RENAME)
                self.state = 6457
                self.match(PostgreSQLParser.TO)
                self.state = 6458
                self.name()
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 6460
                self.match(PostgreSQLParser.ALTER)
                self.state = 6461
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 6462
                self.match(PostgreSQLParser.SEARCH)
                self.state = 6463
                self.match(PostgreSQLParser.DICTIONARY)
                self.state = 6464
                self.any_name()
                self.state = 6465
                self.match(PostgreSQLParser.RENAME)
                self.state = 6466
                self.match(PostgreSQLParser.TO)
                self.state = 6467
                self.name()
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 6469
                self.match(PostgreSQLParser.ALTER)
                self.state = 6470
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 6471
                self.match(PostgreSQLParser.SEARCH)
                self.state = 6472
                self.match(PostgreSQLParser.TEMPLATE)
                self.state = 6473
                self.any_name()
                self.state = 6474
                self.match(PostgreSQLParser.RENAME)
                self.state = 6475
                self.match(PostgreSQLParser.TO)
                self.state = 6476
                self.name()
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 6478
                self.match(PostgreSQLParser.ALTER)
                self.state = 6479
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 6480
                self.match(PostgreSQLParser.SEARCH)
                self.state = 6481
                self.match(PostgreSQLParser.CONFIGURATION)
                self.state = 6482
                self.any_name()
                self.state = 6483
                self.match(PostgreSQLParser.RENAME)
                self.state = 6484
                self.match(PostgreSQLParser.TO)
                self.state = 6485
                self.name()
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 6487
                self.match(PostgreSQLParser.ALTER)
                self.state = 6488
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 6489
                self.any_name()
                self.state = 6490
                self.match(PostgreSQLParser.RENAME)
                self.state = 6491
                self.match(PostgreSQLParser.TO)
                self.state = 6492
                self.name()
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 6494
                self.match(PostgreSQLParser.ALTER)
                self.state = 6495
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 6496
                self.any_name()
                self.state = 6497
                self.match(PostgreSQLParser.RENAME)
                self.state = 6498
                self.match(PostgreSQLParser.ATTRIBUTE)
                self.state = 6499
                self.name()
                self.state = 6500
                self.match(PostgreSQLParser.TO)
                self.state = 6501
                self.name()
                self.state = 6503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 6502
                    self.drop_behavior_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLUMN(self):
            return self.getToken(PostgreSQLParser.COLUMN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_column_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_" ):
                listener.enterColumn_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_" ):
                listener.exitColumn_(self)




    def column_(self):

        localctx = PostgreSQLParser.Column_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_column_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6507
            self.match(PostgreSQLParser.COLUMN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_data_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def DATA_P(self):
            return self.getToken(PostgreSQLParser.DATA_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_set_data_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_data_" ):
                listener.enterSet_data_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_data_" ):
                listener.exitSet_data_(self)




    def set_data_(self):

        localctx = PostgreSQLParser.Set_data_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 722, self.RULE_set_data_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6509
            self.match(PostgreSQLParser.SET)
            self.state = 6510
            self.match(PostgreSQLParser.DATA_P)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterobjectdependsstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_with_argtypesContext,0)


        def DEPENDS(self):
            return self.getToken(PostgreSQLParser.DEPENDS, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.ON)
            else:
                return self.getToken(PostgreSQLParser.ON, i)

        def EXTENSION(self):
            return self.getToken(PostgreSQLParser.EXTENSION, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.NameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.NameContext,i)


        def no_(self):
            return self.getTypedRuleContext(PostgreSQLParser.No_Context,0)


        def PROCEDURE(self):
            return self.getToken(PostgreSQLParser.PROCEDURE, 0)

        def ROUTINE(self):
            return self.getToken(PostgreSQLParser.ROUTINE, 0)

        def TRIGGER(self):
            return self.getToken(PostgreSQLParser.TRIGGER, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def MATERIALIZED(self):
            return self.getToken(PostgreSQLParser.MATERIALIZED, 0)

        def VIEW(self):
            return self.getToken(PostgreSQLParser.VIEW, 0)

        def INDEX(self):
            return self.getToken(PostgreSQLParser.INDEX, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterobjectdependsstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterobjectdependsstmt" ):
                listener.enterAlterobjectdependsstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterobjectdependsstmt" ):
                listener.exitAlterobjectdependsstmt(self)




    def alterobjectdependsstmt(self):

        localctx = PostgreSQLParser.AlterobjectdependsstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_alterobjectdependsstmt)
        self._la = 0 # Token type
        try:
            self.state = 6581
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,550,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6512
                self.match(PostgreSQLParser.ALTER)
                self.state = 6513
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 6514
                self.function_with_argtypes()
                self.state = 6516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==300:
                    self.state = 6515
                    self.no_()


                self.state = 6518
                self.match(PostgreSQLParser.DEPENDS)
                self.state = 6519
                self.match(PostgreSQLParser.ON)
                self.state = 6520
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 6521
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6523
                self.match(PostgreSQLParser.ALTER)
                self.state = 6524
                self.match(PostgreSQLParser.PROCEDURE)
                self.state = 6525
                self.function_with_argtypes()
                self.state = 6527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==300:
                    self.state = 6526
                    self.no_()


                self.state = 6529
                self.match(PostgreSQLParser.DEPENDS)
                self.state = 6530
                self.match(PostgreSQLParser.ON)
                self.state = 6531
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 6532
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6534
                self.match(PostgreSQLParser.ALTER)
                self.state = 6535
                self.match(PostgreSQLParser.ROUTINE)
                self.state = 6536
                self.function_with_argtypes()
                self.state = 6538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==300:
                    self.state = 6537
                    self.no_()


                self.state = 6540
                self.match(PostgreSQLParser.DEPENDS)
                self.state = 6541
                self.match(PostgreSQLParser.ON)
                self.state = 6542
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 6543
                self.name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6545
                self.match(PostgreSQLParser.ALTER)
                self.state = 6546
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 6547
                self.name()
                self.state = 6548
                self.match(PostgreSQLParser.ON)
                self.state = 6549
                self.qualified_name()
                self.state = 6551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==300:
                    self.state = 6550
                    self.no_()


                self.state = 6553
                self.match(PostgreSQLParser.DEPENDS)
                self.state = 6554
                self.match(PostgreSQLParser.ON)
                self.state = 6555
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 6556
                self.name()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6558
                self.match(PostgreSQLParser.ALTER)
                self.state = 6559
                self.match(PostgreSQLParser.MATERIALIZED)
                self.state = 6560
                self.match(PostgreSQLParser.VIEW)
                self.state = 6561
                self.qualified_name()
                self.state = 6563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==300:
                    self.state = 6562
                    self.no_()


                self.state = 6565
                self.match(PostgreSQLParser.DEPENDS)
                self.state = 6566
                self.match(PostgreSQLParser.ON)
                self.state = 6567
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 6568
                self.name()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6570
                self.match(PostgreSQLParser.ALTER)
                self.state = 6571
                self.match(PostgreSQLParser.INDEX)
                self.state = 6572
                self.qualified_name()
                self.state = 6574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==300:
                    self.state = 6573
                    self.no_()


                self.state = 6576
                self.match(PostgreSQLParser.DEPENDS)
                self.state = 6577
                self.match(PostgreSQLParser.ON)
                self.state = 6578
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 6579
                self.name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class No_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_no_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo_" ):
                listener.enterNo_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo_" ):
                listener.exitNo_(self)




    def no_(self):

        localctx = PostgreSQLParser.No_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 726, self.RULE_no_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6583
            self.match(PostgreSQLParser.NO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterobjectschemastmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def AGGREGATE(self):
            return self.getToken(PostgreSQLParser.AGGREGATE, 0)

        def aggregate_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Aggregate_with_argtypesContext,0)


        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def SCHEMA(self):
            return self.getToken(PostgreSQLParser.SCHEMA, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.NameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.NameContext,i)


        def COLLATION(self):
            return self.getToken(PostgreSQLParser.COLLATION, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def CONVERSION_P(self):
            return self.getToken(PostgreSQLParser.CONVERSION_P, 0)

        def DOMAIN_P(self):
            return self.getToken(PostgreSQLParser.DOMAIN_P, 0)

        def EXTENSION(self):
            return self.getToken(PostgreSQLParser.EXTENSION, 0)

        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_with_argtypesContext,0)


        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def operator_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Operator_with_argtypesContext,0)


        def CLASS(self):
            return self.getToken(PostgreSQLParser.CLASS, 0)

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def FAMILY(self):
            return self.getToken(PostgreSQLParser.FAMILY, 0)

        def PROCEDURE(self):
            return self.getToken(PostgreSQLParser.PROCEDURE, 0)

        def ROUTINE(self):
            return self.getToken(PostgreSQLParser.ROUTINE, 0)

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def relation_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relation_exprContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def STATISTICS(self):
            return self.getToken(PostgreSQLParser.STATISTICS, 0)

        def TEXT_P(self):
            return self.getToken(PostgreSQLParser.TEXT_P, 0)

        def SEARCH(self):
            return self.getToken(PostgreSQLParser.SEARCH, 0)

        def PARSER(self):
            return self.getToken(PostgreSQLParser.PARSER, 0)

        def DICTIONARY(self):
            return self.getToken(PostgreSQLParser.DICTIONARY, 0)

        def TEMPLATE(self):
            return self.getToken(PostgreSQLParser.TEMPLATE, 0)

        def CONFIGURATION(self):
            return self.getToken(PostgreSQLParser.CONFIGURATION, 0)

        def SEQUENCE(self):
            return self.getToken(PostgreSQLParser.SEQUENCE, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def VIEW(self):
            return self.getToken(PostgreSQLParser.VIEW, 0)

        def MATERIALIZED(self):
            return self.getToken(PostgreSQLParser.MATERIALIZED, 0)

        def FOREIGN(self):
            return self.getToken(PostgreSQLParser.FOREIGN, 0)

        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterobjectschemastmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterobjectschemastmt" ):
                listener.enterAlterobjectschemastmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterobjectschemastmt" ):
                listener.exitAlterobjectschemastmt(self)




    def alterobjectschemastmt(self):

        localctx = PostgreSQLParser.AlterobjectschemastmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 728, self.RULE_alterobjectschemastmt)
        try:
            self.state = 6802
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,551,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6585
                self.match(PostgreSQLParser.ALTER)
                self.state = 6586
                self.match(PostgreSQLParser.AGGREGATE)
                self.state = 6587
                self.aggregate_with_argtypes()
                self.state = 6588
                self.match(PostgreSQLParser.SET)
                self.state = 6589
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6590
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6592
                self.match(PostgreSQLParser.ALTER)
                self.state = 6593
                self.match(PostgreSQLParser.COLLATION)
                self.state = 6594
                self.any_name()
                self.state = 6595
                self.match(PostgreSQLParser.SET)
                self.state = 6596
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6597
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6599
                self.match(PostgreSQLParser.ALTER)
                self.state = 6600
                self.match(PostgreSQLParser.CONVERSION_P)
                self.state = 6601
                self.any_name()
                self.state = 6602
                self.match(PostgreSQLParser.SET)
                self.state = 6603
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6604
                self.name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6606
                self.match(PostgreSQLParser.ALTER)
                self.state = 6607
                self.match(PostgreSQLParser.DOMAIN_P)
                self.state = 6608
                self.any_name()
                self.state = 6609
                self.match(PostgreSQLParser.SET)
                self.state = 6610
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6611
                self.name()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6613
                self.match(PostgreSQLParser.ALTER)
                self.state = 6614
                self.match(PostgreSQLParser.EXTENSION)
                self.state = 6615
                self.name()
                self.state = 6616
                self.match(PostgreSQLParser.SET)
                self.state = 6617
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6618
                self.name()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6620
                self.match(PostgreSQLParser.ALTER)
                self.state = 6621
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 6622
                self.function_with_argtypes()
                self.state = 6623
                self.match(PostgreSQLParser.SET)
                self.state = 6624
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6625
                self.name()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6627
                self.match(PostgreSQLParser.ALTER)
                self.state = 6628
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 6629
                self.operator_with_argtypes()
                self.state = 6630
                self.match(PostgreSQLParser.SET)
                self.state = 6631
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6632
                self.name()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6634
                self.match(PostgreSQLParser.ALTER)
                self.state = 6635
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 6636
                self.match(PostgreSQLParser.CLASS)
                self.state = 6637
                self.any_name()
                self.state = 6638
                self.match(PostgreSQLParser.USING)
                self.state = 6639
                self.name()
                self.state = 6640
                self.match(PostgreSQLParser.SET)
                self.state = 6641
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6642
                self.name()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6644
                self.match(PostgreSQLParser.ALTER)
                self.state = 6645
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 6646
                self.match(PostgreSQLParser.FAMILY)
                self.state = 6647
                self.any_name()
                self.state = 6648
                self.match(PostgreSQLParser.USING)
                self.state = 6649
                self.name()
                self.state = 6650
                self.match(PostgreSQLParser.SET)
                self.state = 6651
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6652
                self.name()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 6654
                self.match(PostgreSQLParser.ALTER)
                self.state = 6655
                self.match(PostgreSQLParser.PROCEDURE)
                self.state = 6656
                self.function_with_argtypes()
                self.state = 6657
                self.match(PostgreSQLParser.SET)
                self.state = 6658
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6659
                self.name()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 6661
                self.match(PostgreSQLParser.ALTER)
                self.state = 6662
                self.match(PostgreSQLParser.ROUTINE)
                self.state = 6663
                self.function_with_argtypes()
                self.state = 6664
                self.match(PostgreSQLParser.SET)
                self.state = 6665
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6666
                self.name()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 6668
                self.match(PostgreSQLParser.ALTER)
                self.state = 6669
                self.match(PostgreSQLParser.TABLE)
                self.state = 6670
                self.relation_expr()
                self.state = 6671
                self.match(PostgreSQLParser.SET)
                self.state = 6672
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6673
                self.name()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 6675
                self.match(PostgreSQLParser.ALTER)
                self.state = 6676
                self.match(PostgreSQLParser.TABLE)
                self.state = 6677
                self.match(PostgreSQLParser.IF_P)
                self.state = 6678
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6679
                self.relation_expr()
                self.state = 6680
                self.match(PostgreSQLParser.SET)
                self.state = 6681
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6682
                self.name()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 6684
                self.match(PostgreSQLParser.ALTER)
                self.state = 6685
                self.match(PostgreSQLParser.STATISTICS)
                self.state = 6686
                self.any_name()
                self.state = 6687
                self.match(PostgreSQLParser.SET)
                self.state = 6688
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6689
                self.name()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 6691
                self.match(PostgreSQLParser.ALTER)
                self.state = 6692
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 6693
                self.match(PostgreSQLParser.SEARCH)
                self.state = 6694
                self.match(PostgreSQLParser.PARSER)
                self.state = 6695
                self.any_name()
                self.state = 6696
                self.match(PostgreSQLParser.SET)
                self.state = 6697
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6698
                self.name()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 6700
                self.match(PostgreSQLParser.ALTER)
                self.state = 6701
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 6702
                self.match(PostgreSQLParser.SEARCH)
                self.state = 6703
                self.match(PostgreSQLParser.DICTIONARY)
                self.state = 6704
                self.any_name()
                self.state = 6705
                self.match(PostgreSQLParser.SET)
                self.state = 6706
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6707
                self.name()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 6709
                self.match(PostgreSQLParser.ALTER)
                self.state = 6710
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 6711
                self.match(PostgreSQLParser.SEARCH)
                self.state = 6712
                self.match(PostgreSQLParser.TEMPLATE)
                self.state = 6713
                self.any_name()
                self.state = 6714
                self.match(PostgreSQLParser.SET)
                self.state = 6715
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6716
                self.name()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 6718
                self.match(PostgreSQLParser.ALTER)
                self.state = 6719
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 6720
                self.match(PostgreSQLParser.SEARCH)
                self.state = 6721
                self.match(PostgreSQLParser.CONFIGURATION)
                self.state = 6722
                self.any_name()
                self.state = 6723
                self.match(PostgreSQLParser.SET)
                self.state = 6724
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6725
                self.name()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 6727
                self.match(PostgreSQLParser.ALTER)
                self.state = 6728
                self.match(PostgreSQLParser.SEQUENCE)
                self.state = 6729
                self.qualified_name()
                self.state = 6730
                self.match(PostgreSQLParser.SET)
                self.state = 6731
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6732
                self.name()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 6734
                self.match(PostgreSQLParser.ALTER)
                self.state = 6735
                self.match(PostgreSQLParser.SEQUENCE)
                self.state = 6736
                self.match(PostgreSQLParser.IF_P)
                self.state = 6737
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6738
                self.qualified_name()
                self.state = 6739
                self.match(PostgreSQLParser.SET)
                self.state = 6740
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6741
                self.name()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 6743
                self.match(PostgreSQLParser.ALTER)
                self.state = 6744
                self.match(PostgreSQLParser.VIEW)
                self.state = 6745
                self.qualified_name()
                self.state = 6746
                self.match(PostgreSQLParser.SET)
                self.state = 6747
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6748
                self.name()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 6750
                self.match(PostgreSQLParser.ALTER)
                self.state = 6751
                self.match(PostgreSQLParser.VIEW)
                self.state = 6752
                self.match(PostgreSQLParser.IF_P)
                self.state = 6753
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6754
                self.qualified_name()
                self.state = 6755
                self.match(PostgreSQLParser.SET)
                self.state = 6756
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6757
                self.name()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 6759
                self.match(PostgreSQLParser.ALTER)
                self.state = 6760
                self.match(PostgreSQLParser.MATERIALIZED)
                self.state = 6761
                self.match(PostgreSQLParser.VIEW)
                self.state = 6762
                self.qualified_name()
                self.state = 6763
                self.match(PostgreSQLParser.SET)
                self.state = 6764
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6765
                self.name()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 6767
                self.match(PostgreSQLParser.ALTER)
                self.state = 6768
                self.match(PostgreSQLParser.MATERIALIZED)
                self.state = 6769
                self.match(PostgreSQLParser.VIEW)
                self.state = 6770
                self.match(PostgreSQLParser.IF_P)
                self.state = 6771
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6772
                self.qualified_name()
                self.state = 6773
                self.match(PostgreSQLParser.SET)
                self.state = 6774
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6775
                self.name()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 6777
                self.match(PostgreSQLParser.ALTER)
                self.state = 6778
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 6779
                self.match(PostgreSQLParser.TABLE)
                self.state = 6780
                self.relation_expr()
                self.state = 6781
                self.match(PostgreSQLParser.SET)
                self.state = 6782
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6783
                self.name()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 6785
                self.match(PostgreSQLParser.ALTER)
                self.state = 6786
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 6787
                self.match(PostgreSQLParser.TABLE)
                self.state = 6788
                self.match(PostgreSQLParser.IF_P)
                self.state = 6789
                self.match(PostgreSQLParser.EXISTS)
                self.state = 6790
                self.relation_expr()
                self.state = 6791
                self.match(PostgreSQLParser.SET)
                self.state = 6792
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6793
                self.name()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 6795
                self.match(PostgreSQLParser.ALTER)
                self.state = 6796
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 6797
                self.any_name()
                self.state = 6798
                self.match(PostgreSQLParser.SET)
                self.state = 6799
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6800
                self.name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlteroperatorstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def operator_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Operator_with_argtypesContext,0)


        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def operator_def_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Operator_def_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alteroperatorstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlteroperatorstmt" ):
                listener.enterAlteroperatorstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlteroperatorstmt" ):
                listener.exitAlteroperatorstmt(self)




    def alteroperatorstmt(self):

        localctx = PostgreSQLParser.AlteroperatorstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_alteroperatorstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6804
            self.match(PostgreSQLParser.ALTER)
            self.state = 6805
            self.match(PostgreSQLParser.OPERATOR)
            self.state = 6806
            self.operator_with_argtypes()
            self.state = 6807
            self.match(PostgreSQLParser.SET)
            self.state = 6808
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 6809
            self.operator_def_list()
            self.state = 6810
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Operator_def_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator_def_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Operator_def_elemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Operator_def_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_operator_def_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_def_list" ):
                listener.enterOperator_def_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_def_list" ):
                listener.exitOperator_def_list(self)




    def operator_def_list(self):

        localctx = PostgreSQLParser.Operator_def_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_operator_def_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6812
            self.operator_def_elem()
            self.state = 6817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 6813
                self.match(PostgreSQLParser.COMMA)
                self.state = 6814
                self.operator_def_elem()
                self.state = 6819
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Operator_def_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colLabel(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColLabelContext,0)


        def EQUAL(self):
            return self.getToken(PostgreSQLParser.EQUAL, 0)

        def NONE(self):
            return self.getToken(PostgreSQLParser.NONE, 0)

        def operator_def_arg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Operator_def_argContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_operator_def_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_def_elem" ):
                listener.enterOperator_def_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_def_elem" ):
                listener.exitOperator_def_elem(self)




    def operator_def_elem(self):

        localctx = PostgreSQLParser.Operator_def_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_operator_def_elem)
        try:
            self.state = 6828
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,553,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6820
                self.colLabel()
                self.state = 6821
                self.match(PostgreSQLParser.EQUAL)
                self.state = 6822
                self.match(PostgreSQLParser.NONE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6824
                self.colLabel()
                self.state = 6825
                self.match(PostgreSQLParser.EQUAL)
                self.state = 6826
                self.operator_def_arg()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Operator_def_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_type(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_typeContext,0)


        def reserved_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Reserved_keywordContext,0)


        def qual_all_op(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qual_all_opContext,0)


        def numericonly(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericonlyContext,0)


        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_operator_def_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator_def_arg" ):
                listener.enterOperator_def_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator_def_arg" ):
                listener.exitOperator_def_arg(self)




    def operator_def_arg(self):

        localctx = PostgreSQLParser.Operator_def_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_operator_def_arg)
        try:
            self.state = 6835
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,554,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6830
                self.func_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6831
                self.reserved_keyword()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6832
                self.qual_all_op()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6833
                self.numericonly()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6834
                self.sconst()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AltertypestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def operator_def_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Operator_def_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_altertypestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAltertypestmt" ):
                listener.enterAltertypestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAltertypestmt" ):
                listener.exitAltertypestmt(self)




    def altertypestmt(self):

        localctx = PostgreSQLParser.AltertypestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_altertypestmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6837
            self.match(PostgreSQLParser.ALTER)
            self.state = 6838
            self.match(PostgreSQLParser.TYPE_P)
            self.state = 6839
            self.any_name()
            self.state = 6840
            self.match(PostgreSQLParser.SET)
            self.state = 6841
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 6842
            self.operator_def_list()
            self.state = 6843
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterownerstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def AGGREGATE(self):
            return self.getToken(PostgreSQLParser.AGGREGATE, 0)

        def aggregate_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Aggregate_with_argtypesContext,0)


        def OWNER(self):
            return self.getToken(PostgreSQLParser.OWNER, 0)

        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def rolespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.RolespecContext,0)


        def COLLATION(self):
            return self.getToken(PostgreSQLParser.COLLATION, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def CONVERSION_P(self):
            return self.getToken(PostgreSQLParser.CONVERSION_P, 0)

        def DATABASE(self):
            return self.getToken(PostgreSQLParser.DATABASE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def DOMAIN_P(self):
            return self.getToken(PostgreSQLParser.DOMAIN_P, 0)

        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def function_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_with_argtypesContext,0)


        def LANGUAGE(self):
            return self.getToken(PostgreSQLParser.LANGUAGE, 0)

        def procedural_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Procedural_Context,0)


        def LARGE_P(self):
            return self.getToken(PostgreSQLParser.LARGE_P, 0)

        def OBJECT_P(self):
            return self.getToken(PostgreSQLParser.OBJECT_P, 0)

        def numericonly(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericonlyContext,0)


        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def operator_with_argtypes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Operator_with_argtypesContext,0)


        def CLASS(self):
            return self.getToken(PostgreSQLParser.CLASS, 0)

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def FAMILY(self):
            return self.getToken(PostgreSQLParser.FAMILY, 0)

        def PROCEDURE(self):
            return self.getToken(PostgreSQLParser.PROCEDURE, 0)

        def ROUTINE(self):
            return self.getToken(PostgreSQLParser.ROUTINE, 0)

        def SCHEMA(self):
            return self.getToken(PostgreSQLParser.SCHEMA, 0)

        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def TABLESPACE(self):
            return self.getToken(PostgreSQLParser.TABLESPACE, 0)

        def STATISTICS(self):
            return self.getToken(PostgreSQLParser.STATISTICS, 0)

        def TEXT_P(self):
            return self.getToken(PostgreSQLParser.TEXT_P, 0)

        def SEARCH(self):
            return self.getToken(PostgreSQLParser.SEARCH, 0)

        def DICTIONARY(self):
            return self.getToken(PostgreSQLParser.DICTIONARY, 0)

        def CONFIGURATION(self):
            return self.getToken(PostgreSQLParser.CONFIGURATION, 0)

        def FOREIGN(self):
            return self.getToken(PostgreSQLParser.FOREIGN, 0)

        def DATA_P(self):
            return self.getToken(PostgreSQLParser.DATA_P, 0)

        def WRAPPER(self):
            return self.getToken(PostgreSQLParser.WRAPPER, 0)

        def SERVER(self):
            return self.getToken(PostgreSQLParser.SERVER, 0)

        def EVENT(self):
            return self.getToken(PostgreSQLParser.EVENT, 0)

        def TRIGGER(self):
            return self.getToken(PostgreSQLParser.TRIGGER, 0)

        def PUBLICATION(self):
            return self.getToken(PostgreSQLParser.PUBLICATION, 0)

        def SUBSCRIPTION(self):
            return self.getToken(PostgreSQLParser.SUBSCRIPTION, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterownerstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterownerstmt" ):
                listener.enterAlterownerstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterownerstmt" ):
                listener.exitAlterownerstmt(self)




    def alterownerstmt(self):

        localctx = PostgreSQLParser.AlterownerstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 740, self.RULE_alterownerstmt)
        self._la = 0 # Token type
        try:
            self.state = 7030
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,556,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6845
                self.match(PostgreSQLParser.ALTER)
                self.state = 6846
                self.match(PostgreSQLParser.AGGREGATE)
                self.state = 6847
                self.aggregate_with_argtypes()
                self.state = 6848
                self.match(PostgreSQLParser.OWNER)
                self.state = 6849
                self.match(PostgreSQLParser.TO)
                self.state = 6850
                self.rolespec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6852
                self.match(PostgreSQLParser.ALTER)
                self.state = 6853
                self.match(PostgreSQLParser.COLLATION)
                self.state = 6854
                self.any_name()
                self.state = 6855
                self.match(PostgreSQLParser.OWNER)
                self.state = 6856
                self.match(PostgreSQLParser.TO)
                self.state = 6857
                self.rolespec()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6859
                self.match(PostgreSQLParser.ALTER)
                self.state = 6860
                self.match(PostgreSQLParser.CONVERSION_P)
                self.state = 6861
                self.any_name()
                self.state = 6862
                self.match(PostgreSQLParser.OWNER)
                self.state = 6863
                self.match(PostgreSQLParser.TO)
                self.state = 6864
                self.rolespec()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6866
                self.match(PostgreSQLParser.ALTER)
                self.state = 6867
                self.match(PostgreSQLParser.DATABASE)
                self.state = 6868
                self.name()
                self.state = 6869
                self.match(PostgreSQLParser.OWNER)
                self.state = 6870
                self.match(PostgreSQLParser.TO)
                self.state = 6871
                self.rolespec()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6873
                self.match(PostgreSQLParser.ALTER)
                self.state = 6874
                self.match(PostgreSQLParser.DOMAIN_P)
                self.state = 6875
                self.any_name()
                self.state = 6876
                self.match(PostgreSQLParser.OWNER)
                self.state = 6877
                self.match(PostgreSQLParser.TO)
                self.state = 6878
                self.rolespec()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6880
                self.match(PostgreSQLParser.ALTER)
                self.state = 6881
                self.match(PostgreSQLParser.FUNCTION)
                self.state = 6882
                self.function_with_argtypes()
                self.state = 6883
                self.match(PostgreSQLParser.OWNER)
                self.state = 6884
                self.match(PostgreSQLParser.TO)
                self.state = 6885
                self.rolespec()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6887
                self.match(PostgreSQLParser.ALTER)
                self.state = 6889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==326:
                    self.state = 6888
                    self.procedural_()


                self.state = 6891
                self.match(PostgreSQLParser.LANGUAGE)
                self.state = 6892
                self.name()
                self.state = 6893
                self.match(PostgreSQLParser.OWNER)
                self.state = 6894
                self.match(PostgreSQLParser.TO)
                self.state = 6895
                self.rolespec()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6897
                self.match(PostgreSQLParser.ALTER)
                self.state = 6898
                self.match(PostgreSQLParser.LARGE_P)
                self.state = 6899
                self.match(PostgreSQLParser.OBJECT_P)
                self.state = 6900
                self.numericonly()
                self.state = 6901
                self.match(PostgreSQLParser.OWNER)
                self.state = 6902
                self.match(PostgreSQLParser.TO)
                self.state = 6903
                self.rolespec()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6905
                self.match(PostgreSQLParser.ALTER)
                self.state = 6906
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 6907
                self.operator_with_argtypes()
                self.state = 6908
                self.match(PostgreSQLParser.OWNER)
                self.state = 6909
                self.match(PostgreSQLParser.TO)
                self.state = 6910
                self.rolespec()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 6912
                self.match(PostgreSQLParser.ALTER)
                self.state = 6913
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 6914
                self.match(PostgreSQLParser.CLASS)
                self.state = 6915
                self.any_name()
                self.state = 6916
                self.match(PostgreSQLParser.USING)
                self.state = 6917
                self.name()
                self.state = 6918
                self.match(PostgreSQLParser.OWNER)
                self.state = 6919
                self.match(PostgreSQLParser.TO)
                self.state = 6920
                self.rolespec()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 6922
                self.match(PostgreSQLParser.ALTER)
                self.state = 6923
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 6924
                self.match(PostgreSQLParser.FAMILY)
                self.state = 6925
                self.any_name()
                self.state = 6926
                self.match(PostgreSQLParser.USING)
                self.state = 6927
                self.name()
                self.state = 6928
                self.match(PostgreSQLParser.OWNER)
                self.state = 6929
                self.match(PostgreSQLParser.TO)
                self.state = 6930
                self.rolespec()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 6932
                self.match(PostgreSQLParser.ALTER)
                self.state = 6933
                self.match(PostgreSQLParser.PROCEDURE)
                self.state = 6934
                self.function_with_argtypes()
                self.state = 6935
                self.match(PostgreSQLParser.OWNER)
                self.state = 6936
                self.match(PostgreSQLParser.TO)
                self.state = 6937
                self.rolespec()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 6939
                self.match(PostgreSQLParser.ALTER)
                self.state = 6940
                self.match(PostgreSQLParser.ROUTINE)
                self.state = 6941
                self.function_with_argtypes()
                self.state = 6942
                self.match(PostgreSQLParser.OWNER)
                self.state = 6943
                self.match(PostgreSQLParser.TO)
                self.state = 6944
                self.rolespec()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 6946
                self.match(PostgreSQLParser.ALTER)
                self.state = 6947
                self.match(PostgreSQLParser.SCHEMA)
                self.state = 6948
                self.name()
                self.state = 6949
                self.match(PostgreSQLParser.OWNER)
                self.state = 6950
                self.match(PostgreSQLParser.TO)
                self.state = 6951
                self.rolespec()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 6953
                self.match(PostgreSQLParser.ALTER)
                self.state = 6954
                self.match(PostgreSQLParser.TYPE_P)
                self.state = 6955
                self.any_name()
                self.state = 6956
                self.match(PostgreSQLParser.OWNER)
                self.state = 6957
                self.match(PostgreSQLParser.TO)
                self.state = 6958
                self.rolespec()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 6960
                self.match(PostgreSQLParser.ALTER)
                self.state = 6961
                self.match(PostgreSQLParser.TABLESPACE)
                self.state = 6962
                self.name()
                self.state = 6963
                self.match(PostgreSQLParser.OWNER)
                self.state = 6964
                self.match(PostgreSQLParser.TO)
                self.state = 6965
                self.rolespec()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 6967
                self.match(PostgreSQLParser.ALTER)
                self.state = 6968
                self.match(PostgreSQLParser.STATISTICS)
                self.state = 6969
                self.any_name()
                self.state = 6970
                self.match(PostgreSQLParser.OWNER)
                self.state = 6971
                self.match(PostgreSQLParser.TO)
                self.state = 6972
                self.rolespec()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 6974
                self.match(PostgreSQLParser.ALTER)
                self.state = 6975
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 6976
                self.match(PostgreSQLParser.SEARCH)
                self.state = 6977
                self.match(PostgreSQLParser.DICTIONARY)
                self.state = 6978
                self.any_name()
                self.state = 6979
                self.match(PostgreSQLParser.OWNER)
                self.state = 6980
                self.match(PostgreSQLParser.TO)
                self.state = 6981
                self.rolespec()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 6983
                self.match(PostgreSQLParser.ALTER)
                self.state = 6984
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 6985
                self.match(PostgreSQLParser.SEARCH)
                self.state = 6986
                self.match(PostgreSQLParser.CONFIGURATION)
                self.state = 6987
                self.any_name()
                self.state = 6988
                self.match(PostgreSQLParser.OWNER)
                self.state = 6989
                self.match(PostgreSQLParser.TO)
                self.state = 6990
                self.rolespec()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 6992
                self.match(PostgreSQLParser.ALTER)
                self.state = 6993
                self.match(PostgreSQLParser.FOREIGN)
                self.state = 6994
                self.match(PostgreSQLParser.DATA_P)
                self.state = 6995
                self.match(PostgreSQLParser.WRAPPER)
                self.state = 6996
                self.name()
                self.state = 6997
                self.match(PostgreSQLParser.OWNER)
                self.state = 6998
                self.match(PostgreSQLParser.TO)
                self.state = 6999
                self.rolespec()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 7001
                self.match(PostgreSQLParser.ALTER)
                self.state = 7002
                self.match(PostgreSQLParser.SERVER)
                self.state = 7003
                self.name()
                self.state = 7004
                self.match(PostgreSQLParser.OWNER)
                self.state = 7005
                self.match(PostgreSQLParser.TO)
                self.state = 7006
                self.rolespec()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 7008
                self.match(PostgreSQLParser.ALTER)
                self.state = 7009
                self.match(PostgreSQLParser.EVENT)
                self.state = 7010
                self.match(PostgreSQLParser.TRIGGER)
                self.state = 7011
                self.name()
                self.state = 7012
                self.match(PostgreSQLParser.OWNER)
                self.state = 7013
                self.match(PostgreSQLParser.TO)
                self.state = 7014
                self.rolespec()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 7016
                self.match(PostgreSQLParser.ALTER)
                self.state = 7017
                self.match(PostgreSQLParser.PUBLICATION)
                self.state = 7018
                self.name()
                self.state = 7019
                self.match(PostgreSQLParser.OWNER)
                self.state = 7020
                self.match(PostgreSQLParser.TO)
                self.state = 7021
                self.rolespec()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 7023
                self.match(PostgreSQLParser.ALTER)
                self.state = 7024
                self.match(PostgreSQLParser.SUBSCRIPTION)
                self.state = 7025
                self.name()
                self.state = 7026
                self.match(PostgreSQLParser.OWNER)
                self.state = 7027
                self.match(PostgreSQLParser.TO)
                self.state = 7028
                self.rolespec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatepublicationstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def PUBLICATION(self):
            return self.getToken(PostgreSQLParser.PUBLICATION, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def publication_for_tables_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Publication_for_tables_Context,0)


        def definition_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Definition_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createpublicationstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatepublicationstmt" ):
                listener.enterCreatepublicationstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatepublicationstmt" ):
                listener.exitCreatepublicationstmt(self)




    def createpublicationstmt(self):

        localctx = PostgreSQLParser.CreatepublicationstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 742, self.RULE_createpublicationstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7032
            self.match(PostgreSQLParser.CREATE)
            self.state = 7033
            self.match(PostgreSQLParser.PUBLICATION)
            self.state = 7034
            self.name()
            self.state = 7036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==100:
                self.state = 7035
                self.publication_for_tables_()


            self.state = 7039
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 7038
                self.definition_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Publication_for_tables_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def publication_for_tables(self):
            return self.getTypedRuleContext(PostgreSQLParser.Publication_for_tablesContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_publication_for_tables_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublication_for_tables_" ):
                listener.enterPublication_for_tables_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublication_for_tables_" ):
                listener.exitPublication_for_tables_(self)




    def publication_for_tables_(self):

        localctx = PostgreSQLParser.Publication_for_tables_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 744, self.RULE_publication_for_tables_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7041
            self.publication_for_tables()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Publication_for_tablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def relation_expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relation_expr_listContext,0)


        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def TABLES(self):
            return self.getToken(PostgreSQLParser.TABLES, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_publication_for_tables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublication_for_tables" ):
                listener.enterPublication_for_tables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublication_for_tables" ):
                listener.exitPublication_for_tables(self)




    def publication_for_tables(self):

        localctx = PostgreSQLParser.Publication_for_tablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 746, self.RULE_publication_for_tables)
        try:
            self.state = 7049
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,559,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7043
                self.match(PostgreSQLParser.FOR)
                self.state = 7044
                self.match(PostgreSQLParser.TABLE)
                self.state = 7045
                self.relation_expr_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7046
                self.match(PostgreSQLParser.FOR)
                self.state = 7047
                self.match(PostgreSQLParser.ALL)
                self.state = 7048
                self.match(PostgreSQLParser.TABLES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterpublicationstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def PUBLICATION(self):
            return self.getToken(PostgreSQLParser.PUBLICATION, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def definition(self):
            return self.getTypedRuleContext(PostgreSQLParser.DefinitionContext,0)


        def ADD_P(self):
            return self.getToken(PostgreSQLParser.ADD_P, 0)

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def relation_expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relation_expr_listContext,0)


        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterpublicationstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterpublicationstmt" ):
                listener.enterAlterpublicationstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterpublicationstmt" ):
                listener.exitAlterpublicationstmt(self)




    def alterpublicationstmt(self):

        localctx = PostgreSQLParser.AlterpublicationstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 748, self.RULE_alterpublicationstmt)
        try:
            self.state = 7078
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,560,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7051
                self.match(PostgreSQLParser.ALTER)
                self.state = 7052
                self.match(PostgreSQLParser.PUBLICATION)
                self.state = 7053
                self.name()
                self.state = 7054
                self.match(PostgreSQLParser.SET)
                self.state = 7055
                self.definition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7057
                self.match(PostgreSQLParser.ALTER)
                self.state = 7058
                self.match(PostgreSQLParser.PUBLICATION)
                self.state = 7059
                self.name()
                self.state = 7060
                self.match(PostgreSQLParser.ADD_P)
                self.state = 7061
                self.match(PostgreSQLParser.TABLE)
                self.state = 7062
                self.relation_expr_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7064
                self.match(PostgreSQLParser.ALTER)
                self.state = 7065
                self.match(PostgreSQLParser.PUBLICATION)
                self.state = 7066
                self.name()
                self.state = 7067
                self.match(PostgreSQLParser.SET)
                self.state = 7068
                self.match(PostgreSQLParser.TABLE)
                self.state = 7069
                self.relation_expr_list()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7071
                self.match(PostgreSQLParser.ALTER)
                self.state = 7072
                self.match(PostgreSQLParser.PUBLICATION)
                self.state = 7073
                self.name()
                self.state = 7074
                self.match(PostgreSQLParser.DROP)
                self.state = 7075
                self.match(PostgreSQLParser.TABLE)
                self.state = 7076
                self.relation_expr_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatesubscriptionstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def SUBSCRIPTION(self):
            return self.getToken(PostgreSQLParser.SUBSCRIPTION, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def CONNECTION(self):
            return self.getToken(PostgreSQLParser.CONNECTION, 0)

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def PUBLICATION(self):
            return self.getToken(PostgreSQLParser.PUBLICATION, 0)

        def publication_name_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Publication_name_listContext,0)


        def definition_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Definition_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createsubscriptionstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatesubscriptionstmt" ):
                listener.enterCreatesubscriptionstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatesubscriptionstmt" ):
                listener.exitCreatesubscriptionstmt(self)




    def createsubscriptionstmt(self):

        localctx = PostgreSQLParser.CreatesubscriptionstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 750, self.RULE_createsubscriptionstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7080
            self.match(PostgreSQLParser.CREATE)
            self.state = 7081
            self.match(PostgreSQLParser.SUBSCRIPTION)
            self.state = 7082
            self.name()
            self.state = 7083
            self.match(PostgreSQLParser.CONNECTION)
            self.state = 7084
            self.sconst()
            self.state = 7085
            self.match(PostgreSQLParser.PUBLICATION)
            self.state = 7086
            self.publication_name_list()
            self.state = 7088
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 7087
                self.definition_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Publication_name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def publication_name_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Publication_name_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Publication_name_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_publication_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublication_name_list" ):
                listener.enterPublication_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublication_name_list" ):
                listener.exitPublication_name_list(self)




    def publication_name_list(self):

        localctx = PostgreSQLParser.Publication_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 752, self.RULE_publication_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7090
            self.publication_name_item()
            self.state = 7095
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 7091
                self.match(PostgreSQLParser.COMMA)
                self.state = 7092
                self.publication_name_item()
                self.state = 7097
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Publication_name_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colLabel(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColLabelContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_publication_name_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublication_name_item" ):
                listener.enterPublication_name_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublication_name_item" ):
                listener.exitPublication_name_item(self)




    def publication_name_item(self):

        localctx = PostgreSQLParser.Publication_name_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 754, self.RULE_publication_name_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7098
            self.colLabel()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AltersubscriptionstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def SUBSCRIPTION(self):
            return self.getToken(PostgreSQLParser.SUBSCRIPTION, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def definition(self):
            return self.getTypedRuleContext(PostgreSQLParser.DefinitionContext,0)


        def CONNECTION(self):
            return self.getToken(PostgreSQLParser.CONNECTION, 0)

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def REFRESH(self):
            return self.getToken(PostgreSQLParser.REFRESH, 0)

        def PUBLICATION(self):
            return self.getToken(PostgreSQLParser.PUBLICATION, 0)

        def definition_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Definition_Context,0)


        def publication_name_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Publication_name_listContext,0)


        def ENABLE_P(self):
            return self.getToken(PostgreSQLParser.ENABLE_P, 0)

        def DISABLE_P(self):
            return self.getToken(PostgreSQLParser.DISABLE_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_altersubscriptionstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAltersubscriptionstmt" ):
                listener.enterAltersubscriptionstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAltersubscriptionstmt" ):
                listener.exitAltersubscriptionstmt(self)




    def altersubscriptionstmt(self):

        localctx = PostgreSQLParser.AltersubscriptionstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 756, self.RULE_altersubscriptionstmt)
        self._la = 0 # Token type
        try:
            self.state = 7139
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,565,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7100
                self.match(PostgreSQLParser.ALTER)
                self.state = 7101
                self.match(PostgreSQLParser.SUBSCRIPTION)
                self.state = 7102
                self.name()
                self.state = 7103
                self.match(PostgreSQLParser.SET)
                self.state = 7104
                self.definition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7106
                self.match(PostgreSQLParser.ALTER)
                self.state = 7107
                self.match(PostgreSQLParser.SUBSCRIPTION)
                self.state = 7108
                self.name()
                self.state = 7109
                self.match(PostgreSQLParser.CONNECTION)
                self.state = 7110
                self.sconst()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7112
                self.match(PostgreSQLParser.ALTER)
                self.state = 7113
                self.match(PostgreSQLParser.SUBSCRIPTION)
                self.state = 7114
                self.name()
                self.state = 7115
                self.match(PostgreSQLParser.REFRESH)
                self.state = 7116
                self.match(PostgreSQLParser.PUBLICATION)
                self.state = 7118
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143:
                    self.state = 7117
                    self.definition_()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7120
                self.match(PostgreSQLParser.ALTER)
                self.state = 7121
                self.match(PostgreSQLParser.SUBSCRIPTION)
                self.state = 7122
                self.name()
                self.state = 7123
                self.match(PostgreSQLParser.SET)
                self.state = 7124
                self.match(PostgreSQLParser.PUBLICATION)
                self.state = 7125
                self.publication_name_list()
                self.state = 7127
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143:
                    self.state = 7126
                    self.definition_()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7129
                self.match(PostgreSQLParser.ALTER)
                self.state = 7130
                self.match(PostgreSQLParser.SUBSCRIPTION)
                self.state = 7131
                self.name()
                self.state = 7132
                self.match(PostgreSQLParser.ENABLE_P)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7134
                self.match(PostgreSQLParser.ALTER)
                self.state = 7135
                self.match(PostgreSQLParser.SUBSCRIPTION)
                self.state = 7136
                self.name()
                self.state = 7137
                self.match(PostgreSQLParser.DISABLE_P)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropsubscriptionstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def SUBSCRIPTION(self):
            return self.getToken(PostgreSQLParser.SUBSCRIPTION, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_dropsubscriptionstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropsubscriptionstmt" ):
                listener.enterDropsubscriptionstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropsubscriptionstmt" ):
                listener.exitDropsubscriptionstmt(self)




    def dropsubscriptionstmt(self):

        localctx = PostgreSQLParser.DropsubscriptionstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 758, self.RULE_dropsubscriptionstmt)
        self._la = 0 # Token type
        try:
            self.state = 7155
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,568,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7141
                self.match(PostgreSQLParser.DROP)
                self.state = 7142
                self.match(PostgreSQLParser.SUBSCRIPTION)
                self.state = 7143
                self.name()
                self.state = 7145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 7144
                    self.drop_behavior_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7147
                self.match(PostgreSQLParser.DROP)
                self.state = 7148
                self.match(PostgreSQLParser.SUBSCRIPTION)
                self.state = 7149
                self.match(PostgreSQLParser.IF_P)
                self.state = 7150
                self.match(PostgreSQLParser.EXISTS)
                self.state = 7151
                self.name()
                self.state = 7153
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 7152
                    self.drop_behavior_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def RULE(self):
            return self.getToken(PostgreSQLParser.RULE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def event(self):
            return self.getTypedRuleContext(PostgreSQLParser.EventContext,0)


        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def DO(self):
            return self.getToken(PostgreSQLParser.DO, 0)

        def ruleactionlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.RuleactionlistContext,0)


        def or_replace_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Or_replace_Context,0)


        def where_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Where_clauseContext,0)


        def instead_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Instead_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_rulestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulestmt" ):
                listener.enterRulestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulestmt" ):
                listener.exitRulestmt(self)




    def rulestmt(self):

        localctx = PostgreSQLParser.RulestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 760, self.RULE_rulestmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7157
            self.match(PostgreSQLParser.CREATE)
            self.state = 7159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 7158
                self.or_replace_()


            self.state = 7161
            self.match(PostgreSQLParser.RULE)
            self.state = 7162
            self.name()
            self.state = 7163
            self.match(PostgreSQLParser.AS)
            self.state = 7164
            self.match(PostgreSQLParser.ON)
            self.state = 7165
            self.event()
            self.state = 7166
            self.match(PostgreSQLParser.TO)
            self.state = 7167
            self.qualified_name()
            self.state = 7169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==141:
                self.state = 7168
                self.where_clause()


            self.state = 7171
            self.match(PostgreSQLParser.DO)
            self.state = 7173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==175 or _la==271:
                self.state = 7172
                self.instead_()


            self.state = 7175
            self.ruleactionlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleactionlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTHING(self):
            return self.getToken(PostgreSQLParser.NOTHING, 0)

        def ruleactionstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.RuleactionstmtContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def ruleactionmulti(self):
            return self.getTypedRuleContext(PostgreSQLParser.RuleactionmultiContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_ruleactionlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleactionlist" ):
                listener.enterRuleactionlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleactionlist" ):
                listener.exitRuleactionlist(self)




    def ruleactionlist(self):

        localctx = PostgreSQLParser.RuleactionlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 762, self.RULE_ruleactionlist)
        try:
            self.state = 7183
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,572,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7177
                self.match(PostgreSQLParser.NOTHING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7178
                self.ruleactionstmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7179
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 7180
                self.ruleactionmulti()
                self.state = 7181
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleactionmultiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleactionstmtOrEmpty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.RuleactionstmtOrEmptyContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.RuleactionstmtOrEmptyContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.SEMI)
            else:
                return self.getToken(PostgreSQLParser.SEMI, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_ruleactionmulti

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleactionmulti" ):
                listener.enterRuleactionmulti(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleactionmulti" ):
                listener.exitRuleactionmulti(self)




    def ruleactionmulti(self):

        localctx = PostgreSQLParser.RuleactionmultiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 764, self.RULE_ruleactionmulti)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2 or ((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & 131089) != 0) or _la==220 or _la==270 or _la==302 or _la==400 or _la==453:
                self.state = 7185
                self.ruleactionstmtOrEmpty()


            self.state = 7194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==7:
                self.state = 7188
                self.match(PostgreSQLParser.SEMI)
                self.state = 7190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or ((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & 131089) != 0) or _la==220 or _la==270 or _la==302 or _la==400 or _la==453:
                    self.state = 7189
                    self.ruleactionstmtOrEmpty()


                self.state = 7196
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleactionstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.SelectstmtContext,0)


        def insertstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.InsertstmtContext,0)


        def updatestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.UpdatestmtContext,0)


        def deletestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DeletestmtContext,0)


        def notifystmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.NotifystmtContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_ruleactionstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleactionstmt" ):
                listener.enterRuleactionstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleactionstmt" ):
                listener.exitRuleactionstmt(self)




    def ruleactionstmt(self):

        localctx = PostgreSQLParser.RuleactionstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 766, self.RULE_ruleactionstmt)
        try:
            self.state = 7202
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,576,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7197
                self.selectstmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7198
                self.insertstmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7199
                self.updatestmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7200
                self.deletestmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7201
                self.notifystmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuleactionstmtOrEmptyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleactionstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.RuleactionstmtContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_ruleactionstmtOrEmpty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleactionstmtOrEmpty" ):
                listener.enterRuleactionstmtOrEmpty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleactionstmtOrEmpty" ):
                listener.exitRuleactionstmtOrEmpty(self)




    def ruleactionstmtOrEmpty(self):

        localctx = PostgreSQLParser.RuleactionstmtOrEmptyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 768, self.RULE_ruleactionstmtOrEmpty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7204
            self.ruleactionstmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(PostgreSQLParser.SELECT, 0)

        def UPDATE(self):
            return self.getToken(PostgreSQLParser.UPDATE, 0)

        def DELETE_P(self):
            return self.getToken(PostgreSQLParser.DELETE_P, 0)

        def INSERT(self):
            return self.getToken(PostgreSQLParser.INSERT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_event

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent" ):
                listener.enterEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent" ):
                listener.exitEvent(self)




    def event(self):

        localctx = PostgreSQLParser.EventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 770, self.RULE_event)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7206
            _la = self._input.LA(1)
            if not(_la==126 or _la==220 or _la==270 or _la==400):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Instead_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSTEAD(self):
            return self.getToken(PostgreSQLParser.INSTEAD, 0)

        def ALSO(self):
            return self.getToken(PostgreSQLParser.ALSO, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_instead_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstead_" ):
                listener.enterInstead_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstead_" ):
                listener.exitInstead_(self)




    def instead_(self):

        localctx = PostgreSQLParser.Instead_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 772, self.RULE_instead_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7208
            _la = self._input.LA(1)
            if not(_la==175 or _la==271):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotifystmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTIFY(self):
            return self.getToken(PostgreSQLParser.NOTIFY, 0)

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def notify_payload(self):
            return self.getTypedRuleContext(PostgreSQLParser.Notify_payloadContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_notifystmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotifystmt" ):
                listener.enterNotifystmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotifystmt" ):
                listener.exitNotifystmt(self)




    def notifystmt(self):

        localctx = PostgreSQLParser.NotifystmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 774, self.RULE_notifystmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7210
            self.match(PostgreSQLParser.NOTIFY)
            self.state = 7211
            self.colid()
            self.state = 7213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6:
                self.state = 7212
                self.notify_payload()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Notify_payloadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_notify_payload

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotify_payload" ):
                listener.enterNotify_payload(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotify_payload" ):
                listener.exitNotify_payload(self)




    def notify_payload(self):

        localctx = PostgreSQLParser.Notify_payloadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 776, self.RULE_notify_payload)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7215
            self.match(PostgreSQLParser.COMMA)
            self.state = 7216
            self.sconst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListenstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LISTEN(self):
            return self.getToken(PostgreSQLParser.LISTEN, 0)

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_listenstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListenstmt" ):
                listener.enterListenstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListenstmt" ):
                listener.exitListenstmt(self)




    def listenstmt(self):

        localctx = PostgreSQLParser.ListenstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 778, self.RULE_listenstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7218
            self.match(PostgreSQLParser.LISTEN)
            self.state = 7219
            self.colid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnlistenstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNLISTEN(self):
            return self.getToken(PostgreSQLParser.UNLISTEN, 0)

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def STAR(self):
            return self.getToken(PostgreSQLParser.STAR, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_unlistenstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnlistenstmt" ):
                listener.enterUnlistenstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnlistenstmt" ):
                listener.exitUnlistenstmt(self)




    def unlistenstmt(self):

        localctx = PostgreSQLParser.UnlistenstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 780, self.RULE_unlistenstmt)
        try:
            self.state = 7225
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,578,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7221
                self.match(PostgreSQLParser.UNLISTEN)
                self.state = 7222
                self.colid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7223
                self.match(PostgreSQLParser.UNLISTEN)
                self.state = 7224
                self.match(PostgreSQLParser.STAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABORT_P(self):
            return self.getToken(PostgreSQLParser.ABORT_P, 0)

        def transaction_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Transaction_Context,0)


        def transaction_chain_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Transaction_chain_Context,0)


        def BEGIN_P(self):
            return self.getToken(PostgreSQLParser.BEGIN_P, 0)

        def transaction_mode_list_or_empty(self):
            return self.getTypedRuleContext(PostgreSQLParser.Transaction_mode_list_or_emptyContext,0)


        def START(self):
            return self.getToken(PostgreSQLParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(PostgreSQLParser.TRANSACTION, 0)

        def COMMIT(self):
            return self.getToken(PostgreSQLParser.COMMIT, 0)

        def END_P(self):
            return self.getToken(PostgreSQLParser.END_P, 0)

        def ROLLBACK(self):
            return self.getToken(PostgreSQLParser.ROLLBACK, 0)

        def SAVEPOINT(self):
            return self.getToken(PostgreSQLParser.SAVEPOINT, 0)

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def RELEASE(self):
            return self.getToken(PostgreSQLParser.RELEASE, 0)

        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def PREPARE(self):
            return self.getToken(PostgreSQLParser.PREPARE, 0)

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def PREPARED(self):
            return self.getToken(PostgreSQLParser.PREPARED, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_transactionstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionstmt" ):
                listener.enterTransactionstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionstmt" ):
                listener.exitTransactionstmt(self)




    def transactionstmt(self):

        localctx = PostgreSQLParser.TransactionstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 782, self.RULE_transactionstmt)
        self._la = 0 # Token type
        try:
            self.state = 7296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,592,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7227
                self.match(PostgreSQLParser.ABORT_P)
                self.state = 7229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==387 or _la==411:
                    self.state = 7228
                    self.transaction_()


                self.state = 7232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==71:
                    self.state = 7231
                    self.transaction_chain_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7234
                self.match(PostgreSQLParser.BEGIN_P)
                self.state = 7236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==387 or _la==411:
                    self.state = 7235
                    self.transaction_()


                self.state = 7239
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92 or _la==115 or _la==273 or _la==331:
                    self.state = 7238
                    self.transaction_mode_list_or_empty()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7241
                self.match(PostgreSQLParser.START)
                self.state = 7242
                self.match(PostgreSQLParser.TRANSACTION)
                self.state = 7244
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92 or _la==115 or _la==273 or _la==331:
                    self.state = 7243
                    self.transaction_mode_list_or_empty()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7246
                self.match(PostgreSQLParser.COMMIT)
                self.state = 7248
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==387 or _la==411:
                    self.state = 7247
                    self.transaction_()


                self.state = 7251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==71:
                    self.state = 7250
                    self.transaction_chain_()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7253
                self.match(PostgreSQLParser.END_P)
                self.state = 7255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==387 or _la==411:
                    self.state = 7254
                    self.transaction_()


                self.state = 7258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==71:
                    self.state = 7257
                    self.transaction_chain_()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7260
                self.match(PostgreSQLParser.ROLLBACK)
                self.state = 7262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==387 or _la==411:
                    self.state = 7261
                    self.transaction_()


                self.state = 7265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==71:
                    self.state = 7264
                    self.transaction_chain_()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 7267
                self.match(PostgreSQLParser.SAVEPOINT)
                self.state = 7268
                self.colid()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 7269
                self.match(PostgreSQLParser.RELEASE)
                self.state = 7270
                self.match(PostgreSQLParser.SAVEPOINT)
                self.state = 7271
                self.colid()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 7272
                self.match(PostgreSQLParser.RELEASE)
                self.state = 7273
                self.colid()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 7274
                self.match(PostgreSQLParser.ROLLBACK)
                self.state = 7276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==387 or _la==411:
                    self.state = 7275
                    self.transaction_()


                self.state = 7278
                self.match(PostgreSQLParser.TO)
                self.state = 7279
                self.match(PostgreSQLParser.SAVEPOINT)
                self.state = 7280
                self.colid()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 7281
                self.match(PostgreSQLParser.ROLLBACK)
                self.state = 7283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==387 or _la==411:
                    self.state = 7282
                    self.transaction_()


                self.state = 7285
                self.match(PostgreSQLParser.TO)
                self.state = 7286
                self.colid()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 7287
                self.match(PostgreSQLParser.PREPARE)
                self.state = 7288
                self.match(PostgreSQLParser.TRANSACTION)
                self.state = 7289
                self.sconst()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 7290
                self.match(PostgreSQLParser.COMMIT)
                self.state = 7291
                self.match(PostgreSQLParser.PREPARED)
                self.state = 7292
                self.sconst()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 7293
                self.match(PostgreSQLParser.ROLLBACK)
                self.state = 7294
                self.match(PostgreSQLParser.PREPARED)
                self.state = 7295
                self.sconst()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transaction_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WORK(self):
            return self.getToken(PostgreSQLParser.WORK, 0)

        def TRANSACTION(self):
            return self.getToken(PostgreSQLParser.TRANSACTION, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_transaction_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_" ):
                listener.enterTransaction_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_" ):
                listener.exitTransaction_(self)




    def transaction_(self):

        localctx = PostgreSQLParser.Transaction_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 784, self.RULE_transaction_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7298
            _la = self._input.LA(1)
            if not(_la==387 or _la==411):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transaction_mode_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISOLATION(self):
            return self.getToken(PostgreSQLParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(PostgreSQLParser.LEVEL, 0)

        def iso_level(self):
            return self.getTypedRuleContext(PostgreSQLParser.Iso_levelContext,0)


        def READ(self):
            return self.getToken(PostgreSQLParser.READ, 0)

        def ONLY(self):
            return self.getToken(PostgreSQLParser.ONLY, 0)

        def WRITE(self):
            return self.getToken(PostgreSQLParser.WRITE, 0)

        def DEFERRABLE(self):
            return self.getToken(PostgreSQLParser.DEFERRABLE, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_transaction_mode_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_mode_item" ):
                listener.enterTransaction_mode_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_mode_item" ):
                listener.exitTransaction_mode_item(self)




    def transaction_mode_item(self):

        localctx = PostgreSQLParser.Transaction_mode_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 786, self.RULE_transaction_mode_item)
        try:
            self.state = 7310
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,593,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7300
                self.match(PostgreSQLParser.ISOLATION)
                self.state = 7301
                self.match(PostgreSQLParser.LEVEL)
                self.state = 7302
                self.iso_level()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7303
                self.match(PostgreSQLParser.READ)
                self.state = 7304
                self.match(PostgreSQLParser.ONLY)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7305
                self.match(PostgreSQLParser.READ)
                self.state = 7306
                self.match(PostgreSQLParser.WRITE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7307
                self.match(PostgreSQLParser.DEFERRABLE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7308
                self.match(PostgreSQLParser.NOT)
                self.state = 7309
                self.match(PostgreSQLParser.DEFERRABLE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transaction_mode_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transaction_mode_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Transaction_mode_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Transaction_mode_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_transaction_mode_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_mode_list" ):
                listener.enterTransaction_mode_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_mode_list" ):
                listener.exitTransaction_mode_list(self)




    def transaction_mode_list(self):

        localctx = PostgreSQLParser.Transaction_mode_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 788, self.RULE_transaction_mode_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7312
            self.transaction_mode_item()
            self.state = 7319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6 or _la==92 or _la==115 or _la==273 or _la==331:
                self.state = 7314
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==6:
                    self.state = 7313
                    self.match(PostgreSQLParser.COMMA)


                self.state = 7316
                self.transaction_mode_item()
                self.state = 7321
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transaction_mode_list_or_emptyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transaction_mode_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Transaction_mode_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_transaction_mode_list_or_empty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_mode_list_or_empty" ):
                listener.enterTransaction_mode_list_or_empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_mode_list_or_empty" ):
                listener.exitTransaction_mode_list_or_empty(self)




    def transaction_mode_list_or_empty(self):

        localctx = PostgreSQLParser.Transaction_mode_list_or_emptyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 790, self.RULE_transaction_mode_list_or_empty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7322
            self.transaction_mode_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transaction_chain_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(PostgreSQLParser.AND, 0)

        def CHAIN(self):
            return self.getToken(PostgreSQLParser.CHAIN, 0)

        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_transaction_chain_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_chain_" ):
                listener.enterTransaction_chain_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_chain_" ):
                listener.exitTransaction_chain_(self)




    def transaction_chain_(self):

        localctx = PostgreSQLParser.Transaction_chain_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 792, self.RULE_transaction_chain_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7324
            self.match(PostgreSQLParser.AND)
            self.state = 7326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==300:
                self.state = 7325
                self.match(PostgreSQLParser.NO)


            self.state = 7328
            self.match(PostgreSQLParser.CHAIN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def selectstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.SelectstmtContext,0)


        def VIEW(self):
            return self.getToken(PostgreSQLParser.VIEW, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def RECURSIVE(self):
            return self.getToken(PostgreSQLParser.RECURSIVE, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def columnlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColumnlistContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def OR(self):
            return self.getToken(PostgreSQLParser.OR, 0)

        def REPLACE(self):
            return self.getToken(PostgreSQLParser.REPLACE, 0)

        def opttemp(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttempContext,0)


        def check_option_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Check_option_Context,0)


        def column_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_list_Context,0)


        def reloptions_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Reloptions_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_viewstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewstmt" ):
                listener.enterViewstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewstmt" ):
                listener.exitViewstmt(self)




    def viewstmt(self):

        localctx = PostgreSQLParser.ViewstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 794, self.RULE_viewstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7330
            self.match(PostgreSQLParser.CREATE)
            self.state = 7333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 7331
                self.match(PostgreSQLParser.OR)
                self.state = 7332
                self.match(PostgreSQLParser.REPLACE)


            self.state = 7336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==251 or _la==283 or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & 32773) != 0):
                self.state = 7335
                self.opttemp()


            self.state = 7355
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [407]:
                self.state = 7338
                self.match(PostgreSQLParser.VIEW)
                self.state = 7339
                self.qualified_name()
                self.state = 7341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 7340
                    self.column_list_()


                self.state = 7344
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143:
                    self.state = 7343
                    self.reloptions_()


                pass
            elif token in [334]:
                self.state = 7346
                self.match(PostgreSQLParser.RECURSIVE)
                self.state = 7347
                self.match(PostgreSQLParser.VIEW)
                self.state = 7348
                self.qualified_name()
                self.state = 7349
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 7350
                self.columnlist()
                self.state = 7351
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 7353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143:
                    self.state = 7352
                    self.reloptions_()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 7357
            self.match(PostgreSQLParser.AS)
            self.state = 7358
            self.selectstmt()
            self.state = 7360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 7359
                self.check_option_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Check_option_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def CHECK(self):
            return self.getToken(PostgreSQLParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(PostgreSQLParser.OPTION, 0)

        def CASCADED(self):
            return self.getToken(PostgreSQLParser.CASCADED, 0)

        def LOCAL(self):
            return self.getToken(PostgreSQLParser.LOCAL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_check_option_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheck_option_" ):
                listener.enterCheck_option_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheck_option_" ):
                listener.exitCheck_option_(self)




    def check_option_(self):

        localctx = PostgreSQLParser.Check_option_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 796, self.RULE_check_option_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7362
            self.match(PostgreSQLParser.WITH)
            self.state = 7364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==189 or _la==283:
                self.state = 7363
                _la = self._input.LA(1)
                if not(_la==189 or _la==283):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 7366
            self.match(PostgreSQLParser.CHECK)
            self.state = 7367
            self.match(PostgreSQLParser.OPTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD(self):
            return self.getToken(PostgreSQLParser.LOAD, 0)

        def file_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.File_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_loadstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadstmt" ):
                listener.enterLoadstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadstmt" ):
                listener.exitLoadstmt(self)




    def loadstmt(self):

        localctx = PostgreSQLParser.LoadstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 798, self.RULE_loadstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7369
            self.match(PostgreSQLParser.LOAD)
            self.state = 7370
            self.file_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatedbstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def DATABASE(self):
            return self.getToken(PostgreSQLParser.DATABASE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def with_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_Context,0)


        def createdb_opt_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Createdb_opt_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createdbstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatedbstmt" ):
                listener.enterCreatedbstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatedbstmt" ):
                listener.exitCreatedbstmt(self)




    def createdbstmt(self):

        localctx = PostgreSQLParser.CreatedbstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 800, self.RULE_createdbstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7372
            self.match(PostgreSQLParser.CREATE)
            self.state = 7373
            self.match(PostgreSQLParser.DATABASE)
            self.state = 7374
            self.name()
            self.state = 7376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 7375
                self.with_()


            self.state = 7379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==202 or _la==232 or _la==284 or _la==313 or _la==382 or _la==384 or ((((_la - 554)) & ~0x3f) == 0 and ((1 << (_la - 554)) & 268435491) != 0):
                self.state = 7378
                self.createdb_opt_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Createdb_opt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createdb_opt_items(self):
            return self.getTypedRuleContext(PostgreSQLParser.Createdb_opt_itemsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createdb_opt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatedb_opt_list" ):
                listener.enterCreatedb_opt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatedb_opt_list" ):
                listener.exitCreatedb_opt_list(self)




    def createdb_opt_list(self):

        localctx = PostgreSQLParser.Createdb_opt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 802, self.RULE_createdb_opt_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7381
            self.createdb_opt_items()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Createdb_opt_itemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createdb_opt_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Createdb_opt_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Createdb_opt_itemContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createdb_opt_items

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatedb_opt_items" ):
                listener.enterCreatedb_opt_items(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatedb_opt_items" ):
                listener.exitCreatedb_opt_items(self)




    def createdb_opt_items(self):

        localctx = PostgreSQLParser.Createdb_opt_itemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 804, self.RULE_createdb_opt_items)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7384 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 7383
                self.createdb_opt_item()
                self.state = 7386 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==202 or _la==232 or _la==284 or _la==313 or _la==382 or _la==384 or ((((_la - 554)) & ~0x3f) == 0 and ((1 << (_la - 554)) & 268435491) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Createdb_opt_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createdb_opt_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Createdb_opt_nameContext,0)


        def signediconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SignediconstContext,0)


        def boolean_or_string_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Boolean_or_string_Context,0)


        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def equal_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Equal_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createdb_opt_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatedb_opt_item" ):
                listener.enterCreatedb_opt_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatedb_opt_item" ):
                listener.exitCreatedb_opt_item(self)




    def createdb_opt_item(self):

        localctx = PostgreSQLParser.Createdb_opt_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 806, self.RULE_createdb_opt_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7388
            self.createdb_opt_name()
            self.state = 7390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 7389
                self.equal_()


            self.state = 7395
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12, 13, 576, 577, 578, 579]:
                self.state = 7392
                self.signediconst()
                pass
            elif token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 98, 118, 134, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 563, 565, 567, 582, 590]:
                self.state = 7393
                self.boolean_or_string_()
                pass
            elif token in [91]:
                self.state = 7394
                self.match(PostgreSQLParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Createdb_opt_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PostgreSQLParser.IdentifierContext,0)


        def CONNECTION(self):
            return self.getToken(PostgreSQLParser.CONNECTION, 0)

        def LIMIT(self):
            return self.getToken(PostgreSQLParser.LIMIT, 0)

        def ENCODING(self):
            return self.getToken(PostgreSQLParser.ENCODING, 0)

        def LOCATION(self):
            return self.getToken(PostgreSQLParser.LOCATION, 0)

        def OWNER(self):
            return self.getToken(PostgreSQLParser.OWNER, 0)

        def TABLESPACE(self):
            return self.getToken(PostgreSQLParser.TABLESPACE, 0)

        def TEMPLATE(self):
            return self.getToken(PostgreSQLParser.TEMPLATE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createdb_opt_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatedb_opt_name" ):
                listener.enterCreatedb_opt_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatedb_opt_name" ):
                listener.exitCreatedb_opt_name(self)




    def createdb_opt_name(self):

        localctx = PostgreSQLParser.Createdb_opt_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 808, self.RULE_createdb_opt_name)
        try:
            self.state = 7405
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [554, 555, 559, 582]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7397
                self.identifier()
                pass
            elif token in [202]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7398
                self.match(PostgreSQLParser.CONNECTION)
                self.state = 7399
                self.match(PostgreSQLParser.LIMIT)
                pass
            elif token in [232]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7400
                self.match(PostgreSQLParser.ENCODING)
                pass
            elif token in [284]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7401
                self.match(PostgreSQLParser.LOCATION)
                pass
            elif token in [313]:
                self.enterOuterAlt(localctx, 5)
                self.state = 7402
                self.match(PostgreSQLParser.OWNER)
                pass
            elif token in [382]:
                self.enterOuterAlt(localctx, 6)
                self.state = 7403
                self.match(PostgreSQLParser.TABLESPACE)
                pass
            elif token in [384]:
                self.enterOuterAlt(localctx, 7)
                self.state = 7404
                self.match(PostgreSQLParser.TEMPLATE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Equal_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(PostgreSQLParser.EQUAL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_equal_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqual_" ):
                listener.enterEqual_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqual_" ):
                listener.exitEqual_(self)




    def equal_(self):

        localctx = PostgreSQLParser.Equal_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 810, self.RULE_equal_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7407
            self.match(PostgreSQLParser.EQUAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterdatabasestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def DATABASE(self):
            return self.getToken(PostgreSQLParser.DATABASE, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.NameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.NameContext,i)


        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def TABLESPACE(self):
            return self.getToken(PostgreSQLParser.TABLESPACE, 0)

        def createdb_opt_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Createdb_opt_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterdatabasestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterdatabasestmt" ):
                listener.enterAlterdatabasestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterdatabasestmt" ):
                listener.exitAlterdatabasestmt(self)




    def alterdatabasestmt(self):

        localctx = PostgreSQLParser.AlterdatabasestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 812, self.RULE_alterdatabasestmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7409
            self.match(PostgreSQLParser.ALTER)
            self.state = 7410
            self.match(PostgreSQLParser.DATABASE)
            self.state = 7411
            self.name()
            self.state = 7422
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [143]:
                self.state = 7412
                self.match(PostgreSQLParser.WITH)
                self.state = 7414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==202 or _la==232 or _la==284 or _la==313 or _la==382 or _la==384 or ((((_la - 554)) & ~0x3f) == 0 and ((1 << (_la - 554)) & 268435491) != 0):
                    self.state = 7413
                    self.createdb_opt_list()


                pass
            elif token in [-1, 7, 202, 232, 284, 313, 382, 384, 554, 555, 559, 582]:
                self.state = 7417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==202 or _la==232 or _la==284 or _la==313 or _la==382 or _la==384 or ((((_la - 554)) & ~0x3f) == 0 and ((1 << (_la - 554)) & 268435491) != 0):
                    self.state = 7416
                    self.createdb_opt_list()


                pass
            elif token in [364]:
                self.state = 7419
                self.match(PostgreSQLParser.SET)
                self.state = 7420
                self.match(PostgreSQLParser.TABLESPACE)
                self.state = 7421
                self.name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterdatabasesetstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def DATABASE(self):
            return self.getToken(PostgreSQLParser.DATABASE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def setresetclause(self):
            return self.getTypedRuleContext(PostgreSQLParser.SetresetclauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterdatabasesetstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterdatabasesetstmt" ):
                listener.enterAlterdatabasesetstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterdatabasesetstmt" ):
                listener.exitAlterdatabasesetstmt(self)




    def alterdatabasesetstmt(self):

        localctx = PostgreSQLParser.AlterdatabasesetstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 814, self.RULE_alterdatabasesetstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7424
            self.match(PostgreSQLParser.ALTER)
            self.state = 7425
            self.match(PostgreSQLParser.DATABASE)
            self.state = 7426
            self.name()
            self.state = 7427
            self.setresetclause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropdbstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def DATABASE(self):
            return self.getToken(PostgreSQLParser.DATABASE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def drop_option_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_option_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def with_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_dropdbstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropdbstmt" ):
                listener.enterDropdbstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropdbstmt" ):
                listener.exitDropdbstmt(self)




    def dropdbstmt(self):

        localctx = PostgreSQLParser.DropdbstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 816, self.RULE_dropdbstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7429
            self.match(PostgreSQLParser.DROP)
            self.state = 7430
            self.match(PostgreSQLParser.DATABASE)
            self.state = 7433
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,614,self._ctx)
            if la_ == 1:
                self.state = 7431
                self.match(PostgreSQLParser.IF_P)
                self.state = 7432
                self.match(PostgreSQLParser.EXISTS)


            self.state = 7435
            self.name()
            self.state = 7443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2 or _la==143:
                self.state = 7437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143:
                    self.state = 7436
                    self.with_()


                self.state = 7439
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 7440
                self.drop_option_list()
                self.state = 7441
                self.match(PostgreSQLParser.CLOSE_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_option_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def drop_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Drop_optionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Drop_optionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_drop_option_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_option_list" ):
                listener.enterDrop_option_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_option_list" ):
                listener.exitDrop_option_list(self)




    def drop_option_list(self):

        localctx = PostgreSQLParser.Drop_option_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 818, self.RULE_drop_option_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7445
            self.drop_option()
            self.state = 7450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 7446
                self.match(PostgreSQLParser.COMMA)
                self.state = 7447
                self.drop_option()
                self.state = 7452
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORCE(self):
            return self.getToken(PostgreSQLParser.FORCE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_drop_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_option" ):
                listener.enterDrop_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_option" ):
                listener.exitDrop_option(self)




    def drop_option(self):

        localctx = PostgreSQLParser.Drop_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 820, self.RULE_drop_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7453
            self.match(PostgreSQLParser.FORCE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AltercollationstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def COLLATION(self):
            return self.getToken(PostgreSQLParser.COLLATION, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def REFRESH(self):
            return self.getToken(PostgreSQLParser.REFRESH, 0)

        def VERSION_P(self):
            return self.getToken(PostgreSQLParser.VERSION_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_altercollationstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAltercollationstmt" ):
                listener.enterAltercollationstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAltercollationstmt" ):
                listener.exitAltercollationstmt(self)




    def altercollationstmt(self):

        localctx = PostgreSQLParser.AltercollationstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 822, self.RULE_altercollationstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7455
            self.match(PostgreSQLParser.ALTER)
            self.state = 7456
            self.match(PostgreSQLParser.COLLATION)
            self.state = 7457
            self.any_name()
            self.state = 7458
            self.match(PostgreSQLParser.REFRESH)
            self.state = 7459
            self.match(PostgreSQLParser.VERSION_P)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AltersystemstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def SYSTEM_P(self):
            return self.getToken(PostgreSQLParser.SYSTEM_P, 0)

        def generic_set(self):
            return self.getTypedRuleContext(PostgreSQLParser.Generic_setContext,0)


        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def RESET(self):
            return self.getToken(PostgreSQLParser.RESET, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_altersystemstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAltersystemstmt" ):
                listener.enterAltersystemstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAltersystemstmt" ):
                listener.exitAltersystemstmt(self)




    def altersystemstmt(self):

        localctx = PostgreSQLParser.AltersystemstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 824, self.RULE_altersystemstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7461
            self.match(PostgreSQLParser.ALTER)
            self.state = 7462
            self.match(PostgreSQLParser.SYSTEM_P)
            self.state = 7463
            _la = self._input.LA(1)
            if not(_la==344 or _la==364):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7464
            self.generic_set()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatedomainstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def DOMAIN_P(self):
            return self.getToken(PostgreSQLParser.DOMAIN_P, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def typename(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,0)


        def colquallist(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColquallistContext,0)


        def as_(self):
            return self.getTypedRuleContext(PostgreSQLParser.As_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createdomainstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatedomainstmt" ):
                listener.enterCreatedomainstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatedomainstmt" ):
                listener.exitCreatedomainstmt(self)




    def createdomainstmt(self):

        localctx = PostgreSQLParser.CreatedomainstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 826, self.RULE_createdomainstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7466
            self.match(PostgreSQLParser.CREATE)
            self.state = 7467
            self.match(PostgreSQLParser.DOMAIN_P)
            self.state = 7468
            self.any_name()
            self.state = 7470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 7469
                self.as_()


            self.state = 7472
            self.typename()
            self.state = 7473
            self.colquallist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterdomainstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def DOMAIN_P(self):
            return self.getToken(PostgreSQLParser.DOMAIN_P, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def alter_column_default(self):
            return self.getTypedRuleContext(PostgreSQLParser.Alter_column_defaultContext,0)


        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def NULL_P(self):
            return self.getToken(PostgreSQLParser.NULL_P, 0)

        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def ADD_P(self):
            return self.getToken(PostgreSQLParser.ADD_P, 0)

        def tableconstraint(self):
            return self.getTypedRuleContext(PostgreSQLParser.TableconstraintContext,0)


        def CONSTRAINT(self):
            return self.getToken(PostgreSQLParser.CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def VALIDATE(self):
            return self.getToken(PostgreSQLParser.VALIDATE, 0)

        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def drop_behavior_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Drop_behavior_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alterdomainstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterdomainstmt" ):
                listener.enterAlterdomainstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterdomainstmt" ):
                listener.exitAlterdomainstmt(self)




    def alterdomainstmt(self):

        localctx = PostgreSQLParser.AlterdomainstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 828, self.RULE_alterdomainstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7475
            self.match(PostgreSQLParser.ALTER)
            self.state = 7476
            self.match(PostgreSQLParser.DOMAIN_P)
            self.state = 7477
            self.any_name()
            self.state = 7500
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,621,self._ctx)
            if la_ == 1:
                self.state = 7478
                self.alter_column_default()
                pass

            elif la_ == 2:
                self.state = 7479
                self.match(PostgreSQLParser.DROP)
                self.state = 7480
                self.match(PostgreSQLParser.NOT)
                self.state = 7481
                self.match(PostgreSQLParser.NULL_P)
                pass

            elif la_ == 3:
                self.state = 7482
                self.match(PostgreSQLParser.SET)
                self.state = 7483
                self.match(PostgreSQLParser.NOT)
                self.state = 7484
                self.match(PostgreSQLParser.NULL_P)
                pass

            elif la_ == 4:
                self.state = 7485
                self.match(PostgreSQLParser.ADD_P)
                self.state = 7486
                self.tableconstraint()
                pass

            elif la_ == 5:
                self.state = 7487
                self.match(PostgreSQLParser.DROP)
                self.state = 7488
                self.match(PostgreSQLParser.CONSTRAINT)
                self.state = 7491
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,619,self._ctx)
                if la_ == 1:
                    self.state = 7489
                    self.match(PostgreSQLParser.IF_P)
                    self.state = 7490
                    self.match(PostgreSQLParser.EXISTS)


                self.state = 7493
                self.name()
                self.state = 7495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188 or _la==346:
                    self.state = 7494
                    self.drop_behavior_()


                pass

            elif la_ == 6:
                self.state = 7497
                self.match(PostgreSQLParser.VALIDATE)
                self.state = 7498
                self.match(PostgreSQLParser.CONSTRAINT)
                self.state = 7499
                self.name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class As_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_as_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_" ):
                listener.enterAs_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_" ):
                listener.exitAs_(self)




    def as_(self):

        localctx = PostgreSQLParser.As_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 830, self.RULE_as_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7502
            self.match(PostgreSQLParser.AS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AltertsdictionarystmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def TEXT_P(self):
            return self.getToken(PostgreSQLParser.TEXT_P, 0)

        def SEARCH(self):
            return self.getToken(PostgreSQLParser.SEARCH, 0)

        def DICTIONARY(self):
            return self.getToken(PostgreSQLParser.DICTIONARY, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def definition(self):
            return self.getTypedRuleContext(PostgreSQLParser.DefinitionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_altertsdictionarystmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAltertsdictionarystmt" ):
                listener.enterAltertsdictionarystmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAltertsdictionarystmt" ):
                listener.exitAltertsdictionarystmt(self)




    def altertsdictionarystmt(self):

        localctx = PostgreSQLParser.AltertsdictionarystmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 832, self.RULE_altertsdictionarystmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7504
            self.match(PostgreSQLParser.ALTER)
            self.state = 7505
            self.match(PostgreSQLParser.TEXT_P)
            self.state = 7506
            self.match(PostgreSQLParser.SEARCH)
            self.state = 7507
            self.match(PostgreSQLParser.DICTIONARY)
            self.state = 7508
            self.any_name()
            self.state = 7509
            self.definition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AltertsconfigurationstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.ALTER)
            else:
                return self.getToken(PostgreSQLParser.ALTER, i)

        def TEXT_P(self):
            return self.getToken(PostgreSQLParser.TEXT_P, 0)

        def SEARCH(self):
            return self.getToken(PostgreSQLParser.SEARCH, 0)

        def CONFIGURATION(self):
            return self.getToken(PostgreSQLParser.CONFIGURATION, 0)

        def any_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Any_nameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,i)


        def ADD_P(self):
            return self.getToken(PostgreSQLParser.ADD_P, 0)

        def MAPPING(self):
            return self.getToken(PostgreSQLParser.MAPPING, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def name_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Name_listContext,0)


        def any_with(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_withContext,0)


        def any_name_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_name_list_Context,0)


        def REPLACE(self):
            return self.getToken(PostgreSQLParser.REPLACE, 0)

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_altertsconfigurationstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAltertsconfigurationstmt" ):
                listener.enterAltertsconfigurationstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAltertsconfigurationstmt" ):
                listener.exitAltertsconfigurationstmt(self)




    def altertsconfigurationstmt(self):

        localctx = PostgreSQLParser.AltertsconfigurationstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 834, self.RULE_altertsconfigurationstmt)
        try:
            self.state = 7583
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,622,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7511
                self.match(PostgreSQLParser.ALTER)
                self.state = 7512
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 7513
                self.match(PostgreSQLParser.SEARCH)
                self.state = 7514
                self.match(PostgreSQLParser.CONFIGURATION)
                self.state = 7515
                self.any_name()
                self.state = 7516
                self.match(PostgreSQLParser.ADD_P)
                self.state = 7517
                self.match(PostgreSQLParser.MAPPING)
                self.state = 7518
                self.match(PostgreSQLParser.FOR)
                self.state = 7519
                self.name_list()
                self.state = 7520
                self.any_with()
                self.state = 7521
                self.any_name_list_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7523
                self.match(PostgreSQLParser.ALTER)
                self.state = 7524
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 7525
                self.match(PostgreSQLParser.SEARCH)
                self.state = 7526
                self.match(PostgreSQLParser.CONFIGURATION)
                self.state = 7527
                self.any_name()
                self.state = 7528
                self.match(PostgreSQLParser.ALTER)
                self.state = 7529
                self.match(PostgreSQLParser.MAPPING)
                self.state = 7530
                self.match(PostgreSQLParser.FOR)
                self.state = 7531
                self.name_list()
                self.state = 7532
                self.any_with()
                self.state = 7533
                self.any_name_list_()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7535
                self.match(PostgreSQLParser.ALTER)
                self.state = 7536
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 7537
                self.match(PostgreSQLParser.SEARCH)
                self.state = 7538
                self.match(PostgreSQLParser.CONFIGURATION)
                self.state = 7539
                self.any_name()
                self.state = 7540
                self.match(PostgreSQLParser.ALTER)
                self.state = 7541
                self.match(PostgreSQLParser.MAPPING)
                self.state = 7542
                self.match(PostgreSQLParser.REPLACE)
                self.state = 7543
                self.any_name()
                self.state = 7544
                self.any_with()
                self.state = 7545
                self.any_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7547
                self.match(PostgreSQLParser.ALTER)
                self.state = 7548
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 7549
                self.match(PostgreSQLParser.SEARCH)
                self.state = 7550
                self.match(PostgreSQLParser.CONFIGURATION)
                self.state = 7551
                self.any_name()
                self.state = 7552
                self.match(PostgreSQLParser.ALTER)
                self.state = 7553
                self.match(PostgreSQLParser.MAPPING)
                self.state = 7554
                self.match(PostgreSQLParser.FOR)
                self.state = 7555
                self.name_list()
                self.state = 7556
                self.match(PostgreSQLParser.REPLACE)
                self.state = 7557
                self.any_name()
                self.state = 7558
                self.any_with()
                self.state = 7559
                self.any_name()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7561
                self.match(PostgreSQLParser.ALTER)
                self.state = 7562
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 7563
                self.match(PostgreSQLParser.SEARCH)
                self.state = 7564
                self.match(PostgreSQLParser.CONFIGURATION)
                self.state = 7565
                self.any_name()
                self.state = 7566
                self.match(PostgreSQLParser.DROP)
                self.state = 7567
                self.match(PostgreSQLParser.MAPPING)
                self.state = 7568
                self.match(PostgreSQLParser.FOR)
                self.state = 7569
                self.name_list()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7571
                self.match(PostgreSQLParser.ALTER)
                self.state = 7572
                self.match(PostgreSQLParser.TEXT_P)
                self.state = 7573
                self.match(PostgreSQLParser.SEARCH)
                self.state = 7574
                self.match(PostgreSQLParser.CONFIGURATION)
                self.state = 7575
                self.any_name()
                self.state = 7576
                self.match(PostgreSQLParser.DROP)
                self.state = 7577
                self.match(PostgreSQLParser.MAPPING)
                self.state = 7578
                self.match(PostgreSQLParser.IF_P)
                self.state = 7579
                self.match(PostgreSQLParser.EXISTS)
                self.state = 7580
                self.match(PostgreSQLParser.FOR)
                self.state = 7581
                self.name_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_withContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_any_with

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_with" ):
                listener.enterAny_with(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_with" ):
                listener.exitAny_with(self)




    def any_with(self):

        localctx = PostgreSQLParser.Any_withContext(self, self._ctx, self.state)
        self.enterRule(localctx, 836, self.RULE_any_with)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7585
            self.match(PostgreSQLParser.WITH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateconversionstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def CONVERSION_P(self):
            return self.getToken(PostgreSQLParser.CONVERSION_P, 0)

        def any_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Any_nameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,i)


        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def sconst(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SconstContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SconstContext,i)


        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def default_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Default_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_createconversionstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateconversionstmt" ):
                listener.enterCreateconversionstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateconversionstmt" ):
                listener.exitCreateconversionstmt(self)




    def createconversionstmt(self):

        localctx = PostgreSQLParser.CreateconversionstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 838, self.RULE_createconversionstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7587
            self.match(PostgreSQLParser.CREATE)
            self.state = 7589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 7588
                self.default_()


            self.state = 7591
            self.match(PostgreSQLParser.CONVERSION_P)
            self.state = 7592
            self.any_name()
            self.state = 7593
            self.match(PostgreSQLParser.FOR)
            self.state = 7594
            self.sconst()
            self.state = 7595
            self.match(PostgreSQLParser.TO)
            self.state = 7596
            self.sconst()
            self.state = 7597
            self.match(PostgreSQLParser.FROM)
            self.state = 7598
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClusterstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTER(self):
            return self.getToken(PostgreSQLParser.CLUSTER, 0)

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def verbose_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Verbose_Context,0)


        def cluster_index_specification(self):
            return self.getTypedRuleContext(PostgreSQLParser.Cluster_index_specificationContext,0)


        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_clusterstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClusterstmt" ):
                listener.enterClusterstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClusterstmt" ):
                listener.exitClusterstmt(self)




    def clusterstmt(self):

        localctx = PostgreSQLParser.ClusterstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 840, self.RULE_clusterstmt)
        self._la = 0 # Token type
        try:
            self.state = 7620
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,628,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7600
                self.match(PostgreSQLParser.CLUSTER)
                self.state = 7602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==166:
                    self.state = 7601
                    self.verbose_()


                self.state = 7604
                self.qualified_name()
                self.state = 7606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 7605
                    self.cluster_index_specification()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7608
                self.match(PostgreSQLParser.CLUSTER)
                self.state = 7610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==166:
                    self.state = 7609
                    self.verbose_()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7612
                self.match(PostgreSQLParser.CLUSTER)
                self.state = 7614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==166:
                    self.state = 7613
                    self.verbose_()


                self.state = 7616
                self.name()
                self.state = 7617
                self.match(PostgreSQLParser.ON)
                self.state = 7618
                self.qualified_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cluster_index_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_cluster_index_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCluster_index_specification" ):
                listener.enterCluster_index_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCluster_index_specification" ):
                listener.exitCluster_index_specification(self)




    def cluster_index_specification(self):

        localctx = PostgreSQLParser.Cluster_index_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 842, self.RULE_cluster_index_specification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7622
            self.match(PostgreSQLParser.USING)
            self.state = 7623
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VacuumstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VACUUM(self):
            return self.getToken(PostgreSQLParser.VACUUM, 0)

        def full_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Full_Context,0)


        def freeze_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Freeze_Context,0)


        def verbose_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Verbose_Context,0)


        def analyze_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Analyze_Context,0)


        def vacuum_relation_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Vacuum_relation_list_Context,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def vac_analyze_option_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Vac_analyze_option_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_vacuumstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVacuumstmt" ):
                listener.enterVacuumstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVacuumstmt" ):
                listener.exitVacuumstmt(self)




    def vacuumstmt(self):

        localctx = PostgreSQLParser.VacuumstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 844, self.RULE_vacuumstmt)
        self._la = 0 # Token type
        try:
            self.state = 7648
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,635,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7625
                self.match(PostgreSQLParser.VACUUM)
                self.state = 7627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==151:
                    self.state = 7626
                    self.full_()


                self.state = 7630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==150:
                    self.state = 7629
                    self.freeze_()


                self.state = 7633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==166:
                    self.state = 7632
                    self.verbose_()


                self.state = 7636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69 or _la==70:
                    self.state = 7635
                    self.analyze_()


                self.state = 7639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & 137438949375) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & -31) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & -1) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & -8796093022209) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & -1) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & -34909494181889) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & 1153132601981008895) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & 536870983) != 0):
                    self.state = 7638
                    self.vacuum_relation_list_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7641
                self.match(PostgreSQLParser.VACUUM)
                self.state = 7642
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 7643
                self.vac_analyze_option_list()
                self.state = 7644
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 7646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & 137438949375) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & -31) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & -1) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & -8796093022209) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & -1) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & -34909494181889) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & 1153132601981008895) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & 536870983) != 0):
                    self.state = 7645
                    self.vacuum_relation_list_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnalyzestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def analyze_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Analyze_keywordContext,0)


        def verbose_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Verbose_Context,0)


        def vacuum_relation_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Vacuum_relation_list_Context,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def vac_analyze_option_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Vac_analyze_option_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_analyzestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyzestmt" ):
                listener.enterAnalyzestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyzestmt" ):
                listener.exitAnalyzestmt(self)




    def analyzestmt(self):

        localctx = PostgreSQLParser.AnalyzestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 846, self.RULE_analyzestmt)
        self._la = 0 # Token type
        try:
            self.state = 7664
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,639,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7650
                self.analyze_keyword()
                self.state = 7652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==166:
                    self.state = 7651
                    self.verbose_()


                self.state = 7655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & 137438949375) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & -31) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & -1) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & -8796093022209) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & -1) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & -34909494181889) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & 1153132601981008895) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & 536870983) != 0):
                    self.state = 7654
                    self.vacuum_relation_list_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7657
                self.analyze_keyword()
                self.state = 7658
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 7659
                self.vac_analyze_option_list()
                self.state = 7660
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 7662
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & 137438949375) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & -31) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & -1) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & -8796093022209) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & -1) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & -34909494181889) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & 1153132601981008895) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & 536870983) != 0):
                    self.state = 7661
                    self.vacuum_relation_list_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Utility_option_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def utility_option_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Utility_option_elemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Utility_option_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_utility_option_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUtility_option_list" ):
                listener.enterUtility_option_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUtility_option_list" ):
                listener.exitUtility_option_list(self)




    def utility_option_list(self):

        localctx = PostgreSQLParser.Utility_option_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 848, self.RULE_utility_option_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7666
            self.utility_option_elem()
            self.state = 7671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 7667
                self.match(PostgreSQLParser.COMMA)
                self.state = 7668
                self.utility_option_elem()
                self.state = 7673
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vac_analyze_option_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vac_analyze_option_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Vac_analyze_option_elemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Vac_analyze_option_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_vac_analyze_option_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVac_analyze_option_list" ):
                listener.enterVac_analyze_option_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVac_analyze_option_list" ):
                listener.exitVac_analyze_option_list(self)




    def vac_analyze_option_list(self):

        localctx = PostgreSQLParser.Vac_analyze_option_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 850, self.RULE_vac_analyze_option_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7674
            self.vac_analyze_option_elem()
            self.state = 7679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 7675
                self.match(PostgreSQLParser.COMMA)
                self.state = 7676
                self.vac_analyze_option_elem()
                self.state = 7681
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Analyze_keywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANALYZE(self):
            return self.getToken(PostgreSQLParser.ANALYZE, 0)

        def ANALYSE(self):
            return self.getToken(PostgreSQLParser.ANALYSE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_analyze_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze_keyword" ):
                listener.enterAnalyze_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze_keyword" ):
                listener.exitAnalyze_keyword(self)




    def analyze_keyword(self):

        localctx = PostgreSQLParser.Analyze_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 852, self.RULE_analyze_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7682
            _la = self._input.LA(1)
            if not(_la==69 or _la==70):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Utility_option_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def utility_option_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Utility_option_nameContext,0)


        def utility_option_arg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Utility_option_argContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_utility_option_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUtility_option_elem" ):
                listener.enterUtility_option_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUtility_option_elem" ):
                listener.exitUtility_option_elem(self)




    def utility_option_elem(self):

        localctx = PostgreSQLParser.Utility_option_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 854, self.RULE_utility_option_elem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7684
            self.utility_option_name()
            self.state = 7686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 12)) & ~0x3f) == 0 and ((1 << (_la - 12)) & 36028795944960003) != 0) or ((((_la - 98)) & ~0x3f) == 0 and ((1 << (_la - 98)) & -70300023652351) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & -1) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & -1) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & -8796093022209) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & -1) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & -34909494181889) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & 1153132602249444351) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & 138370110535) != 0):
                self.state = 7685
                self.utility_option_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Utility_option_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonreservedword(self):
            return self.getTypedRuleContext(PostgreSQLParser.NonreservedwordContext,0)


        def analyze_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Analyze_keywordContext,0)


        def FORMAT_LA(self):
            return self.getToken(PostgreSQLParser.FORMAT_LA, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_utility_option_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUtility_option_name" ):
                listener.enterUtility_option_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUtility_option_name" ):
                listener.exitUtility_option_name(self)




    def utility_option_name(self):

        localctx = PostgreSQLParser.Utility_option_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 856, self.RULE_utility_option_name)
        try:
            self.state = 7691
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 582]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7688
                self.nonreservedword()
                pass
            elif token in [69, 70]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7689
                self.analyze_keyword()
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7690
                self.match(PostgreSQLParser.FORMAT_LA)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Utility_option_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolean_or_string_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Boolean_or_string_Context,0)


        def numericonly(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericonlyContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_utility_option_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUtility_option_arg" ):
                listener.enterUtility_option_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUtility_option_arg" ):
                listener.exitUtility_option_arg(self)




    def utility_option_arg(self):

        localctx = PostgreSQLParser.Utility_option_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 858, self.RULE_utility_option_arg)
        try:
            self.state = 7695
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 98, 118, 134, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 563, 565, 567, 582, 590]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7693
                self.boolean_or_string_()
                pass
            elif token in [12, 13, 576, 577, 578, 579, 581]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7694
                self.numericonly()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vac_analyze_option_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vac_analyze_option_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Vac_analyze_option_nameContext,0)


        def vac_analyze_option_arg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Vac_analyze_option_argContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_vac_analyze_option_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVac_analyze_option_elem" ):
                listener.enterVac_analyze_option_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVac_analyze_option_elem" ):
                listener.exitVac_analyze_option_elem(self)




    def vac_analyze_option_elem(self):

        localctx = PostgreSQLParser.Vac_analyze_option_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 860, self.RULE_vac_analyze_option_elem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7697
            self.vac_analyze_option_name()
            self.state = 7699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 12)) & ~0x3f) == 0 and ((1 << (_la - 12)) & 36028795944960003) != 0) or ((((_la - 98)) & ~0x3f) == 0 and ((1 << (_la - 98)) & -70300023652351) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & -1) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & -1) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & -8796093022209) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & -1) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & -34909494181889) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & 1153132602249444351) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & 138370110535) != 0):
                self.state = 7698
                self.vac_analyze_option_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vac_analyze_option_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonreservedword(self):
            return self.getTypedRuleContext(PostgreSQLParser.NonreservedwordContext,0)


        def analyze_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Analyze_keywordContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_vac_analyze_option_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVac_analyze_option_name" ):
                listener.enterVac_analyze_option_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVac_analyze_option_name" ):
                listener.exitVac_analyze_option_name(self)




    def vac_analyze_option_name(self):

        localctx = PostgreSQLParser.Vac_analyze_option_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 862, self.RULE_vac_analyze_option_name)
        try:
            self.state = 7703
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 582]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7701
                self.nonreservedword()
                pass
            elif token in [69, 70]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7702
                self.analyze_keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vac_analyze_option_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolean_or_string_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Boolean_or_string_Context,0)


        def numericonly(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericonlyContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_vac_analyze_option_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVac_analyze_option_arg" ):
                listener.enterVac_analyze_option_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVac_analyze_option_arg" ):
                listener.exitVac_analyze_option_arg(self)




    def vac_analyze_option_arg(self):

        localctx = PostgreSQLParser.Vac_analyze_option_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 864, self.RULE_vac_analyze_option_arg)
        try:
            self.state = 7707
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 98, 118, 134, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 563, 565, 567, 582, 590]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7705
                self.boolean_or_string_()
                pass
            elif token in [12, 13, 576, 577, 578, 579, 581]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7706
                self.numericonly()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Analyze_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def analyze_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Analyze_keywordContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_analyze_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze_" ):
                listener.enterAnalyze_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze_" ):
                listener.exitAnalyze_(self)




    def analyze_(self):

        localctx = PostgreSQLParser.Analyze_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 866, self.RULE_analyze_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7709
            self.analyze_keyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Verbose_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERBOSE(self):
            return self.getToken(PostgreSQLParser.VERBOSE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_verbose_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVerbose_" ):
                listener.enterVerbose_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVerbose_" ):
                listener.exitVerbose_(self)




    def verbose_(self):

        localctx = PostgreSQLParser.Verbose_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 868, self.RULE_verbose_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7711
            self.match(PostgreSQLParser.VERBOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Full_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FULL(self):
            return self.getToken(PostgreSQLParser.FULL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_full_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_" ):
                listener.enterFull_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_" ):
                listener.exitFull_(self)




    def full_(self):

        localctx = PostgreSQLParser.Full_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 870, self.RULE_full_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7713
            self.match(PostgreSQLParser.FULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Freeze_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FREEZE(self):
            return self.getToken(PostgreSQLParser.FREEZE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_freeze_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFreeze_" ):
                listener.enterFreeze_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFreeze_" ):
                listener.exitFreeze_(self)




    def freeze_(self):

        localctx = PostgreSQLParser.Freeze_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 872, self.RULE_freeze_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7715
            self.match(PostgreSQLParser.FREEZE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Name_list_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def name_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Name_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_name_list_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName_list_" ):
                listener.enterName_list_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName_list_" ):
                listener.exitName_list_(self)




    def name_list_(self):

        localctx = PostgreSQLParser.Name_list_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 874, self.RULE_name_list_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7717
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 7718
            self.name_list()
            self.state = 7719
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vacuum_relationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def name_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Name_list_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_vacuum_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVacuum_relation" ):
                listener.enterVacuum_relation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVacuum_relation" ):
                listener.exitVacuum_relation(self)




    def vacuum_relation(self):

        localctx = PostgreSQLParser.Vacuum_relationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 876, self.RULE_vacuum_relation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7721
            self.qualified_name()
            self.state = 7723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 7722
                self.name_list_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vacuum_relation_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vacuum_relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Vacuum_relationContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Vacuum_relationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_vacuum_relation_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVacuum_relation_list" ):
                listener.enterVacuum_relation_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVacuum_relation_list" ):
                listener.exitVacuum_relation_list(self)




    def vacuum_relation_list(self):

        localctx = PostgreSQLParser.Vacuum_relation_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 878, self.RULE_vacuum_relation_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7725
            self.vacuum_relation()
            self.state = 7730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 7726
                self.match(PostgreSQLParser.COMMA)
                self.state = 7727
                self.vacuum_relation()
                self.state = 7732
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vacuum_relation_list_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vacuum_relation_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Vacuum_relation_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_vacuum_relation_list_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVacuum_relation_list_" ):
                listener.enterVacuum_relation_list_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVacuum_relation_list_" ):
                listener.exitVacuum_relation_list_(self)




    def vacuum_relation_list_(self):

        localctx = PostgreSQLParser.Vacuum_relation_list_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 880, self.RULE_vacuum_relation_list_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7733
            self.vacuum_relation_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPLAIN(self):
            return self.getToken(PostgreSQLParser.EXPLAIN, 0)

        def explainablestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExplainablestmtContext,0)


        def analyze_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Analyze_keywordContext,0)


        def verbose_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Verbose_Context,0)


        def VERBOSE(self):
            return self.getToken(PostgreSQLParser.VERBOSE, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def explain_option_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Explain_option_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_explainstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainstmt" ):
                listener.enterExplainstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainstmt" ):
                listener.exitExplainstmt(self)




    def explainstmt(self):

        localctx = PostgreSQLParser.ExplainstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 882, self.RULE_explainstmt)
        self._la = 0 # Token type
        try:
            self.state = 7753
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,651,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7735
                self.match(PostgreSQLParser.EXPLAIN)
                self.state = 7736
                self.explainablestmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7737
                self.match(PostgreSQLParser.EXPLAIN)
                self.state = 7738
                self.analyze_keyword()
                self.state = 7740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==166:
                    self.state = 7739
                    self.verbose_()


                self.state = 7742
                self.explainablestmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7744
                self.match(PostgreSQLParser.EXPLAIN)
                self.state = 7745
                self.match(PostgreSQLParser.VERBOSE)
                self.state = 7746
                self.explainablestmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7747
                self.match(PostgreSQLParser.EXPLAIN)
                self.state = 7748
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 7749
                self.explain_option_list()
                self.state = 7750
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 7751
                self.explainablestmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainablestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.SelectstmtContext,0)


        def insertstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.InsertstmtContext,0)


        def updatestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.UpdatestmtContext,0)


        def deletestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DeletestmtContext,0)


        def declarecursorstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DeclarecursorstmtContext,0)


        def createasstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreateasstmtContext,0)


        def creatematviewstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.CreatematviewstmtContext,0)


        def refreshmatviewstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.RefreshmatviewstmtContext,0)


        def executestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExecutestmtContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_explainablestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainablestmt" ):
                listener.enterExplainablestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainablestmt" ):
                listener.exitExplainablestmt(self)




    def explainablestmt(self):

        localctx = PostgreSQLParser.ExplainablestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 884, self.RULE_explainablestmt)
        try:
            self.state = 7764
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,652,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7755
                self.selectstmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7756
                self.insertstmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7757
                self.updatestmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7758
                self.deletestmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7759
                self.declarecursorstmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7760
                self.createasstmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 7761
                self.creatematviewstmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 7762
                self.refreshmatviewstmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 7763
                self.executestmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explain_option_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def explain_option_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Explain_option_elemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Explain_option_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_explain_option_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain_option_list" ):
                listener.enterExplain_option_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain_option_list" ):
                listener.exitExplain_option_list(self)




    def explain_option_list(self):

        localctx = PostgreSQLParser.Explain_option_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 886, self.RULE_explain_option_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7766
            self.explain_option_elem()
            self.state = 7771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 7767
                self.match(PostgreSQLParser.COMMA)
                self.state = 7768
                self.explain_option_elem()
                self.state = 7773
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explain_option_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def explain_option_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Explain_option_nameContext,0)


        def explain_option_arg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Explain_option_argContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_explain_option_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain_option_elem" ):
                listener.enterExplain_option_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain_option_elem" ):
                listener.exitExplain_option_elem(self)




    def explain_option_elem(self):

        localctx = PostgreSQLParser.Explain_option_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 888, self.RULE_explain_option_elem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7774
            self.explain_option_name()
            self.state = 7776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 12)) & ~0x3f) == 0 and ((1 << (_la - 12)) & 36028795944960003) != 0) or ((((_la - 98)) & ~0x3f) == 0 and ((1 << (_la - 98)) & -70300023652351) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & -1) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & -1) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & -8796093022209) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & -1) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & -34909494181889) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & 1153132602249444351) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & 138370110535) != 0):
                self.state = 7775
                self.explain_option_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explain_option_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonreservedword(self):
            return self.getTypedRuleContext(PostgreSQLParser.NonreservedwordContext,0)


        def analyze_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Analyze_keywordContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_explain_option_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain_option_name" ):
                listener.enterExplain_option_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain_option_name" ):
                listener.exitExplain_option_name(self)




    def explain_option_name(self):

        localctx = PostgreSQLParser.Explain_option_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 890, self.RULE_explain_option_name)
        try:
            self.state = 7780
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 582]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7778
                self.nonreservedword()
                pass
            elif token in [69, 70]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7779
                self.analyze_keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explain_option_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolean_or_string_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Boolean_or_string_Context,0)


        def numericonly(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericonlyContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_explain_option_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain_option_arg" ):
                listener.enterExplain_option_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain_option_arg" ):
                listener.exitExplain_option_arg(self)




    def explain_option_arg(self):

        localctx = PostgreSQLParser.Explain_option_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 892, self.RULE_explain_option_arg)
        try:
            self.state = 7784
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 98, 118, 134, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 563, 565, 567, 582, 590]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7782
                self.boolean_or_string_()
                pass
            elif token in [12, 13, 576, 577, 578, 579, 581]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7783
                self.numericonly()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreparestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREPARE(self):
            return self.getToken(PostgreSQLParser.PREPARE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def preparablestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.PreparablestmtContext,0)


        def prep_type_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Prep_type_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_preparestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreparestmt" ):
                listener.enterPreparestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreparestmt" ):
                listener.exitPreparestmt(self)




    def preparestmt(self):

        localctx = PostgreSQLParser.PreparestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 894, self.RULE_preparestmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7786
            self.match(PostgreSQLParser.PREPARE)
            self.state = 7787
            self.name()
            self.state = 7789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 7788
                self.prep_type_clause()


            self.state = 7791
            self.match(PostgreSQLParser.AS)
            self.state = 7792
            self.preparablestmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prep_type_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def type_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_prep_type_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrep_type_clause" ):
                listener.enterPrep_type_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrep_type_clause" ):
                listener.exitPrep_type_clause(self)




    def prep_type_clause(self):

        localctx = PostgreSQLParser.Prep_type_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 896, self.RULE_prep_type_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7794
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 7795
            self.type_list()
            self.state = 7796
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreparablestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.SelectstmtContext,0)


        def insertstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.InsertstmtContext,0)


        def updatestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.UpdatestmtContext,0)


        def deletestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.DeletestmtContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_preparablestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreparablestmt" ):
                listener.enterPreparablestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreparablestmt" ):
                listener.exitPreparablestmt(self)




    def preparablestmt(self):

        localctx = PostgreSQLParser.PreparablestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 898, self.RULE_preparablestmt)
        try:
            self.state = 7802
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,658,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7798
                self.selectstmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7799
                self.insertstmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7800
                self.updatestmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7801
                self.deletestmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecutestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(PostgreSQLParser.EXECUTE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def execute_param_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Execute_param_clauseContext,0)


        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def create_as_target(self):
            return self.getTypedRuleContext(PostgreSQLParser.Create_as_targetContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def opttemp(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttempContext,0)


        def with_data_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_data_Context,0)


        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_executestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecutestmt" ):
                listener.enterExecutestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecutestmt" ):
                listener.exitExecutestmt(self)




    def executestmt(self):

        localctx = PostgreSQLParser.ExecutestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 900, self.RULE_executestmt)
        self._la = 0 # Token type
        try:
            self.state = 7842
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,666,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7804
                self.match(PostgreSQLParser.EXECUTE)
                self.state = 7805
                self.name()
                self.state = 7807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 7806
                    self.execute_param_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7809
                self.match(PostgreSQLParser.CREATE)
                self.state = 7811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==251 or _la==283 or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & 32773) != 0):
                    self.state = 7810
                    self.opttemp()


                self.state = 7813
                self.match(PostgreSQLParser.TABLE)
                self.state = 7814
                self.create_as_target()
                self.state = 7815
                self.match(PostgreSQLParser.AS)
                self.state = 7816
                self.match(PostgreSQLParser.EXECUTE)
                self.state = 7817
                self.name()
                self.state = 7819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 7818
                    self.execute_param_clause()


                self.state = 7822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143:
                    self.state = 7821
                    self.with_data_()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7824
                self.match(PostgreSQLParser.CREATE)
                self.state = 7826
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==251 or _la==283 or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & 32773) != 0):
                    self.state = 7825
                    self.opttemp()


                self.state = 7828
                self.match(PostgreSQLParser.TABLE)
                self.state = 7829
                self.match(PostgreSQLParser.IF_P)
                self.state = 7830
                self.match(PostgreSQLParser.NOT)
                self.state = 7831
                self.match(PostgreSQLParser.EXISTS)
                self.state = 7832
                self.create_as_target()
                self.state = 7833
                self.match(PostgreSQLParser.AS)
                self.state = 7834
                self.match(PostgreSQLParser.EXECUTE)
                self.state = 7835
                self.name()
                self.state = 7837
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 7836
                    self.execute_param_clause()


                self.state = 7840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143:
                    self.state = 7839
                    self.with_data_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_param_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_execute_param_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_param_clause" ):
                listener.enterExecute_param_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_param_clause" ):
                listener.exitExecute_param_clause(self)




    def execute_param_clause(self):

        localctx = PostgreSQLParser.Execute_param_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 902, self.RULE_execute_param_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7844
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 7845
            self.expr_list()
            self.state = 7846
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeallocatestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEALLOCATE(self):
            return self.getToken(PostgreSQLParser.DEALLOCATE, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def PREPARE(self):
            return self.getToken(PostgreSQLParser.PREPARE, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_deallocatestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeallocatestmt" ):
                listener.enterDeallocatestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeallocatestmt" ):
                listener.exitDeallocatestmt(self)




    def deallocatestmt(self):

        localctx = PostgreSQLParser.DeallocatestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 904, self.RULE_deallocatestmt)
        try:
            self.state = 7858
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,667,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7848
                self.match(PostgreSQLParser.DEALLOCATE)
                self.state = 7849
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7850
                self.match(PostgreSQLParser.DEALLOCATE)
                self.state = 7851
                self.match(PostgreSQLParser.PREPARE)
                self.state = 7852
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7853
                self.match(PostgreSQLParser.DEALLOCATE)
                self.state = 7854
                self.match(PostgreSQLParser.ALL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7855
                self.match(PostgreSQLParser.DEALLOCATE)
                self.state = 7856
                self.match(PostgreSQLParser.PREPARE)
                self.state = 7857
                self.match(PostgreSQLParser.ALL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(PostgreSQLParser.INSERT, 0)

        def INTO(self):
            return self.getToken(PostgreSQLParser.INTO, 0)

        def insert_target(self):
            return self.getTypedRuleContext(PostgreSQLParser.Insert_targetContext,0)


        def insert_rest(self):
            return self.getTypedRuleContext(PostgreSQLParser.Insert_restContext,0)


        def with_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_clause_Context,0)


        def on_conflict_(self):
            return self.getTypedRuleContext(PostgreSQLParser.On_conflict_Context,0)


        def returning_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Returning_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_insertstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertstmt" ):
                listener.enterInsertstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertstmt" ):
                listener.exitInsertstmt(self)




    def insertstmt(self):

        localctx = PostgreSQLParser.InsertstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 906, self.RULE_insertstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 7860
                self.with_clause_()


            self.state = 7863
            self.match(PostgreSQLParser.INSERT)
            self.state = 7864
            self.match(PostgreSQLParser.INTO)
            self.state = 7865
            self.insert_target()
            self.state = 7866
            self.insert_rest()
            self.state = 7868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 7867
                self.on_conflict_()


            self.state = 7871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 7870
                self.returning_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_insert_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_target" ):
                listener.enterInsert_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_target" ):
                listener.exitInsert_target(self)




    def insert_target(self):

        localctx = PostgreSQLParser.Insert_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 908, self.RULE_insert_target)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7873
            self.qualified_name()
            self.state = 7876
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 7874
                self.match(PostgreSQLParser.AS)
                self.state = 7875
                self.colid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_restContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.SelectstmtContext,0)


        def OVERRIDING(self):
            return self.getToken(PostgreSQLParser.OVERRIDING, 0)

        def override_kind(self):
            return self.getTypedRuleContext(PostgreSQLParser.Override_kindContext,0)


        def VALUE_P(self):
            return self.getToken(PostgreSQLParser.VALUE_P, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def insert_column_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Insert_column_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def VALUES(self):
            return self.getToken(PostgreSQLParser.VALUES, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_insert_rest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_rest" ):
                listener.enterInsert_rest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_rest" ):
                listener.exitInsert_rest(self)




    def insert_rest(self):

        localctx = PostgreSQLParser.Insert_restContext(self, self._ctx, self.state)
        self.enterRule(localctx, 910, self.RULE_insert_rest)
        self._la = 0 # Token type
        try:
            self.state = 7897
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,673,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7878
                self.selectstmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7879
                self.match(PostgreSQLParser.OVERRIDING)
                self.state = 7880
                self.override_kind()
                self.state = 7881
                self.match(PostgreSQLParser.VALUE_P)
                self.state = 7882
                self.selectstmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7884
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 7885
                self.insert_column_list()
                self.state = 7886
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 7891
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==501:
                    self.state = 7887
                    self.match(PostgreSQLParser.OVERRIDING)
                    self.state = 7888
                    self.override_kind()
                    self.state = 7889
                    self.match(PostgreSQLParser.VALUE_P)


                self.state = 7893
                self.selectstmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7895
                self.match(PostgreSQLParser.DEFAULT)
                self.state = 7896
                self.match(PostgreSQLParser.VALUES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Override_kindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def SYSTEM_P(self):
            return self.getToken(PostgreSQLParser.SYSTEM_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_override_kind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverride_kind" ):
                listener.enterOverride_kind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverride_kind" ):
                listener.exitOverride_kind(self)




    def override_kind(self):

        localctx = PostgreSQLParser.Override_kindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 912, self.RULE_override_kind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7899
            _la = self._input.LA(1)
            if not(_la==137 or _la==380):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_column_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insert_column_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Insert_column_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Insert_column_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_insert_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_column_list" ):
                listener.enterInsert_column_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_column_list" ):
                listener.exitInsert_column_list(self)




    def insert_column_list(self):

        localctx = PostgreSQLParser.Insert_column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 914, self.RULE_insert_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7901
            self.insert_column_item()
            self.state = 7906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 7902
                self.match(PostgreSQLParser.COMMA)
                self.state = 7903
                self.insert_column_item()
                self.state = 7908
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_column_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def opt_indirection(self):
            return self.getTypedRuleContext(PostgreSQLParser.Opt_indirectionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_insert_column_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_column_item" ):
                listener.enterInsert_column_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_column_item" ):
                listener.exitInsert_column_item(self)




    def insert_column_item(self):

        localctx = PostgreSQLParser.Insert_column_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 916, self.RULE_insert_column_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7909
            self.colid()
            self.state = 7910
            self.opt_indirection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class On_conflict_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def CONFLICT(self):
            return self.getToken(PostgreSQLParser.CONFLICT, 0)

        def DO(self):
            return self.getToken(PostgreSQLParser.DO, 0)

        def UPDATE(self):
            return self.getToken(PostgreSQLParser.UPDATE, 0)

        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def set_clause_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Set_clause_listContext,0)


        def NOTHING(self):
            return self.getToken(PostgreSQLParser.NOTHING, 0)

        def conf_expr_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Conf_expr_Context,0)


        def where_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Where_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_on_conflict_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_conflict_" ):
                listener.enterOn_conflict_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_conflict_" ):
                listener.exitOn_conflict_(self)




    def on_conflict_(self):

        localctx = PostgreSQLParser.On_conflict_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 918, self.RULE_on_conflict_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7912
            self.match(PostgreSQLParser.ON)
            self.state = 7913
            self.match(PostgreSQLParser.CONFLICT)
            self.state = 7915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2 or _la==118:
                self.state = 7914
                self.conf_expr_()


            self.state = 7917
            self.match(PostgreSQLParser.DO)
            self.state = 7925
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [400]:
                self.state = 7918
                self.match(PostgreSQLParser.UPDATE)
                self.state = 7919
                self.match(PostgreSQLParser.SET)
                self.state = 7920
                self.set_clause_list()
                self.state = 7922
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==141:
                    self.state = 7921
                    self.where_clause()


                pass
            elif token in [301]:
                self.state = 7924
                self.match(PostgreSQLParser.NOTHING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conf_expr_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def index_params(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_paramsContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def where_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Where_clauseContext,0)


        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def CONSTRAINT(self):
            return self.getToken(PostgreSQLParser.CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_conf_expr_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConf_expr_" ):
                listener.enterConf_expr_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConf_expr_" ):
                listener.exitConf_expr_(self)




    def conf_expr_(self):

        localctx = PostgreSQLParser.Conf_expr_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 920, self.RULE_conf_expr_)
        self._la = 0 # Token type
        try:
            self.state = 7936
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7927
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 7928
                self.index_params()
                self.state = 7929
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 7931
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==141:
                    self.state = 7930
                    self.where_clause()


                pass
            elif token in [118]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7933
                self.match(PostgreSQLParser.ON)
                self.state = 7934
                self.match(PostgreSQLParser.CONSTRAINT)
                self.state = 7935
                self.name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Returning_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNING(self):
            return self.getToken(PostgreSQLParser.RETURNING, 0)

        def target_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Target_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_returning_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturning_clause" ):
                listener.enterReturning_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturning_clause" ):
                listener.exitReturning_clause(self)




    def returning_clause(self):

        localctx = PostgreSQLParser.Returning_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 922, self.RULE_returning_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7938
            self.match(PostgreSQLParser.RETURNING)
            self.state = 7939
            self.target_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MergestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(PostgreSQLParser.MERGE, 0)

        def qualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Qualified_nameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,i)


        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def select_with_parens(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_with_parensContext,0)


        def merge_insert_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Merge_insert_clauseContext,0)


        def merge_update_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Merge_update_clauseContext,0)


        def INTO(self):
            return self.getToken(PostgreSQLParser.INTO, 0)

        def alias_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Alias_clauseContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Alias_clauseContext,i)


        def merge_delete_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Merge_delete_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_mergestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergestmt" ):
                listener.enterMergestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergestmt" ):
                listener.exitMergestmt(self)




    def mergestmt(self):

        localctx = PostgreSQLParser.MergestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 924, self.RULE_mergestmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7941
            self.match(PostgreSQLParser.MERGE)
            self.state = 7943
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109:
                self.state = 7942
                self.match(PostgreSQLParser.INTO)


            self.state = 7945
            self.qualified_name()
            self.state = 7947
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & 17729624993791) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & -31) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & -1) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & -8796093022209) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & -1) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & -34909494181889) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & 1153132601981008895) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & 536870983) != 0):
                self.state = 7946
                self.alias_clause()


            self.state = 7949
            self.match(PostgreSQLParser.USING)
            self.state = 7952
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.state = 7950
                self.select_with_parens()
                pass
            elif token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 162, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 582]:
                self.state = 7951
                self.qualified_name()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 7955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & 17729624993791) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & -31) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & -1) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & -8796093022209) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & -1) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & -34909494181889) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & 1153132601981008895) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & 536870983) != 0):
                self.state = 7954
                self.alias_clause()


            self.state = 7957
            self.match(PostgreSQLParser.ON)
            self.state = 7958
            self.a_expr()
            self.state = 7967
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,686,self._ctx)
            if la_ == 1:
                self.state = 7959
                self.merge_insert_clause()
                self.state = 7961
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,684,self._ctx)
                if la_ == 1:
                    self.state = 7960
                    self.merge_update_clause()


                pass

            elif la_ == 2:
                self.state = 7963
                self.merge_update_clause()
                self.state = 7965
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,685,self._ctx)
                if la_ == 1:
                    self.state = 7964
                    self.merge_insert_clause()


                pass


            self.state = 7970
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==140:
                self.state = 7969
                self.merge_delete_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_insert_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(PostgreSQLParser.WHEN, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def MATCHED(self):
            return self.getToken(PostgreSQLParser.MATCHED, 0)

        def INSERT(self):
            return self.getToken(PostgreSQLParser.INSERT, 0)

        def values_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Values_clauseContext,0)


        def AND(self):
            return self.getToken(PostgreSQLParser.AND, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def THEN(self):
            return self.getToken(PostgreSQLParser.THEN, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def insert_column_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Insert_column_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_merge_insert_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_insert_clause" ):
                listener.enterMerge_insert_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_insert_clause" ):
                listener.exitMerge_insert_clause(self)




    def merge_insert_clause(self):

        localctx = PostgreSQLParser.Merge_insert_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 926, self.RULE_merge_insert_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7972
            self.match(PostgreSQLParser.WHEN)
            self.state = 7973
            self.match(PostgreSQLParser.NOT)
            self.state = 7974
            self.match(PostgreSQLParser.MATCHED)
            self.state = 7977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 7975
                self.match(PostgreSQLParser.AND)
                self.state = 7976
                self.a_expr()


            self.state = 7980
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 7979
                self.match(PostgreSQLParser.THEN)


            self.state = 7982
            self.match(PostgreSQLParser.INSERT)
            self.state = 7987
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 7983
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 7984
                self.insert_column_list()
                self.state = 7985
                self.match(PostgreSQLParser.CLOSE_PAREN)


            self.state = 7989
            self.values_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_update_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(PostgreSQLParser.WHEN, 0)

        def MATCHED(self):
            return self.getToken(PostgreSQLParser.MATCHED, 0)

        def UPDATE(self):
            return self.getToken(PostgreSQLParser.UPDATE, 0)

        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def set_clause_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Set_clause_listContext,0)


        def AND(self):
            return self.getToken(PostgreSQLParser.AND, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def THEN(self):
            return self.getToken(PostgreSQLParser.THEN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_merge_update_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_update_clause" ):
                listener.enterMerge_update_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_update_clause" ):
                listener.exitMerge_update_clause(self)




    def merge_update_clause(self):

        localctx = PostgreSQLParser.Merge_update_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 928, self.RULE_merge_update_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7991
            self.match(PostgreSQLParser.WHEN)
            self.state = 7992
            self.match(PostgreSQLParser.MATCHED)
            self.state = 7995
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 7993
                self.match(PostgreSQLParser.AND)
                self.state = 7994
                self.a_expr()


            self.state = 7998
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 7997
                self.match(PostgreSQLParser.THEN)


            self.state = 8000
            self.match(PostgreSQLParser.UPDATE)
            self.state = 8001
            self.match(PostgreSQLParser.SET)
            self.state = 8002
            self.set_clause_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_delete_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(PostgreSQLParser.WHEN, 0)

        def MATCHED(self):
            return self.getToken(PostgreSQLParser.MATCHED, 0)

        def DELETE_P(self):
            return self.getToken(PostgreSQLParser.DELETE_P, 0)

        def THEN(self):
            return self.getToken(PostgreSQLParser.THEN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_merge_delete_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_delete_clause" ):
                listener.enterMerge_delete_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_delete_clause" ):
                listener.exitMerge_delete_clause(self)




    def merge_delete_clause(self):

        localctx = PostgreSQLParser.Merge_delete_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 930, self.RULE_merge_delete_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8004
            self.match(PostgreSQLParser.WHEN)
            self.state = 8005
            self.match(PostgreSQLParser.MATCHED)
            self.state = 8007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 8006
                self.match(PostgreSQLParser.THEN)


            self.state = 8009
            self.match(PostgreSQLParser.DELETE_P)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeletestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE_P(self):
            return self.getToken(PostgreSQLParser.DELETE_P, 0)

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def relation_expr_opt_alias(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relation_expr_opt_aliasContext,0)


        def with_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_clause_Context,0)


        def using_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Using_clauseContext,0)


        def where_or_current_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Where_or_current_clauseContext,0)


        def returning_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Returning_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_deletestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeletestmt" ):
                listener.enterDeletestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeletestmt" ):
                listener.exitDeletestmt(self)




    def deletestmt(self):

        localctx = PostgreSQLParser.DeletestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 932, self.RULE_deletestmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 8011
                self.with_clause_()


            self.state = 8014
            self.match(PostgreSQLParser.DELETE_P)
            self.state = 8015
            self.match(PostgreSQLParser.FROM)
            self.state = 8016
            self.relation_expr_opt_alias()
            self.state = 8018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 8017
                self.using_clause()


            self.state = 8021
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==141:
                self.state = 8020
                self.where_or_current_clause()


            self.state = 8024
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 8023
                self.returning_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def from_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.From_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_using_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_clause" ):
                listener.enterUsing_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_clause" ):
                listener.exitUsing_clause(self)




    def using_clause(self):

        localctx = PostgreSQLParser.Using_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 934, self.RULE_using_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8026
            self.match(PostgreSQLParser.USING)
            self.state = 8027
            self.from_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK_P(self):
            return self.getToken(PostgreSQLParser.LOCK_P, 0)

        def relation_expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relation_expr_listContext,0)


        def table_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_Context,0)


        def lock_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Lock_Context,0)


        def nowait_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Nowait_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_lockstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockstmt" ):
                listener.enterLockstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockstmt" ):
                listener.exitLockstmt(self)




    def lockstmt(self):

        localctx = PostgreSQLParser.LockstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 936, self.RULE_lockstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8029
            self.match(PostgreSQLParser.LOCK_P)
            self.state = 8031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==130:
                self.state = 8030
                self.table_()


            self.state = 8033
            self.relation_expr_list()
            self.state = 8035
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106:
                self.state = 8034
                self.lock_()


            self.state = 8038
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==303:
                self.state = 8037
                self.nowait_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lock_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN_P(self):
            return self.getToken(PostgreSQLParser.IN_P, 0)

        def lock_type(self):
            return self.getTypedRuleContext(PostgreSQLParser.Lock_typeContext,0)


        def MODE(self):
            return self.getToken(PostgreSQLParser.MODE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_lock_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_" ):
                listener.enterLock_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_" ):
                listener.exitLock_(self)




    def lock_(self):

        localctx = PostgreSQLParser.Lock_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 938, self.RULE_lock_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8040
            self.match(PostgreSQLParser.IN_P)
            self.state = 8041
            self.lock_type()
            self.state = 8042
            self.match(PostgreSQLParser.MODE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lock_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCESS(self):
            return self.getToken(PostgreSQLParser.ACCESS, 0)

        def SHARE(self):
            return self.getToken(PostgreSQLParser.SHARE, 0)

        def EXCLUSIVE(self):
            return self.getToken(PostgreSQLParser.EXCLUSIVE, 0)

        def ROW(self):
            return self.getToken(PostgreSQLParser.ROW, 0)

        def UPDATE(self):
            return self.getToken(PostgreSQLParser.UPDATE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_lock_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_type" ):
                listener.enterLock_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_type" ):
                listener.exitLock_type(self)




    def lock_type(self):

        localctx = PostgreSQLParser.Lock_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 940, self.RULE_lock_type)
        self._la = 0 # Token type
        try:
            self.state = 8056
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [169]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8044
                self.match(PostgreSQLParser.ACCESS)
                self.state = 8045
                _la = self._input.LA(1)
                if not(_la==239 or _la==365):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [445]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8046
                self.match(PostgreSQLParser.ROW)
                self.state = 8047
                _la = self._input.LA(1)
                if not(_la==239 or _la==365):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [365]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8048
                self.match(PostgreSQLParser.SHARE)
                self.state = 8053
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [400]:
                    self.state = 8049
                    self.match(PostgreSQLParser.UPDATE)
                    self.state = 8050
                    self.match(PostgreSQLParser.EXCLUSIVE)
                    pass
                elif token in [445]:
                    self.state = 8051
                    self.match(PostgreSQLParser.ROW)
                    self.state = 8052
                    self.match(PostgreSQLParser.EXCLUSIVE)
                    pass
                elif token in [294]:
                    pass
                else:
                    pass
                pass
            elif token in [239]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8055
                self.match(PostgreSQLParser.EXCLUSIVE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nowait_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOWAIT(self):
            return self.getToken(PostgreSQLParser.NOWAIT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_nowait_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNowait_" ):
                listener.enterNowait_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNowait_" ):
                listener.exitNowait_(self)




    def nowait_(self):

        localctx = PostgreSQLParser.Nowait_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 942, self.RULE_nowait_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8058
            self.match(PostgreSQLParser.NOWAIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nowait_or_skip_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOWAIT(self):
            return self.getToken(PostgreSQLParser.NOWAIT, 0)

        def SKIP_P(self):
            return self.getToken(PostgreSQLParser.SKIP_P, 0)

        def LOCKED(self):
            return self.getToken(PostgreSQLParser.LOCKED, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_nowait_or_skip_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNowait_or_skip_" ):
                listener.enterNowait_or_skip_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNowait_or_skip_" ):
                listener.exitNowait_or_skip_(self)




    def nowait_or_skip_(self):

        localctx = PostgreSQLParser.Nowait_or_skip_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 944, self.RULE_nowait_or_skip_)
        try:
            self.state = 8063
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [303]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8060
                self.match(PostgreSQLParser.NOWAIT)
                pass
            elif token in [503]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8061
                self.match(PostgreSQLParser.SKIP_P)
                self.state = 8062
                self.match(PostgreSQLParser.LOCKED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdatestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(PostgreSQLParser.UPDATE, 0)

        def relation_expr_opt_alias(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relation_expr_opt_aliasContext,0)


        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def set_clause_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Set_clause_listContext,0)


        def with_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_clause_Context,0)


        def from_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.From_clauseContext,0)


        def where_or_current_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Where_or_current_clauseContext,0)


        def returning_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Returning_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_updatestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdatestmt" ):
                listener.enterUpdatestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdatestmt" ):
                listener.exitUpdatestmt(self)




    def updatestmt(self):

        localctx = PostgreSQLParser.UpdatestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 946, self.RULE_updatestmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143:
                self.state = 8065
                self.with_clause_()


            self.state = 8068
            self.match(PostgreSQLParser.UPDATE)
            self.state = 8069
            self.relation_expr_opt_alias()
            self.state = 8070
            self.match(PostgreSQLParser.SET)
            self.state = 8071
            self.set_clause_list()
            self.state = 8073
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102:
                self.state = 8072
                self.from_clause()


            self.state = 8076
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==141:
                self.state = 8075
                self.where_or_current_clause()


            self.state = 8079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 8078
                self.returning_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_clause_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def set_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Set_clauseContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Set_clauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_set_clause_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_clause_list" ):
                listener.enterSet_clause_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_clause_list" ):
                listener.exitSet_clause_list(self)




    def set_clause_list(self):

        localctx = PostgreSQLParser.Set_clause_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 948, self.RULE_set_clause_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8081
            self.set_clause()
            self.state = 8086
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 8082
                self.match(PostgreSQLParser.COMMA)
                self.state = 8083
                self.set_clause()
                self.state = 8088
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def set_target(self):
            return self.getTypedRuleContext(PostgreSQLParser.Set_targetContext,0)


        def EQUAL(self):
            return self.getToken(PostgreSQLParser.EQUAL, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def set_target_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Set_target_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_set_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_clause" ):
                listener.enterSet_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_clause" ):
                listener.exitSet_clause(self)




    def set_clause(self):

        localctx = PostgreSQLParser.Set_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 950, self.RULE_set_clause)
        try:
            self.state = 8099
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 162, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 582]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8089
                self.set_target()
                self.state = 8090
                self.match(PostgreSQLParser.EQUAL)
                self.state = 8091
                self.a_expr()
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8093
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 8094
                self.set_target_list()
                self.state = 8095
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 8096
                self.match(PostgreSQLParser.EQUAL)
                self.state = 8097
                self.a_expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def opt_indirection(self):
            return self.getTypedRuleContext(PostgreSQLParser.Opt_indirectionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_set_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_target" ):
                listener.enterSet_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_target" ):
                listener.exitSet_target(self)




    def set_target(self):

        localctx = PostgreSQLParser.Set_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 952, self.RULE_set_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8101
            self.colid()
            self.state = 8102
            self.opt_indirection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_target_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def set_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Set_targetContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Set_targetContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_set_target_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_target_list" ):
                listener.enterSet_target_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_target_list" ):
                listener.exitSet_target_list(self)




    def set_target_list(self):

        localctx = PostgreSQLParser.Set_target_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 954, self.RULE_set_target_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8104
            self.set_target()
            self.state = 8109
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 8105
                self.match(PostgreSQLParser.COMMA)
                self.state = 8106
                self.set_target()
                self.state = 8111
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarecursorstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(PostgreSQLParser.DECLARE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Cursor_nameContext,0)


        def cursor_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Cursor_optionsContext,0)


        def CURSOR(self):
            return self.getToken(PostgreSQLParser.CURSOR, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def selectstmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.SelectstmtContext,0)


        def hold_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Hold_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_declarecursorstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarecursorstmt" ):
                listener.enterDeclarecursorstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarecursorstmt" ):
                listener.exitDeclarecursorstmt(self)




    def declarecursorstmt(self):

        localctx = PostgreSQLParser.DeclarecursorstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 956, self.RULE_declarecursorstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8112
            self.match(PostgreSQLParser.DECLARE)
            self.state = 8113
            self.cursor_name()
            self.state = 8114
            self.cursor_options()
            self.state = 8115
            self.match(PostgreSQLParser.CURSOR)
            self.state = 8117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143 or _la==410:
                self.state = 8116
                self.hold_()


            self.state = 8119
            self.match(PostgreSQLParser.FOR)
            self.state = 8120
            self.selectstmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_cursor_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_name" ):
                listener.enterCursor_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_name" ):
                listener.exitCursor_name(self)




    def cursor_name(self):

        localctx = PostgreSQLParser.Cursor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 958, self.RULE_cursor_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8122
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.NO)
            else:
                return self.getToken(PostgreSQLParser.NO, i)

        def SCROLL(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.SCROLL)
            else:
                return self.getToken(PostgreSQLParser.SCROLL, i)

        def BINARY(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.BINARY)
            else:
                return self.getToken(PostgreSQLParser.BINARY, i)

        def INSENSITIVE(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.INSENSITIVE)
            else:
                return self.getToken(PostgreSQLParser.INSENSITIVE, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_cursor_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_options" ):
                listener.enterCursor_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_options" ):
                listener.exitCursor_options(self)




    def cursor_options(self):

        localctx = PostgreSQLParser.Cursor_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 960, self.RULE_cursor_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==145 or _la==269 or _la==300 or _la==355:
                self.state = 8129
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [300]:
                    self.state = 8124
                    self.match(PostgreSQLParser.NO)
                    self.state = 8125
                    self.match(PostgreSQLParser.SCROLL)
                    pass
                elif token in [355]:
                    self.state = 8126
                    self.match(PostgreSQLParser.SCROLL)
                    pass
                elif token in [145]:
                    self.state = 8127
                    self.match(PostgreSQLParser.BINARY)
                    pass
                elif token in [269]:
                    self.state = 8128
                    self.match(PostgreSQLParser.INSENSITIVE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 8133
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hold_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def HOLD(self):
            return self.getToken(PostgreSQLParser.HOLD, 0)

        def WITHOUT(self):
            return self.getToken(PostgreSQLParser.WITHOUT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_hold_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHold_" ):
                listener.enterHold_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHold_" ):
                listener.exitHold_(self)




    def hold_(self):

        localctx = PostgreSQLParser.Hold_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 962, self.RULE_hold_)
        try:
            self.state = 8138
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [143]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8134
                self.match(PostgreSQLParser.WITH)
                self.state = 8135
                self.match(PostgreSQLParser.HOLD)
                pass
            elif token in [410]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8136
                self.match(PostgreSQLParser.WITHOUT)
                self.state = 8137
                self.match(PostgreSQLParser.HOLD)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_no_parens(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_no_parensContext,0)


        def select_with_parens(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_with_parensContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_selectstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectstmt" ):
                listener.enterSelectstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectstmt" ):
                listener.exitSelectstmt(self)




    def selectstmt(self):

        localctx = PostgreSQLParser.SelectstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 964, self.RULE_selectstmt)
        try:
            self.state = 8142
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,715,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8140
                self.select_no_parens()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8141
                self.select_with_parens()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_with_parensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def select_no_parens(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_no_parensContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def select_with_parens(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_with_parensContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_with_parens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_with_parens" ):
                listener.enterSelect_with_parens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_with_parens" ):
                listener.exitSelect_with_parens(self)




    def select_with_parens(self):

        localctx = PostgreSQLParser.Select_with_parensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 966, self.RULE_select_with_parens)
        try:
            self.state = 8152
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,716,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8144
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 8145
                self.select_no_parens()
                self.state = 8146
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8148
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 8149
                self.select_with_parens()
                self.state = 8150
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_no_parensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_clauseContext,0)


        def sort_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sort_clause_Context,0)


        def for_locking_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.For_locking_clauseContext,0)


        def select_limit(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_limitContext,0)


        def select_limit_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_limit_Context,0)


        def for_locking_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.For_locking_clause_Context,0)


        def with_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_no_parens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_no_parens" ):
                listener.enterSelect_no_parens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_no_parens" ):
                listener.exitSelect_no_parens(self)




    def select_no_parens(self):

        localctx = PostgreSQLParser.Select_no_parensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 968, self.RULE_select_no_parens)
        self._la = 0 # Token type
        try:
            self.state = 8183
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 126, 130, 453]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8154
                self.select_clause()
                self.state = 8156
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==121:
                    self.state = 8155
                    self.sort_clause_()


                self.state = 8166
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [100]:
                    self.state = 8158
                    self.for_locking_clause()
                    self.state = 8160
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & 270337) != 0):
                        self.state = 8159
                        self.select_limit_()


                    pass
                elif token in [99, 112, 117]:
                    self.state = 8162
                    self.select_limit()
                    self.state = 8164
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==100:
                        self.state = 8163
                        self.for_locking_clause_()


                    pass
                elif token in [-1, 3, 7, 67, 84, 103, 118, 125, 143]:
                    pass
                else:
                    pass
                pass
            elif token in [143]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8168
                self.with_clause()
                self.state = 8169
                self.select_clause()
                self.state = 8171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==121:
                    self.state = 8170
                    self.sort_clause_()


                self.state = 8181
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [100]:
                    self.state = 8173
                    self.for_locking_clause()
                    self.state = 8175
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & 270337) != 0):
                        self.state = 8174
                        self.select_limit_()


                    pass
                elif token in [99, 112, 117]:
                    self.state = 8177
                    self.select_limit()
                    self.state = 8179
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==100:
                        self.state = 8178
                        self.for_locking_clause_()


                    pass
                elif token in [-1, 3, 7, 67, 84, 103, 118, 125, 143]:
                    pass
                else:
                    pass
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_select_intersect(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Simple_select_intersectContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Simple_select_intersectContext,i)


        def UNION(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.UNION)
            else:
                return self.getToken(PostgreSQLParser.UNION, i)

        def EXCEPT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.EXCEPT)
            else:
                return self.getToken(PostgreSQLParser.EXCEPT, i)

        def all_or_distinct(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.All_or_distinctContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.All_or_distinctContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_clause" ):
                listener.enterSelect_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_clause" ):
                listener.exitSelect_clause(self)




    def select_clause(self):

        localctx = PostgreSQLParser.Select_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 970, self.RULE_select_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8185
            self.simple_select_intersect()
            self.state = 8193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==97 or _la==135:
                self.state = 8186
                _la = self._input.LA(1)
                if not(_la==97 or _la==135):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68 or _la==94:
                    self.state = 8187
                    self.all_or_distinct()


                self.state = 8190
                self.simple_select_intersect()
                self.state = 8195
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_select_intersectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_select_pramary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Simple_select_pramaryContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Simple_select_pramaryContext,i)


        def INTERSECT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.INTERSECT)
            else:
                return self.getToken(PostgreSQLParser.INTERSECT, i)

        def all_or_distinct(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.All_or_distinctContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.All_or_distinctContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_simple_select_intersect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_select_intersect" ):
                listener.enterSimple_select_intersect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_select_intersect" ):
                listener.exitSimple_select_intersect(self)




    def simple_select_intersect(self):

        localctx = PostgreSQLParser.Simple_select_intersectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 972, self.RULE_simple_select_intersect)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8196
            self.simple_select_pramary()
            self.state = 8204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==108:
                self.state = 8197
                self.match(PostgreSQLParser.INTERSECT)
                self.state = 8199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68 or _la==94:
                    self.state = 8198
                    self.all_or_distinct()


                self.state = 8201
                self.simple_select_pramary()
                self.state = 8206
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_select_pramaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(PostgreSQLParser.SELECT, 0)

        def distinct_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Distinct_clauseContext,0)


        def target_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Target_listContext,0)


        def all_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.All_clause_Context,0)


        def target_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Target_list_Context,0)


        def into_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Into_clauseContext,0)


        def from_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.From_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Where_clauseContext,0)


        def group_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Group_clauseContext,0)


        def having_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Having_clauseContext,0)


        def window_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Window_clauseContext,0)


        def values_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Values_clauseContext,0)


        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def relation_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relation_exprContext,0)


        def select_with_parens(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_with_parensContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_simple_select_pramary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_select_pramary" ):
                listener.enterSimple_select_pramary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_select_pramary" ):
                listener.exitSimple_select_pramary(self)




    def simple_select_pramary(self):

        localctx = PostgreSQLParser.Simple_select_pramaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 974, self.RULE_simple_select_pramary)
        self._la = 0 # Token type
        try:
            self.state = 8258
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [126]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8207
                self.match(PostgreSQLParser.SELECT)
                self.state = 8252
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [-1, 2, 3, 7, 9, 12, 13, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 78, 79, 84, 85, 86, 87, 88, 89, 90, 91, 97, 98, 99, 100, 102, 103, 104, 105, 108, 109, 112, 113, 114, 115, 116, 117, 118, 121, 125, 127, 134, 135, 136, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 563, 565, 567, 568, 572, 576, 577, 578, 579, 581, 582, 590]:
                    self.state = 8209
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==68:
                        self.state = 8208
                        self.all_clause_()


                    self.state = 8212
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -268422652) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9214927770107198969) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & -1011) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & -1) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & -1) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & -129) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & -1) != 0) or ((((_la - 454)) & ~0x3f) == 0 and ((1 << (_la - 454)) & -2305843284091601405) != 0) or ((((_la - 518)) & ~0x3f) == 0 and ((1 << (_la - 518)) & -4880034784790705153) != 0) or _la==582 or _la==590:
                        self.state = 8211
                        self.target_list_()


                    self.state = 8215
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==109:
                        self.state = 8214
                        self.into_clause()


                    self.state = 8218
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==102:
                        self.state = 8217
                        self.from_clause()


                    self.state = 8221
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==141:
                        self.state = 8220
                        self.where_clause()


                    self.state = 8224
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==104:
                        self.state = 8223
                        self.group_clause()


                    self.state = 8227
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==105:
                        self.state = 8226
                        self.having_clause()


                    self.state = 8230
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==142:
                        self.state = 8229
                        self.window_clause()


                    pass
                elif token in [94]:
                    self.state = 8232
                    self.distinct_clause()
                    self.state = 8233
                    self.target_list()
                    self.state = 8235
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==109:
                        self.state = 8234
                        self.into_clause()


                    self.state = 8238
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==102:
                        self.state = 8237
                        self.from_clause()


                    self.state = 8241
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==141:
                        self.state = 8240
                        self.where_clause()


                    self.state = 8244
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==104:
                        self.state = 8243
                        self.group_clause()


                    self.state = 8247
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==105:
                        self.state = 8246
                        self.having_clause()


                    self.state = 8250
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==142:
                        self.state = 8249
                        self.window_clause()


                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [453]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8254
                self.values_clause()
                pass
            elif token in [130]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8255
                self.match(PostgreSQLParser.TABLE)
                self.state = 8256
                self.relation_expr()
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8257
                self.select_with_parens()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def cte_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Cte_listContext,0)


        def RECURSIVE(self):
            return self.getToken(PostgreSQLParser.RECURSIVE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)




    def with_clause(self):

        localctx = PostgreSQLParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 976, self.RULE_with_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8260
            self.match(PostgreSQLParser.WITH)
            self.state = 8262
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,746,self._ctx)
            if la_ == 1:
                self.state = 8261
                self.match(PostgreSQLParser.RECURSIVE)


            self.state = 8264
            self.cte_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cte_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def common_table_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Common_table_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Common_table_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_cte_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCte_list" ):
                listener.enterCte_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCte_list" ):
                listener.exitCte_list(self)




    def cte_list(self):

        localctx = PostgreSQLParser.Cte_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 978, self.RULE_cte_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8266
            self.common_table_expr()
            self.state = 8271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 8267
                self.match(PostgreSQLParser.COMMA)
                self.state = 8268
                self.common_table_expr()
                self.state = 8273
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def preparablestmt(self):
            return self.getTypedRuleContext(PostgreSQLParser.PreparablestmtContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def name_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Name_list_Context,0)


        def materialized_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Materialized_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_common_table_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_expr" ):
                listener.enterCommon_table_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_expr" ):
                listener.exitCommon_table_expr(self)




    def common_table_expr(self):

        localctx = PostgreSQLParser.Common_table_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 980, self.RULE_common_table_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8274
            self.name()
            self.state = 8276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 8275
                self.name_list_()


            self.state = 8278
            self.match(PostgreSQLParser.AS)
            self.state = 8280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115 or _la==289:
                self.state = 8279
                self.materialized_()


            self.state = 8282
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 8283
            self.preparablestmt()
            self.state = 8284
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Materialized_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATERIALIZED(self):
            return self.getToken(PostgreSQLParser.MATERIALIZED, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_materialized_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaterialized_" ):
                listener.enterMaterialized_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaterialized_" ):
                listener.exitMaterialized_(self)




    def materialized_(self):

        localctx = PostgreSQLParser.Materialized_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 982, self.RULE_materialized_)
        try:
            self.state = 8289
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [289]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8286
                self.match(PostgreSQLParser.MATERIALIZED)
                pass
            elif token in [115]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8287
                self.match(PostgreSQLParser.NOT)
                self.state = 8288
                self.match(PostgreSQLParser.MATERIALIZED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clause_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def with_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.With_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_with_clause_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause_" ):
                listener.enterWith_clause_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause_" ):
                listener.exitWith_clause_(self)




    def with_clause_(self):

        localctx = PostgreSQLParser.With_clause_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 984, self.RULE_with_clause_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8291
            self.with_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Into_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(PostgreSQLParser.INTO, 0)

        def opttempTableName(self):
            return self.getTypedRuleContext(PostgreSQLParser.OpttempTableNameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_into_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInto_clause" ):
                listener.enterInto_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInto_clause" ):
                listener.exitInto_clause(self)




    def into_clause(self):

        localctx = PostgreSQLParser.Into_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 986, self.RULE_into_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8293
            self.match(PostgreSQLParser.INTO)
            self.state = 8294
            self.opttempTableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Strict_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRICT_P(self):
            return self.getToken(PostgreSQLParser.STRICT_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_strict_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrict_" ):
                listener.enterStrict_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrict_" ):
                listener.exitStrict_(self)




    def strict_(self):

        localctx = PostgreSQLParser.Strict_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 988, self.RULE_strict_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8296
            self.match(PostgreSQLParser.STRICT_P)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpttempTableNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def TEMPORARY(self):
            return self.getToken(PostgreSQLParser.TEMPORARY, 0)

        def TEMP(self):
            return self.getToken(PostgreSQLParser.TEMP, 0)

        def table_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_Context,0)


        def LOCAL(self):
            return self.getToken(PostgreSQLParser.LOCAL, 0)

        def GLOBAL(self):
            return self.getToken(PostgreSQLParser.GLOBAL, 0)

        def UNLOGGED(self):
            return self.getToken(PostgreSQLParser.UNLOGGED, 0)

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_opttempTableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpttempTableName" ):
                listener.enterOpttempTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpttempTableName" ):
                listener.exitOpttempTableName(self)




    def opttempTableName(self):

        localctx = PostgreSQLParser.OpttempTableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 990, self.RULE_opttempTableName)
        self._la = 0 # Token type
        try:
            self.state = 8314
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,754,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==251 or _la==283:
                    self.state = 8298
                    _la = self._input.LA(1)
                    if not(_la==251 or _la==283):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 8301
                _la = self._input.LA(1)
                if not(_la==383 or _la==385):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==130:
                    self.state = 8302
                    self.table_()


                self.state = 8305
                self.qualified_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8306
                self.match(PostgreSQLParser.UNLOGGED)
                self.state = 8308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==130:
                    self.state = 8307
                    self.table_()


                self.state = 8310
                self.qualified_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8311
                self.match(PostgreSQLParser.TABLE)
                self.state = 8312
                self.qualified_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8313
                self.qualified_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_" ):
                listener.enterTable_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_" ):
                listener.exitTable_(self)




    def table_(self):

        localctx = PostgreSQLParser.Table_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 992, self.RULE_table_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8316
            self.match(PostgreSQLParser.TABLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_or_distinctContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_all_or_distinct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_or_distinct" ):
                listener.enterAll_or_distinct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_or_distinct" ):
                listener.exitAll_or_distinct(self)




    def all_or_distinct(self):

        localctx = PostgreSQLParser.All_or_distinctContext(self, self._ctx, self.state)
        self.enterRule(localctx, 994, self.RULE_all_or_distinct)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8318
            _la = self._input.LA(1)
            if not(_la==68 or _la==94):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distinct_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_distinct_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistinct_clause" ):
                listener.enterDistinct_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistinct_clause" ):
                listener.exitDistinct_clause(self)




    def distinct_clause(self):

        localctx = PostgreSQLParser.Distinct_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 996, self.RULE_distinct_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8320
            self.match(PostgreSQLParser.DISTINCT)
            self.state = 8326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 8321
                self.match(PostgreSQLParser.ON)
                self.state = 8322
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 8323
                self.expr_list()
                self.state = 8324
                self.match(PostgreSQLParser.CLOSE_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_clause_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_all_clause_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_clause_" ):
                listener.enterAll_clause_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_clause_" ):
                listener.exitAll_clause_(self)




    def all_clause_(self):

        localctx = PostgreSQLParser.All_clause_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 998, self.RULE_all_clause_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8328
            self.match(PostgreSQLParser.ALL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sort_clause_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sort_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sort_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sort_clause_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSort_clause_" ):
                listener.enterSort_clause_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSort_clause_" ):
                listener.exitSort_clause_(self)




    def sort_clause_(self):

        localctx = PostgreSQLParser.Sort_clause_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1000, self.RULE_sort_clause_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8330
            self.sort_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sort_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(PostgreSQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def sortby_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sortby_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sort_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSort_clause" ):
                listener.enterSort_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSort_clause" ):
                listener.exitSort_clause(self)




    def sort_clause(self):

        localctx = PostgreSQLParser.Sort_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1002, self.RULE_sort_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8332
            self.match(PostgreSQLParser.ORDER)
            self.state = 8333
            self.match(PostgreSQLParser.BY)
            self.state = 8334
            self.sortby_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sortby_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sortby(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SortbyContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SortbyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sortby_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortby_list" ):
                listener.enterSortby_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortby_list" ):
                listener.exitSortby_list(self)




    def sortby_list(self):

        localctx = PostgreSQLParser.Sortby_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1004, self.RULE_sortby_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8336
            self.sortby()
            self.state = 8341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 8337
                self.match(PostgreSQLParser.COMMA)
                self.state = 8338
                self.sortby()
                self.state = 8343
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortbyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def qual_all_op(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qual_all_opContext,0)


        def nulls_order_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Nulls_order_Context,0)


        def asc_desc_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Asc_desc_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sortby

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortby" ):
                listener.enterSortby(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortby" ):
                listener.exitSortby(self)




    def sortby(self):

        localctx = PostgreSQLParser.SortbyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1006, self.RULE_sortby)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8344
            self.a_expr()
            self.state = 8350
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [138]:
                self.state = 8345
                self.match(PostgreSQLParser.USING)
                self.state = 8346
                self.qual_all_op()
                pass
            elif token in [-1, 3, 6, 7, 43, 67, 75, 84, 93, 99, 100, 103, 112, 116, 117, 118, 125, 143, 304, 330, 351, 519]:
                self.state = 8348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75 or _la==93:
                    self.state = 8347
                    self.asc_desc_()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 8353
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==304:
                self.state = 8352
                self.nulls_order_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_limitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def limit_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Limit_clauseContext,0)


        def offset_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Offset_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_limit" ):
                listener.enterSelect_limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_limit" ):
                listener.exitSelect_limit(self)




    def select_limit(self):

        localctx = PostgreSQLParser.Select_limitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1008, self.RULE_select_limit)
        self._la = 0 # Token type
        try:
            self.state = 8363
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [99, 112]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8355
                self.limit_clause()
                self.state = 8357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==117:
                    self.state = 8356
                    self.offset_clause()


                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8359
                self.offset_clause()
                self.state = 8361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==99 or _la==112:
                    self.state = 8360
                    self.limit_clause()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_limit_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_limit(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_limitContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_limit_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_limit_" ):
                listener.enterSelect_limit_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_limit_" ):
                listener.exitSelect_limit_(self)




    def select_limit_(self):

        localctx = PostgreSQLParser.Select_limit_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1010, self.RULE_select_limit_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8365
            self.select_limit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(PostgreSQLParser.LIMIT, 0)

        def select_limit_value(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_limit_valueContext,0)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def select_offset_value(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_offset_valueContext,0)


        def FETCH(self):
            return self.getToken(PostgreSQLParser.FETCH, 0)

        def first_or_next(self):
            return self.getTypedRuleContext(PostgreSQLParser.First_or_nextContext,0)


        def select_fetch_first_value(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_fetch_first_valueContext,0)


        def row_or_rows(self):
            return self.getTypedRuleContext(PostgreSQLParser.Row_or_rowsContext,0)


        def ONLY(self):
            return self.getToken(PostgreSQLParser.ONLY, 0)

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def TIES(self):
            return self.getToken(PostgreSQLParser.TIES, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_limit_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_clause" ):
                listener.enterLimit_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_clause" ):
                listener.exitLimit_clause(self)




    def limit_clause(self):

        localctx = PostgreSQLParser.Limit_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1012, self.RULE_limit_clause)
        self._la = 0 # Token type
        try:
            self.state = 8390
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [112]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8367
                self.match(PostgreSQLParser.LIMIT)
                self.state = 8368
                self.select_limit_value()
                self.state = 8371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==6:
                    self.state = 8369
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 8370
                    self.select_offset_value()


                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8373
                self.match(PostgreSQLParser.FETCH)
                self.state = 8374
                self.first_or_next()
                self.state = 8388
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,766,self._ctx)
                if la_ == 1:
                    self.state = 8375
                    self.select_fetch_first_value()
                    self.state = 8376
                    self.row_or_rows()
                    self.state = 8380
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [119]:
                        self.state = 8377
                        self.match(PostgreSQLParser.ONLY)
                        pass
                    elif token in [143]:
                        self.state = 8378
                        self.match(PostgreSQLParser.WITH)
                        self.state = 8379
                        self.match(PostgreSQLParser.TIES)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 2:
                    self.state = 8382
                    self.row_or_rows()
                    self.state = 8386
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [119]:
                        self.state = 8383
                        self.match(PostgreSQLParser.ONLY)
                        pass
                    elif token in [143]:
                        self.state = 8384
                        self.match(PostgreSQLParser.WITH)
                        self.state = 8385
                        self.match(PostgreSQLParser.TIES)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Offset_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OFFSET(self):
            return self.getToken(PostgreSQLParser.OFFSET, 0)

        def select_offset_value(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_offset_valueContext,0)


        def select_fetch_first_value(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_fetch_first_valueContext,0)


        def row_or_rows(self):
            return self.getTypedRuleContext(PostgreSQLParser.Row_or_rowsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_offset_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffset_clause" ):
                listener.enterOffset_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffset_clause" ):
                listener.exitOffset_clause(self)




    def offset_clause(self):

        localctx = PostgreSQLParser.Offset_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1014, self.RULE_offset_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8392
            self.match(PostgreSQLParser.OFFSET)
            self.state = 8397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,768,self._ctx)
            if la_ == 1:
                self.state = 8393
                self.select_offset_value()
                pass

            elif la_ == 2:
                self.state = 8394
                self.select_fetch_first_value()
                self.state = 8395
                self.row_or_rows()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_limit_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_limit_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_limit_value" ):
                listener.enterSelect_limit_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_limit_value" ):
                listener.exitSelect_limit_value(self)




    def select_limit_value(self):

        localctx = PostgreSQLParser.Select_limit_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1016, self.RULE_select_limit_value)
        try:
            self.state = 8401
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 12, 13, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 73, 78, 79, 85, 86, 87, 88, 89, 90, 91, 98, 113, 114, 115, 116, 127, 134, 136, 137, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 563, 565, 567, 568, 572, 576, 577, 578, 579, 581, 582, 590]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8399
                self.a_expr()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8400
                self.match(PostgreSQLParser.ALL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_offset_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_offset_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_offset_value" ):
                listener.enterSelect_offset_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_offset_value" ):
                listener.exitSelect_offset_value(self)




    def select_offset_value(self):

        localctx = PostgreSQLParser.Select_offset_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1018, self.RULE_select_offset_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8403
            self.a_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_fetch_first_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def c_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.C_exprContext,0)


        def PLUS(self):
            return self.getToken(PostgreSQLParser.PLUS, 0)

        def i_or_f_const(self):
            return self.getTypedRuleContext(PostgreSQLParser.I_or_f_constContext,0)


        def MINUS(self):
            return self.getToken(PostgreSQLParser.MINUS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_fetch_first_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_fetch_first_value" ):
                listener.enterSelect_fetch_first_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_fetch_first_value" ):
                listener.exitSelect_fetch_first_value(self)




    def select_fetch_first_value(self):

        localctx = PostgreSQLParser.Select_fetch_first_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1020, self.RULE_select_fetch_first_value)
        try:
            self.state = 8410
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 73, 78, 79, 85, 86, 87, 88, 89, 90, 91, 98, 113, 114, 116, 127, 134, 136, 137, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 563, 565, 567, 568, 572, 576, 577, 578, 579, 581, 582, 590]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8405
                self.c_expr()
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8406
                self.match(PostgreSQLParser.PLUS)
                self.state = 8407
                self.i_or_f_const()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8408
                self.match(PostgreSQLParser.MINUS)
                self.state = 8409
                self.i_or_f_const()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class I_or_f_constContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def fconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.FconstContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_i_or_f_const

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterI_or_f_const" ):
                listener.enterI_or_f_const(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitI_or_f_const" ):
                listener.exitI_or_f_const(self)




    def i_or_f_const(self):

        localctx = PostgreSQLParser.I_or_f_constContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1022, self.RULE_i_or_f_const)
        try:
            self.state = 8414
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [576, 577, 578, 579]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8412
                self.iconst()
                pass
            elif token in [581]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8413
                self.fconst()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_or_rowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROW(self):
            return self.getToken(PostgreSQLParser.ROW, 0)

        def ROWS(self):
            return self.getToken(PostgreSQLParser.ROWS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_row_or_rows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_or_rows" ):
                listener.enterRow_or_rows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_or_rows" ):
                listener.exitRow_or_rows(self)




    def row_or_rows(self):

        localctx = PostgreSQLParser.Row_or_rowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1024, self.RULE_row_or_rows)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8416
            _la = self._input.LA(1)
            if not(_la==351 or _la==445):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class First_or_nextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIRST_P(self):
            return self.getToken(PostgreSQLParser.FIRST_P, 0)

        def NEXT(self):
            return self.getToken(PostgreSQLParser.NEXT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_first_or_next

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFirst_or_next" ):
                listener.enterFirst_or_next(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFirst_or_next" ):
                listener.exitFirst_or_next(self)




    def first_or_next(self):

        localctx = PostgreSQLParser.First_or_nextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1026, self.RULE_first_or_next)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8418
            _la = self._input.LA(1)
            if not(_la==245 or _la==299):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP_P(self):
            return self.getToken(PostgreSQLParser.GROUP_P, 0)

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def group_by_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Group_by_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_group_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_clause" ):
                listener.enterGroup_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_clause" ):
                listener.exitGroup_clause(self)




    def group_clause(self):

        localctx = PostgreSQLParser.Group_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1028, self.RULE_group_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8420
            self.match(PostgreSQLParser.GROUP_P)
            self.state = 8421
            self.match(PostgreSQLParser.BY)
            self.state = 8422
            self.group_by_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group_by_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Group_by_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Group_by_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_group_by_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_list" ):
                listener.enterGroup_by_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_list" ):
                listener.exitGroup_by_list(self)




    def group_by_list(self):

        localctx = PostgreSQLParser.Group_by_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1030, self.RULE_group_by_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8424
            self.group_by_item()
            self.state = 8429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 8425
                self.match(PostgreSQLParser.COMMA)
                self.state = 8426
                self.group_by_item()
                self.state = 8431
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def empty_grouping_set(self):
            return self.getTypedRuleContext(PostgreSQLParser.Empty_grouping_setContext,0)


        def cube_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Cube_clauseContext,0)


        def rollup_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Rollup_clauseContext,0)


        def grouping_sets_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Grouping_sets_clauseContext,0)


        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_group_by_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_item" ):
                listener.enterGroup_by_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_item" ):
                listener.exitGroup_by_item(self)




    def group_by_item(self):

        localctx = PostgreSQLParser.Group_by_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1032, self.RULE_group_by_item)
        try:
            self.state = 8437
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,773,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8432
                self.empty_grouping_set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8433
                self.cube_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8434
                self.rollup_clause()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8435
                self.grouping_sets_clause()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8436
                self.a_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Empty_grouping_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_empty_grouping_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmpty_grouping_set" ):
                listener.enterEmpty_grouping_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmpty_grouping_set" ):
                listener.exitEmpty_grouping_set(self)




    def empty_grouping_set(self):

        localctx = PostgreSQLParser.Empty_grouping_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1034, self.RULE_empty_grouping_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8439
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 8440
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollup_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLUP(self):
            return self.getToken(PostgreSQLParser.ROLLUP, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_rollup_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollup_clause" ):
                listener.enterRollup_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollup_clause" ):
                listener.exitRollup_clause(self)




    def rollup_clause(self):

        localctx = PostgreSQLParser.Rollup_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1036, self.RULE_rollup_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8442
            self.match(PostgreSQLParser.ROLLUP)
            self.state = 8443
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 8444
            self.expr_list()
            self.state = 8445
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cube_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CUBE(self):
            return self.getToken(PostgreSQLParser.CUBE, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_cube_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCube_clause" ):
                listener.enterCube_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCube_clause" ):
                listener.exitCube_clause(self)




    def cube_clause(self):

        localctx = PostgreSQLParser.Cube_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1038, self.RULE_cube_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8447
            self.match(PostgreSQLParser.CUBE)
            self.state = 8448
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 8449
            self.expr_list()
            self.state = 8450
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_sets_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUPING(self):
            return self.getToken(PostgreSQLParser.GROUPING, 0)

        def SETS(self):
            return self.getToken(PostgreSQLParser.SETS, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def group_by_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Group_by_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_grouping_sets_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_sets_clause" ):
                listener.enterGrouping_sets_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_sets_clause" ):
                listener.exitGrouping_sets_clause(self)




    def grouping_sets_clause(self):

        localctx = PostgreSQLParser.Grouping_sets_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1040, self.RULE_grouping_sets_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8452
            self.match(PostgreSQLParser.GROUPING)
            self.state = 8453
            self.match(PostgreSQLParser.SETS)
            self.state = 8454
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 8455
            self.group_by_list()
            self.state = 8456
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Having_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(PostgreSQLParser.HAVING, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_having_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHaving_clause" ):
                listener.enterHaving_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHaving_clause" ):
                listener.exitHaving_clause(self)




    def having_clause(self):

        localctx = PostgreSQLParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1042, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8458
            self.match(PostgreSQLParser.HAVING)
            self.state = 8459
            self.a_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_locking_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_locking_items(self):
            return self.getTypedRuleContext(PostgreSQLParser.For_locking_itemsContext,0)


        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def READ(self):
            return self.getToken(PostgreSQLParser.READ, 0)

        def ONLY(self):
            return self.getToken(PostgreSQLParser.ONLY, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_for_locking_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_locking_clause" ):
                listener.enterFor_locking_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_locking_clause" ):
                listener.exitFor_locking_clause(self)




    def for_locking_clause(self):

        localctx = PostgreSQLParser.For_locking_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1044, self.RULE_for_locking_clause)
        try:
            self.state = 8465
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,774,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8461
                self.for_locking_items()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8462
                self.match(PostgreSQLParser.FOR)
                self.state = 8463
                self.match(PostgreSQLParser.READ)
                self.state = 8464
                self.match(PostgreSQLParser.ONLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_locking_clause_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_locking_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.For_locking_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_for_locking_clause_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_locking_clause_" ):
                listener.enterFor_locking_clause_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_locking_clause_" ):
                listener.exitFor_locking_clause_(self)




    def for_locking_clause_(self):

        localctx = PostgreSQLParser.For_locking_clause_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1046, self.RULE_for_locking_clause_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8467
            self.for_locking_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_locking_itemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_locking_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.For_locking_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.For_locking_itemContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_for_locking_items

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_locking_items" ):
                listener.enterFor_locking_items(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_locking_items" ):
                listener.exitFor_locking_items(self)




    def for_locking_items(self):

        localctx = PostgreSQLParser.For_locking_itemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1048, self.RULE_for_locking_items)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8470 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 8469
                self.for_locking_item()
                self.state = 8472 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==100):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_locking_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_locking_strength(self):
            return self.getTypedRuleContext(PostgreSQLParser.For_locking_strengthContext,0)


        def locked_rels_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Locked_rels_listContext,0)


        def nowait_or_skip_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Nowait_or_skip_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_for_locking_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_locking_item" ):
                listener.enterFor_locking_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_locking_item" ):
                listener.exitFor_locking_item(self)




    def for_locking_item(self):

        localctx = PostgreSQLParser.For_locking_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1050, self.RULE_for_locking_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8474
            self.for_locking_strength()
            self.state = 8476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 8475
                self.locked_rels_list()


            self.state = 8479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==303 or _la==503:
                self.state = 8478
                self.nowait_or_skip_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_locking_strengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def UPDATE(self):
            return self.getToken(PostgreSQLParser.UPDATE, 0)

        def SHARE(self):
            return self.getToken(PostgreSQLParser.SHARE, 0)

        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def KEY(self):
            return self.getToken(PostgreSQLParser.KEY, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_for_locking_strength

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_locking_strength" ):
                listener.enterFor_locking_strength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_locking_strength" ):
                listener.exitFor_locking_strength(self)




    def for_locking_strength(self):

        localctx = PostgreSQLParser.For_locking_strengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1052, self.RULE_for_locking_strength)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8481
            self.match(PostgreSQLParser.FOR)
            self.state = 8491
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [300, 400]:
                self.state = 8484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==300:
                    self.state = 8482
                    self.match(PostgreSQLParser.NO)
                    self.state = 8483
                    self.match(PostgreSQLParser.KEY)


                self.state = 8486
                self.match(PostgreSQLParser.UPDATE)
                pass
            elif token in [274, 365]:
                self.state = 8488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==274:
                    self.state = 8487
                    self.match(PostgreSQLParser.KEY)


                self.state = 8490
                self.match(PostgreSQLParser.SHARE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Locked_rels_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(PostgreSQLParser.OF, 0)

        def qualified_name_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_name_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_locked_rels_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocked_rels_list" ):
                listener.enterLocked_rels_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocked_rels_list" ):
                listener.exitLocked_rels_list(self)




    def locked_rels_list(self):

        localctx = PostgreSQLParser.Locked_rels_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1054, self.RULE_locked_rels_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8493
            self.match(PostgreSQLParser.OF)
            self.state = 8494
            self.qualified_name_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Values_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(PostgreSQLParser.VALUES, 0)

        def OPEN_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.OPEN_PAREN)
            else:
                return self.getToken(PostgreSQLParser.OPEN_PAREN, i)

        def expr_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Expr_listContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,i)


        def CLOSE_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.CLOSE_PAREN)
            else:
                return self.getToken(PostgreSQLParser.CLOSE_PAREN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_values_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValues_clause" ):
                listener.enterValues_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValues_clause" ):
                listener.exitValues_clause(self)




    def values_clause(self):

        localctx = PostgreSQLParser.Values_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1056, self.RULE_values_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8496
            self.match(PostgreSQLParser.VALUES)
            self.state = 8497
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 8498
            self.expr_list()
            self.state = 8499
            self.match(PostgreSQLParser.CLOSE_PAREN)
            self.state = 8507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 8500
                self.match(PostgreSQLParser.COMMA)
                self.state = 8501
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 8502
                self.expr_list()
                self.state = 8503
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 8509
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def from_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.From_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_clause" ):
                listener.enterFrom_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_clause" ):
                listener.exitFrom_clause(self)




    def from_clause(self):

        localctx = PostgreSQLParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1058, self.RULE_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8510
            self.match(PostgreSQLParser.FROM)
            self.state = 8511
            self.from_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_ref(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_refContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_refContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_from_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_list" ):
                listener.enterFrom_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_list" ):
                listener.exitFrom_list(self)




    def from_list(self):

        localctx = PostgreSQLParser.From_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1060, self.RULE_from_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8513
            self.table_ref()
            self.state = 8518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 8514
                self.match(PostgreSQLParser.COMMA)
                self.state = 8515
                self.table_ref()
                self.state = 8520
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relation_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relation_exprContext,0)


        def func_table(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_tableContext,0)


        def xmltable(self):
            return self.getTypedRuleContext(PostgreSQLParser.XmltableContext,0)


        def select_with_parens(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_with_parensContext,0)


        def LATERAL_P(self):
            return self.getToken(PostgreSQLParser.LATERAL_P, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def table_ref(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_refContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_refContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def CROSS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.CROSS)
            else:
                return self.getToken(PostgreSQLParser.CROSS, i)

        def JOIN(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.JOIN)
            else:
                return self.getToken(PostgreSQLParser.JOIN, i)

        def NATURAL(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.NATURAL)
            else:
                return self.getToken(PostgreSQLParser.NATURAL, i)

        def join_qual(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Join_qualContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Join_qualContext,i)


        def alias_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Alias_clauseContext,0)


        def tablesample_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Tablesample_clauseContext,0)


        def func_alias_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_alias_clauseContext,0)


        def join_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Join_typeContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Join_typeContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_ref" ):
                listener.enterTable_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_ref" ):
                listener.exitTable_ref(self)




    def table_ref(self):

        localctx = PostgreSQLParser.Table_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1062, self.RULE_table_ref)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8579
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,796,self._ctx)
            if la_ == 1:
                self.state = 8521
                self.relation_expr()
                self.state = 8523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & 17729624993791) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & -31) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & -1) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & -8796093022209) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & -1) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & -34909494181889) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & 1153132601981008895) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & 536870983) != 0):
                    self.state = 8522
                    self.alias_clause()


                self.state = 8526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==510:
                    self.state = 8525
                    self.tablesample_clause()


                pass

            elif la_ == 2:
                self.state = 8528
                self.func_table()
                self.state = 8530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & 17729624993791) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & -31) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & -1) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & -8796093022209) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & -1) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & -34909494181889) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & 1153132601981008895) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & 536870983) != 0):
                    self.state = 8529
                    self.func_alias_clause()


                pass

            elif la_ == 3:
                self.state = 8532
                self.xmltable()
                self.state = 8534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & 17729624993791) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & -31) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & -1) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & -8796093022209) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & -1) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & -34909494181889) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & 1153132601981008895) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & 536870983) != 0):
                    self.state = 8533
                    self.alias_clause()


                pass

            elif la_ == 4:
                self.state = 8536
                self.select_with_parens()
                self.state = 8538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & 17729624993791) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & -31) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & -1) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & -8796093022209) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & -1) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & -34909494181889) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & 1153132601981008895) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & 536870983) != 0):
                    self.state = 8537
                    self.alias_clause()


                pass

            elif la_ == 5:
                self.state = 8540
                self.match(PostgreSQLParser.LATERAL_P)
                self.state = 8553
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,791,self._ctx)
                if la_ == 1:
                    self.state = 8541
                    self.xmltable()
                    self.state = 8543
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & 17729624993791) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & -31) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & -1) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & -8796093022209) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & -1) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & -34909494181889) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & 1153132601981008895) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & 536870983) != 0):
                        self.state = 8542
                        self.alias_clause()


                    pass

                elif la_ == 2:
                    self.state = 8545
                    self.func_table()
                    self.state = 8547
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & 17729624993791) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & -31) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & -1) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & -8796093022209) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & -1) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & -34909494181889) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & 1153132601981008895) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & 536870983) != 0):
                        self.state = 8546
                        self.func_alias_clause()


                    pass

                elif la_ == 3:
                    self.state = 8549
                    self.select_with_parens()
                    self.state = 8551
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & 17729624993791) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & -31) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & -1) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & -8796093022209) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & -1) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & -34909494181889) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & 1153132601981008895) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & 536870983) != 0):
                        self.state = 8550
                        self.alias_clause()


                    pass


                pass

            elif la_ == 6:
                self.state = 8555
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 8556
                self.table_ref()
                self.state = 8573
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [148]:
                    self.state = 8557
                    self.match(PostgreSQLParser.CROSS)
                    self.state = 8558
                    self.match(PostgreSQLParser.JOIN)
                    self.state = 8559
                    self.table_ref()
                    pass
                elif token in [159]:
                    self.state = 8560
                    self.match(PostgreSQLParser.NATURAL)
                    self.state = 8562
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 151)) & ~0x3f) == 0 and ((1 << (_la - 151)) & 8261) != 0):
                        self.state = 8561
                        self.join_type()


                    self.state = 8564
                    self.match(PostgreSQLParser.JOIN)
                    self.state = 8565
                    self.table_ref()
                    pass
                elif token in [151, 153, 156, 157, 164]:
                    self.state = 8567
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 151)) & ~0x3f) == 0 and ((1 << (_la - 151)) & 8261) != 0):
                        self.state = 8566
                        self.join_type()


                    self.state = 8569
                    self.match(PostgreSQLParser.JOIN)
                    self.state = 8570
                    self.table_ref()
                    self.state = 8571
                    self.join_qual()
                    pass
                elif token in [3]:
                    pass
                else:
                    pass
                self.state = 8575
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 8577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & 17729624993791) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & -31) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & -1) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & -8796093022209) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & -1) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & -34909494181889) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & 1153132601981008895) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & 536870983) != 0):
                    self.state = 8576
                    self.alias_clause()


                pass


            self.state = 8599
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,800,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 8597
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [148]:
                        self.state = 8581
                        self.match(PostgreSQLParser.CROSS)
                        self.state = 8582
                        self.match(PostgreSQLParser.JOIN)
                        self.state = 8583
                        self.table_ref()
                        pass
                    elif token in [159]:
                        self.state = 8584
                        self.match(PostgreSQLParser.NATURAL)
                        self.state = 8586
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 151)) & ~0x3f) == 0 and ((1 << (_la - 151)) & 8261) != 0):
                            self.state = 8585
                            self.join_type()


                        self.state = 8588
                        self.match(PostgreSQLParser.JOIN)
                        self.state = 8589
                        self.table_ref()
                        pass
                    elif token in [151, 153, 156, 157, 164]:
                        self.state = 8591
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 151)) & ~0x3f) == 0 and ((1 << (_la - 151)) & 8261) != 0):
                            self.state = 8590
                            self.join_type()


                        self.state = 8593
                        self.match(PostgreSQLParser.JOIN)
                        self.state = 8594
                        self.table_ref()
                        self.state = 8595
                        self.join_qual()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 8601
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,800,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alias_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def name_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Name_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alias_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias_clause" ):
                listener.enterAlias_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias_clause" ):
                listener.exitAlias_clause(self)




    def alias_clause(self):

        localctx = PostgreSQLParser.Alias_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1064, self.RULE_alias_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 8602
                self.match(PostgreSQLParser.AS)


            self.state = 8605
            self.colid()
            self.state = 8610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 8606
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 8607
                self.name_list()
                self.state = 8608
                self.match(PostgreSQLParser.CLOSE_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_alias_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alias_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Alias_clauseContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def tablefuncelementlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.TablefuncelementlistContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_alias_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_alias_clause" ):
                listener.enterFunc_alias_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_alias_clause" ):
                listener.exitFunc_alias_clause(self)




    def func_alias_clause(self):

        localctx = PostgreSQLParser.Func_alias_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1066, self.RULE_func_alias_clause)
        self._la = 0 # Token type
        try:
            self.state = 8624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,805,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8612
                self.alias_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8618
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [74]:
                    self.state = 8613
                    self.match(PostgreSQLParser.AS)
                    self.state = 8615
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & 137438949375) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & -31) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & -1) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & -8796093022209) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & -1) != 0) or ((((_la - 418)) & ~0x3f) == 0 and ((1 << (_la - 418)) & -34909494181889) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & 1153132601981008895) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & 536870983) != 0):
                        self.state = 8614
                        self.colid()


                    pass
                elif token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 162, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 582]:
                    self.state = 8617
                    self.colid()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 8620
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 8621
                self.tablefuncelementlist()
                self.state = 8622
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FULL(self):
            return self.getToken(PostgreSQLParser.FULL, 0)

        def LEFT(self):
            return self.getToken(PostgreSQLParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(PostgreSQLParser.RIGHT, 0)

        def INNER_P(self):
            return self.getToken(PostgreSQLParser.INNER_P, 0)

        def OUTER_P(self):
            return self.getToken(PostgreSQLParser.OUTER_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_join_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_type" ):
                listener.enterJoin_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_type" ):
                listener.exitJoin_type(self)




    def join_type(self):

        localctx = PostgreSQLParser.Join_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1068, self.RULE_join_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8626
            _la = self._input.LA(1)
            if not(((((_la - 151)) & ~0x3f) == 0 and ((1 << (_la - 151)) & 8261) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 8628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==161:
                self.state = 8627
                self.match(PostgreSQLParser.OUTER_P)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_qualContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def name_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Name_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_join_qual

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_qual" ):
                listener.enterJoin_qual(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_qual" ):
                listener.exitJoin_qual(self)




    def join_qual(self):

        localctx = PostgreSQLParser.Join_qualContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1070, self.RULE_join_qual)
        try:
            self.state = 8637
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [138]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8630
                self.match(PostgreSQLParser.USING)
                self.state = 8631
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 8632
                self.name_list()
                self.state = 8633
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [118]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8635
                self.match(PostgreSQLParser.ON)
                self.state = 8636
                self.a_expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relation_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,0)


        def STAR(self):
            return self.getToken(PostgreSQLParser.STAR, 0)

        def ONLY(self):
            return self.getToken(PostgreSQLParser.ONLY, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_relation_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation_expr" ):
                listener.enterRelation_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation_expr" ):
                listener.exitRelation_expr(self)




    def relation_expr(self):

        localctx = PostgreSQLParser.Relation_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1072, self.RULE_relation_expr)
        self._la = 0 # Token type
        try:
            self.state = 8651
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 162, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 582]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8639
                self.qualified_name()
                self.state = 8641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9:
                    self.state = 8640
                    self.match(PostgreSQLParser.STAR)


                pass
            elif token in [119]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8643
                self.match(PostgreSQLParser.ONLY)
                self.state = 8649
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 162, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 582]:
                    self.state = 8644
                    self.qualified_name()
                    pass
                elif token in [2]:
                    self.state = 8645
                    self.match(PostgreSQLParser.OPEN_PAREN)
                    self.state = 8646
                    self.qualified_name()
                    self.state = 8647
                    self.match(PostgreSQLParser.CLOSE_PAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relation_expr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relation_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Relation_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Relation_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_relation_expr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation_expr_list" ):
                listener.enterRelation_expr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation_expr_list" ):
                listener.exitRelation_expr_list(self)




    def relation_expr_list(self):

        localctx = PostgreSQLParser.Relation_expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1074, self.RULE_relation_expr_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8653
            self.relation_expr()
            self.state = 8658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 8654
                self.match(PostgreSQLParser.COMMA)
                self.state = 8655
                self.relation_expr()
                self.state = 8660
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Relation_expr_opt_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relation_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relation_exprContext,0)


        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_relation_expr_opt_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation_expr_opt_alias" ):
                listener.enterRelation_expr_opt_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation_expr_opt_alias" ):
                listener.exitRelation_expr_opt_alias(self)




    def relation_expr_opt_alias(self):

        localctx = PostgreSQLParser.Relation_expr_opt_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1076, self.RULE_relation_expr_opt_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8661
            self.relation_expr()
            self.state = 8666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,813,self._ctx)
            if la_ == 1:
                self.state = 8663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==74:
                    self.state = 8662
                    self.match(PostgreSQLParser.AS)


                self.state = 8665
                self.colid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tablesample_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESAMPLE(self):
            return self.getToken(PostgreSQLParser.TABLESAMPLE, 0)

        def func_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_nameContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def repeatable_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Repeatable_clause_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_tablesample_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablesample_clause" ):
                listener.enterTablesample_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablesample_clause" ):
                listener.exitTablesample_clause(self)




    def tablesample_clause(self):

        localctx = PostgreSQLParser.Tablesample_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1078, self.RULE_tablesample_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8668
            self.match(PostgreSQLParser.TABLESAMPLE)
            self.state = 8669
            self.func_name()
            self.state = 8670
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 8671
            self.expr_list()
            self.state = 8672
            self.match(PostgreSQLParser.CLOSE_PAREN)
            self.state = 8674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==341:
                self.state = 8673
                self.repeatable_clause_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Repeatable_clause_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEATABLE(self):
            return self.getToken(PostgreSQLParser.REPEATABLE, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_repeatable_clause_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeatable_clause_" ):
                listener.enterRepeatable_clause_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeatable_clause_" ):
                listener.exitRepeatable_clause_(self)




    def repeatable_clause_(self):

        localctx = PostgreSQLParser.Repeatable_clause_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1080, self.RULE_repeatable_clause_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8676
            self.match(PostgreSQLParser.REPEATABLE)
            self.state = 8677
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 8678
            self.a_expr()
            self.state = 8679
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_expr_windowless(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_expr_windowlessContext,0)


        def ordinality_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Ordinality_Context,0)


        def ROWS(self):
            return self.getToken(PostgreSQLParser.ROWS, 0)

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def rowsfrom_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Rowsfrom_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_table" ):
                listener.enterFunc_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_table" ):
                listener.exitFunc_table(self)




    def func_table(self):

        localctx = PostgreSQLParser.Func_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1082, self.RULE_func_table)
        try:
            self.state = 8693
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,817,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8681
                self.func_expr_windowless()
                self.state = 8683
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,815,self._ctx)
                if la_ == 1:
                    self.state = 8682
                    self.ordinality_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8685
                self.match(PostgreSQLParser.ROWS)
                self.state = 8686
                self.match(PostgreSQLParser.FROM)
                self.state = 8687
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 8688
                self.rowsfrom_list()
                self.state = 8689
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 8691
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,816,self._ctx)
                if la_ == 1:
                    self.state = 8690
                    self.ordinality_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rowsfrom_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_expr_windowless(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_expr_windowlessContext,0)


        def col_def_list_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Col_def_list_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_rowsfrom_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowsfrom_item" ):
                listener.enterRowsfrom_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowsfrom_item" ):
                listener.exitRowsfrom_item(self)




    def rowsfrom_item(self):

        localctx = PostgreSQLParser.Rowsfrom_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1084, self.RULE_rowsfrom_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8695
            self.func_expr_windowless()
            self.state = 8697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 8696
                self.col_def_list_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rowsfrom_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rowsfrom_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Rowsfrom_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Rowsfrom_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_rowsfrom_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowsfrom_list" ):
                listener.enterRowsfrom_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowsfrom_list" ):
                listener.exitRowsfrom_list(self)




    def rowsfrom_list(self):

        localctx = PostgreSQLParser.Rowsfrom_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1086, self.RULE_rowsfrom_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8699
            self.rowsfrom_item()
            self.state = 8704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 8700
                self.match(PostgreSQLParser.COMMA)
                self.state = 8701
                self.rowsfrom_item()
                self.state = 8706
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Col_def_list_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def tablefuncelementlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.TablefuncelementlistContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_col_def_list_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_def_list_" ):
                listener.enterCol_def_list_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_def_list_" ):
                listener.exitCol_def_list_(self)




    def col_def_list_(self):

        localctx = PostgreSQLParser.Col_def_list_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1088, self.RULE_col_def_list_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8707
            self.match(PostgreSQLParser.AS)
            self.state = 8708
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 8709
            self.tablefuncelementlist()
            self.state = 8710
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordinality_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def ORDINALITY(self):
            return self.getToken(PostgreSQLParser.ORDINALITY, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_ordinality_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdinality_" ):
                listener.enterOrdinality_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdinality_" ):
                listener.exitOrdinality_(self)




    def ordinality_(self):

        localctx = PostgreSQLParser.Ordinality_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1090, self.RULE_ordinality_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8712
            self.match(PostgreSQLParser.WITH)
            self.state = 8713
            self.match(PostgreSQLParser.ORDINALITY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(PostgreSQLParser.WHERE, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = PostgreSQLParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1092, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8715
            self.match(PostgreSQLParser.WHERE)
            self.state = 8716
            self.a_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_or_current_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(PostgreSQLParser.WHERE, 0)

        def CURRENT_P(self):
            return self.getToken(PostgreSQLParser.CURRENT_P, 0)

        def OF(self):
            return self.getToken(PostgreSQLParser.OF, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Cursor_nameContext,0)


        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_where_or_current_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_or_current_clause" ):
                listener.enterWhere_or_current_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_or_current_clause" ):
                listener.exitWhere_or_current_clause(self)




    def where_or_current_clause(self):

        localctx = PostgreSQLParser.Where_or_current_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1094, self.RULE_where_or_current_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8718
            self.match(PostgreSQLParser.WHERE)
            self.state = 8723
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,820,self._ctx)
            if la_ == 1:
                self.state = 8719
                self.match(PostgreSQLParser.CURRENT_P)
                self.state = 8720
                self.match(PostgreSQLParser.OF)
                self.state = 8721
                self.cursor_name()
                pass

            elif la_ == 2:
                self.state = 8722
                self.a_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpttablefuncelementlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tablefuncelementlist(self):
            return self.getTypedRuleContext(PostgreSQLParser.TablefuncelementlistContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_opttablefuncelementlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpttablefuncelementlist" ):
                listener.enterOpttablefuncelementlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpttablefuncelementlist" ):
                listener.exitOpttablefuncelementlist(self)




    def opttablefuncelementlist(self):

        localctx = PostgreSQLParser.OpttablefuncelementlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1096, self.RULE_opttablefuncelementlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8725
            self.tablefuncelementlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablefuncelementlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tablefuncelement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TablefuncelementContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TablefuncelementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_tablefuncelementlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablefuncelementlist" ):
                listener.enterTablefuncelementlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablefuncelementlist" ):
                listener.exitTablefuncelementlist(self)




    def tablefuncelementlist(self):

        localctx = PostgreSQLParser.TablefuncelementlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1098, self.RULE_tablefuncelementlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8727
            self.tablefuncelement()
            self.state = 8732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 8728
                self.match(PostgreSQLParser.COMMA)
                self.state = 8729
                self.tablefuncelement()
                self.state = 8734
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablefuncelementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def typename(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,0)


        def collate_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Collate_clause_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_tablefuncelement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablefuncelement" ):
                listener.enterTablefuncelement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablefuncelement" ):
                listener.exitTablefuncelement(self)




    def tablefuncelement(self):

        localctx = PostgreSQLParser.TablefuncelementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1100, self.RULE_tablefuncelement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8735
            self.colid()
            self.state = 8736
            self.typename()
            self.state = 8738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 8737
                self.collate_clause_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XmltableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLTABLE(self):
            return self.getToken(PostgreSQLParser.XMLTABLE, 0)

        def OPEN_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.OPEN_PAREN)
            else:
                return self.getToken(PostgreSQLParser.OPEN_PAREN, i)

        def CLOSE_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.CLOSE_PAREN)
            else:
                return self.getToken(PostgreSQLParser.CLOSE_PAREN, i)

        def c_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.C_exprContext,0)


        def xmlexists_argument(self):
            return self.getTypedRuleContext(PostgreSQLParser.Xmlexists_argumentContext,0)


        def COLUMNS(self):
            return self.getToken(PostgreSQLParser.COLUMNS, 0)

        def xmltable_column_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Xmltable_column_listContext,0)


        def XMLNAMESPACES(self):
            return self.getToken(PostgreSQLParser.XMLNAMESPACES, 0)

        def xml_namespace_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Xml_namespace_listContext,0)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xmltable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmltable" ):
                listener.enterXmltable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmltable" ):
                listener.exitXmltable(self)




    def xmltable(self):

        localctx = PostgreSQLParser.XmltableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1102, self.RULE_xmltable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8740
            self.match(PostgreSQLParser.XMLTABLE)
            self.state = 8741
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 8757
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,823,self._ctx)
            if la_ == 1:
                self.state = 8742
                self.c_expr()
                self.state = 8743
                self.xmlexists_argument()
                self.state = 8744
                self.match(PostgreSQLParser.COLUMNS)
                self.state = 8745
                self.xmltable_column_list()
                pass

            elif la_ == 2:
                self.state = 8747
                self.match(PostgreSQLParser.XMLNAMESPACES)
                self.state = 8748
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 8749
                self.xml_namespace_list()
                self.state = 8750
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 8751
                self.match(PostgreSQLParser.COMMA)
                self.state = 8752
                self.c_expr()
                self.state = 8753
                self.xmlexists_argument()
                self.state = 8754
                self.match(PostgreSQLParser.COLUMNS)
                self.state = 8755
                self.xmltable_column_list()
                pass


            self.state = 8759
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmltable_column_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xmltable_column_el(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Xmltable_column_elContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Xmltable_column_elContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xmltable_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmltable_column_list" ):
                listener.enterXmltable_column_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmltable_column_list" ):
                listener.exitXmltable_column_list(self)




    def xmltable_column_list(self):

        localctx = PostgreSQLParser.Xmltable_column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1104, self.RULE_xmltable_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8761
            self.xmltable_column_el()
            self.state = 8766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 8762
                self.match(PostgreSQLParser.COMMA)
                self.state = 8763
                self.xmltable_column_el()
                self.state = 8768
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmltable_column_elContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def typename(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,0)


        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def ORDINALITY(self):
            return self.getToken(PostgreSQLParser.ORDINALITY, 0)

        def xmltable_column_option_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Xmltable_column_option_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xmltable_column_el

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmltable_column_el" ):
                listener.enterXmltable_column_el(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmltable_column_el" ):
                listener.exitXmltable_column_el(self)




    def xmltable_column_el(self):

        localctx = PostgreSQLParser.Xmltable_column_elContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1106, self.RULE_xmltable_column_el)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8769
            self.colid()
            self.state = 8776
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 429, 432, 433, 434, 436, 437, 440, 444, 446, 447, 449, 450, 454, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 529, 542, 553, 554, 555, 559, 582]:
                self.state = 8770
                self.typename()
                self.state = 8772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 50331649) != 0) or ((((_la - 554)) & ~0x3f) == 0 and ((1 << (_la - 554)) & 268435491) != 0):
                    self.state = 8771
                    self.xmltable_column_option_list()


                pass
            elif token in [100]:
                self.state = 8774
                self.match(PostgreSQLParser.FOR)
                self.state = 8775
                self.match(PostgreSQLParser.ORDINALITY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmltable_column_option_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xmltable_column_option_el(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Xmltable_column_option_elContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Xmltable_column_option_elContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xmltable_column_option_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmltable_column_option_list" ):
                listener.enterXmltable_column_option_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmltable_column_option_list" ):
                listener.exitXmltable_column_option_list(self)




    def xmltable_column_option_list(self):

        localctx = PostgreSQLParser.Xmltable_column_option_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1108, self.RULE_xmltable_column_option_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8779 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 8778
                self.xmltable_column_option_el()
                self.state = 8781 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 50331649) != 0) or ((((_la - 554)) & ~0x3f) == 0 and ((1 << (_la - 554)) & 268435491) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmltable_column_option_elContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def identifier(self):
            return self.getTypedRuleContext(PostgreSQLParser.IdentifierContext,0)


        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def NULL_P(self):
            return self.getToken(PostgreSQLParser.NULL_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xmltable_column_option_el

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmltable_column_option_el" ):
                listener.enterXmltable_column_option_el(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmltable_column_option_el" ):
                listener.exitXmltable_column_option_el(self)




    def xmltable_column_option_el(self):

        localctx = PostgreSQLParser.Xmltable_column_option_elContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1110, self.RULE_xmltable_column_option_el)
        try:
            self.state = 8791
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [91]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8783
                self.match(PostgreSQLParser.DEFAULT)
                self.state = 8784
                self.a_expr()
                pass
            elif token in [554, 555, 559, 582]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8785
                self.identifier()
                self.state = 8786
                self.a_expr()
                pass
            elif token in [115]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8788
                self.match(PostgreSQLParser.NOT)
                self.state = 8789
                self.match(PostgreSQLParser.NULL_P)
                pass
            elif token in [116]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8790
                self.match(PostgreSQLParser.NULL_P)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_namespace_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xml_namespace_el(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Xml_namespace_elContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Xml_namespace_elContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xml_namespace_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_namespace_list" ):
                listener.enterXml_namespace_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_namespace_list" ):
                listener.exitXml_namespace_list(self)




    def xml_namespace_list(self):

        localctx = PostgreSQLParser.Xml_namespace_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1112, self.RULE_xml_namespace_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8793
            self.xml_namespace_el()
            self.state = 8798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 8794
                self.match(PostgreSQLParser.COMMA)
                self.state = 8795
                self.xml_namespace_el()
                self.state = 8800
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_namespace_elContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def b_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.B_exprContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def colLabel(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColLabelContext,0)


        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xml_namespace_el

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_namespace_el" ):
                listener.enterXml_namespace_el(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_namespace_el" ):
                listener.exitXml_namespace_el(self)




    def xml_namespace_el(self):

        localctx = PostgreSQLParser.Xml_namespace_elContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1114, self.RULE_xml_namespace_el)
        try:
            self.state = 8807
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,830,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8801
                self.b_expr(0)
                self.state = 8802
                self.match(PostgreSQLParser.AS)
                self.state = 8803
                self.colLabel()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8805
                self.match(PostgreSQLParser.DEFAULT)
                self.state = 8806
                self.b_expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpletypename(self):
            return self.getTypedRuleContext(PostgreSQLParser.SimpletypenameContext,0)


        def opt_array_bounds(self):
            return self.getTypedRuleContext(PostgreSQLParser.Opt_array_boundsContext,0)


        def ARRAY(self):
            return self.getToken(PostgreSQLParser.ARRAY, 0)

        def SETOF(self):
            return self.getToken(PostgreSQLParser.SETOF, 0)

        def OPEN_BRACKET(self):
            return self.getToken(PostgreSQLParser.OPEN_BRACKET, 0)

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(PostgreSQLParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_typename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypename" ):
                listener.enterTypename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypename" ):
                listener.exitTypename(self)




    def typename(self):

        localctx = PostgreSQLParser.TypenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1116, self.RULE_typename)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==446:
                self.state = 8809
                self.match(PostgreSQLParser.SETOF)


            self.state = 8812
            self.simpletypename()
            self.state = 8821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,833,self._ctx)
            if la_ == 1:
                self.state = 8813
                self.opt_array_bounds()
                pass

            elif la_ == 2:
                self.state = 8814
                self.match(PostgreSQLParser.ARRAY)
                self.state = 8819
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,832,self._ctx)
                if la_ == 1:
                    self.state = 8815
                    self.match(PostgreSQLParser.OPEN_BRACKET)
                    self.state = 8816
                    self.iconst()
                    self.state = 8817
                    self.match(PostgreSQLParser.CLOSE_BRACKET)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opt_array_boundsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.OPEN_BRACKET)
            else:
                return self.getToken(PostgreSQLParser.OPEN_BRACKET, i)

        def CLOSE_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.CLOSE_BRACKET)
            else:
                return self.getToken(PostgreSQLParser.CLOSE_BRACKET, i)

        def iconst(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.IconstContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.IconstContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_opt_array_bounds

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_array_bounds" ):
                listener.enterOpt_array_bounds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_array_bounds" ):
                listener.exitOpt_array_bounds(self)




    def opt_array_bounds(self):

        localctx = PostgreSQLParser.Opt_array_boundsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1118, self.RULE_opt_array_bounds)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8830
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,835,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 8823
                    self.match(PostgreSQLParser.OPEN_BRACKET)
                    self.state = 8825
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 576)) & ~0x3f) == 0 and ((1 << (_la - 576)) & 15) != 0):
                        self.state = 8824
                        self.iconst()


                    self.state = 8827
                    self.match(PostgreSQLParser.CLOSE_BRACKET) 
                self.state = 8832
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,835,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpletypenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generictype(self):
            return self.getTypedRuleContext(PostgreSQLParser.GenerictypeContext,0)


        def numeric(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericContext,0)


        def bit(self):
            return self.getTypedRuleContext(PostgreSQLParser.BitContext,0)


        def character(self):
            return self.getTypedRuleContext(PostgreSQLParser.CharacterContext,0)


        def constdatetime(self):
            return self.getTypedRuleContext(PostgreSQLParser.ConstdatetimeContext,0)


        def constinterval(self):
            return self.getTypedRuleContext(PostgreSQLParser.ConstintervalContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def interval_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Interval_Context,0)


        def jsonType(self):
            return self.getTypedRuleContext(PostgreSQLParser.JsonTypeContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_simpletypename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypename" ):
                listener.enterSimpletypename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypename" ):
                listener.exitSimpletypename(self)




    def simpletypename(self):

        localctx = PostgreSQLParser.SimpletypenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1120, self.RULE_simpletypename)
        try:
            self.state = 8849
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,838,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8833
                self.generictype()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8834
                self.numeric()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8835
                self.bit()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8836
                self.character()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8837
                self.constdatetime()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8838
                self.constinterval()
                self.state = 8846
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,837,self._ctx)
                if la_ == 1:
                    self.state = 8840
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,836,self._ctx)
                    if la_ == 1:
                        self.state = 8839
                        self.interval_()


                    pass

                elif la_ == 2:
                    self.state = 8842
                    self.match(PostgreSQLParser.OPEN_PAREN)
                    self.state = 8843
                    self.iconst()
                    self.state = 8844
                    self.match(PostgreSQLParser.CLOSE_PAREN)
                    pass


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 8848
                self.jsonType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConsttypenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric(self):
            return self.getTypedRuleContext(PostgreSQLParser.NumericContext,0)


        def constbit(self):
            return self.getTypedRuleContext(PostgreSQLParser.ConstbitContext,0)


        def constcharacter(self):
            return self.getTypedRuleContext(PostgreSQLParser.ConstcharacterContext,0)


        def constdatetime(self):
            return self.getTypedRuleContext(PostgreSQLParser.ConstdatetimeContext,0)


        def jsonType(self):
            return self.getTypedRuleContext(PostgreSQLParser.JsonTypeContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_consttypename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConsttypename" ):
                listener.enterConsttypename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConsttypename" ):
                listener.exitConsttypename(self)




    def consttypename(self):

        localctx = PostgreSQLParser.ConsttypenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1122, self.RULE_consttypename)
        try:
            self.state = 8856
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [228, 419, 421, 425, 426, 429, 432, 433, 440, 444, 447]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8851
                self.numeric()
                pass
            elif token in [420]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8852
                self.constbit()
                pass
            elif token in [422, 423, 436, 437, 454]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8853
                self.constcharacter()
                pass
            elif token in [449, 450]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8854
                self.constdatetime()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8855
                self.jsonType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenerictypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_function_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_function_nameContext,0)


        def attrs(self):
            return self.getTypedRuleContext(PostgreSQLParser.AttrsContext,0)


        def type_modifiers_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_modifiers_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_generictype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenerictype" ):
                listener.enterGenerictype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenerictype" ):
                listener.exitGenerictype(self)




    def generictype(self):

        localctx = PostgreSQLParser.GenerictypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1124, self.RULE_generictype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8858
            self.type_function_name()
            self.state = 8860
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,840,self._ctx)
            if la_ == 1:
                self.state = 8859
                self.attrs()


            self.state = 8863
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,841,self._ctx)
            if la_ == 1:
                self.state = 8862
                self.type_modifiers_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_modifiers_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_type_modifiers_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_modifiers_" ):
                listener.enterType_modifiers_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_modifiers_" ):
                listener.exitType_modifiers_(self)




    def type_modifiers_(self):

        localctx = PostgreSQLParser.Type_modifiers_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1126, self.RULE_type_modifiers_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8865
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 8866
            self.expr_list()
            self.state = 8867
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_P(self):
            return self.getToken(PostgreSQLParser.INT_P, 0)

        def INTEGER(self):
            return self.getToken(PostgreSQLParser.INTEGER, 0)

        def SMALLINT(self):
            return self.getToken(PostgreSQLParser.SMALLINT, 0)

        def BIGINT(self):
            return self.getToken(PostgreSQLParser.BIGINT, 0)

        def REAL(self):
            return self.getToken(PostgreSQLParser.REAL, 0)

        def FLOAT_P(self):
            return self.getToken(PostgreSQLParser.FLOAT_P, 0)

        def float_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Float_Context,0)


        def DOUBLE_P(self):
            return self.getToken(PostgreSQLParser.DOUBLE_P, 0)

        def PRECISION(self):
            return self.getToken(PostgreSQLParser.PRECISION, 0)

        def DECIMAL_P(self):
            return self.getToken(PostgreSQLParser.DECIMAL_P, 0)

        def type_modifiers_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_modifiers_Context,0)


        def DEC(self):
            return self.getToken(PostgreSQLParser.DEC, 0)

        def NUMERIC(self):
            return self.getToken(PostgreSQLParser.NUMERIC, 0)

        def BOOLEAN_P(self):
            return self.getToken(PostgreSQLParser.BOOLEAN_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_numeric

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric" ):
                listener.enterNumeric(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric" ):
                listener.exitNumeric(self)




    def numeric(self):

        localctx = PostgreSQLParser.NumericContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1128, self.RULE_numeric)
        try:
            self.state = 8893
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [432]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8869
                self.match(PostgreSQLParser.INT_P)
                pass
            elif token in [433]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8870
                self.match(PostgreSQLParser.INTEGER)
                pass
            elif token in [447]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8871
                self.match(PostgreSQLParser.SMALLINT)
                pass
            elif token in [419]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8872
                self.match(PostgreSQLParser.BIGINT)
                pass
            elif token in [444]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8873
                self.match(PostgreSQLParser.REAL)
                pass
            elif token in [429]:
                self.enterOuterAlt(localctx, 6)
                self.state = 8874
                self.match(PostgreSQLParser.FLOAT_P)
                self.state = 8876
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,842,self._ctx)
                if la_ == 1:
                    self.state = 8875
                    self.float_()


                pass
            elif token in [228]:
                self.enterOuterAlt(localctx, 7)
                self.state = 8878
                self.match(PostgreSQLParser.DOUBLE_P)
                self.state = 8879
                self.match(PostgreSQLParser.PRECISION)
                pass
            elif token in [426]:
                self.enterOuterAlt(localctx, 8)
                self.state = 8880
                self.match(PostgreSQLParser.DECIMAL_P)
                self.state = 8882
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,843,self._ctx)
                if la_ == 1:
                    self.state = 8881
                    self.type_modifiers_()


                pass
            elif token in [425]:
                self.enterOuterAlt(localctx, 9)
                self.state = 8884
                self.match(PostgreSQLParser.DEC)
                self.state = 8886
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,844,self._ctx)
                if la_ == 1:
                    self.state = 8885
                    self.type_modifiers_()


                pass
            elif token in [440]:
                self.enterOuterAlt(localctx, 10)
                self.state = 8888
                self.match(PostgreSQLParser.NUMERIC)
                self.state = 8890
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,845,self._ctx)
                if la_ == 1:
                    self.state = 8889
                    self.type_modifiers_()


                pass
            elif token in [421]:
                self.enterOuterAlt(localctx, 11)
                self.state = 8892
                self.match(PostgreSQLParser.BOOLEAN_P)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Float_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_float_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloat_" ):
                listener.enterFloat_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloat_" ):
                listener.exitFloat_(self)




    def float_(self):

        localctx = PostgreSQLParser.Float_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1130, self.RULE_float_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8895
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 8896
            self.iconst()
            self.state = 8897
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwithlength(self):
            return self.getTypedRuleContext(PostgreSQLParser.BitwithlengthContext,0)


        def bitwithoutlength(self):
            return self.getTypedRuleContext(PostgreSQLParser.BitwithoutlengthContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit" ):
                listener.enterBit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit" ):
                listener.exitBit(self)




    def bit(self):

        localctx = PostgreSQLParser.BitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1132, self.RULE_bit)
        try:
            self.state = 8901
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,847,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8899
                self.bitwithlength()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8900
                self.bitwithoutlength()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstbitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwithlength(self):
            return self.getTypedRuleContext(PostgreSQLParser.BitwithlengthContext,0)


        def bitwithoutlength(self):
            return self.getTypedRuleContext(PostgreSQLParser.BitwithoutlengthContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_constbit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstbit" ):
                listener.enterConstbit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstbit" ):
                listener.exitConstbit(self)




    def constbit(self):

        localctx = PostgreSQLParser.ConstbitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1134, self.RULE_constbit)
        try:
            self.state = 8905
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,848,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8903
                self.bitwithlength()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8904
                self.bitwithoutlength()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitwithlengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BIT(self):
            return self.getToken(PostgreSQLParser.BIT, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def varying_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Varying_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bitwithlength

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwithlength" ):
                listener.enterBitwithlength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwithlength" ):
                listener.exitBitwithlength(self)




    def bitwithlength(self):

        localctx = PostgreSQLParser.BitwithlengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1136, self.RULE_bitwithlength)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8907
            self.match(PostgreSQLParser.BIT)
            self.state = 8909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==405:
                self.state = 8908
                self.varying_()


            self.state = 8911
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 8912
            self.expr_list()
            self.state = 8913
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitwithoutlengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BIT(self):
            return self.getToken(PostgreSQLParser.BIT, 0)

        def varying_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Varying_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bitwithoutlength

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwithoutlength" ):
                listener.enterBitwithoutlength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwithoutlength" ):
                listener.exitBitwithoutlength(self)




    def bitwithoutlength(self):

        localctx = PostgreSQLParser.BitwithoutlengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1138, self.RULE_bitwithoutlength)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8915
            self.match(PostgreSQLParser.BIT)
            self.state = 8917
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,850,self._ctx)
            if la_ == 1:
                self.state = 8916
                self.varying_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharacterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def character_c(self):
            return self.getTypedRuleContext(PostgreSQLParser.Character_cContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_character

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter" ):
                listener.enterCharacter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter" ):
                listener.exitCharacter(self)




    def character(self):

        localctx = PostgreSQLParser.CharacterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1140, self.RULE_character)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8919
            self.character_c()
            self.state = 8924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,851,self._ctx)
            if la_ == 1:
                self.state = 8920
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 8921
                self.iconst()
                self.state = 8922
                self.match(PostgreSQLParser.CLOSE_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstcharacterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def character_c(self):
            return self.getTypedRuleContext(PostgreSQLParser.Character_cContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_constcharacter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstcharacter" ):
                listener.enterConstcharacter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstcharacter" ):
                listener.exitConstcharacter(self)




    def constcharacter(self):

        localctx = PostgreSQLParser.ConstcharacterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1142, self.RULE_constcharacter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8926
            self.character_c()
            self.state = 8931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 8927
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 8928
                self.iconst()
                self.state = 8929
                self.match(PostgreSQLParser.CLOSE_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Character_cContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHARACTER(self):
            return self.getToken(PostgreSQLParser.CHARACTER, 0)

        def CHAR_P(self):
            return self.getToken(PostgreSQLParser.CHAR_P, 0)

        def NCHAR(self):
            return self.getToken(PostgreSQLParser.NCHAR, 0)

        def varying_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Varying_Context,0)


        def VARCHAR(self):
            return self.getToken(PostgreSQLParser.VARCHAR, 0)

        def NATIONAL(self):
            return self.getToken(PostgreSQLParser.NATIONAL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_character_c

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter_c" ):
                listener.enterCharacter_c(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter_c" ):
                listener.exitCharacter_c(self)




    def character_c(self):

        localctx = PostgreSQLParser.Character_cContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1144, self.RULE_character_c)
        self._la = 0 # Token type
        try:
            self.state = 8943
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [422, 423, 437]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8933
                _la = self._input.LA(1)
                if not(((((_la - 422)) & ~0x3f) == 0 and ((1 << (_la - 422)) & 32771) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8935
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,853,self._ctx)
                if la_ == 1:
                    self.state = 8934
                    self.varying_()


                pass
            elif token in [454]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8937
                self.match(PostgreSQLParser.VARCHAR)
                pass
            elif token in [436]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8938
                self.match(PostgreSQLParser.NATIONAL)
                self.state = 8939
                _la = self._input.LA(1)
                if not(_la==422 or _la==423):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8941
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,854,self._ctx)
                if la_ == 1:
                    self.state = 8940
                    self.varying_()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Varying_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARYING(self):
            return self.getToken(PostgreSQLParser.VARYING, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_varying_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarying_" ):
                listener.enterVarying_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarying_" ):
                listener.exitVarying_(self)




    def varying_(self):

        localctx = PostgreSQLParser.Varying_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1146, self.RULE_varying_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8945
            self.match(PostgreSQLParser.VARYING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstdatetimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIMESTAMP(self):
            return self.getToken(PostgreSQLParser.TIMESTAMP, 0)

        def TIME(self):
            return self.getToken(PostgreSQLParser.TIME, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def timezone_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Timezone_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_constdatetime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstdatetime" ):
                listener.enterConstdatetime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstdatetime" ):
                listener.exitConstdatetime(self)




    def constdatetime(self):

        localctx = PostgreSQLParser.ConstdatetimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1148, self.RULE_constdatetime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8947
            _la = self._input.LA(1)
            if not(_la==449 or _la==450):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 8952
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,856,self._ctx)
            if la_ == 1:
                self.state = 8948
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 8949
                self.iconst()
                self.state = 8950
                self.match(PostgreSQLParser.CLOSE_PAREN)


            self.state = 8955
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,857,self._ctx)
            if la_ == 1:
                self.state = 8954
                self.timezone_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstintervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL(self):
            return self.getToken(PostgreSQLParser.INTERVAL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_constinterval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstinterval" ):
                listener.enterConstinterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstinterval" ):
                listener.exitConstinterval(self)




    def constinterval(self):

        localctx = PostgreSQLParser.ConstintervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1150, self.RULE_constinterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8957
            self.match(PostgreSQLParser.INTERVAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Timezone_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def TIME(self):
            return self.getToken(PostgreSQLParser.TIME, 0)

        def ZONE(self):
            return self.getToken(PostgreSQLParser.ZONE, 0)

        def WITHOUT(self):
            return self.getToken(PostgreSQLParser.WITHOUT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_timezone_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimezone_" ):
                listener.enterTimezone_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimezone_" ):
                listener.exitTimezone_(self)




    def timezone_(self):

        localctx = PostgreSQLParser.Timezone_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1152, self.RULE_timezone_)
        try:
            self.state = 8965
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [143]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8959
                self.match(PostgreSQLParser.WITH)
                self.state = 8960
                self.match(PostgreSQLParser.TIME)
                self.state = 8961
                self.match(PostgreSQLParser.ZONE)
                pass
            elif token in [410]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8962
                self.match(PostgreSQLParser.WITHOUT)
                self.state = 8963
                self.match(PostgreSQLParser.TIME)
                self.state = 8964
                self.match(PostgreSQLParser.ZONE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YEAR_P(self):
            return self.getToken(PostgreSQLParser.YEAR_P, 0)

        def MONTH_P(self):
            return self.getToken(PostgreSQLParser.MONTH_P, 0)

        def DAY_P(self):
            return self.getToken(PostgreSQLParser.DAY_P, 0)

        def HOUR_P(self):
            return self.getToken(PostgreSQLParser.HOUR_P, 0)

        def MINUTE_P(self):
            return self.getToken(PostgreSQLParser.MINUTE_P, 0)

        def interval_second(self):
            return self.getTypedRuleContext(PostgreSQLParser.Interval_secondContext,0)


        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_interval_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_" ):
                listener.enterInterval_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_" ):
                listener.exitInterval_(self)




    def interval_(self):

        localctx = PostgreSQLParser.Interval_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1154, self.RULE_interval_)
        try:
            self.state = 8992
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,861,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8967
                self.match(PostgreSQLParser.YEAR_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8968
                self.match(PostgreSQLParser.MONTH_P)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8969
                self.match(PostgreSQLParser.DAY_P)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8970
                self.match(PostgreSQLParser.HOUR_P)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8971
                self.match(PostgreSQLParser.MINUTE_P)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8972
                self.interval_second()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 8973
                self.match(PostgreSQLParser.YEAR_P)
                self.state = 8974
                self.match(PostgreSQLParser.TO)
                self.state = 8975
                self.match(PostgreSQLParser.MONTH_P)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 8976
                self.match(PostgreSQLParser.DAY_P)
                self.state = 8977
                self.match(PostgreSQLParser.TO)
                self.state = 8981
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [256]:
                    self.state = 8978
                    self.match(PostgreSQLParser.HOUR_P)
                    pass
                elif token in [292]:
                    self.state = 8979
                    self.match(PostgreSQLParser.MINUTE_P)
                    pass
                elif token in [357]:
                    self.state = 8980
                    self.interval_second()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 8983
                self.match(PostgreSQLParser.HOUR_P)
                self.state = 8984
                self.match(PostgreSQLParser.TO)
                self.state = 8987
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [292]:
                    self.state = 8985
                    self.match(PostgreSQLParser.MINUTE_P)
                    pass
                elif token in [357]:
                    self.state = 8986
                    self.interval_second()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 8989
                self.match(PostgreSQLParser.MINUTE_P)
                self.state = 8990
                self.match(PostgreSQLParser.TO)
                self.state = 8991
                self.interval_second()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_secondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECOND_P(self):
            return self.getToken(PostgreSQLParser.SECOND_P, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_interval_second

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_second" ):
                listener.enterInterval_second(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_second" ):
                listener.exitInterval_second(self)




    def interval_second(self):

        localctx = PostgreSQLParser.Interval_secondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1156, self.RULE_interval_second)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8994
            self.match(PostgreSQLParser.SECOND_P)
            self.state = 8999
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,862,self._ctx)
            if la_ == 1:
                self.state = 8995
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 8996
                self.iconst()
                self.state = 8997
                self.match(PostgreSQLParser.CLOSE_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON(self):
            return self.getToken(PostgreSQLParser.JSON, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_jsonType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonType" ):
                listener.enterJsonType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonType" ):
                listener.exitJsonType(self)




    def jsonType(self):

        localctx = PostgreSQLParser.JsonTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1158, self.RULE_jsonType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9001
            self.match(PostgreSQLParser.JSON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Escape_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ESCAPE(self):
            return self.getToken(PostgreSQLParser.ESCAPE, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_escape_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEscape_" ):
                listener.enterEscape_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEscape_" ):
                listener.exitEscape_(self)




    def escape_(self):

        localctx = PostgreSQLParser.Escape_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1160, self.RULE_escape_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9003
            self.match(PostgreSQLParser.ESCAPE)
            self.state = 9004
            self.a_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_qual(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_expr_qualContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr" ):
                listener.enterA_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr" ):
                listener.exitA_expr(self)




    def a_expr(self):

        localctx = PostgreSQLParser.A_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1162, self.RULE_a_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9006
            self.a_expr_qual()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_qualContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_lessless(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_expr_lesslessContext,0)


        def qual_op(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qual_opContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_qual

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_qual" ):
                listener.enterA_expr_qual(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_qual" ):
                listener.exitA_expr_qual(self)




    def a_expr_qual(self):

        localctx = PostgreSQLParser.A_expr_qualContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1164, self.RULE_a_expr_qual)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9008
            self.a_expr_lessless()
            self.state = 9012
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,863,self._ctx)
            if la_ == 1:
                self.state = 9009
                if not self.OnlyAcceptableOps():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.OnlyAcceptableOps()")
                self.state = 9010
                self.qual_op()
                pass

            elif la_ == 2:
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_lesslessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_or(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.A_expr_orContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.A_expr_orContext,i)


        def LESS_LESS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.LESS_LESS)
            else:
                return self.getToken(PostgreSQLParser.LESS_LESS, i)

        def GREATER_GREATER(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.GREATER_GREATER)
            else:
                return self.getToken(PostgreSQLParser.GREATER_GREATER, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_lessless

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_lessless" ):
                listener.enterA_expr_lessless(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_lessless" ):
                listener.exitA_expr_lessless(self)




    def a_expr_lessless(self):

        localctx = PostgreSQLParser.A_expr_lesslessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1166, self.RULE_a_expr_lessless)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9014
            self.a_expr_or()
            self.state = 9019
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,864,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9015
                    _la = self._input.LA(1)
                    if not(_la==18 or _la==19):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 9016
                    self.a_expr_or() 
                self.state = 9021
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,864,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_and(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.A_expr_andContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.A_expr_andContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.OR)
            else:
                return self.getToken(PostgreSQLParser.OR, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_or" ):
                listener.enterA_expr_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_or" ):
                listener.exitA_expr_or(self)




    def a_expr_or(self):

        localctx = PostgreSQLParser.A_expr_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1168, self.RULE_a_expr_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9022
            self.a_expr_and()
            self.state = 9027
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,865,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9023
                    self.match(PostgreSQLParser.OR)
                    self.state = 9024
                    self.a_expr_and() 
                self.state = 9029
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,865,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_andContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_between(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.A_expr_betweenContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.A_expr_betweenContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.AND)
            else:
                return self.getToken(PostgreSQLParser.AND, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_and

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_and" ):
                listener.enterA_expr_and(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_and" ):
                listener.exitA_expr_and(self)




    def a_expr_and(self):

        localctx = PostgreSQLParser.A_expr_andContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1170, self.RULE_a_expr_and)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9030
            self.a_expr_between()
            self.state = 9035
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,866,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9031
                    self.match(PostgreSQLParser.AND)
                    self.state = 9032
                    self.a_expr_between() 
                self.state = 9037
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,866,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_betweenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_in(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.A_expr_inContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.A_expr_inContext,i)


        def BETWEEN(self):
            return self.getToken(PostgreSQLParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(PostgreSQLParser.AND, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def SYMMETRIC(self):
            return self.getToken(PostgreSQLParser.SYMMETRIC, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_between

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_between" ):
                listener.enterA_expr_between(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_between" ):
                listener.exitA_expr_between(self)




    def a_expr_between(self):

        localctx = PostgreSQLParser.A_expr_betweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1172, self.RULE_a_expr_between)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9038
            self.a_expr_in()
            self.state = 9050
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,869,self._ctx)
            if la_ == 1:
                self.state = 9040
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==115:
                    self.state = 9039
                    self.match(PostgreSQLParser.NOT)


                self.state = 9042
                self.match(PostgreSQLParser.BETWEEN)
                self.state = 9044
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==129:
                    self.state = 9043
                    self.match(PostgreSQLParser.SYMMETRIC)


                self.state = 9046
                self.a_expr_in()
                self.state = 9047
                self.match(PostgreSQLParser.AND)
                self.state = 9048
                self.a_expr_in()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_inContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_unary_not(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_expr_unary_notContext,0)


        def IN_P(self):
            return self.getToken(PostgreSQLParser.IN_P, 0)

        def in_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.In_exprContext,0)


        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_in

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_in" ):
                listener.enterA_expr_in(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_in" ):
                listener.exitA_expr_in(self)




    def a_expr_in(self):

        localctx = PostgreSQLParser.A_expr_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1174, self.RULE_a_expr_in)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9052
            self.a_expr_unary_not()
            self.state = 9058
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,871,self._ctx)
            if la_ == 1:
                self.state = 9054
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==115:
                    self.state = 9053
                    self.match(PostgreSQLParser.NOT)


                self.state = 9056
                self.match(PostgreSQLParser.IN_P)
                self.state = 9057
                self.in_expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_unary_notContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_isnull(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_expr_isnullContext,0)


        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_unary_not

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_unary_not" ):
                listener.enterA_expr_unary_not(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_unary_not" ):
                listener.exitA_expr_unary_not(self)




    def a_expr_unary_not(self):

        localctx = PostgreSQLParser.A_expr_unary_notContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1176, self.RULE_a_expr_unary_not)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115:
                self.state = 9060
                self.match(PostgreSQLParser.NOT)


            self.state = 9063
            self.a_expr_isnull()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_isnullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_is_not(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_expr_is_notContext,0)


        def ISNULL(self):
            return self.getToken(PostgreSQLParser.ISNULL, 0)

        def NOTNULL(self):
            return self.getToken(PostgreSQLParser.NOTNULL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_isnull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_isnull" ):
                listener.enterA_expr_isnull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_isnull" ):
                listener.exitA_expr_isnull(self)




    def a_expr_isnull(self):

        localctx = PostgreSQLParser.A_expr_isnullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1178, self.RULE_a_expr_isnull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9065
            self.a_expr_is_not()
            self.state = 9067
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,873,self._ctx)
            if la_ == 1:
                self.state = 9066
                _la = self._input.LA(1)
                if not(_la==155 or _la==160):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_is_notContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_compare(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_expr_compareContext,0)


        def IS(self):
            return self.getToken(PostgreSQLParser.IS, 0)

        def NULL_P(self):
            return self.getToken(PostgreSQLParser.NULL_P, 0)

        def TRUE_P(self):
            return self.getToken(PostgreSQLParser.TRUE_P, 0)

        def FALSE_P(self):
            return self.getToken(PostgreSQLParser.FALSE_P, 0)

        def UNKNOWN(self):
            return self.getToken(PostgreSQLParser.UNKNOWN, 0)

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def OF(self):
            return self.getToken(PostgreSQLParser.OF, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def type_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def DOCUMENT_P(self):
            return self.getToken(PostgreSQLParser.DOCUMENT_P, 0)

        def NORMALIZED(self):
            return self.getToken(PostgreSQLParser.NORMALIZED, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def unicode_normal_form(self):
            return self.getTypedRuleContext(PostgreSQLParser.Unicode_normal_formContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_is_not

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_is_not" ):
                listener.enterA_expr_is_not(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_is_not" ):
                listener.exitA_expr_is_not(self)




    def a_expr_is_not(self):

        localctx = PostgreSQLParser.A_expr_is_notContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1180, self.RULE_a_expr_is_not)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9069
            self.a_expr_compare()
            self.state = 9093
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,877,self._ctx)
            if la_ == 1:
                self.state = 9070
                self.match(PostgreSQLParser.IS)
                self.state = 9072
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==115:
                    self.state = 9071
                    self.match(PostgreSQLParser.NOT)


                self.state = 9091
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [116]:
                    self.state = 9074
                    self.match(PostgreSQLParser.NULL_P)
                    pass
                elif token in [134]:
                    self.state = 9075
                    self.match(PostgreSQLParser.TRUE_P)
                    pass
                elif token in [98]:
                    self.state = 9076
                    self.match(PostgreSQLParser.FALSE_P)
                    pass
                elif token in [396]:
                    self.state = 9077
                    self.match(PostgreSQLParser.UNKNOWN)
                    pass
                elif token in [94]:
                    self.state = 9078
                    self.match(PostgreSQLParser.DISTINCT)
                    self.state = 9079
                    self.match(PostgreSQLParser.FROM)
                    self.state = 9080
                    self.a_expr()
                    pass
                elif token in [306]:
                    self.state = 9081
                    self.match(PostgreSQLParser.OF)
                    self.state = 9082
                    self.match(PostgreSQLParser.OPEN_PAREN)
                    self.state = 9083
                    self.type_list()
                    self.state = 9084
                    self.match(PostgreSQLParser.CLOSE_PAREN)
                    pass
                elif token in [226]:
                    self.state = 9086
                    self.match(PostgreSQLParser.DOCUMENT_P)
                    pass
                elif token in [516, 521, 522, 523, 524]:
                    self.state = 9088
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & 15) != 0):
                        self.state = 9087
                        self.unicode_normal_form()


                    self.state = 9090
                    self.match(PostgreSQLParser.NORMALIZED)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_compareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_like(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.A_expr_likeContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.A_expr_likeContext,i)


        def subquery_Op(self):
            return self.getTypedRuleContext(PostgreSQLParser.Subquery_OpContext,0)


        def sub_type(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sub_typeContext,0)


        def LT(self):
            return self.getToken(PostgreSQLParser.LT, 0)

        def GT(self):
            return self.getToken(PostgreSQLParser.GT, 0)

        def EQUAL(self):
            return self.getToken(PostgreSQLParser.EQUAL, 0)

        def LESS_EQUALS(self):
            return self.getToken(PostgreSQLParser.LESS_EQUALS, 0)

        def GREATER_EQUALS(self):
            return self.getToken(PostgreSQLParser.GREATER_EQUALS, 0)

        def NOT_EQUALS(self):
            return self.getToken(PostgreSQLParser.NOT_EQUALS, 0)

        def select_with_parens(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_with_parensContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_compare

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_compare" ):
                listener.enterA_expr_compare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_compare" ):
                listener.exitA_expr_compare(self)




    def a_expr_compare(self):

        localctx = PostgreSQLParser.A_expr_compareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1182, self.RULE_a_expr_compare)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9095
            self.a_expr_like()
            self.state = 9107
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,879,self._ctx)
            if la_ == 1:
                self.state = 9096
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 44237824) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 9097
                self.a_expr_like()

            elif la_ == 2:
                self.state = 9098
                self.subquery_Op()
                self.state = 9099
                self.sub_type()
                self.state = 9105
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,878,self._ctx)
                if la_ == 1:
                    self.state = 9100
                    self.select_with_parens()
                    pass

                elif la_ == 2:
                    self.state = 9101
                    self.match(PostgreSQLParser.OPEN_PAREN)
                    self.state = 9102
                    self.a_expr()
                    self.state = 9103
                    self.match(PostgreSQLParser.CLOSE_PAREN)
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_likeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_qual_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.A_expr_qual_opContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.A_expr_qual_opContext,i)


        def LIKE(self):
            return self.getToken(PostgreSQLParser.LIKE, 0)

        def ILIKE(self):
            return self.getToken(PostgreSQLParser.ILIKE, 0)

        def SIMILAR(self):
            return self.getToken(PostgreSQLParser.SIMILAR, 0)

        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def escape_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Escape_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_like

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_like" ):
                listener.enterA_expr_like(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_like" ):
                listener.exitA_expr_like(self)




    def a_expr_like(self):

        localctx = PostgreSQLParser.A_expr_likeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1184, self.RULE_a_expr_like)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9109
            self.a_expr_qual_op()
            self.state = 9123
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,883,self._ctx)
            if la_ == 1:
                self.state = 9111
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==115:
                    self.state = 9110
                    self.match(PostgreSQLParser.NOT)


                self.state = 9117
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [158]:
                    self.state = 9113
                    self.match(PostgreSQLParser.LIKE)
                    pass
                elif token in [152]:
                    self.state = 9114
                    self.match(PostgreSQLParser.ILIKE)
                    pass
                elif token in [165]:
                    self.state = 9115
                    self.match(PostgreSQLParser.SIMILAR)
                    self.state = 9116
                    self.match(PostgreSQLParser.TO)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 9119
                self.a_expr_qual_op()
                self.state = 9121
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,882,self._ctx)
                if la_ == 1:
                    self.state = 9120
                    self.escape_()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_qual_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_unary_qualop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.A_expr_unary_qualopContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.A_expr_unary_qualopContext,i)


        def qual_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Qual_opContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Qual_opContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_qual_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_qual_op" ):
                listener.enterA_expr_qual_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_qual_op" ):
                listener.exitA_expr_qual_op(self)




    def a_expr_qual_op(self):

        localctx = PostgreSQLParser.A_expr_qual_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1186, self.RULE_a_expr_qual_op)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9125
            self.a_expr_unary_qualop()
            self.state = 9131
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,884,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9126
                    self.qual_op()
                    self.state = 9127
                    self.a_expr_unary_qualop() 
                self.state = 9133
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,884,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_unary_qualopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_add(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_expr_addContext,0)


        def qual_op(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qual_opContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_unary_qualop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_unary_qualop" ):
                listener.enterA_expr_unary_qualop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_unary_qualop" ):
                listener.exitA_expr_unary_qualop(self)




    def a_expr_unary_qualop(self):

        localctx = PostgreSQLParser.A_expr_unary_qualopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1188, self.RULE_a_expr_unary_qualop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9135
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,885,self._ctx)
            if la_ == 1:
                self.state = 9134
                self.qual_op()


            self.state = 9137
            self.a_expr_add()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_addContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_mul(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.A_expr_mulContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.A_expr_mulContext,i)


        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.MINUS)
            else:
                return self.getToken(PostgreSQLParser.MINUS, i)

        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.PLUS)
            else:
                return self.getToken(PostgreSQLParser.PLUS, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_add

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_add" ):
                listener.enterA_expr_add(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_add" ):
                listener.exitA_expr_add(self)




    def a_expr_add(self):

        localctx = PostgreSQLParser.A_expr_addContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1190, self.RULE_a_expr_add)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9139
            self.a_expr_mul()
            self.state = 9144
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,886,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9140
                    _la = self._input.LA(1)
                    if not(_la==12 or _la==13):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 9141
                    self.a_expr_mul() 
                self.state = 9146
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,886,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_mulContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_caret(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.A_expr_caretContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.A_expr_caretContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.STAR)
            else:
                return self.getToken(PostgreSQLParser.STAR, i)

        def SLASH(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.SLASH)
            else:
                return self.getToken(PostgreSQLParser.SLASH, i)

        def PERCENT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.PERCENT)
            else:
                return self.getToken(PostgreSQLParser.PERCENT, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_mul

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_mul" ):
                listener.enterA_expr_mul(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_mul" ):
                listener.exitA_expr_mul(self)




    def a_expr_mul(self):

        localctx = PostgreSQLParser.A_expr_mulContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1192, self.RULE_a_expr_mul)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9147
            self.a_expr_caret()
            self.state = 9152
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,887,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9148
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 134234624) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 9149
                    self.a_expr_caret() 
                self.state = 9154
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,887,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_caretContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_unary_sign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.A_expr_unary_signContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.A_expr_unary_signContext,i)


        def CARET(self):
            return self.getToken(PostgreSQLParser.CARET, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_caret

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_caret" ):
                listener.enterA_expr_caret(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_caret" ):
                listener.exitA_expr_caret(self)




    def a_expr_caret(self):

        localctx = PostgreSQLParser.A_expr_caretContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1194, self.RULE_a_expr_caret)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9155
            self.a_expr_unary_sign()
            self.state = 9158
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,888,self._ctx)
            if la_ == 1:
                self.state = 9156
                self.match(PostgreSQLParser.CARET)
                self.state = 9157
                self.a_expr_unary_sign()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_unary_signContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_at_time_zone(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_expr_at_time_zoneContext,0)


        def MINUS(self):
            return self.getToken(PostgreSQLParser.MINUS, 0)

        def PLUS(self):
            return self.getToken(PostgreSQLParser.PLUS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_unary_sign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_unary_sign" ):
                listener.enterA_expr_unary_sign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_unary_sign" ):
                listener.exitA_expr_unary_sign(self)




    def a_expr_unary_sign(self):

        localctx = PostgreSQLParser.A_expr_unary_signContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1196, self.RULE_a_expr_unary_sign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12 or _la==13:
                self.state = 9160
                _la = self._input.LA(1)
                if not(_la==12 or _la==13):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 9163
            self.a_expr_at_time_zone()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_at_time_zoneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_collate(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_expr_collateContext,0)


        def AT(self):
            return self.getToken(PostgreSQLParser.AT, 0)

        def TIME(self):
            return self.getToken(PostgreSQLParser.TIME, 0)

        def ZONE(self):
            return self.getToken(PostgreSQLParser.ZONE, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_at_time_zone

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_at_time_zone" ):
                listener.enterA_expr_at_time_zone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_at_time_zone" ):
                listener.exitA_expr_at_time_zone(self)




    def a_expr_at_time_zone(self):

        localctx = PostgreSQLParser.A_expr_at_time_zoneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1198, self.RULE_a_expr_at_time_zone)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9165
            self.a_expr_collate()
            self.state = 9170
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,890,self._ctx)
            if la_ == 1:
                self.state = 9166
                self.match(PostgreSQLParser.AT)
                self.state = 9167
                self.match(PostgreSQLParser.TIME)
                self.state = 9168
                self.match(PostgreSQLParser.ZONE)
                self.state = 9169
                self.a_expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_collateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr_typecast(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_expr_typecastContext,0)


        def COLLATE(self):
            return self.getToken(PostgreSQLParser.COLLATE, 0)

        def any_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_collate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_collate" ):
                listener.enterA_expr_collate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_collate" ):
                listener.exitA_expr_collate(self)




    def a_expr_collate(self):

        localctx = PostgreSQLParser.A_expr_collateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1200, self.RULE_a_expr_collate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9172
            self.a_expr_typecast()
            self.state = 9175
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,891,self._ctx)
            if la_ == 1:
                self.state = 9173
                self.match(PostgreSQLParser.COLLATE)
                self.state = 9174
                self.any_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class A_expr_typecastContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def c_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.C_exprContext,0)


        def TYPECAST(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.TYPECAST)
            else:
                return self.getToken(PostgreSQLParser.TYPECAST, i)

        def typename(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TypenameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_a_expr_typecast

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_expr_typecast" ):
                listener.enterA_expr_typecast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_expr_typecast" ):
                listener.exitA_expr_typecast(self)




    def a_expr_typecast(self):

        localctx = PostgreSQLParser.A_expr_typecastContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1202, self.RULE_a_expr_typecast)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9177
            self.c_expr()
            self.state = 9182
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,892,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9178
                    self.match(PostgreSQLParser.TYPECAST)
                    self.state = 9179
                    self.typename() 
                self.state = 9184
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,892,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class B_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def c_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.C_exprContext,0)


        def b_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.B_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.B_exprContext,i)


        def PLUS(self):
            return self.getToken(PostgreSQLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(PostgreSQLParser.MINUS, 0)

        def qual_op(self):
            return self.getTypedRuleContext(PostgreSQLParser.Qual_opContext,0)


        def CARET(self):
            return self.getToken(PostgreSQLParser.CARET, 0)

        def STAR(self):
            return self.getToken(PostgreSQLParser.STAR, 0)

        def SLASH(self):
            return self.getToken(PostgreSQLParser.SLASH, 0)

        def PERCENT(self):
            return self.getToken(PostgreSQLParser.PERCENT, 0)

        def LT(self):
            return self.getToken(PostgreSQLParser.LT, 0)

        def GT(self):
            return self.getToken(PostgreSQLParser.GT, 0)

        def EQUAL(self):
            return self.getToken(PostgreSQLParser.EQUAL, 0)

        def LESS_EQUALS(self):
            return self.getToken(PostgreSQLParser.LESS_EQUALS, 0)

        def GREATER_EQUALS(self):
            return self.getToken(PostgreSQLParser.GREATER_EQUALS, 0)

        def NOT_EQUALS(self):
            return self.getToken(PostgreSQLParser.NOT_EQUALS, 0)

        def TYPECAST(self):
            return self.getToken(PostgreSQLParser.TYPECAST, 0)

        def typename(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,0)


        def IS(self):
            return self.getToken(PostgreSQLParser.IS, 0)

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def OF(self):
            return self.getToken(PostgreSQLParser.OF, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def type_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def DOCUMENT_P(self):
            return self.getToken(PostgreSQLParser.DOCUMENT_P, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_b_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterB_expr" ):
                listener.enterB_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitB_expr" ):
                listener.exitB_expr(self)



    def b_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PostgreSQLParser.B_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1204
        self.enterRecursionRule(localctx, 1204, self.RULE_b_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9192
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,893,self._ctx)
            if la_ == 1:
                self.state = 9186
                self.c_expr()
                pass

            elif la_ == 2:
                self.state = 9187
                _la = self._input.LA(1)
                if not(_la==12 or _la==13):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 9188
                self.b_expr(9)
                pass

            elif la_ == 3:
                self.state = 9189
                self.qual_op()
                self.state = 9190
                self.b_expr(3)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 9233
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,897,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 9231
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,896,self._ctx)
                    if la_ == 1:
                        localctx = PostgreSQLParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 9194
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 9195
                        self.match(PostgreSQLParser.CARET)
                        self.state = 9196
                        self.b_expr(9)
                        pass

                    elif la_ == 2:
                        localctx = PostgreSQLParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 9197
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 9198
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 134234624) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 9199
                        self.b_expr(8)
                        pass

                    elif la_ == 3:
                        localctx = PostgreSQLParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 9200
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 9201
                        _la = self._input.LA(1)
                        if not(_la==12 or _la==13):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 9202
                        self.b_expr(7)
                        pass

                    elif la_ == 4:
                        localctx = PostgreSQLParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 9203
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 9204
                        self.qual_op()
                        self.state = 9205
                        self.b_expr(6)
                        pass

                    elif la_ == 5:
                        localctx = PostgreSQLParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 9207
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 9208
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 44237824) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 9209
                        self.b_expr(5)
                        pass

                    elif la_ == 6:
                        localctx = PostgreSQLParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 9210
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 9211
                        self.match(PostgreSQLParser.TYPECAST)
                        self.state = 9212
                        self.typename()
                        pass

                    elif la_ == 7:
                        localctx = PostgreSQLParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 9213
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 9214
                        self.qual_op()
                        pass

                    elif la_ == 8:
                        localctx = PostgreSQLParser.B_exprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_b_expr)
                        self.state = 9215
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 9216
                        self.match(PostgreSQLParser.IS)
                        self.state = 9218
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==115:
                            self.state = 9217
                            self.match(PostgreSQLParser.NOT)


                        self.state = 9229
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [94]:
                            self.state = 9220
                            self.match(PostgreSQLParser.DISTINCT)
                            self.state = 9221
                            self.match(PostgreSQLParser.FROM)
                            self.state = 9222
                            self.b_expr(0)
                            pass
                        elif token in [306]:
                            self.state = 9223
                            self.match(PostgreSQLParser.OF)
                            self.state = 9224
                            self.match(PostgreSQLParser.OPEN_PAREN)
                            self.state = 9225
                            self.type_list()
                            self.state = 9226
                            self.match(PostgreSQLParser.CLOSE_PAREN)
                            pass
                        elif token in [226]:
                            self.state = 9228
                            self.match(PostgreSQLParser.DOCUMENT_P)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

             
                self.state = 9235
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,897,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class C_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_c_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class C_expr_existsContext(C_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PostgreSQLParser.C_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)
        def select_with_parens(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_with_parensContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterC_expr_exists" ):
                listener.enterC_expr_exists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitC_expr_exists" ):
                listener.exitC_expr_exists(self)


    class C_expr_caseContext(C_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PostgreSQLParser.C_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def case_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Case_exprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterC_expr_case" ):
                listener.enterC_expr_case(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitC_expr_case" ):
                listener.exitC_expr_case(self)


    class C_expr_exprContext(C_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PostgreSQLParser.C_exprContext
            super().__init__(parser)
            self.a_expr_in_parens = None # A_exprContext
            self.copyFrom(ctx)

        def ARRAY(self):
            return self.getToken(PostgreSQLParser.ARRAY, 0)
        def select_with_parens(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_with_parensContext,0)

        def array_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Array_exprContext,0)

        def PARAM(self):
            return self.getToken(PostgreSQLParser.PARAM, 0)
        def opt_indirection(self):
            return self.getTypedRuleContext(PostgreSQLParser.Opt_indirectionContext,0)

        def GROUPING(self):
            return self.getToken(PostgreSQLParser.GROUPING, 0)
        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)
        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)
        def UNIQUE(self):
            return self.getToken(PostgreSQLParser.UNIQUE, 0)
        def columnref(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColumnrefContext,0)

        def aexprconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.AexprconstContext,0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)

        def func_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_exprContext,0)

        def indirection(self):
            return self.getTypedRuleContext(PostgreSQLParser.IndirectionContext,0)

        def explicit_row(self):
            return self.getTypedRuleContext(PostgreSQLParser.Explicit_rowContext,0)

        def implicit_row(self):
            return self.getTypedRuleContext(PostgreSQLParser.Implicit_rowContext,0)

        def row(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.RowContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.RowContext,i)

        def OVERLAPS(self):
            return self.getToken(PostgreSQLParser.OVERLAPS, 0)
        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterC_expr_expr" ):
                listener.enterC_expr_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitC_expr_expr" ):
                listener.exitC_expr_expr(self)



    def c_expr(self):

        localctx = PostgreSQLParser.C_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1206, self.RULE_c_expr)
        try:
            self.state = 9272
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,900,self._ctx)
            if la_ == 1:
                localctx = PostgreSQLParser.C_expr_existsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 9236
                self.match(PostgreSQLParser.EXISTS)
                self.state = 9237
                self.select_with_parens()
                pass

            elif la_ == 2:
                localctx = PostgreSQLParser.C_expr_exprContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 9238
                self.match(PostgreSQLParser.ARRAY)
                self.state = 9241
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [2]:
                    self.state = 9239
                    self.select_with_parens()
                    pass
                elif token in [4]:
                    self.state = 9240
                    self.array_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                localctx = PostgreSQLParser.C_expr_exprContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 9243
                self.match(PostgreSQLParser.PARAM)
                self.state = 9244
                self.opt_indirection()
                pass

            elif la_ == 4:
                localctx = PostgreSQLParser.C_expr_exprContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 9245
                self.match(PostgreSQLParser.GROUPING)
                self.state = 9246
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9247
                self.expr_list()
                self.state = 9248
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass

            elif la_ == 5:
                localctx = PostgreSQLParser.C_expr_exprContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 9250
                self.match(PostgreSQLParser.UNIQUE)
                self.state = 9251
                self.select_with_parens()
                pass

            elif la_ == 6:
                localctx = PostgreSQLParser.C_expr_exprContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 9252
                self.columnref()
                pass

            elif la_ == 7:
                localctx = PostgreSQLParser.C_expr_exprContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 9253
                self.aexprconst()
                pass

            elif la_ == 8:
                localctx = PostgreSQLParser.C_expr_exprContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 9254
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9255
                localctx.a_expr_in_parens = self.a_expr()
                self.state = 9256
                self.match(PostgreSQLParser.CLOSE_PAREN)
                self.state = 9257
                self.opt_indirection()
                pass

            elif la_ == 9:
                localctx = PostgreSQLParser.C_expr_caseContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 9259
                self.case_expr()
                pass

            elif la_ == 10:
                localctx = PostgreSQLParser.C_expr_exprContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 9260
                self.func_expr()
                pass

            elif la_ == 11:
                localctx = PostgreSQLParser.C_expr_exprContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 9261
                self.select_with_parens()
                self.state = 9263
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,899,self._ctx)
                if la_ == 1:
                    self.state = 9262
                    self.indirection()


                pass

            elif la_ == 12:
                localctx = PostgreSQLParser.C_expr_exprContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 9265
                self.explicit_row()
                pass

            elif la_ == 13:
                localctx = PostgreSQLParser.C_expr_exprContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 9266
                self.implicit_row()
                pass

            elif la_ == 14:
                localctx = PostgreSQLParser.C_expr_exprContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 9267
                self.row()
                self.state = 9268
                self.match(PostgreSQLParser.OVERLAPS)
                self.state = 9269
                self.row()
                pass

            elif la_ == 15:
                localctx = PostgreSQLParser.C_expr_exprContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 9271
                self.match(PostgreSQLParser.DEFAULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlsqlvariablenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLSQLVARIABLENAME(self):
            return self.getToken(PostgreSQLParser.PLSQLVARIABLENAME, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_plsqlvariablename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlsqlvariablename" ):
                listener.enterPlsqlvariablename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlsqlvariablename" ):
                listener.exitPlsqlvariablename(self)




    def plsqlvariablename(self):

        localctx = PostgreSQLParser.PlsqlvariablenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1208, self.RULE_plsqlvariablename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9274
            self.match(PostgreSQLParser.PLSQLVARIABLENAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_applicationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_nameContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def func_arg_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_arg_listContext,0)


        def VARIADIC(self):
            return self.getToken(PostgreSQLParser.VARIADIC, 0)

        def func_arg_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_arg_exprContext,0)


        def STAR(self):
            return self.getToken(PostgreSQLParser.STAR, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def sort_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sort_clause_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_application

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_application" ):
                listener.enterFunc_application(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_application" ):
                listener.exitFunc_application(self)




    def func_application(self):

        localctx = PostgreSQLParser.Func_applicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1210, self.RULE_func_application)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9276
            self.func_name()
            self.state = 9277
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 9299
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 12, 13, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 73, 78, 79, 85, 86, 87, 88, 89, 90, 91, 98, 113, 114, 115, 116, 127, 134, 136, 137, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 563, 565, 567, 568, 572, 576, 577, 578, 579, 581, 582, 590]:
                self.state = 9278
                self.func_arg_list()
                self.state = 9282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==6:
                    self.state = 9279
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 9280
                    self.match(PostgreSQLParser.VARIADIC)
                    self.state = 9281
                    self.func_arg_expr()


                self.state = 9285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==121:
                    self.state = 9284
                    self.sort_clause_()


                pass
            elif token in [139]:
                self.state = 9287
                self.match(PostgreSQLParser.VARIADIC)
                self.state = 9288
                self.func_arg_expr()
                self.state = 9290
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==121:
                    self.state = 9289
                    self.sort_clause_()


                pass
            elif token in [68, 94]:
                self.state = 9292
                _la = self._input.LA(1)
                if not(_la==68 or _la==94):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 9293
                self.func_arg_list()
                self.state = 9295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==121:
                    self.state = 9294
                    self.sort_clause_()


                pass
            elif token in [9]:
                self.state = 9297
                self.match(PostgreSQLParser.STAR)
                pass
            elif token in [3]:
                pass
            else:
                raise NoViableAltException(self)

            self.state = 9301
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_application(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_applicationContext,0)


        def within_group_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Within_group_clauseContext,0)


        def filter_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Filter_clauseContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Over_clauseContext,0)


        def func_expr_common_subexpr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_expr_common_subexprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_expr" ):
                listener.enterFunc_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_expr" ):
                listener.exitFunc_expr(self)




    def func_expr(self):

        localctx = PostgreSQLParser.Func_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1212, self.RULE_func_expr)
        try:
            self.state = 9314
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,909,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9303
                self.func_application()
                self.state = 9305
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,906,self._ctx)
                if la_ == 1:
                    self.state = 9304
                    self.within_group_clause()


                self.state = 9308
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,907,self._ctx)
                if la_ == 1:
                    self.state = 9307
                    self.filter_clause()


                self.state = 9311
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,908,self._ctx)
                if la_ == 1:
                    self.state = 9310
                    self.over_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9313
                self.func_expr_common_subexpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_expr_windowlessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_application(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_applicationContext,0)


        def func_expr_common_subexpr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_expr_common_subexprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_expr_windowless

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_expr_windowless" ):
                listener.enterFunc_expr_windowless(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_expr_windowless" ):
                listener.exitFunc_expr_windowless(self)




    def func_expr_windowless(self):

        localctx = PostgreSQLParser.Func_expr_windowlessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1214, self.RULE_func_expr_windowless)
        try:
            self.state = 9318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,910,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9316
                self.func_application()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9317
                self.func_expr_common_subexpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_expr_common_subexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLLATION(self):
            return self.getToken(PostgreSQLParser.COLLATION, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def a_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.A_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def CURRENT_DATE(self):
            return self.getToken(PostgreSQLParser.CURRENT_DATE, 0)

        def CURRENT_TIME(self):
            return self.getToken(PostgreSQLParser.CURRENT_TIME, 0)

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def CURRENT_TIMESTAMP(self):
            return self.getToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0)

        def LOCALTIME(self):
            return self.getToken(PostgreSQLParser.LOCALTIME, 0)

        def LOCALTIMESTAMP(self):
            return self.getToken(PostgreSQLParser.LOCALTIMESTAMP, 0)

        def CURRENT_ROLE(self):
            return self.getToken(PostgreSQLParser.CURRENT_ROLE, 0)

        def CURRENT_USER(self):
            return self.getToken(PostgreSQLParser.CURRENT_USER, 0)

        def SESSION_USER(self):
            return self.getToken(PostgreSQLParser.SESSION_USER, 0)

        def SYSTEM_USER(self):
            return self.getToken(PostgreSQLParser.SYSTEM_USER, 0)

        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def CURRENT_CATALOG(self):
            return self.getToken(PostgreSQLParser.CURRENT_CATALOG, 0)

        def CURRENT_SCHEMA(self):
            return self.getToken(PostgreSQLParser.CURRENT_SCHEMA, 0)

        def CAST(self):
            return self.getToken(PostgreSQLParser.CAST, 0)

        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def typename(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,0)


        def EXTRACT(self):
            return self.getToken(PostgreSQLParser.EXTRACT, 0)

        def extract_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Extract_listContext,0)


        def NORMALIZE(self):
            return self.getToken(PostgreSQLParser.NORMALIZE, 0)

        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def unicode_normal_form(self):
            return self.getTypedRuleContext(PostgreSQLParser.Unicode_normal_formContext,0)


        def OVERLAY(self):
            return self.getToken(PostgreSQLParser.OVERLAY, 0)

        def overlay_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Overlay_listContext,0)


        def func_arg_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_arg_listContext,0)


        def POSITION(self):
            return self.getToken(PostgreSQLParser.POSITION, 0)

        def position_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Position_listContext,0)


        def SUBSTRING(self):
            return self.getToken(PostgreSQLParser.SUBSTRING, 0)

        def substr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Substr_listContext,0)


        def TREAT(self):
            return self.getToken(PostgreSQLParser.TREAT, 0)

        def TRIM(self):
            return self.getToken(PostgreSQLParser.TRIM, 0)

        def trim_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Trim_listContext,0)


        def BOTH(self):
            return self.getToken(PostgreSQLParser.BOTH, 0)

        def LEADING(self):
            return self.getToken(PostgreSQLParser.LEADING, 0)

        def TRAILING(self):
            return self.getToken(PostgreSQLParser.TRAILING, 0)

        def NULLIF(self):
            return self.getToken(PostgreSQLParser.NULLIF, 0)

        def COALESCE(self):
            return self.getToken(PostgreSQLParser.COALESCE, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)


        def GREATEST(self):
            return self.getToken(PostgreSQLParser.GREATEST, 0)

        def LEAST(self):
            return self.getToken(PostgreSQLParser.LEAST, 0)

        def XMLCONCAT(self):
            return self.getToken(PostgreSQLParser.XMLCONCAT, 0)

        def XMLELEMENT(self):
            return self.getToken(PostgreSQLParser.XMLELEMENT, 0)

        def NAME_P(self):
            return self.getToken(PostgreSQLParser.NAME_P, 0)

        def colLabel(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColLabelContext,0)


        def xml_attributes(self):
            return self.getTypedRuleContext(PostgreSQLParser.Xml_attributesContext,0)


        def XMLEXISTS(self):
            return self.getToken(PostgreSQLParser.XMLEXISTS, 0)

        def c_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.C_exprContext,0)


        def xmlexists_argument(self):
            return self.getTypedRuleContext(PostgreSQLParser.Xmlexists_argumentContext,0)


        def XMLFOREST(self):
            return self.getToken(PostgreSQLParser.XMLFOREST, 0)

        def xml_attribute_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Xml_attribute_listContext,0)


        def XMLPARSE(self):
            return self.getToken(PostgreSQLParser.XMLPARSE, 0)

        def document_or_content(self):
            return self.getTypedRuleContext(PostgreSQLParser.Document_or_contentContext,0)


        def xml_whitespace_option(self):
            return self.getTypedRuleContext(PostgreSQLParser.Xml_whitespace_optionContext,0)


        def XMLPI(self):
            return self.getToken(PostgreSQLParser.XMLPI, 0)

        def XMLROOT(self):
            return self.getToken(PostgreSQLParser.XMLROOT, 0)

        def XML_P(self):
            return self.getToken(PostgreSQLParser.XML_P, 0)

        def xml_root_version(self):
            return self.getTypedRuleContext(PostgreSQLParser.Xml_root_versionContext,0)


        def xml_root_standalone_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Xml_root_standalone_Context,0)


        def XMLSERIALIZE(self):
            return self.getToken(PostgreSQLParser.XMLSERIALIZE, 0)

        def simpletypename(self):
            return self.getTypedRuleContext(PostgreSQLParser.SimpletypenameContext,0)


        def JSON_OBJECT(self):
            return self.getToken(PostgreSQLParser.JSON_OBJECT, 0)

        def json_name_and_value_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_name_and_value_listContext,0)


        def json_object_constructor_null_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_object_constructor_null_clauseContext,0)


        def json_key_uniqueness_constraint(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_key_uniqueness_constraintContext,0)


        def json_returning_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_returning_clauseContext,0)


        def JSON_ARRAY(self):
            return self.getToken(PostgreSQLParser.JSON_ARRAY, 0)

        def json_value_expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_value_expr_listContext,0)


        def select_no_parens(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_no_parensContext,0)


        def json_array_constructor_null_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_array_constructor_null_clauseContext,0)


        def json_format_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_format_clauseContext,0)


        def JSON(self):
            return self.getToken(PostgreSQLParser.JSON, 0)

        def json_value_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_value_exprContext,0)


        def JSON_SCALAR(self):
            return self.getToken(PostgreSQLParser.JSON_SCALAR, 0)

        def JSON_SERIALIZE(self):
            return self.getToken(PostgreSQLParser.JSON_SERIALIZE, 0)

        def MERGE_ACTION(self):
            return self.getToken(PostgreSQLParser.MERGE_ACTION, 0)

        def JSON_QUERY(self):
            return self.getToken(PostgreSQLParser.JSON_QUERY, 0)

        def json_wrapper_behavior(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_wrapper_behaviorContext,0)


        def json_passing_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_passing_clauseContext,0)


        def json_quotes_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_quotes_clauseContext,0)


        def json_behavior_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_behavior_clauseContext,0)


        def JSON_EXISTS(self):
            return self.getToken(PostgreSQLParser.JSON_EXISTS, 0)

        def json_on_error_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_on_error_clauseContext,0)


        def JSON_VALUE(self):
            return self.getToken(PostgreSQLParser.JSON_VALUE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_expr_common_subexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_expr_common_subexpr" ):
                listener.enterFunc_expr_common_subexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_expr_common_subexpr" ):
                listener.exitFunc_expr_common_subexpr(self)




    def func_expr_common_subexpr(self):

        localctx = PostgreSQLParser.Func_expr_common_subexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1216, self.RULE_func_expr_common_subexpr)
        self._la = 0 # Token type
        try:
            self.state = 9626
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [146]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9320
                self.match(PostgreSQLParser.COLLATION)
                self.state = 9321
                self.match(PostgreSQLParser.FOR)
                self.state = 9322
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9323
                self.a_expr()
                self.state = 9324
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [86]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9326
                self.match(PostgreSQLParser.CURRENT_DATE)
                pass
            elif token in [88]:
                self.enterOuterAlt(localctx, 3)
                self.state = 9327
                self.match(PostgreSQLParser.CURRENT_TIME)
                self.state = 9332
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,911,self._ctx)
                if la_ == 1:
                    self.state = 9328
                    self.match(PostgreSQLParser.OPEN_PAREN)
                    self.state = 9329
                    self.iconst()
                    self.state = 9330
                    self.match(PostgreSQLParser.CLOSE_PAREN)


                pass
            elif token in [89]:
                self.enterOuterAlt(localctx, 4)
                self.state = 9334
                self.match(PostgreSQLParser.CURRENT_TIMESTAMP)
                self.state = 9339
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,912,self._ctx)
                if la_ == 1:
                    self.state = 9335
                    self.match(PostgreSQLParser.OPEN_PAREN)
                    self.state = 9336
                    self.iconst()
                    self.state = 9337
                    self.match(PostgreSQLParser.CLOSE_PAREN)


                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 5)
                self.state = 9341
                self.match(PostgreSQLParser.LOCALTIME)
                self.state = 9346
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,913,self._ctx)
                if la_ == 1:
                    self.state = 9342
                    self.match(PostgreSQLParser.OPEN_PAREN)
                    self.state = 9343
                    self.iconst()
                    self.state = 9344
                    self.match(PostgreSQLParser.CLOSE_PAREN)


                pass
            elif token in [114]:
                self.enterOuterAlt(localctx, 6)
                self.state = 9348
                self.match(PostgreSQLParser.LOCALTIMESTAMP)
                self.state = 9353
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,914,self._ctx)
                if la_ == 1:
                    self.state = 9349
                    self.match(PostgreSQLParser.OPEN_PAREN)
                    self.state = 9350
                    self.iconst()
                    self.state = 9351
                    self.match(PostgreSQLParser.CLOSE_PAREN)


                pass
            elif token in [87]:
                self.enterOuterAlt(localctx, 7)
                self.state = 9355
                self.match(PostgreSQLParser.CURRENT_ROLE)
                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 8)
                self.state = 9356
                self.match(PostgreSQLParser.CURRENT_USER)
                pass
            elif token in [127]:
                self.enterOuterAlt(localctx, 9)
                self.state = 9357
                self.match(PostgreSQLParser.SESSION_USER)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 10)
                self.state = 9358
                self.match(PostgreSQLParser.SYSTEM_USER)
                pass
            elif token in [137]:
                self.enterOuterAlt(localctx, 11)
                self.state = 9359
                self.match(PostgreSQLParser.USER)
                pass
            elif token in [85]:
                self.enterOuterAlt(localctx, 12)
                self.state = 9360
                self.match(PostgreSQLParser.CURRENT_CATALOG)
                pass
            elif token in [149]:
                self.enterOuterAlt(localctx, 13)
                self.state = 9361
                self.match(PostgreSQLParser.CURRENT_SCHEMA)
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 14)
                self.state = 9362
                self.match(PostgreSQLParser.CAST)
                self.state = 9363
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9364
                self.a_expr()
                self.state = 9365
                self.match(PostgreSQLParser.AS)
                self.state = 9366
                self.typename()
                self.state = 9367
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [428]:
                self.enterOuterAlt(localctx, 15)
                self.state = 9369
                self.match(PostgreSQLParser.EXTRACT)
                self.state = 9370
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9372
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214 or _la==256 or _la==292 or _la==295 or _la==357 or _la==415 or ((((_la - 554)) & ~0x3f) == 0 and ((1 << (_la - 554)) & 68987922979) != 0):
                    self.state = 9371
                    self.extract_list()


                self.state = 9374
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [527]:
                self.enterOuterAlt(localctx, 16)
                self.state = 9375
                self.match(PostgreSQLParser.NORMALIZE)
                self.state = 9376
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9377
                self.a_expr()
                self.state = 9380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==6:
                    self.state = 9378
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 9379
                    self.unicode_normal_form()


                self.state = 9382
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [441]:
                self.enterOuterAlt(localctx, 17)
                self.state = 9384
                self.match(PostgreSQLParser.OVERLAY)
                self.state = 9385
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9390
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,918,self._ctx)
                if la_ == 1:
                    self.state = 9386
                    self.overlay_list()
                    pass

                elif la_ == 2:
                    self.state = 9388
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -268423164) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9214927770107198969) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & -1011) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & -1) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & -1) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & -129) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & -1) != 0) or ((((_la - 454)) & ~0x3f) == 0 and ((1 << (_la - 454)) & -2305843284091601405) != 0) or ((((_la - 518)) & ~0x3f) == 0 and ((1 << (_la - 518)) & -4880034784790705153) != 0) or _la==582 or _la==590:
                        self.state = 9387
                        self.func_arg_list()


                    pass


                self.state = 9392
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [442]:
                self.enterOuterAlt(localctx, 18)
                self.state = 9393
                self.match(PostgreSQLParser.POSITION)
                self.state = 9394
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -268423164) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9217179569920884217) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & -1011) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & -1) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & -1) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & -129) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & -1) != 0) or ((((_la - 454)) & ~0x3f) == 0 and ((1 << (_la - 454)) & -2305843284091601405) != 0) or ((((_la - 518)) & ~0x3f) == 0 and ((1 << (_la - 518)) & -4880034784790705153) != 0) or _la==582 or _la==590:
                    self.state = 9395
                    self.position_list()


                self.state = 9398
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [448]:
                self.enterOuterAlt(localctx, 19)
                self.state = 9399
                self.match(PostgreSQLParser.SUBSTRING)
                self.state = 9400
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9405
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,921,self._ctx)
                if la_ == 1:
                    self.state = 9401
                    self.substr_list()
                    pass

                elif la_ == 2:
                    self.state = 9403
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -268423164) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9214927770107198969) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & -1011) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & -1) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & -1) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & -129) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & -1) != 0) or ((((_la - 454)) & ~0x3f) == 0 and ((1 << (_la - 454)) & -2305843284091601405) != 0) or ((((_la - 518)) & ~0x3f) == 0 and ((1 << (_la - 518)) & -4880034784790705153) != 0) or _la==582 or _la==590:
                        self.state = 9402
                        self.func_arg_list()


                    pass


                self.state = 9407
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [451]:
                self.enterOuterAlt(localctx, 20)
                self.state = 9408
                self.match(PostgreSQLParser.TREAT)
                self.state = 9409
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9410
                self.a_expr()
                self.state = 9411
                self.match(PostgreSQLParser.AS)
                self.state = 9412
                self.typename()
                self.state = 9413
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [452]:
                self.enterOuterAlt(localctx, 21)
                self.state = 9415
                self.match(PostgreSQLParser.TRIM)
                self.state = 9416
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9418
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & 72057611217797121) != 0):
                    self.state = 9417
                    _la = self._input.LA(1)
                    if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & 72057611217797121) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 9420
                self.trim_list()
                self.state = 9421
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [439]:
                self.enterOuterAlt(localctx, 22)
                self.state = 9423
                self.match(PostgreSQLParser.NULLIF)
                self.state = 9424
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9425
                self.a_expr()
                self.state = 9426
                self.match(PostgreSQLParser.COMMA)
                self.state = 9427
                self.a_expr()
                self.state = 9428
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [424]:
                self.enterOuterAlt(localctx, 23)
                self.state = 9430
                self.match(PostgreSQLParser.COALESCE)
                self.state = 9431
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9432
                self.expr_list()
                self.state = 9433
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [430]:
                self.enterOuterAlt(localctx, 24)
                self.state = 9435
                self.match(PostgreSQLParser.GREATEST)
                self.state = 9436
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9437
                self.expr_list()
                self.state = 9438
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [435]:
                self.enterOuterAlt(localctx, 25)
                self.state = 9440
                self.match(PostgreSQLParser.LEAST)
                self.state = 9441
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9442
                self.expr_list()
                self.state = 9443
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [463]:
                self.enterOuterAlt(localctx, 26)
                self.state = 9445
                self.match(PostgreSQLParser.XMLCONCAT)
                self.state = 9446
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9447
                self.expr_list()
                self.state = 9448
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [464]:
                self.enterOuterAlt(localctx, 27)
                self.state = 9450
                self.match(PostgreSQLParser.XMLELEMENT)
                self.state = 9451
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9452
                self.match(PostgreSQLParser.NAME_P)
                self.state = 9453
                self.colLabel()
                self.state = 9459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==6:
                    self.state = 9454
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 9457
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,923,self._ctx)
                    if la_ == 1:
                        self.state = 9455
                        self.xml_attributes()
                        pass

                    elif la_ == 2:
                        self.state = 9456
                        self.expr_list()
                        pass




                self.state = 9461
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [465]:
                self.enterOuterAlt(localctx, 28)
                self.state = 9463
                self.match(PostgreSQLParser.XMLEXISTS)
                self.state = 9464
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9465
                self.c_expr()
                self.state = 9466
                self.xmlexists_argument()
                self.state = 9467
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [466]:
                self.enterOuterAlt(localctx, 29)
                self.state = 9469
                self.match(PostgreSQLParser.XMLFOREST)
                self.state = 9470
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9471
                self.xml_attribute_list()
                self.state = 9472
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [467]:
                self.enterOuterAlt(localctx, 30)
                self.state = 9474
                self.match(PostgreSQLParser.XMLPARSE)
                self.state = 9475
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9476
                self.document_or_content()
                self.state = 9477
                self.a_expr()
                self.state = 9479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==323 or _la==378:
                    self.state = 9478
                    self.xml_whitespace_option()


                self.state = 9481
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [468]:
                self.enterOuterAlt(localctx, 31)
                self.state = 9483
                self.match(PostgreSQLParser.XMLPI)
                self.state = 9484
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9485
                self.match(PostgreSQLParser.NAME_P)
                self.state = 9486
                self.colLabel()
                self.state = 9489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==6:
                    self.state = 9487
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 9488
                    self.a_expr()


                self.state = 9491
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [469]:
                self.enterOuterAlt(localctx, 32)
                self.state = 9493
                self.match(PostgreSQLParser.XMLROOT)
                self.state = 9494
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9495
                self.match(PostgreSQLParser.XML_P)
                self.state = 9496
                self.a_expr()
                self.state = 9497
                self.match(PostgreSQLParser.COMMA)
                self.state = 9498
                self.xml_root_version()
                self.state = 9500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==6:
                    self.state = 9499
                    self.xml_root_standalone_()


                self.state = 9502
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [470]:
                self.enterOuterAlt(localctx, 33)
                self.state = 9504
                self.match(PostgreSQLParser.XMLSERIALIZE)
                self.state = 9505
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9506
                self.document_or_content()
                self.state = 9507
                self.a_expr()
                self.state = 9508
                self.match(PostgreSQLParser.AS)
                self.state = 9509
                self.simpletypename()
                self.state = 9510
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 34)
                self.state = 9512
                self.match(PostgreSQLParser.JSON_OBJECT)
                self.state = 9513
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9528
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,932,self._ctx)
                if la_ == 1:
                    self.state = 9514
                    self.func_arg_list()
                    pass

                elif la_ == 2:
                    self.state = 9515
                    self.json_name_and_value_list(0)
                    self.state = 9517
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==43 or _la==116:
                        self.state = 9516
                        self.json_object_constructor_null_clause()


                    self.state = 9520
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==143 or _la==410:
                        self.state = 9519
                        self.json_key_uniqueness_constraint()


                    self.state = 9523
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 9522
                        self.json_returning_clause()


                    pass

                elif la_ == 3:
                    self.state = 9526
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 9525
                        self.json_returning_clause()


                    pass


                self.state = 9530
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 35)
                self.state = 9531
                self.match(PostgreSQLParser.JSON_ARRAY)
                self.state = 9532
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9550
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,938,self._ctx)
                if la_ == 1:
                    self.state = 9533
                    self.json_value_expr_list(0)
                    self.state = 9535
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==43 or _la==116:
                        self.state = 9534
                        self.json_array_constructor_null_clause()


                    self.state = 9538
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 9537
                        self.json_returning_clause()


                    pass

                elif la_ == 2:
                    self.state = 9540
                    self.select_no_parens()
                    self.state = 9542
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==67:
                        self.state = 9541
                        self.json_format_clause()


                    self.state = 9545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 9544
                        self.json_returning_clause()


                    pass

                elif la_ == 3:
                    self.state = 9548
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 9547
                        self.json_returning_clause()


                    pass


                self.state = 9552
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 36)
                self.state = 9553
                self.match(PostgreSQLParser.JSON)
                self.state = 9554
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9555
                self.json_value_expr()
                self.state = 9557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143 or _la==410:
                    self.state = 9556
                    self.json_key_uniqueness_constraint()


                self.state = 9559
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 37)
                self.state = 9561
                self.match(PostgreSQLParser.JSON_SCALAR)
                self.state = 9562
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9563
                self.a_expr()
                self.state = 9564
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 38)
                self.state = 9566
                self.match(PostgreSQLParser.JSON_SERIALIZE)
                self.state = 9567
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9568
                self.json_value_expr()
                self.state = 9570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 9569
                    self.json_returning_clause()


                self.state = 9572
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 39)
                self.state = 9574
                self.match(PostgreSQLParser.MERGE_ACTION)
                self.state = 9575
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9576
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 40)
                self.state = 9577
                self.match(PostgreSQLParser.JSON_QUERY)
                self.state = 9578
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9579
                self.json_value_expr()
                self.state = 9580
                self.match(PostgreSQLParser.COMMA)
                self.state = 9581
                self.a_expr()
                self.state = 9583
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==317:
                    self.state = 9582
                    self.json_passing_clause()


                self.state = 9586
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 9585
                    self.json_returning_clause()


                self.state = 9588
                self.json_wrapper_behavior()
                self.state = 9590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53 or _la==56:
                    self.state = 9589
                    self.json_quotes_clause()


                self.state = 9593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50 or ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 8796126576769) != 0) or _la==396 or _la==529:
                    self.state = 9592
                    self.json_behavior_clause()


                self.state = 9595
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 41)
                self.state = 9597
                self.match(PostgreSQLParser.JSON_EXISTS)
                self.state = 9598
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9599
                self.json_value_expr()
                self.state = 9600
                self.match(PostgreSQLParser.COMMA)
                self.state = 9601
                self.a_expr()
                self.state = 9603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==317:
                    self.state = 9602
                    self.json_passing_clause()


                self.state = 9606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50 or ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 8796126576769) != 0) or _la==396 or _la==529:
                    self.state = 9605
                    self.json_on_error_clause()


                self.state = 9608
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 42)
                self.state = 9610
                self.match(PostgreSQLParser.JSON_VALUE)
                self.state = 9611
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9612
                self.json_value_expr()
                self.state = 9613
                self.match(PostgreSQLParser.COMMA)
                self.state = 9614
                self.a_expr()
                self.state = 9616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==317:
                    self.state = 9615
                    self.json_passing_clause()


                self.state = 9619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 9618
                    self.json_returning_clause()


                self.state = 9622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50 or ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 8796126576769) != 0) or _la==396 or _la==529:
                    self.state = 9621
                    self.json_behavior_clause()


                self.state = 9624
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_root_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSION_P(self):
            return self.getToken(PostgreSQLParser.VERSION_P, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def VALUE_P(self):
            return self.getToken(PostgreSQLParser.VALUE_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xml_root_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_root_version" ):
                listener.enterXml_root_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_root_version" ):
                listener.exitXml_root_version(self)




    def xml_root_version(self):

        localctx = PostgreSQLParser.Xml_root_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1218, self.RULE_xml_root_version)
        try:
            self.state = 9633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,951,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9628
                self.match(PostgreSQLParser.VERSION_P)
                self.state = 9629
                self.a_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9630
                self.match(PostgreSQLParser.VERSION_P)
                self.state = 9631
                self.match(PostgreSQLParser.NO)
                self.state = 9632
                self.match(PostgreSQLParser.VALUE_P)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_root_standalone_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def STANDALONE_P(self):
            return self.getToken(PostgreSQLParser.STANDALONE_P, 0)

        def YES_P(self):
            return self.getToken(PostgreSQLParser.YES_P, 0)

        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def VALUE_P(self):
            return self.getToken(PostgreSQLParser.VALUE_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xml_root_standalone_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_root_standalone_" ):
                listener.enterXml_root_standalone_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_root_standalone_" ):
                listener.exitXml_root_standalone_(self)




    def xml_root_standalone_(self):

        localctx = PostgreSQLParser.Xml_root_standalone_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1220, self.RULE_xml_root_standalone_)
        try:
            self.state = 9645
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,952,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9635
                self.match(PostgreSQLParser.COMMA)
                self.state = 9636
                self.match(PostgreSQLParser.STANDALONE_P)
                self.state = 9637
                self.match(PostgreSQLParser.YES_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9638
                self.match(PostgreSQLParser.COMMA)
                self.state = 9639
                self.match(PostgreSQLParser.STANDALONE_P)
                self.state = 9640
                self.match(PostgreSQLParser.NO)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9641
                self.match(PostgreSQLParser.COMMA)
                self.state = 9642
                self.match(PostgreSQLParser.STANDALONE_P)
                self.state = 9643
                self.match(PostgreSQLParser.NO)
                self.state = 9644
                self.match(PostgreSQLParser.VALUE_P)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_attributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLATTRIBUTES(self):
            return self.getToken(PostgreSQLParser.XMLATTRIBUTES, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def xml_attribute_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Xml_attribute_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xml_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_attributes" ):
                listener.enterXml_attributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_attributes" ):
                listener.exitXml_attributes(self)




    def xml_attributes(self):

        localctx = PostgreSQLParser.Xml_attributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1222, self.RULE_xml_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9647
            self.match(PostgreSQLParser.XMLATTRIBUTES)
            self.state = 9648
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 9649
            self.xml_attribute_list()
            self.state = 9650
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_attribute_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xml_attribute_el(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Xml_attribute_elContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Xml_attribute_elContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xml_attribute_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_attribute_list" ):
                listener.enterXml_attribute_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_attribute_list" ):
                listener.exitXml_attribute_list(self)




    def xml_attribute_list(self):

        localctx = PostgreSQLParser.Xml_attribute_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1224, self.RULE_xml_attribute_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9652
            self.xml_attribute_el()
            self.state = 9657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 9653
                self.match(PostgreSQLParser.COMMA)
                self.state = 9654
                self.xml_attribute_el()
                self.state = 9659
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_attribute_elContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def colLabel(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColLabelContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xml_attribute_el

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_attribute_el" ):
                listener.enterXml_attribute_el(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_attribute_el" ):
                listener.exitXml_attribute_el(self)




    def xml_attribute_el(self):

        localctx = PostgreSQLParser.Xml_attribute_elContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1226, self.RULE_xml_attribute_el)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9660
            self.a_expr()
            self.state = 9663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 9661
                self.match(PostgreSQLParser.AS)
                self.state = 9662
                self.colLabel()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Document_or_contentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOCUMENT_P(self):
            return self.getToken(PostgreSQLParser.DOCUMENT_P, 0)

        def CONTENT_P(self):
            return self.getToken(PostgreSQLParser.CONTENT_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_document_or_content

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDocument_or_content" ):
                listener.enterDocument_or_content(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDocument_or_content" ):
                listener.exitDocument_or_content(self)




    def document_or_content(self):

        localctx = PostgreSQLParser.Document_or_contentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1228, self.RULE_document_or_content)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9665
            _la = self._input.LA(1)
            if not(_la==204 or _la==226):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_whitespace_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRESERVE(self):
            return self.getToken(PostgreSQLParser.PRESERVE, 0)

        def WHITESPACE_P(self):
            return self.getToken(PostgreSQLParser.WHITESPACE_P, 0)

        def STRIP_P(self):
            return self.getToken(PostgreSQLParser.STRIP_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xml_whitespace_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_whitespace_option" ):
                listener.enterXml_whitespace_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_whitespace_option" ):
                listener.exitXml_whitespace_option(self)




    def xml_whitespace_option(self):

        localctx = PostgreSQLParser.Xml_whitespace_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1230, self.RULE_xml_whitespace_option)
        try:
            self.state = 9671
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [323]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9667
                self.match(PostgreSQLParser.PRESERVE)
                self.state = 9668
                self.match(PostgreSQLParser.WHITESPACE_P)
                pass
            elif token in [378]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9669
                self.match(PostgreSQLParser.STRIP_P)
                self.state = 9670
                self.match(PostgreSQLParser.WHITESPACE_P)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmlexists_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASSING(self):
            return self.getToken(PostgreSQLParser.PASSING, 0)

        def c_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.C_exprContext,0)


        def xml_passing_mech(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Xml_passing_mechContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Xml_passing_mechContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xmlexists_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlexists_argument" ):
                listener.enterXmlexists_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlexists_argument" ):
                listener.exitXmlexists_argument(self)




    def xmlexists_argument(self):

        localctx = PostgreSQLParser.Xmlexists_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1232, self.RULE_xmlexists_argument)
        try:
            self.state = 9688
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,956,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9673
                self.match(PostgreSQLParser.PASSING)
                self.state = 9674
                self.c_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9675
                self.match(PostgreSQLParser.PASSING)
                self.state = 9676
                self.c_expr()
                self.state = 9677
                self.xml_passing_mech()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9679
                self.match(PostgreSQLParser.PASSING)
                self.state = 9680
                self.xml_passing_mech()
                self.state = 9681
                self.c_expr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 9683
                self.match(PostgreSQLParser.PASSING)
                self.state = 9684
                self.xml_passing_mech()
                self.state = 9685
                self.c_expr()
                self.state = 9686
                self.xml_passing_mech()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_passing_mechContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def REF(self):
            return self.getToken(PostgreSQLParser.REF, 0)

        def VALUE_P(self):
            return self.getToken(PostgreSQLParser.VALUE_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xml_passing_mech

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_passing_mech" ):
                listener.enterXml_passing_mech(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_passing_mech" ):
                listener.exitXml_passing_mech(self)




    def xml_passing_mech(self):

        localctx = PostgreSQLParser.Xml_passing_mechContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1234, self.RULE_xml_passing_mech)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9690
            self.match(PostgreSQLParser.BY)
            self.state = 9691
            _la = self._input.LA(1)
            if not(_la==335 or _la==488):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Within_group_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITHIN(self):
            return self.getToken(PostgreSQLParser.WITHIN, 0)

        def GROUP_P(self):
            return self.getToken(PostgreSQLParser.GROUP_P, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def sort_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sort_clauseContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_within_group_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithin_group_clause" ):
                listener.enterWithin_group_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithin_group_clause" ):
                listener.exitWithin_group_clause(self)




    def within_group_clause(self):

        localctx = PostgreSQLParser.Within_group_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1236, self.RULE_within_group_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9693
            self.match(PostgreSQLParser.WITHIN)
            self.state = 9694
            self.match(PostgreSQLParser.GROUP_P)
            self.state = 9695
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 9696
            self.sort_clause()
            self.state = 9697
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Filter_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILTER(self):
            return self.getToken(PostgreSQLParser.FILTER, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def WHERE(self):
            return self.getToken(PostgreSQLParser.WHERE, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_filter_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilter_clause" ):
                listener.enterFilter_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilter_clause" ):
                listener.exitFilter_clause(self)




    def filter_clause(self):

        localctx = PostgreSQLParser.Filter_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1238, self.RULE_filter_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9699
            self.match(PostgreSQLParser.FILTER)
            self.state = 9700
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 9701
            self.match(PostgreSQLParser.WHERE)
            self.state = 9702
            self.a_expr()
            self.state = 9703
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(PostgreSQLParser.WINDOW, 0)

        def window_definition_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Window_definition_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_window_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_clause" ):
                listener.enterWindow_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_clause" ):
                listener.exitWindow_clause(self)




    def window_clause(self):

        localctx = PostgreSQLParser.Window_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1240, self.RULE_window_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9705
            self.match(PostgreSQLParser.WINDOW)
            self.state = 9706
            self.window_definition_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_definition_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Window_definitionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Window_definitionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_window_definition_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_definition_list" ):
                listener.enterWindow_definition_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_definition_list" ):
                listener.exitWindow_definition_list(self)




    def window_definition_list(self):

        localctx = PostgreSQLParser.Window_definition_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1242, self.RULE_window_definition_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9708
            self.window_definition()
            self.state = 9713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 9709
                self.match(PostgreSQLParser.COMMA)
                self.state = 9710
                self.window_definition()
                self.state = 9715
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def window_specification(self):
            return self.getTypedRuleContext(PostgreSQLParser.Window_specificationContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_window_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_definition" ):
                listener.enterWindow_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_definition" ):
                listener.exitWindow_definition(self)




    def window_definition(self):

        localctx = PostgreSQLParser.Window_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1244, self.RULE_window_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9716
            self.colid()
            self.state = 9717
            self.match(PostgreSQLParser.AS)
            self.state = 9718
            self.window_specification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Over_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(PostgreSQLParser.OVER, 0)

        def window_specification(self):
            return self.getTypedRuleContext(PostgreSQLParser.Window_specificationContext,0)


        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_over_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause" ):
                listener.enterOver_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause" ):
                listener.exitOver_clause(self)




    def over_clause(self):

        localctx = PostgreSQLParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1246, self.RULE_over_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9720
            self.match(PostgreSQLParser.OVER)
            self.state = 9723
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.state = 9721
                self.window_specification()
                pass
            elif token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 162, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 582]:
                self.state = 9722
                self.colid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def existing_window_name_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Existing_window_name_Context,0)


        def partition_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Partition_clause_Context,0)


        def sort_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sort_clause_Context,0)


        def frame_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Frame_clause_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_window_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_specification" ):
                listener.enterWindow_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_specification" ):
                listener.exitWindow_specification(self)




    def window_specification(self):

        localctx = PostgreSQLParser.Window_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1248, self.RULE_window_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9725
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 9727
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,959,self._ctx)
            if la_ == 1:
                self.state = 9726
                self.existing_window_name_()


            self.state = 9730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==316:
                self.state = 9729
                self.partition_clause_()


            self.state = 9733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121:
                self.state = 9732
                self.sort_clause_()


            self.state = 9736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==330 or _la==351 or _la==519:
                self.state = 9735
                self.frame_clause_()


            self.state = 9738
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Existing_window_name_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_existing_window_name_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExisting_window_name_" ):
                listener.enterExisting_window_name_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExisting_window_name_" ):
                listener.exitExisting_window_name_(self)




    def existing_window_name_(self):

        localctx = PostgreSQLParser.Existing_window_name_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1250, self.RULE_existing_window_name_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9740
            self.colid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_clause_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(PostgreSQLParser.PARTITION, 0)

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_partition_clause_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_clause_" ):
                listener.enterPartition_clause_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_clause_" ):
                listener.exitPartition_clause_(self)




    def partition_clause_(self):

        localctx = PostgreSQLParser.Partition_clause_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1252, self.RULE_partition_clause_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9742
            self.match(PostgreSQLParser.PARTITION)
            self.state = 9743
            self.match(PostgreSQLParser.BY)
            self.state = 9744
            self.expr_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_clause_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RANGE(self):
            return self.getToken(PostgreSQLParser.RANGE, 0)

        def frame_extent(self):
            return self.getTypedRuleContext(PostgreSQLParser.Frame_extentContext,0)


        def window_exclusion_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Window_exclusion_clause_Context,0)


        def ROWS(self):
            return self.getToken(PostgreSQLParser.ROWS, 0)

        def GROUPS(self):
            return self.getToken(PostgreSQLParser.GROUPS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_frame_clause_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_clause_" ):
                listener.enterFrame_clause_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_clause_" ):
                listener.exitFrame_clause_(self)




    def frame_clause_(self):

        localctx = PostgreSQLParser.Frame_clause_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1254, self.RULE_frame_clause_)
        self._la = 0 # Token type
        try:
            self.state = 9761
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [330]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9746
                self.match(PostgreSQLParser.RANGE)
                self.state = 9747
                self.frame_extent()
                self.state = 9749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==237:
                    self.state = 9748
                    self.window_exclusion_clause_()


                pass
            elif token in [351]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9751
                self.match(PostgreSQLParser.ROWS)
                self.state = 9752
                self.frame_extent()
                self.state = 9754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==237:
                    self.state = 9753
                    self.window_exclusion_clause_()


                pass
            elif token in [519]:
                self.enterOuterAlt(localctx, 3)
                self.state = 9756
                self.match(PostgreSQLParser.GROUPS)
                self.state = 9757
                self.frame_extent()
                self.state = 9759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==237:
                    self.state = 9758
                    self.window_exclusion_clause_()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_extentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def frame_bound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Frame_boundContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Frame_boundContext,i)


        def BETWEEN(self):
            return self.getToken(PostgreSQLParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(PostgreSQLParser.AND, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_frame_extent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_extent" ):
                listener.enterFrame_extent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_extent" ):
                listener.exitFrame_extent(self)




    def frame_extent(self):

        localctx = PostgreSQLParser.Frame_extentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1256, self.RULE_frame_extent)
        try:
            self.state = 9769
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,967,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9763
                self.frame_bound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9764
                self.match(PostgreSQLParser.BETWEEN)
                self.state = 9765
                self.frame_bound()
                self.state = 9766
                self.match(PostgreSQLParser.AND)
                self.state = 9767
                self.frame_bound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_boundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED(self):
            return self.getToken(PostgreSQLParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(PostgreSQLParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(PostgreSQLParser.FOLLOWING, 0)

        def CURRENT_P(self):
            return self.getToken(PostgreSQLParser.CURRENT_P, 0)

        def ROW(self):
            return self.getToken(PostgreSQLParser.ROW, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_frame_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_bound" ):
                listener.enterFrame_bound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_bound" ):
                listener.exitFrame_bound(self)




    def frame_bound(self):

        localctx = PostgreSQLParser.Frame_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1258, self.RULE_frame_bound)
        self._la = 0 # Token type
        try:
            self.state = 9778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,968,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9771
                self.match(PostgreSQLParser.UNBOUNDED)
                self.state = 9772
                _la = self._input.LA(1)
                if not(_la==246 or _la==320):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9773
                self.match(PostgreSQLParser.CURRENT_P)
                self.state = 9774
                self.match(PostgreSQLParser.ROW)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9775
                self.a_expr()
                self.state = 9776
                _la = self._input.LA(1)
                if not(_la==246 or _la==320):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_exclusion_clause_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLUDE(self):
            return self.getToken(PostgreSQLParser.EXCLUDE, 0)

        def CURRENT_P(self):
            return self.getToken(PostgreSQLParser.CURRENT_P, 0)

        def ROW(self):
            return self.getToken(PostgreSQLParser.ROW, 0)

        def GROUP_P(self):
            return self.getToken(PostgreSQLParser.GROUP_P, 0)

        def TIES(self):
            return self.getToken(PostgreSQLParser.TIES, 0)

        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def OTHERS(self):
            return self.getToken(PostgreSQLParser.OTHERS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_window_exclusion_clause_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_exclusion_clause_" ):
                listener.enterWindow_exclusion_clause_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_exclusion_clause_" ):
                listener.exitWindow_exclusion_clause_(self)




    def window_exclusion_clause_(self):

        localctx = PostgreSQLParser.Window_exclusion_clause_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1260, self.RULE_window_exclusion_clause_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9780
            self.match(PostgreSQLParser.EXCLUDE)
            self.state = 9787
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [472]:
                self.state = 9781
                self.match(PostgreSQLParser.CURRENT_P)
                self.state = 9782
                self.match(PostgreSQLParser.ROW)
                pass
            elif token in [104]:
                self.state = 9783
                self.match(PostgreSQLParser.GROUP_P)
                pass
            elif token in [505]:
                self.state = 9784
                self.match(PostgreSQLParser.TIES)
                pass
            elif token in [300]:
                self.state = 9785
                self.match(PostgreSQLParser.NO)
                self.state = 9786
                self.match(PostgreSQLParser.OTHERS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROW(self):
            return self.getToken(PostgreSQLParser.ROW, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_row

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow" ):
                listener.enterRow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow" ):
                listener.exitRow(self)




    def row(self):

        localctx = PostgreSQLParser.RowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1262, self.RULE_row)
        self._la = 0 # Token type
        try:
            self.state = 9801
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [445]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9789
                self.match(PostgreSQLParser.ROW)
                self.state = 9790
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -268423164) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9214927770107198969) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & -1011) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & -1) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & -1) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & -129) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & -1) != 0) or ((((_la - 454)) & ~0x3f) == 0 and ((1 << (_la - 454)) & -2305843284091601405) != 0) or ((((_la - 518)) & ~0x3f) == 0 and ((1 << (_la - 518)) & -4880034784790705153) != 0) or _la==582 or _la==590:
                    self.state = 9791
                    self.expr_list()


                self.state = 9794
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9795
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9796
                self.expr_list()
                self.state = 9797
                self.match(PostgreSQLParser.COMMA)
                self.state = 9798
                self.a_expr()
                self.state = 9799
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explicit_rowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROW(self):
            return self.getToken(PostgreSQLParser.ROW, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_explicit_row

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicit_row" ):
                listener.enterExplicit_row(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicit_row" ):
                listener.exitExplicit_row(self)




    def explicit_row(self):

        localctx = PostgreSQLParser.Explicit_rowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1264, self.RULE_explicit_row)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9803
            self.match(PostgreSQLParser.ROW)
            self.state = 9804
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 9806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -268423164) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9214927770107198969) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & -1011) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & -1) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & -1) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & -129) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & -1) != 0) or ((((_la - 454)) & ~0x3f) == 0 and ((1 << (_la - 454)) & -2305843284091601405) != 0) or ((((_la - 518)) & ~0x3f) == 0 and ((1 << (_la - 518)) & -4880034784790705153) != 0) or _la==582 or _la==590:
                self.state = 9805
                self.expr_list()


            self.state = 9808
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Implicit_rowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_implicit_row

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplicit_row" ):
                listener.enterImplicit_row(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplicit_row" ):
                listener.exitImplicit_row(self)




    def implicit_row(self):

        localctx = PostgreSQLParser.Implicit_rowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1266, self.RULE_implicit_row)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9810
            self.match(PostgreSQLParser.OPEN_PAREN)
            self.state = 9811
            self.expr_list()
            self.state = 9812
            self.match(PostgreSQLParser.COMMA)
            self.state = 9813
            self.a_expr()
            self.state = 9814
            self.match(PostgreSQLParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sub_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self):
            return self.getToken(PostgreSQLParser.ANY, 0)

        def SOME(self):
            return self.getToken(PostgreSQLParser.SOME, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sub_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSub_type" ):
                listener.enterSub_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSub_type" ):
                listener.exitSub_type(self)




    def sub_type(self):

        localctx = PostgreSQLParser.Sub_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1268, self.RULE_sub_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9816
            _la = self._input.LA(1)
            if not(((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 1152921504606846993) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(PostgreSQLParser.Operator, 0)

        def mathop(self):
            return self.getTypedRuleContext(PostgreSQLParser.MathopContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_all_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_op" ):
                listener.enterAll_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_op" ):
                listener.exitAll_op(self)




    def all_op(self):

        localctx = PostgreSQLParser.All_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1270, self.RULE_all_op)
        try:
            self.state = 9820
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9818
                self.match(PostgreSQLParser.Operator)
                pass
            elif token in [9, 10, 12, 13, 14, 15, 16, 17, 21, 23, 25, 27]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9819
                self.mathop()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MathopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(PostgreSQLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(PostgreSQLParser.MINUS, 0)

        def STAR(self):
            return self.getToken(PostgreSQLParser.STAR, 0)

        def SLASH(self):
            return self.getToken(PostgreSQLParser.SLASH, 0)

        def PERCENT(self):
            return self.getToken(PostgreSQLParser.PERCENT, 0)

        def CARET(self):
            return self.getToken(PostgreSQLParser.CARET, 0)

        def LT(self):
            return self.getToken(PostgreSQLParser.LT, 0)

        def GT(self):
            return self.getToken(PostgreSQLParser.GT, 0)

        def EQUAL(self):
            return self.getToken(PostgreSQLParser.EQUAL, 0)

        def LESS_EQUALS(self):
            return self.getToken(PostgreSQLParser.LESS_EQUALS, 0)

        def GREATER_EQUALS(self):
            return self.getToken(PostgreSQLParser.GREATER_EQUALS, 0)

        def NOT_EQUALS(self):
            return self.getToken(PostgreSQLParser.NOT_EQUALS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_mathop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathop" ):
                listener.enterMathop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathop" ):
                listener.exitMathop(self)




    def mathop(self):

        localctx = PostgreSQLParser.MathopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1272, self.RULE_mathop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9822
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 178517504) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qual_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(PostgreSQLParser.Operator, 0)

        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def any_operator(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_operatorContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_qual_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQual_op" ):
                listener.enterQual_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQual_op" ):
                listener.exitQual_op(self)




    def qual_op(self):

        localctx = PostgreSQLParser.Qual_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1274, self.RULE_qual_op)
        try:
            self.state = 9830
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9824
                self.match(PostgreSQLParser.Operator)
                pass
            elif token in [309]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9825
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 9826
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9827
                self.any_operator()
                self.state = 9828
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qual_all_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def all_op(self):
            return self.getTypedRuleContext(PostgreSQLParser.All_opContext,0)


        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def any_operator(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_operatorContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_qual_all_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQual_all_op" ):
                listener.enterQual_all_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQual_all_op" ):
                listener.exitQual_all_op(self)




    def qual_all_op(self):

        localctx = PostgreSQLParser.Qual_all_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1276, self.RULE_qual_all_op)
        try:
            self.state = 9838
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 10, 12, 13, 14, 15, 16, 17, 21, 23, 25, 27, 29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9832
                self.all_op()
                pass
            elif token in [309]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9833
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 9834
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9835
                self.any_operator()
                self.state = 9836
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subquery_OpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def all_op(self):
            return self.getTypedRuleContext(PostgreSQLParser.All_opContext,0)


        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def any_operator(self):
            return self.getTypedRuleContext(PostgreSQLParser.Any_operatorContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def LIKE(self):
            return self.getToken(PostgreSQLParser.LIKE, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def ILIKE(self):
            return self.getToken(PostgreSQLParser.ILIKE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_subquery_Op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_Op" ):
                listener.enterSubquery_Op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_Op" ):
                listener.exitSubquery_Op(self)




    def subquery_Op(self):

        localctx = PostgreSQLParser.Subquery_OpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1278, self.RULE_subquery_Op)
        try:
            self.state = 9852
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,976,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9840
                self.all_op()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9841
                self.match(PostgreSQLParser.OPERATOR)
                self.state = 9842
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9843
                self.any_operator()
                self.state = 9844
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9846
                self.match(PostgreSQLParser.LIKE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 9847
                self.match(PostgreSQLParser.NOT)
                self.state = 9848
                self.match(PostgreSQLParser.LIKE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 9849
                self.match(PostgreSQLParser.ILIKE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 9850
                self.match(PostgreSQLParser.NOT)
                self.state = 9851
                self.match(PostgreSQLParser.ILIKE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.A_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_expr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_list" ):
                listener.enterExpr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_list" ):
                listener.exitExpr_list(self)




    def expr_list(self):

        localctx = PostgreSQLParser.Expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1280, self.RULE_expr_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9854
            self.a_expr()
            self.state = 9859
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,977,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9855
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 9856
                    self.a_expr() 
                self.state = 9861
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,977,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_arg_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_arg_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Func_arg_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Func_arg_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_arg_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_arg_list" ):
                listener.enterFunc_arg_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_arg_list" ):
                listener.exitFunc_arg_list(self)




    def func_arg_list(self):

        localctx = PostgreSQLParser.Func_arg_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1282, self.RULE_func_arg_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9862
            self.func_arg_expr()
            self.state = 9867
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,978,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9863
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 9864
                    self.func_arg_expr() 
                self.state = 9869
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,978,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_arg_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def param_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Param_nameContext,0)


        def COLON_EQUALS(self):
            return self.getToken(PostgreSQLParser.COLON_EQUALS, 0)

        def EQUALS_GREATER(self):
            return self.getToken(PostgreSQLParser.EQUALS_GREATER, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_arg_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_arg_expr" ):
                listener.enterFunc_arg_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_arg_expr" ):
                listener.exitFunc_arg_expr(self)




    def func_arg_expr(self):

        localctx = PostgreSQLParser.Func_arg_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1284, self.RULE_func_arg_expr)
        self._la = 0 # Token type
        try:
            self.state = 9875
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,979,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9870
                self.a_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9871
                self.param_name()
                self.state = 9872
                _la = self._input.LA(1)
                if not(_la==20 or _la==22):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 9873
                self.a_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typename(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.TypenameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_type_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_list" ):
                listener.enterType_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_list" ):
                listener.exitType_list(self)




    def type_list(self):

        localctx = PostgreSQLParser.Type_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1286, self.RULE_type_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9877
            self.typename()
            self.state = 9882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 9878
                self.match(PostgreSQLParser.COMMA)
                self.state = 9879
                self.typename()
                self.state = 9884
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(PostgreSQLParser.OPEN_BRACKET, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(PostgreSQLParser.CLOSE_BRACKET, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)


        def array_expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Array_expr_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_array_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_expr" ):
                listener.enterArray_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_expr" ):
                listener.exitArray_expr(self)




    def array_expr(self):

        localctx = PostgreSQLParser.Array_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1288, self.RULE_array_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9885
            self.match(PostgreSQLParser.OPEN_BRACKET)
            self.state = 9888
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 12, 13, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 73, 78, 79, 85, 86, 87, 88, 89, 90, 91, 98, 113, 114, 115, 116, 127, 134, 136, 137, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 563, 565, 567, 568, 572, 576, 577, 578, 579, 581, 582, 590]:
                self.state = 9886
                self.expr_list()
                pass
            elif token in [4]:
                self.state = 9887
                self.array_expr_list()
                pass
            elif token in [5]:
                pass
            else:
                pass
            self.state = 9890
            self.match(PostgreSQLParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_expr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def array_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Array_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Array_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_array_expr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_expr_list" ):
                listener.enterArray_expr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_expr_list" ):
                listener.exitArray_expr_list(self)




    def array_expr_list(self):

        localctx = PostgreSQLParser.Array_expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1290, self.RULE_array_expr_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9892
            self.array_expr()
            self.state = 9897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 9893
                self.match(PostgreSQLParser.COMMA)
                self.state = 9894
                self.array_expr()
                self.state = 9899
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extract_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extract_arg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Extract_argContext,0)


        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_extract_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtract_list" ):
                listener.enterExtract_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtract_list" ):
                listener.exitExtract_list(self)




    def extract_list(self):

        localctx = PostgreSQLParser.Extract_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1292, self.RULE_extract_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9900
            self.extract_arg()
            self.state = 9901
            self.match(PostgreSQLParser.FROM)
            self.state = 9902
            self.a_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Extract_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PostgreSQLParser.IdentifierContext,0)


        def YEAR_P(self):
            return self.getToken(PostgreSQLParser.YEAR_P, 0)

        def MONTH_P(self):
            return self.getToken(PostgreSQLParser.MONTH_P, 0)

        def DAY_P(self):
            return self.getToken(PostgreSQLParser.DAY_P, 0)

        def HOUR_P(self):
            return self.getToken(PostgreSQLParser.HOUR_P, 0)

        def MINUTE_P(self):
            return self.getToken(PostgreSQLParser.MINUTE_P, 0)

        def SECOND_P(self):
            return self.getToken(PostgreSQLParser.SECOND_P, 0)

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_extract_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtract_arg" ):
                listener.enterExtract_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtract_arg" ):
                listener.exitExtract_arg(self)




    def extract_arg(self):

        localctx = PostgreSQLParser.Extract_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1294, self.RULE_extract_arg)
        try:
            self.state = 9912
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [554, 555, 559, 582]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9904
                self.identifier()
                pass
            elif token in [415]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9905
                self.match(PostgreSQLParser.YEAR_P)
                pass
            elif token in [295]:
                self.enterOuterAlt(localctx, 3)
                self.state = 9906
                self.match(PostgreSQLParser.MONTH_P)
                pass
            elif token in [214]:
                self.enterOuterAlt(localctx, 4)
                self.state = 9907
                self.match(PostgreSQLParser.DAY_P)
                pass
            elif token in [256]:
                self.enterOuterAlt(localctx, 5)
                self.state = 9908
                self.match(PostgreSQLParser.HOUR_P)
                pass
            elif token in [292]:
                self.enterOuterAlt(localctx, 6)
                self.state = 9909
                self.match(PostgreSQLParser.MINUTE_P)
                pass
            elif token in [357]:
                self.enterOuterAlt(localctx, 7)
                self.state = 9910
                self.match(PostgreSQLParser.SECOND_P)
                pass
            elif token in [563, 565, 567, 590]:
                self.enterOuterAlt(localctx, 8)
                self.state = 9911
                self.sconst()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unicode_normal_formContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NFC(self):
            return self.getToken(PostgreSQLParser.NFC, 0)

        def NFD(self):
            return self.getToken(PostgreSQLParser.NFD, 0)

        def NFKC(self):
            return self.getToken(PostgreSQLParser.NFKC, 0)

        def NFKD(self):
            return self.getToken(PostgreSQLParser.NFKD, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_unicode_normal_form

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnicode_normal_form" ):
                listener.enterUnicode_normal_form(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnicode_normal_form" ):
                listener.exitUnicode_normal_form(self)




    def unicode_normal_form(self):

        localctx = PostgreSQLParser.Unicode_normal_formContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1296, self.RULE_unicode_normal_form)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9914
            _la = self._input.LA(1)
            if not(((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Overlay_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.A_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,i)


        def PLACING(self):
            return self.getToken(PostgreSQLParser.PLACING, 0)

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_overlay_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverlay_list" ):
                listener.enterOverlay_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverlay_list" ):
                listener.exitOverlay_list(self)




    def overlay_list(self):

        localctx = PostgreSQLParser.Overlay_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1298, self.RULE_overlay_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9916
            self.a_expr()
            self.state = 9917
            self.match(PostgreSQLParser.PLACING)
            self.state = 9918
            self.a_expr()
            self.state = 9919
            self.match(PostgreSQLParser.FROM)
            self.state = 9920
            self.a_expr()
            self.state = 9923
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==100:
                self.state = 9921
                self.match(PostgreSQLParser.FOR)
                self.state = 9922
                self.a_expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Position_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def b_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.B_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.B_exprContext,i)


        def IN_P(self):
            return self.getToken(PostgreSQLParser.IN_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_position_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPosition_list" ):
                listener.enterPosition_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPosition_list" ):
                listener.exitPosition_list(self)




    def position_list(self):

        localctx = PostgreSQLParser.Position_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1300, self.RULE_position_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9925
            self.b_expr(0)
            self.state = 9926
            self.match(PostgreSQLParser.IN_P)
            self.state = 9927
            self.b_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Substr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.A_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,i)


        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def SIMILAR(self):
            return self.getToken(PostgreSQLParser.SIMILAR, 0)

        def ESCAPE(self):
            return self.getToken(PostgreSQLParser.ESCAPE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_substr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstr_list" ):
                listener.enterSubstr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstr_list" ):
                listener.exitSubstr_list(self)




    def substr_list(self):

        localctx = PostgreSQLParser.Substr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1302, self.RULE_substr_list)
        try:
            self.state = 9955
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,985,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9929
                self.a_expr()
                self.state = 9930
                self.match(PostgreSQLParser.FROM)
                self.state = 9931
                self.a_expr()
                self.state = 9932
                self.match(PostgreSQLParser.FOR)
                self.state = 9933
                self.a_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9935
                self.a_expr()
                self.state = 9936
                self.match(PostgreSQLParser.FOR)
                self.state = 9937
                self.a_expr()
                self.state = 9938
                self.match(PostgreSQLParser.FROM)
                self.state = 9939
                self.a_expr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9941
                self.a_expr()
                self.state = 9942
                self.match(PostgreSQLParser.FROM)
                self.state = 9943
                self.a_expr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 9945
                self.a_expr()
                self.state = 9946
                self.match(PostgreSQLParser.FOR)
                self.state = 9947
                self.a_expr()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 9949
                self.a_expr()
                self.state = 9950
                self.match(PostgreSQLParser.SIMILAR)
                self.state = 9951
                self.a_expr()
                self.state = 9952
                self.match(PostgreSQLParser.ESCAPE)
                self.state = 9953
                self.a_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trim_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_trim_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrim_list" ):
                listener.enterTrim_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrim_list" ):
                listener.exitTrim_list(self)




    def trim_list(self):

        localctx = PostgreSQLParser.Trim_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1304, self.RULE_trim_list)
        try:
            self.state = 9964
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,986,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9957
                self.a_expr()
                self.state = 9958
                self.match(PostgreSQLParser.FROM)
                self.state = 9959
                self.expr_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9961
                self.match(PostgreSQLParser.FROM)
                self.state = 9962
                self.expr_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9963
                self.expr_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class In_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_in_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class In_expr_listContext(In_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PostgreSQLParser.In_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)
        def expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expr_listContext,0)

        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn_expr_list" ):
                listener.enterIn_expr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn_expr_list" ):
                listener.exitIn_expr_list(self)


    class In_expr_selectContext(In_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PostgreSQLParser.In_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def select_with_parens(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_with_parensContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn_expr_select" ):
                listener.enterIn_expr_select(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn_expr_select" ):
                listener.exitIn_expr_select(self)



    def in_expr(self):

        localctx = PostgreSQLParser.In_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1306, self.RULE_in_expr)
        try:
            self.state = 9971
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,987,self._ctx)
            if la_ == 1:
                localctx = PostgreSQLParser.In_expr_selectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 9966
                self.select_with_parens()
                pass

            elif la_ == 2:
                localctx = PostgreSQLParser.In_expr_listContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 9967
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 9968
                self.expr_list()
                self.state = 9969
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(PostgreSQLParser.CASE, 0)

        def when_clause_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.When_clause_listContext,0)


        def END_P(self):
            return self.getToken(PostgreSQLParser.END_P, 0)

        def case_arg(self):
            return self.getTypedRuleContext(PostgreSQLParser.Case_argContext,0)


        def case_default(self):
            return self.getTypedRuleContext(PostgreSQLParser.Case_defaultContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_case_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_expr" ):
                listener.enterCase_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_expr" ):
                listener.exitCase_expr(self)




    def case_expr(self):

        localctx = PostgreSQLParser.Case_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1308, self.RULE_case_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9973
            self.match(PostgreSQLParser.CASE)
            self.state = 9975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -268423164) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9214927770107198969) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & -1011) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & -1) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & -1) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & -129) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & -1) != 0) or ((((_la - 454)) & ~0x3f) == 0 and ((1 << (_la - 454)) & -2305843284091601405) != 0) or ((((_la - 518)) & ~0x3f) == 0 and ((1 << (_la - 518)) & -4880034784790705153) != 0) or _la==582 or _la==590:
                self.state = 9974
                self.case_arg()


            self.state = 9977
            self.when_clause_list()
            self.state = 9979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96:
                self.state = 9978
                self.case_default()


            self.state = 9981
            self.match(PostgreSQLParser.END_P)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_clause_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def when_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.When_clauseContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.When_clauseContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_when_clause_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_clause_list" ):
                listener.enterWhen_clause_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_clause_list" ):
                listener.exitWhen_clause_list(self)




    def when_clause_list(self):

        localctx = PostgreSQLParser.When_clause_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1310, self.RULE_when_clause_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9984 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 9983
                self.when_clause()
                self.state = 9986 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==140):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(PostgreSQLParser.WHEN, 0)

        def a_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.A_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,i)


        def THEN(self):
            return self.getToken(PostgreSQLParser.THEN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_when_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_clause" ):
                listener.enterWhen_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_clause" ):
                listener.exitWhen_clause(self)




    def when_clause(self):

        localctx = PostgreSQLParser.When_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1312, self.RULE_when_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9988
            self.match(PostgreSQLParser.WHEN)
            self.state = 9989
            self.a_expr()
            self.state = 9990
            self.match(PostgreSQLParser.THEN)
            self.state = 9991
            self.a_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(PostgreSQLParser.ELSE, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_case_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_default" ):
                listener.enterCase_default(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_default" ):
                listener.exitCase_default(self)




    def case_default(self):

        localctx = PostgreSQLParser.Case_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1314, self.RULE_case_default)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9993
            self.match(PostgreSQLParser.ELSE)
            self.state = 9994
            self.a_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_case_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_arg" ):
                listener.enterCase_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_arg" ):
                listener.exitCase_arg(self)




    def case_arg(self):

        localctx = PostgreSQLParser.Case_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1316, self.RULE_case_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9996
            self.a_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnrefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def indirection(self):
            return self.getTypedRuleContext(PostgreSQLParser.IndirectionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_columnref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnref" ):
                listener.enterColumnref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnref" ):
                listener.exitColumnref(self)




    def columnref(self):

        localctx = PostgreSQLParser.ColumnrefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1318, self.RULE_columnref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9998
            self.colid()
            self.state = 10000
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,991,self._ctx)
            if la_ == 1:
                self.state = 9999
                self.indirection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indirection_elContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(PostgreSQLParser.DOT, 0)

        def attr_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Attr_nameContext,0)


        def STAR(self):
            return self.getToken(PostgreSQLParser.STAR, 0)

        def OPEN_BRACKET(self):
            return self.getToken(PostgreSQLParser.OPEN_BRACKET, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(PostgreSQLParser.CLOSE_BRACKET, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def COLON(self):
            return self.getToken(PostgreSQLParser.COLON, 0)

        def slice_bound_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Slice_bound_Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Slice_bound_Context,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_indirection_el

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndirection_el" ):
                listener.enterIndirection_el(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndirection_el" ):
                listener.exitIndirection_el(self)




    def indirection_el(self):

        localctx = PostgreSQLParser.Indirection_elContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1320, self.RULE_indirection_el)
        self._la = 0 # Token type
        try:
            self.state = 10019
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10002
                self.match(PostgreSQLParser.DOT)
                self.state = 10005
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 541, 542, 553, 554, 555, 559, 582]:
                    self.state = 10003
                    self.attr_name()
                    pass
                elif token in [9]:
                    self.state = 10004
                    self.match(PostgreSQLParser.STAR)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [4]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10007
                self.match(PostgreSQLParser.OPEN_BRACKET)
                self.state = 10016
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,995,self._ctx)
                if la_ == 1:
                    self.state = 10008
                    self.a_expr()
                    pass

                elif la_ == 2:
                    self.state = 10010
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -268423164) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9214927770107198969) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & -1011) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & -1) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & -1) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & -129) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & -1) != 0) or ((((_la - 454)) & ~0x3f) == 0 and ((1 << (_la - 454)) & -2305843284091601405) != 0) or ((((_la - 518)) & ~0x3f) == 0 and ((1 << (_la - 518)) & -4880034784790705153) != 0) or _la==582 or _la==590:
                        self.state = 10009
                        self.slice_bound_()


                    self.state = 10012
                    self.match(PostgreSQLParser.COLON)
                    self.state = 10014
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -268423164) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9214927770107198969) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & -1011) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & -1) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & -1) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & -129) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & -1) != 0) or ((((_la - 454)) & ~0x3f) == 0 and ((1 << (_la - 454)) & -2305843284091601405) != 0) or ((((_la - 518)) & ~0x3f) == 0 and ((1 << (_la - 518)) & -4880034784790705153) != 0) or _la==582 or _la==590:
                        self.state = 10013
                        self.slice_bound_()


                    pass


                self.state = 10018
                self.match(PostgreSQLParser.CLOSE_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Slice_bound_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_slice_bound_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlice_bound_" ):
                listener.enterSlice_bound_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlice_bound_" ):
                listener.exitSlice_bound_(self)




    def slice_bound_(self):

        localctx = PostgreSQLParser.Slice_bound_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1322, self.RULE_slice_bound_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10021
            self.a_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indirection_el(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Indirection_elContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Indirection_elContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_indirection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndirection" ):
                listener.enterIndirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndirection" ):
                listener.exitIndirection(self)




    def indirection(self):

        localctx = PostgreSQLParser.IndirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1324, self.RULE_indirection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10024 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 10023
                    self.indirection_el()

                else:
                    raise NoViableAltException(self)
                self.state = 10026 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,997,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Opt_indirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indirection_el(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Indirection_elContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Indirection_elContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_opt_indirection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpt_indirection" ):
                listener.enterOpt_indirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpt_indirection" ):
                listener.exitOpt_indirection(self)




    def opt_indirection(self):

        localctx = PostgreSQLParser.Opt_indirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1326, self.RULE_opt_indirection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10031
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,998,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 10028
                    self.indirection_el() 
                self.state = 10033
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,998,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_passing_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASSING(self):
            return self.getToken(PostgreSQLParser.PASSING, 0)

        def json_arguments(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_argumentsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_passing_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_passing_clause" ):
                listener.enterJson_passing_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_passing_clause" ):
                listener.exitJson_passing_clause(self)




    def json_passing_clause(self):

        localctx = PostgreSQLParser.Json_passing_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1328, self.RULE_json_passing_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10034
            self.match(PostgreSQLParser.PASSING)
            self.state = 10035
            self.json_arguments(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_argumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def json_argument(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_argumentContext,0)


        def json_arguments(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_argumentsContext,0)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_arguments" ):
                listener.enterJson_arguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_arguments" ):
                listener.exitJson_arguments(self)



    def json_arguments(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PostgreSQLParser.Json_argumentsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1330
        self.enterRecursionRule(localctx, 1330, self.RULE_json_arguments, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10038
            self.json_argument()
            self._ctx.stop = self._input.LT(-1)
            self.state = 10045
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,999,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PostgreSQLParser.Json_argumentsContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_json_arguments)
                    self.state = 10040
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 10041
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 10042
                    self.json_argument() 
                self.state = 10047
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,999,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Json_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def json_value_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_value_exprContext,0)


        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def colLabel(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColLabelContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_argument" ):
                listener.enterJson_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_argument" ):
                listener.exitJson_argument(self)




    def json_argument(self):

        localctx = PostgreSQLParser.Json_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1332, self.RULE_json_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10048
            self.json_value_expr()
            self.state = 10049
            self.match(PostgreSQLParser.AS)
            self.state = 10050
            self.colLabel()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_wrapper_behaviorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITHOUT(self):
            return self.getToken(PostgreSQLParser.WITHOUT, 0)

        def WRAPPER(self):
            return self.getToken(PostgreSQLParser.WRAPPER, 0)

        def ARRAY(self):
            return self.getToken(PostgreSQLParser.ARRAY, 0)

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def CONDITIONAL(self):
            return self.getToken(PostgreSQLParser.CONDITIONAL, 0)

        def UNCONDITIONAL(self):
            return self.getToken(PostgreSQLParser.UNCONDITIONAL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_wrapper_behavior

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_wrapper_behavior" ):
                listener.enterJson_wrapper_behavior(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_wrapper_behavior" ):
                listener.exitJson_wrapper_behavior(self)




    def json_wrapper_behavior(self):

        localctx = PostgreSQLParser.Json_wrapper_behaviorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1334, self.RULE_json_wrapper_behavior)
        try:
            self.state = 10077
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1000,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10052
                self.match(PostgreSQLParser.WITHOUT)
                self.state = 10053
                self.match(PostgreSQLParser.WRAPPER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10054
                self.match(PostgreSQLParser.WITHOUT)
                self.state = 10055
                self.match(PostgreSQLParser.ARRAY)
                self.state = 10056
                self.match(PostgreSQLParser.WRAPPER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10057
                self.match(PostgreSQLParser.WITH)
                self.state = 10058
                self.match(PostgreSQLParser.WRAPPER)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10059
                self.match(PostgreSQLParser.WITH)
                self.state = 10060
                self.match(PostgreSQLParser.ARRAY)
                self.state = 10061
                self.match(PostgreSQLParser.WRAPPER)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 10062
                self.match(PostgreSQLParser.WITH)
                self.state = 10063
                self.match(PostgreSQLParser.CONDITIONAL)
                self.state = 10064
                self.match(PostgreSQLParser.ARRAY)
                self.state = 10065
                self.match(PostgreSQLParser.WRAPPER)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 10066
                self.match(PostgreSQLParser.WITH)
                self.state = 10067
                self.match(PostgreSQLParser.UNCONDITIONAL)
                self.state = 10068
                self.match(PostgreSQLParser.ARRAY)
                self.state = 10069
                self.match(PostgreSQLParser.WRAPPER)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 10070
                self.match(PostgreSQLParser.WITH)
                self.state = 10071
                self.match(PostgreSQLParser.CONDITIONAL)
                self.state = 10072
                self.match(PostgreSQLParser.WRAPPER)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 10073
                self.match(PostgreSQLParser.WITH)
                self.state = 10074
                self.match(PostgreSQLParser.UNCONDITIONAL)
                self.state = 10075
                self.match(PostgreSQLParser.WRAPPER)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_behaviorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def json_behavior_type(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_behavior_typeContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_behavior

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_behavior" ):
                listener.enterJson_behavior(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_behavior" ):
                listener.exitJson_behavior(self)




    def json_behavior(self):

        localctx = PostgreSQLParser.Json_behaviorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1336, self.RULE_json_behavior)
        try:
            self.state = 10082
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [91]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10079
                self.match(PostgreSQLParser.DEFAULT)
                self.state = 10080
                self.a_expr()
                pass
            elif token in [50, 98, 116, 134, 396, 529]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10081
                self.json_behavior_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_behavior_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR(self):
            return self.getToken(PostgreSQLParser.ERROR, 0)

        def NULL_P(self):
            return self.getToken(PostgreSQLParser.NULL_P, 0)

        def TRUE_P(self):
            return self.getToken(PostgreSQLParser.TRUE_P, 0)

        def FALSE_P(self):
            return self.getToken(PostgreSQLParser.FALSE_P, 0)

        def UNKNOWN(self):
            return self.getToken(PostgreSQLParser.UNKNOWN, 0)

        def EMPTY_P(self):
            return self.getToken(PostgreSQLParser.EMPTY_P, 0)

        def ARRAY(self):
            return self.getToken(PostgreSQLParser.ARRAY, 0)

        def OBJECT_P(self):
            return self.getToken(PostgreSQLParser.OBJECT_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_behavior_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_behavior_type" ):
                listener.enterJson_behavior_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_behavior_type" ):
                listener.exitJson_behavior_type(self)




    def json_behavior_type(self):

        localctx = PostgreSQLParser.Json_behavior_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1338, self.RULE_json_behavior_type)
        try:
            self.state = 10094
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1002,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10084
                self.match(PostgreSQLParser.ERROR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10085
                self.match(PostgreSQLParser.NULL_P)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10086
                self.match(PostgreSQLParser.TRUE_P)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10087
                self.match(PostgreSQLParser.FALSE_P)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 10088
                self.match(PostgreSQLParser.UNKNOWN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 10089
                self.match(PostgreSQLParser.EMPTY_P)
                self.state = 10090
                self.match(PostgreSQLParser.ARRAY)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 10091
                self.match(PostgreSQLParser.EMPTY_P)
                self.state = 10092
                self.match(PostgreSQLParser.OBJECT_P)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 10093
                self.match(PostgreSQLParser.EMPTY_P)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_behavior_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def json_behavior(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Json_behaviorContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Json_behaviorContext,i)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.ON)
            else:
                return self.getToken(PostgreSQLParser.ON, i)

        def EMPTY_P(self):
            return self.getToken(PostgreSQLParser.EMPTY_P, 0)

        def ERROR(self):
            return self.getToken(PostgreSQLParser.ERROR, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_behavior_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_behavior_clause" ):
                listener.enterJson_behavior_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_behavior_clause" ):
                listener.exitJson_behavior_clause(self)




    def json_behavior_clause(self):

        localctx = PostgreSQLParser.Json_behavior_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1340, self.RULE_json_behavior_clause)
        try:
            self.state = 10111
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1003,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10096
                self.json_behavior()
                self.state = 10097
                self.match(PostgreSQLParser.ON)
                self.state = 10098
                self.match(PostgreSQLParser.EMPTY_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10100
                self.json_behavior()
                self.state = 10101
                self.match(PostgreSQLParser.ON)
                self.state = 10102
                self.match(PostgreSQLParser.ERROR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10104
                self.json_behavior()
                self.state = 10105
                self.match(PostgreSQLParser.ON)
                self.state = 10106
                self.match(PostgreSQLParser.EMPTY_P)
                self.state = 10107
                self.json_behavior()
                self.state = 10108
                self.match(PostgreSQLParser.ON)
                self.state = 10109
                self.match(PostgreSQLParser.ERROR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_on_error_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def json_behavior(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_behaviorContext,0)


        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def ERROR(self):
            return self.getToken(PostgreSQLParser.ERROR, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_on_error_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_on_error_clause" ):
                listener.enterJson_on_error_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_on_error_clause" ):
                listener.exitJson_on_error_clause(self)




    def json_on_error_clause(self):

        localctx = PostgreSQLParser.Json_on_error_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1342, self.RULE_json_on_error_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10113
            self.json_behavior()
            self.state = 10114
            self.match(PostgreSQLParser.ON)
            self.state = 10115
            self.match(PostgreSQLParser.ERROR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_value_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def json_format_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_format_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_value_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_value_expr" ):
                listener.enterJson_value_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_value_expr" ):
                listener.exitJson_value_expr(self)




    def json_value_expr(self):

        localctx = PostgreSQLParser.Json_value_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1344, self.RULE_json_value_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10117
            self.a_expr()
            self.state = 10119
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1004,self._ctx)
            if la_ == 1:
                self.state = 10118
                self.json_format_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_format_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORMAT_LA(self):
            return self.getToken(PostgreSQLParser.FORMAT_LA, 0)

        def JSON(self):
            return self.getToken(PostgreSQLParser.JSON, 0)

        def ENCODING(self):
            return self.getToken(PostgreSQLParser.ENCODING, 0)

        def name(self):
            return self.getTypedRuleContext(PostgreSQLParser.NameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_format_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_format_clause" ):
                listener.enterJson_format_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_format_clause" ):
                listener.exitJson_format_clause(self)




    def json_format_clause(self):

        localctx = PostgreSQLParser.Json_format_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1346, self.RULE_json_format_clause)
        try:
            self.state = 10127
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1005,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10121
                self.match(PostgreSQLParser.FORMAT_LA)
                self.state = 10122
                self.match(PostgreSQLParser.JSON)
                self.state = 10123
                self.match(PostgreSQLParser.ENCODING)
                self.state = 10124
                self.name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10125
                self.match(PostgreSQLParser.FORMAT_LA)
                self.state = 10126
                self.match(PostgreSQLParser.JSON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_quotes_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEEP(self):
            return self.getToken(PostgreSQLParser.KEEP, 0)

        def QUOTES(self):
            return self.getToken(PostgreSQLParser.QUOTES, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def SCALAR(self):
            return self.getToken(PostgreSQLParser.SCALAR, 0)

        def STRING_P(self):
            return self.getToken(PostgreSQLParser.STRING_P, 0)

        def OMIT(self):
            return self.getToken(PostgreSQLParser.OMIT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_quotes_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_quotes_clause" ):
                listener.enterJson_quotes_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_quotes_clause" ):
                listener.exitJson_quotes_clause(self)




    def json_quotes_clause(self):

        localctx = PostgreSQLParser.Json_quotes_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1348, self.RULE_json_quotes_clause)
        try:
            self.state = 10143
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1006,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10129
                self.match(PostgreSQLParser.KEEP)
                self.state = 10130
                self.match(PostgreSQLParser.QUOTES)
                self.state = 10131
                self.match(PostgreSQLParser.ON)
                self.state = 10132
                self.match(PostgreSQLParser.SCALAR)
                self.state = 10133
                self.match(PostgreSQLParser.STRING_P)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10134
                self.match(PostgreSQLParser.KEEP)
                self.state = 10135
                self.match(PostgreSQLParser.QUOTES)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10136
                self.match(PostgreSQLParser.OMIT)
                self.state = 10137
                self.match(PostgreSQLParser.QUOTES)
                self.state = 10138
                self.match(PostgreSQLParser.ON)
                self.state = 10139
                self.match(PostgreSQLParser.SCALAR)
                self.state = 10140
                self.match(PostgreSQLParser.STRING_P)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10141
                self.match(PostgreSQLParser.OMIT)
                self.state = 10142
                self.match(PostgreSQLParser.QUOTES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_returning_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNING(self):
            return self.getToken(PostgreSQLParser.RETURNING, 0)

        def typename(self):
            return self.getTypedRuleContext(PostgreSQLParser.TypenameContext,0)


        def json_format_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_format_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_returning_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_returning_clause" ):
                listener.enterJson_returning_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_returning_clause" ):
                listener.exitJson_returning_clause(self)




    def json_returning_clause(self):

        localctx = PostgreSQLParser.Json_returning_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1350, self.RULE_json_returning_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10145
            self.match(PostgreSQLParser.RETURNING)
            self.state = 10146
            self.typename()
            self.state = 10148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 10147
                self.json_format_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_predicate_type_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON(self):
            return self.getToken(PostgreSQLParser.JSON, 0)

        def VALUE_P(self):
            return self.getToken(PostgreSQLParser.VALUE_P, 0)

        def ARRAY(self):
            return self.getToken(PostgreSQLParser.ARRAY, 0)

        def OBJECT_P(self):
            return self.getToken(PostgreSQLParser.OBJECT_P, 0)

        def SCALAR(self):
            return self.getToken(PostgreSQLParser.SCALAR, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_predicate_type_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_predicate_type_constraint" ):
                listener.enterJson_predicate_type_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_predicate_type_constraint" ):
                listener.exitJson_predicate_type_constraint(self)




    def json_predicate_type_constraint(self):

        localctx = PostgreSQLParser.Json_predicate_type_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1352, self.RULE_json_predicate_type_constraint)
        try:
            self.state = 10159
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1008,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10150
                self.match(PostgreSQLParser.JSON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10151
                self.match(PostgreSQLParser.JSON)
                self.state = 10152
                self.match(PostgreSQLParser.VALUE_P)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10153
                self.match(PostgreSQLParser.JSON)
                self.state = 10154
                self.match(PostgreSQLParser.ARRAY)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10155
                self.match(PostgreSQLParser.JSON)
                self.state = 10156
                self.match(PostgreSQLParser.OBJECT_P)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 10157
                self.match(PostgreSQLParser.JSON)
                self.state = 10158
                self.match(PostgreSQLParser.SCALAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_key_uniqueness_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def UNIQUE(self):
            return self.getToken(PostgreSQLParser.UNIQUE, 0)

        def KEYS(self):
            return self.getToken(PostgreSQLParser.KEYS, 0)

        def WITHOUT(self):
            return self.getToken(PostgreSQLParser.WITHOUT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_key_uniqueness_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_key_uniqueness_constraint" ):
                listener.enterJson_key_uniqueness_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_key_uniqueness_constraint" ):
                listener.exitJson_key_uniqueness_constraint(self)




    def json_key_uniqueness_constraint(self):

        localctx = PostgreSQLParser.Json_key_uniqueness_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1354, self.RULE_json_key_uniqueness_constraint)
        try:
            self.state = 10171
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1009,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10161
                self.match(PostgreSQLParser.WITH)
                self.state = 10162
                self.match(PostgreSQLParser.UNIQUE)
                self.state = 10163
                self.match(PostgreSQLParser.KEYS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10164
                self.match(PostgreSQLParser.WITH)
                self.state = 10165
                self.match(PostgreSQLParser.UNIQUE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10166
                self.match(PostgreSQLParser.WITHOUT)
                self.state = 10167
                self.match(PostgreSQLParser.UNIQUE)
                self.state = 10168
                self.match(PostgreSQLParser.KEYS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10169
                self.match(PostgreSQLParser.WITHOUT)
                self.state = 10170
                self.match(PostgreSQLParser.UNIQUE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_name_and_value_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def json_name_and_value(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_name_and_valueContext,0)


        def json_name_and_value_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_name_and_value_listContext,0)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_name_and_value_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_name_and_value_list" ):
                listener.enterJson_name_and_value_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_name_and_value_list" ):
                listener.exitJson_name_and_value_list(self)



    def json_name_and_value_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PostgreSQLParser.Json_name_and_value_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1356
        self.enterRecursionRule(localctx, 1356, self.RULE_json_name_and_value_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10174
            self.json_name_and_value()
            self._ctx.stop = self._input.LT(-1)
            self.state = 10181
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1010,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PostgreSQLParser.Json_name_and_value_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_json_name_and_value_list)
                    self.state = 10176
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 10177
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 10178
                    self.json_name_and_value() 
                self.state = 10183
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1010,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Json_name_and_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def c_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.C_exprContext,0)


        def VALUE_P(self):
            return self.getToken(PostgreSQLParser.VALUE_P, 0)

        def json_value_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_value_exprContext,0)


        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)


        def COLON(self):
            return self.getToken(PostgreSQLParser.COLON, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_name_and_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_name_and_value" ):
                listener.enterJson_name_and_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_name_and_value" ):
                listener.exitJson_name_and_value(self)




    def json_name_and_value(self):

        localctx = PostgreSQLParser.Json_name_and_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1358, self.RULE_json_name_and_value)
        try:
            self.state = 10192
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1011,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10184
                self.c_expr()
                self.state = 10185
                self.match(PostgreSQLParser.VALUE_P)
                self.state = 10186
                self.json_value_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10188
                self.a_expr()
                self.state = 10189
                self.match(PostgreSQLParser.COLON)
                self.state = 10190
                self.json_value_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_object_constructor_null_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_P(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.NULL_P)
            else:
                return self.getToken(PostgreSQLParser.NULL_P, i)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def ABSENT(self):
            return self.getToken(PostgreSQLParser.ABSENT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_object_constructor_null_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_object_constructor_null_clause" ):
                listener.enterJson_object_constructor_null_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_object_constructor_null_clause" ):
                listener.exitJson_object_constructor_null_clause(self)




    def json_object_constructor_null_clause(self):

        localctx = PostgreSQLParser.Json_object_constructor_null_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1360, self.RULE_json_object_constructor_null_clause)
        try:
            self.state = 10200
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [116]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10194
                self.match(PostgreSQLParser.NULL_P)
                self.state = 10195
                self.match(PostgreSQLParser.ON)
                self.state = 10196
                self.match(PostgreSQLParser.NULL_P)
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10197
                self.match(PostgreSQLParser.ABSENT)
                self.state = 10198
                self.match(PostgreSQLParser.ON)
                self.state = 10199
                self.match(PostgreSQLParser.NULL_P)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_array_constructor_null_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_P(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.NULL_P)
            else:
                return self.getToken(PostgreSQLParser.NULL_P, i)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def ABSENT(self):
            return self.getToken(PostgreSQLParser.ABSENT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_array_constructor_null_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_array_constructor_null_clause" ):
                listener.enterJson_array_constructor_null_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_array_constructor_null_clause" ):
                listener.exitJson_array_constructor_null_clause(self)




    def json_array_constructor_null_clause(self):

        localctx = PostgreSQLParser.Json_array_constructor_null_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1362, self.RULE_json_array_constructor_null_clause)
        try:
            self.state = 10208
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [116]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10202
                self.match(PostgreSQLParser.NULL_P)
                self.state = 10203
                self.match(PostgreSQLParser.ON)
                self.state = 10204
                self.match(PostgreSQLParser.NULL_P)
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10205
                self.match(PostgreSQLParser.ABSENT)
                self.state = 10206
                self.match(PostgreSQLParser.ON)
                self.state = 10207
                self.match(PostgreSQLParser.NULL_P)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_value_expr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def json_value_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_value_exprContext,0)


        def json_value_expr_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_value_expr_listContext,0)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_value_expr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_value_expr_list" ):
                listener.enterJson_value_expr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_value_expr_list" ):
                listener.exitJson_value_expr_list(self)



    def json_value_expr_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PostgreSQLParser.Json_value_expr_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1364
        self.enterRecursionRule(localctx, 1364, self.RULE_json_value_expr_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10211
            self.json_value_expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 10218
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1014,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PostgreSQLParser.Json_value_expr_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_json_value_expr_list)
                    self.state = 10213
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 10214
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 10215
                    self.json_value_expr() 
                self.state = 10220
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1014,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Json_aggregate_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_OBJECTAGG(self):
            return self.getToken(PostgreSQLParser.JSON_OBJECTAGG, 0)

        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def json_name_and_value(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_name_and_valueContext,0)


        def json_returning_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_returning_clauseContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def json_object_constructor_null_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_object_constructor_null_clauseContext,0)


        def json_key_uniqueness_constraint(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_key_uniqueness_constraintContext,0)


        def JSON_ARRAYAGG(self):
            return self.getToken(PostgreSQLParser.JSON_ARRAYAGG, 0)

        def json_value_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_value_exprContext,0)


        def json_array_aggregate_order_by_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_array_aggregate_order_by_clauseContext,0)


        def json_array_constructor_null_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Json_array_constructor_null_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_aggregate_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_aggregate_func" ):
                listener.enterJson_aggregate_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_aggregate_func" ):
                listener.exitJson_aggregate_func(self)




    def json_aggregate_func(self):

        localctx = PostgreSQLParser.Json_aggregate_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1366, self.RULE_json_aggregate_func)
        self._la = 0 # Token type
        try:
            self.state = 10245
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10221
                self.match(PostgreSQLParser.JSON_OBJECTAGG)
                self.state = 10222
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 10223
                self.json_name_and_value()
                self.state = 10225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==43 or _la==116:
                    self.state = 10224
                    self.json_object_constructor_null_clause()


                self.state = 10228
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143 or _la==410:
                    self.state = 10227
                    self.json_key_uniqueness_constraint()


                self.state = 10230
                self.json_returning_clause()
                self.state = 10231
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10233
                self.match(PostgreSQLParser.JSON_ARRAYAGG)
                self.state = 10234
                self.match(PostgreSQLParser.OPEN_PAREN)
                self.state = 10235
                self.json_value_expr()
                self.state = 10237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==121:
                    self.state = 10236
                    self.json_array_aggregate_order_by_clause()


                self.state = 10240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==43 or _la==116:
                    self.state = 10239
                    self.json_array_constructor_null_clause()


                self.state = 10242
                self.json_returning_clause()
                self.state = 10243
                self.match(PostgreSQLParser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_array_aggregate_order_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(PostgreSQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def sortby_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sortby_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_json_array_aggregate_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_array_aggregate_order_by_clause" ):
                listener.enterJson_array_aggregate_order_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_array_aggregate_order_by_clause" ):
                listener.exitJson_array_aggregate_order_by_clause(self)




    def json_array_aggregate_order_by_clause(self):

        localctx = PostgreSQLParser.Json_array_aggregate_order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1368, self.RULE_json_array_aggregate_order_by_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10247
            self.match(PostgreSQLParser.ORDER)
            self.state = 10248
            self.match(PostgreSQLParser.BY)
            self.state = 10249
            self.sortby_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_list_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def target_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Target_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_target_list_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_list_" ):
                listener.enterTarget_list_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_list_" ):
                listener.exitTarget_list_(self)




    def target_list_(self):

        localctx = PostgreSQLParser.Target_list_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1370, self.RULE_target_list_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10251
            self.target_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def target_el(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Target_elContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Target_elContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_target_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_list" ):
                listener.enterTarget_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_list" ):
                listener.exitTarget_list(self)




    def target_list(self):

        localctx = PostgreSQLParser.Target_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1372, self.RULE_target_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10253
            self.target_el()
            self.state = 10258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 10254
                self.match(PostgreSQLParser.COMMA)
                self.state = 10255
                self.target_el()
                self.state = 10260
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_elContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_target_el

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Target_labelContext(Target_elContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PostgreSQLParser.Target_elContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def a_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.A_exprContext,0)

        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)
        def colLabel(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColLabelContext,0)

        def bareColLabel(self):
            return self.getTypedRuleContext(PostgreSQLParser.BareColLabelContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_label" ):
                listener.enterTarget_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_label" ):
                listener.exitTarget_label(self)


    class Target_starContext(Target_elContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PostgreSQLParser.Target_elContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STAR(self):
            return self.getToken(PostgreSQLParser.STAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_star" ):
                listener.enterTarget_star(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_star" ):
                listener.exitTarget_star(self)



    def target_el(self):

        localctx = PostgreSQLParser.Target_elContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1374, self.RULE_target_el)
        try:
            self.state = 10269
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 12, 13, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 73, 78, 79, 85, 86, 87, 88, 89, 90, 91, 98, 113, 114, 115, 116, 127, 134, 136, 137, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 563, 565, 567, 568, 572, 576, 577, 578, 579, 581, 582, 590]:
                localctx = PostgreSQLParser.Target_labelContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 10261
                self.a_expr()
                self.state = 10266
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [74]:
                    self.state = 10262
                    self.match(PostgreSQLParser.AS)
                    self.state = 10263
                    self.colLabel()
                    pass
                elif token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 101, 106, 107, 110, 111, 113, 114, 115, 116, 119, 120, 122, 123, 124, 126, 127, 128, 129, 130, 131, 133, 134, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 582]:
                    self.state = 10264
                    self.bareColLabel()
                    pass
                elif token in [-1, 3, 6, 7, 67, 84, 97, 99, 100, 102, 103, 104, 105, 108, 109, 112, 117, 118, 121, 125, 135, 141, 142, 143]:
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [9]:
                localctx = PostgreSQLParser.Target_starContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 10268
                self.match(PostgreSQLParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Qualified_nameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Qualified_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_qualified_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_name_list" ):
                listener.enterQualified_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_name_list" ):
                listener.exitQualified_name_list(self)




    def qualified_name_list(self):

        localctx = PostgreSQLParser.Qualified_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1376, self.RULE_qualified_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10271
            self.qualified_name()
            self.state = 10276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 10272
                self.match(PostgreSQLParser.COMMA)
                self.state = 10273
                self.qualified_name()
                self.state = 10278
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def indirection(self):
            return self.getTypedRuleContext(PostgreSQLParser.IndirectionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_qualified_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_name" ):
                listener.enterQualified_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_name" ):
                listener.exitQualified_name(self)




    def qualified_name(self):

        localctx = PostgreSQLParser.Qualified_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1378, self.RULE_qualified_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10279
            self.colid()
            self.state = 10281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4 or _la==11:
                self.state = 10280
                self.indirection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.NameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.NameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName_list" ):
                listener.enterName_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName_list" ):
                listener.exitName_list(self)




    def name_list(self):

        localctx = PostgreSQLParser.Name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1380, self.RULE_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10283
            self.name()
            self.state = 10288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 10284
                self.match(PostgreSQLParser.COMMA)
                self.state = 10285
                self.name()
                self.state = 10290
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)




    def name(self):

        localctx = PostgreSQLParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1382, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10291
            self.colid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attr_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colLabel(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColLabelContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_attr_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr_name" ):
                listener.enterAttr_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr_name" ):
                listener.exitAttr_name(self)




    def attr_name(self):

        localctx = PostgreSQLParser.Attr_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1384, self.RULE_attr_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10293
            self.colLabel()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_file_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_name" ):
                listener.enterFile_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_name" ):
                listener.exitFile_name(self)




    def file_name(self):

        localctx = PostgreSQLParser.File_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1386, self.RULE_file_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10295
            self.sconst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_function_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_function_nameContext,0)


        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def indirection(self):
            return self.getTypedRuleContext(PostgreSQLParser.IndirectionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_func_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_name" ):
                listener.enterFunc_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_name" ):
                listener.exitFunc_name(self)




    def func_name(self):

        localctx = PostgreSQLParser.Func_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1388, self.RULE_func_name)
        try:
            self.state = 10301
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1026,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10297
                self.type_function_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10298
                self.colid()
                self.state = 10299
                self.indirection()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AexprconstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def fconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.FconstContext,0)


        def sconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.SconstContext,0)


        def bconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.BconstContext,0)


        def xconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.XconstContext,0)


        def func_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_nameContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PostgreSQLParser.OPEN_PAREN, 0)

        def func_arg_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Func_arg_listContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(PostgreSQLParser.CLOSE_PAREN, 0)

        def sort_clause_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sort_clause_Context,0)


        def consttypename(self):
            return self.getTypedRuleContext(PostgreSQLParser.ConsttypenameContext,0)


        def constinterval(self):
            return self.getTypedRuleContext(PostgreSQLParser.ConstintervalContext,0)


        def interval_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Interval_Context,0)


        def TRUE_P(self):
            return self.getToken(PostgreSQLParser.TRUE_P, 0)

        def FALSE_P(self):
            return self.getToken(PostgreSQLParser.FALSE_P, 0)

        def NULL_P(self):
            return self.getToken(PostgreSQLParser.NULL_P, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_aexprconst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAexprconst" ):
                listener.enterAexprconst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAexprconst" ):
                listener.exitAexprconst(self)




    def aexprconst(self):

        localctx = PostgreSQLParser.AexprconstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1390, self.RULE_aexprconst)
        self._la = 0 # Token type
        try:
            self.state = 10338
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1031,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10303
                self.iconst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10304
                self.fconst()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10305
                self.sconst()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10306
                self.bconst()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 10307
                self.xconst()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 10308
                self.func_name()
                self.state = 10318
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [563, 565, 567, 590]:
                    self.state = 10309
                    self.sconst()
                    pass
                elif token in [2]:
                    self.state = 10310
                    self.match(PostgreSQLParser.OPEN_PAREN)
                    self.state = 10311
                    self.func_arg_list()
                    self.state = 10313
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==121:
                        self.state = 10312
                        self.sort_clause_()


                    self.state = 10315
                    self.match(PostgreSQLParser.CLOSE_PAREN)
                    self.state = 10316
                    self.sconst()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 10320
                self.consttypename()
                self.state = 10321
                self.sconst()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 10323
                self.constinterval()
                self.state = 10333
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [563, 565, 567, 590]:
                    self.state = 10324
                    self.sconst()
                    self.state = 10326
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1029,self._ctx)
                    if la_ == 1:
                        self.state = 10325
                        self.interval_()


                    pass
                elif token in [2]:
                    self.state = 10328
                    self.match(PostgreSQLParser.OPEN_PAREN)
                    self.state = 10329
                    self.iconst()
                    self.state = 10330
                    self.match(PostgreSQLParser.CLOSE_PAREN)
                    self.state = 10331
                    self.sconst()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 10335
                self.match(PostgreSQLParser.TRUE_P)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 10336
                self.match(PostgreSQLParser.FALSE_P)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 10337
                self.match(PostgreSQLParser.NULL_P)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XconstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexadecimalStringConstant(self):
            return self.getToken(PostgreSQLParser.HexadecimalStringConstant, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_xconst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXconst" ):
                listener.enterXconst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXconst" ):
                listener.exitXconst(self)




    def xconst(self):

        localctx = PostgreSQLParser.XconstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1392, self.RULE_xconst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10340
            self.match(PostgreSQLParser.HexadecimalStringConstant)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BconstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BinaryStringConstant(self):
            return self.getToken(PostgreSQLParser.BinaryStringConstant, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bconst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBconst" ):
                listener.enterBconst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBconst" ):
                listener.exitBconst(self)




    def bconst(self):

        localctx = PostgreSQLParser.BconstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1394, self.RULE_bconst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10342
            self.match(PostgreSQLParser.BinaryStringConstant)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FconstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Numeric(self):
            return self.getToken(PostgreSQLParser.Numeric, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_fconst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFconst" ):
                listener.enterFconst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFconst" ):
                listener.exitFconst(self)




    def fconst(self):

        localctx = PostgreSQLParser.FconstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1396, self.RULE_fconst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10344
            self.match(PostgreSQLParser.Numeric)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IconstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integral(self):
            return self.getToken(PostgreSQLParser.Integral, 0)

        def BinaryIntegral(self):
            return self.getToken(PostgreSQLParser.BinaryIntegral, 0)

        def OctalIntegral(self):
            return self.getToken(PostgreSQLParser.OctalIntegral, 0)

        def HexadecimalIntegral(self):
            return self.getToken(PostgreSQLParser.HexadecimalIntegral, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_iconst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIconst" ):
                listener.enterIconst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIconst" ):
                listener.exitIconst(self)




    def iconst(self):

        localctx = PostgreSQLParser.IconstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1398, self.RULE_iconst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10346
            _la = self._input.LA(1)
            if not(((((_la - 576)) & ~0x3f) == 0 and ((1 << (_la - 576)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SconstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anysconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.AnysconstContext,0)


        def uescape_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Uescape_Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sconst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSconst" ):
                listener.enterSconst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSconst" ):
                listener.exitSconst(self)




    def sconst(self):

        localctx = PostgreSQLParser.SconstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1400, self.RULE_sconst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10348
            self.anysconst()
            self.state = 10350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1032,self._ctx)
            if la_ == 1:
                self.state = 10349
                self.uescape_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnysconstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringConstant(self):
            return self.getToken(PostgreSQLParser.StringConstant, 0)

        def UnicodeEscapeStringConstant(self):
            return self.getToken(PostgreSQLParser.UnicodeEscapeStringConstant, 0)

        def BeginDollarStringConstant(self):
            return self.getToken(PostgreSQLParser.BeginDollarStringConstant, 0)

        def EndDollarStringConstant(self):
            return self.getToken(PostgreSQLParser.EndDollarStringConstant, 0)

        def DollarText(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.DollarText)
            else:
                return self.getToken(PostgreSQLParser.DollarText, i)

        def EscapeStringConstant(self):
            return self.getToken(PostgreSQLParser.EscapeStringConstant, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_anysconst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnysconst" ):
                listener.enterAnysconst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnysconst" ):
                listener.exitAnysconst(self)




    def anysconst(self):

        localctx = PostgreSQLParser.AnysconstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1402, self.RULE_anysconst)
        self._la = 0 # Token type
        try:
            self.state = 10363
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [563]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10352
                self.match(PostgreSQLParser.StringConstant)
                pass
            elif token in [565]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10353
                self.match(PostgreSQLParser.UnicodeEscapeStringConstant)
                pass
            elif token in [567]:
                self.enterOuterAlt(localctx, 3)
                self.state = 10354
                self.match(PostgreSQLParser.BeginDollarStringConstant)
                self.state = 10358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==596:
                    self.state = 10355
                    self.match(PostgreSQLParser.DollarText)
                    self.state = 10360
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 10361
                self.match(PostgreSQLParser.EndDollarStringConstant)
                pass
            elif token in [590]:
                self.enterOuterAlt(localctx, 4)
                self.state = 10362
                self.match(PostgreSQLParser.EscapeStringConstant)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Uescape_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UESCAPE(self):
            return self.getToken(PostgreSQLParser.UESCAPE, 0)

        def anysconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.AnysconstContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_uescape_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUescape_" ):
                listener.enterUescape_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUescape_" ):
                listener.exitUescape_(self)




    def uescape_(self):

        localctx = PostgreSQLParser.Uescape_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1404, self.RULE_uescape_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10365
            self.match(PostgreSQLParser.UESCAPE)
            self.state = 10366
            self.anysconst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignediconstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iconst(self):
            return self.getTypedRuleContext(PostgreSQLParser.IconstContext,0)


        def PLUS(self):
            return self.getToken(PostgreSQLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(PostgreSQLParser.MINUS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_signediconst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignediconst" ):
                listener.enterSignediconst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignediconst" ):
                listener.exitSignediconst(self)




    def signediconst(self):

        localctx = PostgreSQLParser.SignediconstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1406, self.RULE_signediconst)
        try:
            self.state = 10373
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [576, 577, 578, 579]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10368
                self.iconst()
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10369
                self.match(PostgreSQLParser.PLUS)
                self.state = 10370
                self.iconst()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 3)
                self.state = 10371
                self.match(PostgreSQLParser.MINUS)
                self.state = 10372
                self.iconst()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rolespec(self):
            return self.getTypedRuleContext(PostgreSQLParser.RolespecContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_roleid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleid" ):
                listener.enterRoleid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleid" ):
                listener.exitRoleid(self)




    def roleid(self):

        localctx = PostgreSQLParser.RoleidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1408, self.RULE_roleid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10375
            self.rolespec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RolespecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonreservedword(self):
            return self.getTypedRuleContext(PostgreSQLParser.NonreservedwordContext,0)


        def CURRENT_USER(self):
            return self.getToken(PostgreSQLParser.CURRENT_USER, 0)

        def SESSION_USER(self):
            return self.getToken(PostgreSQLParser.SESSION_USER, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_rolespec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRolespec" ):
                listener.enterRolespec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRolespec" ):
                listener.exitRolespec(self)




    def rolespec(self):

        localctx = PostgreSQLParser.RolespecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1410, self.RULE_rolespec)
        try:
            self.state = 10380
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553, 554, 555, 559, 582]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10377
                self.nonreservedword()
                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10378
                self.match(PostgreSQLParser.CURRENT_USER)
                pass
            elif token in [127]:
                self.enterOuterAlt(localctx, 3)
                self.state = 10379
                self.match(PostgreSQLParser.SESSION_USER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Role_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rolespec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.RolespecContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.RolespecContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_role_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRole_list" ):
                listener.enterRole_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRole_list" ):
                listener.exitRole_list(self)




    def role_list(self):

        localctx = PostgreSQLParser.Role_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1412, self.RULE_role_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10382
            self.rolespec()
            self.state = 10387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 10383
                self.match(PostgreSQLParser.COMMA)
                self.state = 10384
                self.rolespec()
                self.state = 10389
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PostgreSQLParser.IdentifierContext,0)


        def unreserved_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Unreserved_keywordContext,0)


        def col_name_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Col_name_keywordContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_colid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColid" ):
                listener.enterColid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColid" ):
                listener.exitColid(self)




    def colid(self):

        localctx = PostgreSQLParser.ColidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1414, self.RULE_colid)
        try:
            self.state = 10393
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [554, 555, 559, 582]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10390
                self.identifier()
                pass
            elif token in [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 162, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 511, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 529, 542, 553]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10391
                self.unreserved_keyword()
                pass
            elif token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 491, 508, 512, 514, 527]:
                self.enterOuterAlt(localctx, 3)
                self.state = 10392
                self.col_name_keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PostgreSQLParser.IdentifierContext,0)


        def unreserved_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Unreserved_keywordContext,0)


        def type_func_name_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_func_name_keywordContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_type_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_function_name" ):
                listener.enterType_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_function_name" ):
                listener.exitType_function_name(self)




    def type_function_name(self):

        localctx = PostgreSQLParser.Type_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1416, self.RULE_type_function_name)
        try:
            self.state = 10398
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [554, 555, 559, 582]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10395
                self.identifier()
                pass
            elif token in [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 162, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 511, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 529, 542, 553]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10396
                self.unreserved_keyword()
                pass
            elif token in [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 510]:
                self.enterOuterAlt(localctx, 3)
                self.state = 10397
                self.type_func_name_keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonreservedwordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PostgreSQLParser.IdentifierContext,0)


        def unreserved_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Unreserved_keywordContext,0)


        def col_name_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Col_name_keywordContext,0)


        def type_func_name_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_func_name_keywordContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_nonreservedword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonreservedword" ):
                listener.enterNonreservedword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonreservedword" ):
                listener.exitNonreservedword(self)




    def nonreservedword(self):

        localctx = PostgreSQLParser.NonreservedwordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1418, self.RULE_nonreservedword)
        try:
            self.state = 10404
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [554, 555, 559, 582]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10400
                self.identifier()
                pass
            elif token in [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 162, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 511, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 529, 542, 553]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10401
                self.unreserved_keyword()
                pass
            elif token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 491, 508, 512, 514, 527]:
                self.enterOuterAlt(localctx, 3)
                self.state = 10402
                self.col_name_keyword()
                pass
            elif token in [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 510]:
                self.enterOuterAlt(localctx, 4)
                self.state = 10403
                self.type_func_name_keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PostgreSQLParser.IdentifierContext,0)


        def unreserved_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Unreserved_keywordContext,0)


        def col_name_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Col_name_keywordContext,0)


        def type_func_name_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Type_func_name_keywordContext,0)


        def reserved_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Reserved_keywordContext,0)


        def EXIT(self):
            return self.getToken(PostgreSQLParser.EXIT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_colLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColLabel" ):
                listener.enterColLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColLabel" ):
                listener.exitColLabel(self)




    def colLabel(self):

        localctx = PostgreSQLParser.ColLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1420, self.RULE_colLabel)
        try:
            self.state = 10412
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [554, 555, 559, 582]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10406
                self.identifier()
                pass
            elif token in [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 162, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 511, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 529, 542, 553]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10407
                self.unreserved_keyword()
                pass
            elif token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 491, 508, 512, 514, 527]:
                self.enterOuterAlt(localctx, 3)
                self.state = 10408
                self.col_name_keyword()
                pass
            elif token in [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 510]:
                self.enterOuterAlt(localctx, 4)
                self.state = 10409
                self.type_func_name_keyword()
                pass
            elif token in [42, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 492]:
                self.enterOuterAlt(localctx, 5)
                self.state = 10410
                self.reserved_keyword()
                pass
            elif token in [541]:
                self.enterOuterAlt(localctx, 6)
                self.state = 10411
                self.match(PostgreSQLParser.EXIT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BareColLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PostgreSQLParser.IdentifierContext,0)


        def bare_label_keyword(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bare_label_keywordContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bareColLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBareColLabel" ):
                listener.enterBareColLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBareColLabel" ):
                listener.exitBareColLabel(self)




    def bareColLabel(self):

        localctx = PostgreSQLParser.BareColLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1422, self.RULE_bareColLabel)
        try:
            self.state = 10416
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [554, 555, 559, 582]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10414
                self.identifier()
                pass
            elif token in [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 101, 106, 107, 110, 111, 113, 114, 115, 116, 119, 120, 122, 123, 124, 126, 127, 128, 129, 130, 131, 133, 134, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 542, 553]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10415
                self.bare_label_keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unreserved_keywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABORT_P(self):
            return self.getToken(PostgreSQLParser.ABORT_P, 0)

        def ABSENT(self):
            return self.getToken(PostgreSQLParser.ABSENT, 0)

        def ABSOLUTE_P(self):
            return self.getToken(PostgreSQLParser.ABSOLUTE_P, 0)

        def ACCESS(self):
            return self.getToken(PostgreSQLParser.ACCESS, 0)

        def ACTION(self):
            return self.getToken(PostgreSQLParser.ACTION, 0)

        def ADD_P(self):
            return self.getToken(PostgreSQLParser.ADD_P, 0)

        def ADMIN(self):
            return self.getToken(PostgreSQLParser.ADMIN, 0)

        def AFTER(self):
            return self.getToken(PostgreSQLParser.AFTER, 0)

        def AGGREGATE(self):
            return self.getToken(PostgreSQLParser.AGGREGATE, 0)

        def ALSO(self):
            return self.getToken(PostgreSQLParser.ALSO, 0)

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def ALWAYS(self):
            return self.getToken(PostgreSQLParser.ALWAYS, 0)

        def ASENSITIVE(self):
            return self.getToken(PostgreSQLParser.ASENSITIVE, 0)

        def ASSERTION(self):
            return self.getToken(PostgreSQLParser.ASSERTION, 0)

        def ASSIGNMENT(self):
            return self.getToken(PostgreSQLParser.ASSIGNMENT, 0)

        def AT(self):
            return self.getToken(PostgreSQLParser.AT, 0)

        def ATOMIC(self):
            return self.getToken(PostgreSQLParser.ATOMIC, 0)

        def ATTACH(self):
            return self.getToken(PostgreSQLParser.ATTACH, 0)

        def ATTRIBUTE(self):
            return self.getToken(PostgreSQLParser.ATTRIBUTE, 0)

        def BACKWARD(self):
            return self.getToken(PostgreSQLParser.BACKWARD, 0)

        def BEFORE(self):
            return self.getToken(PostgreSQLParser.BEFORE, 0)

        def BEGIN_P(self):
            return self.getToken(PostgreSQLParser.BEGIN_P, 0)

        def BREADTH(self):
            return self.getToken(PostgreSQLParser.BREADTH, 0)

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def CACHE(self):
            return self.getToken(PostgreSQLParser.CACHE, 0)

        def CALL(self):
            return self.getToken(PostgreSQLParser.CALL, 0)

        def CALLED(self):
            return self.getToken(PostgreSQLParser.CALLED, 0)

        def CASCADE(self):
            return self.getToken(PostgreSQLParser.CASCADE, 0)

        def CASCADED(self):
            return self.getToken(PostgreSQLParser.CASCADED, 0)

        def CATALOG(self):
            return self.getToken(PostgreSQLParser.CATALOG, 0)

        def CHAIN(self):
            return self.getToken(PostgreSQLParser.CHAIN, 0)

        def CHARACTERISTICS(self):
            return self.getToken(PostgreSQLParser.CHARACTERISTICS, 0)

        def CHECKPOINT(self):
            return self.getToken(PostgreSQLParser.CHECKPOINT, 0)

        def CLASS(self):
            return self.getToken(PostgreSQLParser.CLASS, 0)

        def CLOSE(self):
            return self.getToken(PostgreSQLParser.CLOSE, 0)

        def CLUSTER(self):
            return self.getToken(PostgreSQLParser.CLUSTER, 0)

        def COLUMNS(self):
            return self.getToken(PostgreSQLParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(PostgreSQLParser.COMMENT, 0)

        def COMMENTS(self):
            return self.getToken(PostgreSQLParser.COMMENTS, 0)

        def COMMIT(self):
            return self.getToken(PostgreSQLParser.COMMIT, 0)

        def COMMITTED(self):
            return self.getToken(PostgreSQLParser.COMMITTED, 0)

        def COMPRESSION(self):
            return self.getToken(PostgreSQLParser.COMPRESSION, 0)

        def CONDITIONAL(self):
            return self.getToken(PostgreSQLParser.CONDITIONAL, 0)

        def CONFIGURATION(self):
            return self.getToken(PostgreSQLParser.CONFIGURATION, 0)

        def CONFLICT(self):
            return self.getToken(PostgreSQLParser.CONFLICT, 0)

        def CONNECTION(self):
            return self.getToken(PostgreSQLParser.CONNECTION, 0)

        def CONSTRAINTS(self):
            return self.getToken(PostgreSQLParser.CONSTRAINTS, 0)

        def CONTENT_P(self):
            return self.getToken(PostgreSQLParser.CONTENT_P, 0)

        def CONTINUE_P(self):
            return self.getToken(PostgreSQLParser.CONTINUE_P, 0)

        def CONVERSION_P(self):
            return self.getToken(PostgreSQLParser.CONVERSION_P, 0)

        def COPY(self):
            return self.getToken(PostgreSQLParser.COPY, 0)

        def COST(self):
            return self.getToken(PostgreSQLParser.COST, 0)

        def CSV(self):
            return self.getToken(PostgreSQLParser.CSV, 0)

        def CUBE(self):
            return self.getToken(PostgreSQLParser.CUBE, 0)

        def CURRENT_P(self):
            return self.getToken(PostgreSQLParser.CURRENT_P, 0)

        def CURSOR(self):
            return self.getToken(PostgreSQLParser.CURSOR, 0)

        def CYCLE(self):
            return self.getToken(PostgreSQLParser.CYCLE, 0)

        def DATA_P(self):
            return self.getToken(PostgreSQLParser.DATA_P, 0)

        def DATABASE(self):
            return self.getToken(PostgreSQLParser.DATABASE, 0)

        def DAY_P(self):
            return self.getToken(PostgreSQLParser.DAY_P, 0)

        def DEALLOCATE(self):
            return self.getToken(PostgreSQLParser.DEALLOCATE, 0)

        def DECLARE(self):
            return self.getToken(PostgreSQLParser.DECLARE, 0)

        def DEFAULTS(self):
            return self.getToken(PostgreSQLParser.DEFAULTS, 0)

        def DEFERRED(self):
            return self.getToken(PostgreSQLParser.DEFERRED, 0)

        def DEFINER(self):
            return self.getToken(PostgreSQLParser.DEFINER, 0)

        def DELETE_P(self):
            return self.getToken(PostgreSQLParser.DELETE_P, 0)

        def DELIMITER(self):
            return self.getToken(PostgreSQLParser.DELIMITER, 0)

        def DELIMITERS(self):
            return self.getToken(PostgreSQLParser.DELIMITERS, 0)

        def DEPENDS(self):
            return self.getToken(PostgreSQLParser.DEPENDS, 0)

        def DEPTH(self):
            return self.getToken(PostgreSQLParser.DEPTH, 0)

        def DETACH(self):
            return self.getToken(PostgreSQLParser.DETACH, 0)

        def DICTIONARY(self):
            return self.getToken(PostgreSQLParser.DICTIONARY, 0)

        def DISABLE_P(self):
            return self.getToken(PostgreSQLParser.DISABLE_P, 0)

        def DISCARD(self):
            return self.getToken(PostgreSQLParser.DISCARD, 0)

        def DOCUMENT_P(self):
            return self.getToken(PostgreSQLParser.DOCUMENT_P, 0)

        def DOMAIN_P(self):
            return self.getToken(PostgreSQLParser.DOMAIN_P, 0)

        def DOUBLE_P(self):
            return self.getToken(PostgreSQLParser.DOUBLE_P, 0)

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def EACH(self):
            return self.getToken(PostgreSQLParser.EACH, 0)

        def EMPTY_P(self):
            return self.getToken(PostgreSQLParser.EMPTY_P, 0)

        def ENABLE_P(self):
            return self.getToken(PostgreSQLParser.ENABLE_P, 0)

        def ENCODING(self):
            return self.getToken(PostgreSQLParser.ENCODING, 0)

        def ENCRYPTED(self):
            return self.getToken(PostgreSQLParser.ENCRYPTED, 0)

        def ENUM_P(self):
            return self.getToken(PostgreSQLParser.ENUM_P, 0)

        def ERROR(self):
            return self.getToken(PostgreSQLParser.ERROR, 0)

        def ESCAPE(self):
            return self.getToken(PostgreSQLParser.ESCAPE, 0)

        def EVENT(self):
            return self.getToken(PostgreSQLParser.EVENT, 0)

        def EXCLUDE(self):
            return self.getToken(PostgreSQLParser.EXCLUDE, 0)

        def EXCLUDING(self):
            return self.getToken(PostgreSQLParser.EXCLUDING, 0)

        def EXCLUSIVE(self):
            return self.getToken(PostgreSQLParser.EXCLUSIVE, 0)

        def EXECUTE(self):
            return self.getToken(PostgreSQLParser.EXECUTE, 0)

        def EXPLAIN(self):
            return self.getToken(PostgreSQLParser.EXPLAIN, 0)

        def EXPRESSION(self):
            return self.getToken(PostgreSQLParser.EXPRESSION, 0)

        def EXTENSION(self):
            return self.getToken(PostgreSQLParser.EXTENSION, 0)

        def EXTERNAL(self):
            return self.getToken(PostgreSQLParser.EXTERNAL, 0)

        def FAMILY(self):
            return self.getToken(PostgreSQLParser.FAMILY, 0)

        def FILTER(self):
            return self.getToken(PostgreSQLParser.FILTER, 0)

        def FINALIZE(self):
            return self.getToken(PostgreSQLParser.FINALIZE, 0)

        def FIRST_P(self):
            return self.getToken(PostgreSQLParser.FIRST_P, 0)

        def FOLLOWING(self):
            return self.getToken(PostgreSQLParser.FOLLOWING, 0)

        def FORCE(self):
            return self.getToken(PostgreSQLParser.FORCE, 0)

        def FORMAT(self):
            return self.getToken(PostgreSQLParser.FORMAT, 0)

        def FORWARD(self):
            return self.getToken(PostgreSQLParser.FORWARD, 0)

        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def FUNCTIONS(self):
            return self.getToken(PostgreSQLParser.FUNCTIONS, 0)

        def GENERATED(self):
            return self.getToken(PostgreSQLParser.GENERATED, 0)

        def GLOBAL(self):
            return self.getToken(PostgreSQLParser.GLOBAL, 0)

        def GRANTED(self):
            return self.getToken(PostgreSQLParser.GRANTED, 0)

        def GROUPS(self):
            return self.getToken(PostgreSQLParser.GROUPS, 0)

        def HANDLER(self):
            return self.getToken(PostgreSQLParser.HANDLER, 0)

        def HEADER_P(self):
            return self.getToken(PostgreSQLParser.HEADER_P, 0)

        def HOLD(self):
            return self.getToken(PostgreSQLParser.HOLD, 0)

        def HOUR_P(self):
            return self.getToken(PostgreSQLParser.HOUR_P, 0)

        def IDENTITY_P(self):
            return self.getToken(PostgreSQLParser.IDENTITY_P, 0)

        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def IMMEDIATE(self):
            return self.getToken(PostgreSQLParser.IMMEDIATE, 0)

        def IMMUTABLE(self):
            return self.getToken(PostgreSQLParser.IMMUTABLE, 0)

        def IMPLICIT_P(self):
            return self.getToken(PostgreSQLParser.IMPLICIT_P, 0)

        def IMPORT_P(self):
            return self.getToken(PostgreSQLParser.IMPORT_P, 0)

        def INCLUDE(self):
            return self.getToken(PostgreSQLParser.INCLUDE, 0)

        def INCLUDING(self):
            return self.getToken(PostgreSQLParser.INCLUDING, 0)

        def INCREMENT(self):
            return self.getToken(PostgreSQLParser.INCREMENT, 0)

        def INDENT(self):
            return self.getToken(PostgreSQLParser.INDENT, 0)

        def INDEX(self):
            return self.getToken(PostgreSQLParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(PostgreSQLParser.INDEXES, 0)

        def INHERIT(self):
            return self.getToken(PostgreSQLParser.INHERIT, 0)

        def INHERITS(self):
            return self.getToken(PostgreSQLParser.INHERITS, 0)

        def INLINE_P(self):
            return self.getToken(PostgreSQLParser.INLINE_P, 0)

        def INPUT_P(self):
            return self.getToken(PostgreSQLParser.INPUT_P, 0)

        def INSENSITIVE(self):
            return self.getToken(PostgreSQLParser.INSENSITIVE, 0)

        def INSERT(self):
            return self.getToken(PostgreSQLParser.INSERT, 0)

        def INSTEAD(self):
            return self.getToken(PostgreSQLParser.INSTEAD, 0)

        def INVOKER(self):
            return self.getToken(PostgreSQLParser.INVOKER, 0)

        def ISOLATION(self):
            return self.getToken(PostgreSQLParser.ISOLATION, 0)

        def KEEP(self):
            return self.getToken(PostgreSQLParser.KEEP, 0)

        def KEY(self):
            return self.getToken(PostgreSQLParser.KEY, 0)

        def KEYS(self):
            return self.getToken(PostgreSQLParser.KEYS, 0)

        def LABEL(self):
            return self.getToken(PostgreSQLParser.LABEL, 0)

        def LANGUAGE(self):
            return self.getToken(PostgreSQLParser.LANGUAGE, 0)

        def LARGE_P(self):
            return self.getToken(PostgreSQLParser.LARGE_P, 0)

        def LAST_P(self):
            return self.getToken(PostgreSQLParser.LAST_P, 0)

        def LEAKPROOF(self):
            return self.getToken(PostgreSQLParser.LEAKPROOF, 0)

        def LEVEL(self):
            return self.getToken(PostgreSQLParser.LEVEL, 0)

        def LISTEN(self):
            return self.getToken(PostgreSQLParser.LISTEN, 0)

        def LOAD(self):
            return self.getToken(PostgreSQLParser.LOAD, 0)

        def LOCAL(self):
            return self.getToken(PostgreSQLParser.LOCAL, 0)

        def LOCATION(self):
            return self.getToken(PostgreSQLParser.LOCATION, 0)

        def LOCK_P(self):
            return self.getToken(PostgreSQLParser.LOCK_P, 0)

        def LOCKED(self):
            return self.getToken(PostgreSQLParser.LOCKED, 0)

        def LOGGED(self):
            return self.getToken(PostgreSQLParser.LOGGED, 0)

        def MAPPING(self):
            return self.getToken(PostgreSQLParser.MAPPING, 0)

        def MATCH(self):
            return self.getToken(PostgreSQLParser.MATCH, 0)

        def MATCHED(self):
            return self.getToken(PostgreSQLParser.MATCHED, 0)

        def MATERIALIZED(self):
            return self.getToken(PostgreSQLParser.MATERIALIZED, 0)

        def MAXVALUE(self):
            return self.getToken(PostgreSQLParser.MAXVALUE, 0)

        def MERGE(self):
            return self.getToken(PostgreSQLParser.MERGE, 0)

        def METHOD(self):
            return self.getToken(PostgreSQLParser.METHOD, 0)

        def MINUTE_P(self):
            return self.getToken(PostgreSQLParser.MINUTE_P, 0)

        def MINVALUE(self):
            return self.getToken(PostgreSQLParser.MINVALUE, 0)

        def MODE(self):
            return self.getToken(PostgreSQLParser.MODE, 0)

        def MONTH_P(self):
            return self.getToken(PostgreSQLParser.MONTH_P, 0)

        def MOVE(self):
            return self.getToken(PostgreSQLParser.MOVE, 0)

        def NAME_P(self):
            return self.getToken(PostgreSQLParser.NAME_P, 0)

        def NAMES(self):
            return self.getToken(PostgreSQLParser.NAMES, 0)

        def NESTED(self):
            return self.getToken(PostgreSQLParser.NESTED, 0)

        def NEW(self):
            return self.getToken(PostgreSQLParser.NEW, 0)

        def NEXT(self):
            return self.getToken(PostgreSQLParser.NEXT, 0)

        def NFC(self):
            return self.getToken(PostgreSQLParser.NFC, 0)

        def NFD(self):
            return self.getToken(PostgreSQLParser.NFD, 0)

        def NFKC(self):
            return self.getToken(PostgreSQLParser.NFKC, 0)

        def NFKD(self):
            return self.getToken(PostgreSQLParser.NFKD, 0)

        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def NORMALIZED(self):
            return self.getToken(PostgreSQLParser.NORMALIZED, 0)

        def NOTHING(self):
            return self.getToken(PostgreSQLParser.NOTHING, 0)

        def NOTIFY(self):
            return self.getToken(PostgreSQLParser.NOTIFY, 0)

        def NOWAIT(self):
            return self.getToken(PostgreSQLParser.NOWAIT, 0)

        def NULLS_P(self):
            return self.getToken(PostgreSQLParser.NULLS_P, 0)

        def OBJECT_P(self):
            return self.getToken(PostgreSQLParser.OBJECT_P, 0)

        def OF(self):
            return self.getToken(PostgreSQLParser.OF, 0)

        def OFF(self):
            return self.getToken(PostgreSQLParser.OFF, 0)

        def OIDS(self):
            return self.getToken(PostgreSQLParser.OIDS, 0)

        def OLD(self):
            return self.getToken(PostgreSQLParser.OLD, 0)

        def OMIT(self):
            return self.getToken(PostgreSQLParser.OMIT, 0)

        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def OPTION(self):
            return self.getToken(PostgreSQLParser.OPTION, 0)

        def OPTIONS(self):
            return self.getToken(PostgreSQLParser.OPTIONS, 0)

        def ORDINALITY(self):
            return self.getToken(PostgreSQLParser.ORDINALITY, 0)

        def OTHERS(self):
            return self.getToken(PostgreSQLParser.OTHERS, 0)

        def OVER(self):
            return self.getToken(PostgreSQLParser.OVER, 0)

        def OVERRIDING(self):
            return self.getToken(PostgreSQLParser.OVERRIDING, 0)

        def OWNED(self):
            return self.getToken(PostgreSQLParser.OWNED, 0)

        def OWNER(self):
            return self.getToken(PostgreSQLParser.OWNER, 0)

        def PARALLEL(self):
            return self.getToken(PostgreSQLParser.PARALLEL, 0)

        def PARAMETER(self):
            return self.getToken(PostgreSQLParser.PARAMETER, 0)

        def PARSER(self):
            return self.getToken(PostgreSQLParser.PARSER, 0)

        def PARTIAL(self):
            return self.getToken(PostgreSQLParser.PARTIAL, 0)

        def PARTITION(self):
            return self.getToken(PostgreSQLParser.PARTITION, 0)

        def PASSING(self):
            return self.getToken(PostgreSQLParser.PASSING, 0)

        def PASSWORD(self):
            return self.getToken(PostgreSQLParser.PASSWORD, 0)

        def PATH(self):
            return self.getToken(PostgreSQLParser.PATH, 0)

        def PERIOD(self):
            return self.getToken(PostgreSQLParser.PERIOD, 0)

        def PLAN(self):
            return self.getToken(PostgreSQLParser.PLAN, 0)

        def PLANS(self):
            return self.getToken(PostgreSQLParser.PLANS, 0)

        def POLICY(self):
            return self.getToken(PostgreSQLParser.POLICY, 0)

        def PRECEDING(self):
            return self.getToken(PostgreSQLParser.PRECEDING, 0)

        def PREPARE(self):
            return self.getToken(PostgreSQLParser.PREPARE, 0)

        def PREPARED(self):
            return self.getToken(PostgreSQLParser.PREPARED, 0)

        def PRESERVE(self):
            return self.getToken(PostgreSQLParser.PRESERVE, 0)

        def PRIOR(self):
            return self.getToken(PostgreSQLParser.PRIOR, 0)

        def PRIVILEGES(self):
            return self.getToken(PostgreSQLParser.PRIVILEGES, 0)

        def PROCEDURAL(self):
            return self.getToken(PostgreSQLParser.PROCEDURAL, 0)

        def PROCEDURE(self):
            return self.getToken(PostgreSQLParser.PROCEDURE, 0)

        def PROCEDURES(self):
            return self.getToken(PostgreSQLParser.PROCEDURES, 0)

        def PROGRAM(self):
            return self.getToken(PostgreSQLParser.PROGRAM, 0)

        def PUBLICATION(self):
            return self.getToken(PostgreSQLParser.PUBLICATION, 0)

        def QUOTE(self):
            return self.getToken(PostgreSQLParser.QUOTE, 0)

        def QUOTES(self):
            return self.getToken(PostgreSQLParser.QUOTES, 0)

        def RANGE(self):
            return self.getToken(PostgreSQLParser.RANGE, 0)

        def READ(self):
            return self.getToken(PostgreSQLParser.READ, 0)

        def REASSIGN(self):
            return self.getToken(PostgreSQLParser.REASSIGN, 0)

        def RECURSIVE(self):
            return self.getToken(PostgreSQLParser.RECURSIVE, 0)

        def REF(self):
            return self.getToken(PostgreSQLParser.REF, 0)

        def REFERENCING(self):
            return self.getToken(PostgreSQLParser.REFERENCING, 0)

        def REFRESH(self):
            return self.getToken(PostgreSQLParser.REFRESH, 0)

        def REINDEX(self):
            return self.getToken(PostgreSQLParser.REINDEX, 0)

        def RELATIVE_P(self):
            return self.getToken(PostgreSQLParser.RELATIVE_P, 0)

        def RELEASE(self):
            return self.getToken(PostgreSQLParser.RELEASE, 0)

        def RENAME(self):
            return self.getToken(PostgreSQLParser.RENAME, 0)

        def REPEATABLE(self):
            return self.getToken(PostgreSQLParser.REPEATABLE, 0)

        def REPLACE(self):
            return self.getToken(PostgreSQLParser.REPLACE, 0)

        def REPLICA(self):
            return self.getToken(PostgreSQLParser.REPLICA, 0)

        def RESET(self):
            return self.getToken(PostgreSQLParser.RESET, 0)

        def RESTART(self):
            return self.getToken(PostgreSQLParser.RESTART, 0)

        def RESTRICT(self):
            return self.getToken(PostgreSQLParser.RESTRICT, 0)

        def RETURN(self):
            return self.getToken(PostgreSQLParser.RETURN, 0)

        def RETURNS(self):
            return self.getToken(PostgreSQLParser.RETURNS, 0)

        def REVOKE(self):
            return self.getToken(PostgreSQLParser.REVOKE, 0)

        def ROLE(self):
            return self.getToken(PostgreSQLParser.ROLE, 0)

        def ROLLBACK(self):
            return self.getToken(PostgreSQLParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(PostgreSQLParser.ROLLUP, 0)

        def ROUTINE(self):
            return self.getToken(PostgreSQLParser.ROUTINE, 0)

        def ROUTINES(self):
            return self.getToken(PostgreSQLParser.ROUTINES, 0)

        def ROWS(self):
            return self.getToken(PostgreSQLParser.ROWS, 0)

        def RULE(self):
            return self.getToken(PostgreSQLParser.RULE, 0)

        def SAVEPOINT(self):
            return self.getToken(PostgreSQLParser.SAVEPOINT, 0)

        def SCALAR(self):
            return self.getToken(PostgreSQLParser.SCALAR, 0)

        def SCHEMA(self):
            return self.getToken(PostgreSQLParser.SCHEMA, 0)

        def SCHEMAS(self):
            return self.getToken(PostgreSQLParser.SCHEMAS, 0)

        def SCROLL(self):
            return self.getToken(PostgreSQLParser.SCROLL, 0)

        def SEARCH(self):
            return self.getToken(PostgreSQLParser.SEARCH, 0)

        def SECOND_P(self):
            return self.getToken(PostgreSQLParser.SECOND_P, 0)

        def SECURITY(self):
            return self.getToken(PostgreSQLParser.SECURITY, 0)

        def SEQUENCE(self):
            return self.getToken(PostgreSQLParser.SEQUENCE, 0)

        def SEQUENCES(self):
            return self.getToken(PostgreSQLParser.SEQUENCES, 0)

        def SERIALIZABLE(self):
            return self.getToken(PostgreSQLParser.SERIALIZABLE, 0)

        def SERVER(self):
            return self.getToken(PostgreSQLParser.SERVER, 0)

        def SESSION(self):
            return self.getToken(PostgreSQLParser.SESSION, 0)

        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def SETS(self):
            return self.getToken(PostgreSQLParser.SETS, 0)

        def SHARE(self):
            return self.getToken(PostgreSQLParser.SHARE, 0)

        def SHOW(self):
            return self.getToken(PostgreSQLParser.SHOW, 0)

        def SIMPLE(self):
            return self.getToken(PostgreSQLParser.SIMPLE, 0)

        def SKIP_P(self):
            return self.getToken(PostgreSQLParser.SKIP_P, 0)

        def SNAPSHOT(self):
            return self.getToken(PostgreSQLParser.SNAPSHOT, 0)

        def SOURCE(self):
            return self.getToken(PostgreSQLParser.SOURCE, 0)

        def SQL_P(self):
            return self.getToken(PostgreSQLParser.SQL_P, 0)

        def STABLE(self):
            return self.getToken(PostgreSQLParser.STABLE, 0)

        def STANDALONE_P(self):
            return self.getToken(PostgreSQLParser.STANDALONE_P, 0)

        def START(self):
            return self.getToken(PostgreSQLParser.START, 0)

        def STATEMENT(self):
            return self.getToken(PostgreSQLParser.STATEMENT, 0)

        def STATISTICS(self):
            return self.getToken(PostgreSQLParser.STATISTICS, 0)

        def STDIN(self):
            return self.getToken(PostgreSQLParser.STDIN, 0)

        def STDOUT(self):
            return self.getToken(PostgreSQLParser.STDOUT, 0)

        def STORAGE(self):
            return self.getToken(PostgreSQLParser.STORAGE, 0)

        def STORED(self):
            return self.getToken(PostgreSQLParser.STORED, 0)

        def STRICT_P(self):
            return self.getToken(PostgreSQLParser.STRICT_P, 0)

        def STRING_P(self):
            return self.getToken(PostgreSQLParser.STRING_P, 0)

        def STRIP_P(self):
            return self.getToken(PostgreSQLParser.STRIP_P, 0)

        def SUBSCRIPTION(self):
            return self.getToken(PostgreSQLParser.SUBSCRIPTION, 0)

        def SUPPORT(self):
            return self.getToken(PostgreSQLParser.SUPPORT, 0)

        def SYSID(self):
            return self.getToken(PostgreSQLParser.SYSID, 0)

        def SYSTEM_P(self):
            return self.getToken(PostgreSQLParser.SYSTEM_P, 0)

        def TABLES(self):
            return self.getToken(PostgreSQLParser.TABLES, 0)

        def TABLESPACE(self):
            return self.getToken(PostgreSQLParser.TABLESPACE, 0)

        def TARGET(self):
            return self.getToken(PostgreSQLParser.TARGET, 0)

        def TEMP(self):
            return self.getToken(PostgreSQLParser.TEMP, 0)

        def TEMPLATE(self):
            return self.getToken(PostgreSQLParser.TEMPLATE, 0)

        def TEMPORARY(self):
            return self.getToken(PostgreSQLParser.TEMPORARY, 0)

        def TEXT_P(self):
            return self.getToken(PostgreSQLParser.TEXT_P, 0)

        def TIES(self):
            return self.getToken(PostgreSQLParser.TIES, 0)

        def TRANSACTION(self):
            return self.getToken(PostgreSQLParser.TRANSACTION, 0)

        def TRANSFORM(self):
            return self.getToken(PostgreSQLParser.TRANSFORM, 0)

        def TRIGGER(self):
            return self.getToken(PostgreSQLParser.TRIGGER, 0)

        def TRUNCATE(self):
            return self.getToken(PostgreSQLParser.TRUNCATE, 0)

        def TRUSTED(self):
            return self.getToken(PostgreSQLParser.TRUSTED, 0)

        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def TYPES_P(self):
            return self.getToken(PostgreSQLParser.TYPES_P, 0)

        def UESCAPE(self):
            return self.getToken(PostgreSQLParser.UESCAPE, 0)

        def UNBOUNDED(self):
            return self.getToken(PostgreSQLParser.UNBOUNDED, 0)

        def UNCOMMITTED(self):
            return self.getToken(PostgreSQLParser.UNCOMMITTED, 0)

        def UNCONDITIONAL(self):
            return self.getToken(PostgreSQLParser.UNCONDITIONAL, 0)

        def UNENCRYPTED(self):
            return self.getToken(PostgreSQLParser.UNENCRYPTED, 0)

        def UNKNOWN(self):
            return self.getToken(PostgreSQLParser.UNKNOWN, 0)

        def UNLISTEN(self):
            return self.getToken(PostgreSQLParser.UNLISTEN, 0)

        def UNLOGGED(self):
            return self.getToken(PostgreSQLParser.UNLOGGED, 0)

        def UNTIL(self):
            return self.getToken(PostgreSQLParser.UNTIL, 0)

        def UPDATE(self):
            return self.getToken(PostgreSQLParser.UPDATE, 0)

        def VACUUM(self):
            return self.getToken(PostgreSQLParser.VACUUM, 0)

        def VALID(self):
            return self.getToken(PostgreSQLParser.VALID, 0)

        def VALIDATE(self):
            return self.getToken(PostgreSQLParser.VALIDATE, 0)

        def VALIDATOR(self):
            return self.getToken(PostgreSQLParser.VALIDATOR, 0)

        def VALUE_P(self):
            return self.getToken(PostgreSQLParser.VALUE_P, 0)

        def VARYING(self):
            return self.getToken(PostgreSQLParser.VARYING, 0)

        def VERSION_P(self):
            return self.getToken(PostgreSQLParser.VERSION_P, 0)

        def VIEW(self):
            return self.getToken(PostgreSQLParser.VIEW, 0)

        def VIEWS(self):
            return self.getToken(PostgreSQLParser.VIEWS, 0)

        def VOLATILE(self):
            return self.getToken(PostgreSQLParser.VOLATILE, 0)

        def WHITESPACE_P(self):
            return self.getToken(PostgreSQLParser.WHITESPACE_P, 0)

        def WITHIN(self):
            return self.getToken(PostgreSQLParser.WITHIN, 0)

        def WITHOUT(self):
            return self.getToken(PostgreSQLParser.WITHOUT, 0)

        def WORK(self):
            return self.getToken(PostgreSQLParser.WORK, 0)

        def WRAPPER(self):
            return self.getToken(PostgreSQLParser.WRAPPER, 0)

        def WRITE(self):
            return self.getToken(PostgreSQLParser.WRITE, 0)

        def XML_P(self):
            return self.getToken(PostgreSQLParser.XML_P, 0)

        def YEAR_P(self):
            return self.getToken(PostgreSQLParser.YEAR_P, 0)

        def YES_P(self):
            return self.getToken(PostgreSQLParser.YES_P, 0)

        def ZONE(self):
            return self.getToken(PostgreSQLParser.ZONE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_unreserved_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnreserved_keyword" ):
                listener.enterUnreserved_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnreserved_keyword" ):
                listener.exitUnreserved_keyword(self)




    def unreserved_keyword(self):

        localctx = PostgreSQLParser.Unreserved_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1424, self.RULE_unreserved_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10418
            _la = self._input.LA(1)
            if not(((((_la - 43)) & ~0x3f) == 0 and ((1 << (_la - 43)) & 16777215) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & -31) != 0) or ((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & -1) != 0) or ((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & -8796093022209) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & -1) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & 360258695689404415) != 0) or _la==542 or _la==553):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Col_name_keywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(PostgreSQLParser.BETWEEN, 0)

        def BIGINT(self):
            return self.getToken(PostgreSQLParser.BIGINT, 0)

        def BIT(self):
            return self.getToken(PostgreSQLParser.BIT, 0)

        def BOOLEAN_P(self):
            return self.getToken(PostgreSQLParser.BOOLEAN_P, 0)

        def CHAR_P(self):
            return self.getToken(PostgreSQLParser.CHAR_P, 0)

        def character(self):
            return self.getTypedRuleContext(PostgreSQLParser.CharacterContext,0)


        def COALESCE(self):
            return self.getToken(PostgreSQLParser.COALESCE, 0)

        def DEC(self):
            return self.getToken(PostgreSQLParser.DEC, 0)

        def DECIMAL_P(self):
            return self.getToken(PostgreSQLParser.DECIMAL_P, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def EXTRACT(self):
            return self.getToken(PostgreSQLParser.EXTRACT, 0)

        def FLOAT_P(self):
            return self.getToken(PostgreSQLParser.FLOAT_P, 0)

        def GREATEST(self):
            return self.getToken(PostgreSQLParser.GREATEST, 0)

        def GROUPING(self):
            return self.getToken(PostgreSQLParser.GROUPING, 0)

        def INOUT(self):
            return self.getToken(PostgreSQLParser.INOUT, 0)

        def INT_P(self):
            return self.getToken(PostgreSQLParser.INT_P, 0)

        def INTEGER(self):
            return self.getToken(PostgreSQLParser.INTEGER, 0)

        def INTERVAL(self):
            return self.getToken(PostgreSQLParser.INTERVAL, 0)

        def JSON(self):
            return self.getToken(PostgreSQLParser.JSON, 0)

        def JSON_ARRAY(self):
            return self.getToken(PostgreSQLParser.JSON_ARRAY, 0)

        def JSON_ARRAYAGG(self):
            return self.getToken(PostgreSQLParser.JSON_ARRAYAGG, 0)

        def JSON_EXISTS(self):
            return self.getToken(PostgreSQLParser.JSON_EXISTS, 0)

        def JSON_OBJECT(self):
            return self.getToken(PostgreSQLParser.JSON_OBJECT, 0)

        def JSON_OBJECTAGG(self):
            return self.getToken(PostgreSQLParser.JSON_OBJECTAGG, 0)

        def JSON_QUERY(self):
            return self.getToken(PostgreSQLParser.JSON_QUERY, 0)

        def JSON_SCALAR(self):
            return self.getToken(PostgreSQLParser.JSON_SCALAR, 0)

        def JSON_SERIALIZE(self):
            return self.getToken(PostgreSQLParser.JSON_SERIALIZE, 0)

        def JSON_TABLE(self):
            return self.getToken(PostgreSQLParser.JSON_TABLE, 0)

        def JSON_VALUE(self):
            return self.getToken(PostgreSQLParser.JSON_VALUE, 0)

        def LEAST(self):
            return self.getToken(PostgreSQLParser.LEAST, 0)

        def MERGE_ACTION(self):
            return self.getToken(PostgreSQLParser.MERGE_ACTION, 0)

        def NATIONAL(self):
            return self.getToken(PostgreSQLParser.NATIONAL, 0)

        def NCHAR(self):
            return self.getToken(PostgreSQLParser.NCHAR, 0)

        def NONE(self):
            return self.getToken(PostgreSQLParser.NONE, 0)

        def NORMALIZE(self):
            return self.getToken(PostgreSQLParser.NORMALIZE, 0)

        def NULLIF(self):
            return self.getToken(PostgreSQLParser.NULLIF, 0)

        def NUMERIC(self):
            return self.getToken(PostgreSQLParser.NUMERIC, 0)

        def OUT_P(self):
            return self.getToken(PostgreSQLParser.OUT_P, 0)

        def OVERLAY(self):
            return self.getToken(PostgreSQLParser.OVERLAY, 0)

        def POSITION(self):
            return self.getToken(PostgreSQLParser.POSITION, 0)

        def PRECISION(self):
            return self.getToken(PostgreSQLParser.PRECISION, 0)

        def REAL(self):
            return self.getToken(PostgreSQLParser.REAL, 0)

        def ROW(self):
            return self.getToken(PostgreSQLParser.ROW, 0)

        def SETOF(self):
            return self.getToken(PostgreSQLParser.SETOF, 0)

        def SMALLINT(self):
            return self.getToken(PostgreSQLParser.SMALLINT, 0)

        def SUBSTRING(self):
            return self.getToken(PostgreSQLParser.SUBSTRING, 0)

        def TIME(self):
            return self.getToken(PostgreSQLParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(PostgreSQLParser.TIMESTAMP, 0)

        def TREAT(self):
            return self.getToken(PostgreSQLParser.TREAT, 0)

        def TRIM(self):
            return self.getToken(PostgreSQLParser.TRIM, 0)

        def VALUES(self):
            return self.getToken(PostgreSQLParser.VALUES, 0)

        def VARCHAR(self):
            return self.getToken(PostgreSQLParser.VARCHAR, 0)

        def XMLATTRIBUTES(self):
            return self.getToken(PostgreSQLParser.XMLATTRIBUTES, 0)

        def XMLCONCAT(self):
            return self.getToken(PostgreSQLParser.XMLCONCAT, 0)

        def XMLELEMENT(self):
            return self.getToken(PostgreSQLParser.XMLELEMENT, 0)

        def XMLEXISTS(self):
            return self.getToken(PostgreSQLParser.XMLEXISTS, 0)

        def XMLFOREST(self):
            return self.getToken(PostgreSQLParser.XMLFOREST, 0)

        def XMLNAMESPACES(self):
            return self.getToken(PostgreSQLParser.XMLNAMESPACES, 0)

        def XMLPARSE(self):
            return self.getToken(PostgreSQLParser.XMLPARSE, 0)

        def XMLPI(self):
            return self.getToken(PostgreSQLParser.XMLPI, 0)

        def XMLROOT(self):
            return self.getToken(PostgreSQLParser.XMLROOT, 0)

        def XMLSERIALIZE(self):
            return self.getToken(PostgreSQLParser.XMLSERIALIZE, 0)

        def XMLTABLE(self):
            return self.getToken(PostgreSQLParser.XMLTABLE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_col_name_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_name_keyword" ):
                listener.enterCol_name_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_name_keyword" ):
                listener.exitCol_name_keyword(self)




    def col_name_keyword(self):

        localctx = PostgreSQLParser.Col_name_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1426, self.RULE_col_name_keyword)
        try:
            self.state = 10483
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1043,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10420
                self.match(PostgreSQLParser.BETWEEN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10421
                self.match(PostgreSQLParser.BIGINT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10422
                self.match(PostgreSQLParser.BIT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10423
                self.match(PostgreSQLParser.BOOLEAN_P)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 10424
                self.match(PostgreSQLParser.CHAR_P)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 10425
                self.character()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 10426
                self.match(PostgreSQLParser.COALESCE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 10427
                self.match(PostgreSQLParser.DEC)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 10428
                self.match(PostgreSQLParser.DECIMAL_P)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 10429
                self.match(PostgreSQLParser.EXISTS)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 10430
                self.match(PostgreSQLParser.EXTRACT)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 10431
                self.match(PostgreSQLParser.FLOAT_P)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 10432
                self.match(PostgreSQLParser.GREATEST)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 10433
                self.match(PostgreSQLParser.GROUPING)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 10434
                self.match(PostgreSQLParser.INOUT)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 10435
                self.match(PostgreSQLParser.INT_P)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 10436
                self.match(PostgreSQLParser.INTEGER)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 10437
                self.match(PostgreSQLParser.INTERVAL)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 10438
                self.match(PostgreSQLParser.JSON)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 10439
                self.match(PostgreSQLParser.JSON_ARRAY)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 10440
                self.match(PostgreSQLParser.JSON_ARRAYAGG)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 10441
                self.match(PostgreSQLParser.JSON_EXISTS)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 10442
                self.match(PostgreSQLParser.JSON_OBJECT)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 10443
                self.match(PostgreSQLParser.JSON_OBJECTAGG)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 10444
                self.match(PostgreSQLParser.JSON_QUERY)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 10445
                self.match(PostgreSQLParser.JSON_SCALAR)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 10446
                self.match(PostgreSQLParser.JSON_SERIALIZE)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 10447
                self.match(PostgreSQLParser.JSON_TABLE)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 10448
                self.match(PostgreSQLParser.JSON_VALUE)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 10449
                self.match(PostgreSQLParser.LEAST)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 10450
                self.match(PostgreSQLParser.MERGE_ACTION)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 10451
                self.match(PostgreSQLParser.NATIONAL)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 10452
                self.match(PostgreSQLParser.NCHAR)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 10453
                self.match(PostgreSQLParser.NONE)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 10454
                self.match(PostgreSQLParser.NORMALIZE)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 10455
                self.match(PostgreSQLParser.NULLIF)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 10456
                self.match(PostgreSQLParser.NUMERIC)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 10457
                self.match(PostgreSQLParser.OUT_P)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 10458
                self.match(PostgreSQLParser.OVERLAY)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 10459
                self.match(PostgreSQLParser.POSITION)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 10460
                self.match(PostgreSQLParser.PRECISION)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 10461
                self.match(PostgreSQLParser.REAL)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 10462
                self.match(PostgreSQLParser.ROW)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 10463
                self.match(PostgreSQLParser.SETOF)
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 10464
                self.match(PostgreSQLParser.SMALLINT)
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 10465
                self.match(PostgreSQLParser.SUBSTRING)
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 10466
                self.match(PostgreSQLParser.TIME)
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 10467
                self.match(PostgreSQLParser.TIMESTAMP)
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 10468
                self.match(PostgreSQLParser.TREAT)
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 10469
                self.match(PostgreSQLParser.TRIM)
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 10470
                self.match(PostgreSQLParser.VALUES)
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 10471
                self.match(PostgreSQLParser.VARCHAR)
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 10472
                self.match(PostgreSQLParser.XMLATTRIBUTES)
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 10473
                self.match(PostgreSQLParser.XMLCONCAT)
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 10474
                self.match(PostgreSQLParser.XMLELEMENT)
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 10475
                self.match(PostgreSQLParser.XMLEXISTS)
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 10476
                self.match(PostgreSQLParser.XMLFOREST)
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 10477
                self.match(PostgreSQLParser.XMLNAMESPACES)
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 10478
                self.match(PostgreSQLParser.XMLPARSE)
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 10479
                self.match(PostgreSQLParser.XMLPI)
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 10480
                self.match(PostgreSQLParser.XMLROOT)
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 10481
                self.match(PostgreSQLParser.XMLSERIALIZE)
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 10482
                self.match(PostgreSQLParser.XMLTABLE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_func_name_keywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHORIZATION(self):
            return self.getToken(PostgreSQLParser.AUTHORIZATION, 0)

        def BINARY(self):
            return self.getToken(PostgreSQLParser.BINARY, 0)

        def COLLATION(self):
            return self.getToken(PostgreSQLParser.COLLATION, 0)

        def CONCURRENTLY(self):
            return self.getToken(PostgreSQLParser.CONCURRENTLY, 0)

        def CROSS(self):
            return self.getToken(PostgreSQLParser.CROSS, 0)

        def CURRENT_SCHEMA(self):
            return self.getToken(PostgreSQLParser.CURRENT_SCHEMA, 0)

        def FREEZE(self):
            return self.getToken(PostgreSQLParser.FREEZE, 0)

        def FULL(self):
            return self.getToken(PostgreSQLParser.FULL, 0)

        def ILIKE(self):
            return self.getToken(PostgreSQLParser.ILIKE, 0)

        def INNER_P(self):
            return self.getToken(PostgreSQLParser.INNER_P, 0)

        def IS(self):
            return self.getToken(PostgreSQLParser.IS, 0)

        def ISNULL(self):
            return self.getToken(PostgreSQLParser.ISNULL, 0)

        def JOIN(self):
            return self.getToken(PostgreSQLParser.JOIN, 0)

        def LEFT(self):
            return self.getToken(PostgreSQLParser.LEFT, 0)

        def LIKE(self):
            return self.getToken(PostgreSQLParser.LIKE, 0)

        def NATURAL(self):
            return self.getToken(PostgreSQLParser.NATURAL, 0)

        def NOTNULL(self):
            return self.getToken(PostgreSQLParser.NOTNULL, 0)

        def OUTER_P(self):
            return self.getToken(PostgreSQLParser.OUTER_P, 0)

        def OVERLAPS(self):
            return self.getToken(PostgreSQLParser.OVERLAPS, 0)

        def RIGHT(self):
            return self.getToken(PostgreSQLParser.RIGHT, 0)

        def SIMILAR(self):
            return self.getToken(PostgreSQLParser.SIMILAR, 0)

        def TABLESAMPLE(self):
            return self.getToken(PostgreSQLParser.TABLESAMPLE, 0)

        def VERBOSE(self):
            return self.getToken(PostgreSQLParser.VERBOSE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_type_func_name_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_func_name_keyword" ):
                listener.enterType_func_name_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_func_name_keyword" ):
                listener.exitType_func_name_keyword(self)




    def type_func_name_keyword(self):

        localctx = PostgreSQLParser.Type_func_name_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1428, self.RULE_type_func_name_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10485
            _la = self._input.LA(1)
            if not(((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & 8126463) != 0) or _la==510):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reserved_keywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def ANALYSE(self):
            return self.getToken(PostgreSQLParser.ANALYSE, 0)

        def ANALYZE(self):
            return self.getToken(PostgreSQLParser.ANALYZE, 0)

        def AND(self):
            return self.getToken(PostgreSQLParser.AND, 0)

        def ANY(self):
            return self.getToken(PostgreSQLParser.ANY, 0)

        def ARRAY(self):
            return self.getToken(PostgreSQLParser.ARRAY, 0)

        def AS(self):
            return self.getToken(PostgreSQLParser.AS, 0)

        def ASC(self):
            return self.getToken(PostgreSQLParser.ASC, 0)

        def ASYMMETRIC(self):
            return self.getToken(PostgreSQLParser.ASYMMETRIC, 0)

        def BOTH(self):
            return self.getToken(PostgreSQLParser.BOTH, 0)

        def CASE(self):
            return self.getToken(PostgreSQLParser.CASE, 0)

        def CAST(self):
            return self.getToken(PostgreSQLParser.CAST, 0)

        def CHECK(self):
            return self.getToken(PostgreSQLParser.CHECK, 0)

        def COLLATE(self):
            return self.getToken(PostgreSQLParser.COLLATE, 0)

        def COLUMN(self):
            return self.getToken(PostgreSQLParser.COLUMN, 0)

        def CONSTRAINT(self):
            return self.getToken(PostgreSQLParser.CONSTRAINT, 0)

        def CREATE(self):
            return self.getToken(PostgreSQLParser.CREATE, 0)

        def CURRENT_CATALOG(self):
            return self.getToken(PostgreSQLParser.CURRENT_CATALOG, 0)

        def CURRENT_DATE(self):
            return self.getToken(PostgreSQLParser.CURRENT_DATE, 0)

        def CURRENT_ROLE(self):
            return self.getToken(PostgreSQLParser.CURRENT_ROLE, 0)

        def CURRENT_TIME(self):
            return self.getToken(PostgreSQLParser.CURRENT_TIME, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0)

        def CURRENT_USER(self):
            return self.getToken(PostgreSQLParser.CURRENT_USER, 0)

        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def DEFERRABLE(self):
            return self.getToken(PostgreSQLParser.DEFERRABLE, 0)

        def DESC(self):
            return self.getToken(PostgreSQLParser.DESC, 0)

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def DO(self):
            return self.getToken(PostgreSQLParser.DO, 0)

        def ELSE(self):
            return self.getToken(PostgreSQLParser.ELSE, 0)

        def END_P(self):
            return self.getToken(PostgreSQLParser.END_P, 0)

        def EXCEPT(self):
            return self.getToken(PostgreSQLParser.EXCEPT, 0)

        def FALSE_P(self):
            return self.getToken(PostgreSQLParser.FALSE_P, 0)

        def FETCH(self):
            return self.getToken(PostgreSQLParser.FETCH, 0)

        def FOR(self):
            return self.getToken(PostgreSQLParser.FOR, 0)

        def FOREIGN(self):
            return self.getToken(PostgreSQLParser.FOREIGN, 0)

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def GRANT(self):
            return self.getToken(PostgreSQLParser.GRANT, 0)

        def GROUP_P(self):
            return self.getToken(PostgreSQLParser.GROUP_P, 0)

        def HAVING(self):
            return self.getToken(PostgreSQLParser.HAVING, 0)

        def IN_P(self):
            return self.getToken(PostgreSQLParser.IN_P, 0)

        def INITIALLY(self):
            return self.getToken(PostgreSQLParser.INITIALLY, 0)

        def INTERSECT(self):
            return self.getToken(PostgreSQLParser.INTERSECT, 0)

        def INTO(self):
            return self.getToken(PostgreSQLParser.INTO, 0)

        def LATERAL_P(self):
            return self.getToken(PostgreSQLParser.LATERAL_P, 0)

        def LEADING(self):
            return self.getToken(PostgreSQLParser.LEADING, 0)

        def LIMIT(self):
            return self.getToken(PostgreSQLParser.LIMIT, 0)

        def LOCALTIME(self):
            return self.getToken(PostgreSQLParser.LOCALTIME, 0)

        def LOCALTIMESTAMP(self):
            return self.getToken(PostgreSQLParser.LOCALTIMESTAMP, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def NULL_P(self):
            return self.getToken(PostgreSQLParser.NULL_P, 0)

        def OFFSET(self):
            return self.getToken(PostgreSQLParser.OFFSET, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def ONLY(self):
            return self.getToken(PostgreSQLParser.ONLY, 0)

        def OR(self):
            return self.getToken(PostgreSQLParser.OR, 0)

        def ORDER(self):
            return self.getToken(PostgreSQLParser.ORDER, 0)

        def PLACING(self):
            return self.getToken(PostgreSQLParser.PLACING, 0)

        def PRIMARY(self):
            return self.getToken(PostgreSQLParser.PRIMARY, 0)

        def REFERENCES(self):
            return self.getToken(PostgreSQLParser.REFERENCES, 0)

        def RETURNING(self):
            return self.getToken(PostgreSQLParser.RETURNING, 0)

        def SELECT(self):
            return self.getToken(PostgreSQLParser.SELECT, 0)

        def SESSION_USER(self):
            return self.getToken(PostgreSQLParser.SESSION_USER, 0)

        def SOME(self):
            return self.getToken(PostgreSQLParser.SOME, 0)

        def SYMMETRIC(self):
            return self.getToken(PostgreSQLParser.SYMMETRIC, 0)

        def SYSTEM_USER(self):
            return self.getToken(PostgreSQLParser.SYSTEM_USER, 0)

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def THEN(self):
            return self.getToken(PostgreSQLParser.THEN, 0)

        def TO(self):
            return self.getToken(PostgreSQLParser.TO, 0)

        def TRAILING(self):
            return self.getToken(PostgreSQLParser.TRAILING, 0)

        def TRUE_P(self):
            return self.getToken(PostgreSQLParser.TRUE_P, 0)

        def UNION(self):
            return self.getToken(PostgreSQLParser.UNION, 0)

        def UNIQUE(self):
            return self.getToken(PostgreSQLParser.UNIQUE, 0)

        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def VARIADIC(self):
            return self.getToken(PostgreSQLParser.VARIADIC, 0)

        def WHEN(self):
            return self.getToken(PostgreSQLParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(PostgreSQLParser.WHERE, 0)

        def WINDOW(self):
            return self.getToken(PostgreSQLParser.WINDOW, 0)

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_reserved_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReserved_keyword" ):
                listener.enterReserved_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReserved_keyword" ):
                listener.exitReserved_keyword(self)




    def reserved_keyword(self):

        localctx = PostgreSQLParser.Reserved_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1430, self.RULE_reserved_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10487
            _la = self._input.LA(1)
            if not(((((_la - 42)) & ~0x3f) == 0 and ((1 << (_la - 42)) & -67108863) != 0) or ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & 274877906943) != 0) or _la==492):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bare_label_keywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABORT_P(self):
            return self.getToken(PostgreSQLParser.ABORT_P, 0)

        def ABSENT(self):
            return self.getToken(PostgreSQLParser.ABSENT, 0)

        def ABSOLUTE_P(self):
            return self.getToken(PostgreSQLParser.ABSOLUTE_P, 0)

        def ACCESS(self):
            return self.getToken(PostgreSQLParser.ACCESS, 0)

        def ACTION(self):
            return self.getToken(PostgreSQLParser.ACTION, 0)

        def ADD_P(self):
            return self.getToken(PostgreSQLParser.ADD_P, 0)

        def ADMIN(self):
            return self.getToken(PostgreSQLParser.ADMIN, 0)

        def AFTER(self):
            return self.getToken(PostgreSQLParser.AFTER, 0)

        def AGGREGATE(self):
            return self.getToken(PostgreSQLParser.AGGREGATE, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def ALSO(self):
            return self.getToken(PostgreSQLParser.ALSO, 0)

        def ALTER(self):
            return self.getToken(PostgreSQLParser.ALTER, 0)

        def ALWAYS(self):
            return self.getToken(PostgreSQLParser.ALWAYS, 0)

        def ANALYSE(self):
            return self.getToken(PostgreSQLParser.ANALYSE, 0)

        def ANALYZE(self):
            return self.getToken(PostgreSQLParser.ANALYZE, 0)

        def AND(self):
            return self.getToken(PostgreSQLParser.AND, 0)

        def ANY(self):
            return self.getToken(PostgreSQLParser.ANY, 0)

        def ASC(self):
            return self.getToken(PostgreSQLParser.ASC, 0)

        def ASENSITIVE(self):
            return self.getToken(PostgreSQLParser.ASENSITIVE, 0)

        def ASSERTION(self):
            return self.getToken(PostgreSQLParser.ASSERTION, 0)

        def ASSIGNMENT(self):
            return self.getToken(PostgreSQLParser.ASSIGNMENT, 0)

        def ASYMMETRIC(self):
            return self.getToken(PostgreSQLParser.ASYMMETRIC, 0)

        def AT(self):
            return self.getToken(PostgreSQLParser.AT, 0)

        def ATOMIC(self):
            return self.getToken(PostgreSQLParser.ATOMIC, 0)

        def ATTACH(self):
            return self.getToken(PostgreSQLParser.ATTACH, 0)

        def ATTRIBUTE(self):
            return self.getToken(PostgreSQLParser.ATTRIBUTE, 0)

        def AUTHORIZATION(self):
            return self.getToken(PostgreSQLParser.AUTHORIZATION, 0)

        def BACKWARD(self):
            return self.getToken(PostgreSQLParser.BACKWARD, 0)

        def BEFORE(self):
            return self.getToken(PostgreSQLParser.BEFORE, 0)

        def BEGIN_P(self):
            return self.getToken(PostgreSQLParser.BEGIN_P, 0)

        def BETWEEN(self):
            return self.getToken(PostgreSQLParser.BETWEEN, 0)

        def BIGINT(self):
            return self.getToken(PostgreSQLParser.BIGINT, 0)

        def BINARY(self):
            return self.getToken(PostgreSQLParser.BINARY, 0)

        def BIT(self):
            return self.getToken(PostgreSQLParser.BIT, 0)

        def BOOLEAN_P(self):
            return self.getToken(PostgreSQLParser.BOOLEAN_P, 0)

        def BOTH(self):
            return self.getToken(PostgreSQLParser.BOTH, 0)

        def BREADTH(self):
            return self.getToken(PostgreSQLParser.BREADTH, 0)

        def BY(self):
            return self.getToken(PostgreSQLParser.BY, 0)

        def CACHE(self):
            return self.getToken(PostgreSQLParser.CACHE, 0)

        def CALL(self):
            return self.getToken(PostgreSQLParser.CALL, 0)

        def CALLED(self):
            return self.getToken(PostgreSQLParser.CALLED, 0)

        def CASCADE(self):
            return self.getToken(PostgreSQLParser.CASCADE, 0)

        def CASCADED(self):
            return self.getToken(PostgreSQLParser.CASCADED, 0)

        def CASE(self):
            return self.getToken(PostgreSQLParser.CASE, 0)

        def CAST(self):
            return self.getToken(PostgreSQLParser.CAST, 0)

        def CATALOG(self):
            return self.getToken(PostgreSQLParser.CATALOG, 0)

        def CHAIN(self):
            return self.getToken(PostgreSQLParser.CHAIN, 0)

        def CHARACTERISTICS(self):
            return self.getToken(PostgreSQLParser.CHARACTERISTICS, 0)

        def CHECK(self):
            return self.getToken(PostgreSQLParser.CHECK, 0)

        def CHECKPOINT(self):
            return self.getToken(PostgreSQLParser.CHECKPOINT, 0)

        def CLASS(self):
            return self.getToken(PostgreSQLParser.CLASS, 0)

        def CLOSE(self):
            return self.getToken(PostgreSQLParser.CLOSE, 0)

        def CLUSTER(self):
            return self.getToken(PostgreSQLParser.CLUSTER, 0)

        def COALESCE(self):
            return self.getToken(PostgreSQLParser.COALESCE, 0)

        def COLLATE(self):
            return self.getToken(PostgreSQLParser.COLLATE, 0)

        def COLLATION(self):
            return self.getToken(PostgreSQLParser.COLLATION, 0)

        def COLUMN(self):
            return self.getToken(PostgreSQLParser.COLUMN, 0)

        def COLUMNS(self):
            return self.getToken(PostgreSQLParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(PostgreSQLParser.COMMENT, 0)

        def COMMENTS(self):
            return self.getToken(PostgreSQLParser.COMMENTS, 0)

        def COMMIT(self):
            return self.getToken(PostgreSQLParser.COMMIT, 0)

        def COMMITTED(self):
            return self.getToken(PostgreSQLParser.COMMITTED, 0)

        def COMPRESSION(self):
            return self.getToken(PostgreSQLParser.COMPRESSION, 0)

        def CONCURRENTLY(self):
            return self.getToken(PostgreSQLParser.CONCURRENTLY, 0)

        def CONDITIONAL(self):
            return self.getToken(PostgreSQLParser.CONDITIONAL, 0)

        def CONFIGURATION(self):
            return self.getToken(PostgreSQLParser.CONFIGURATION, 0)

        def CONFLICT(self):
            return self.getToken(PostgreSQLParser.CONFLICT, 0)

        def CONNECTION(self):
            return self.getToken(PostgreSQLParser.CONNECTION, 0)

        def CONSTRAINT(self):
            return self.getToken(PostgreSQLParser.CONSTRAINT, 0)

        def CONSTRAINTS(self):
            return self.getToken(PostgreSQLParser.CONSTRAINTS, 0)

        def CONTENT_P(self):
            return self.getToken(PostgreSQLParser.CONTENT_P, 0)

        def CONTINUE_P(self):
            return self.getToken(PostgreSQLParser.CONTINUE_P, 0)

        def CONVERSION_P(self):
            return self.getToken(PostgreSQLParser.CONVERSION_P, 0)

        def COPY(self):
            return self.getToken(PostgreSQLParser.COPY, 0)

        def COST(self):
            return self.getToken(PostgreSQLParser.COST, 0)

        def CROSS(self):
            return self.getToken(PostgreSQLParser.CROSS, 0)

        def CSV(self):
            return self.getToken(PostgreSQLParser.CSV, 0)

        def CUBE(self):
            return self.getToken(PostgreSQLParser.CUBE, 0)

        def CURRENT_CATALOG(self):
            return self.getToken(PostgreSQLParser.CURRENT_CATALOG, 0)

        def CURRENT_DATE(self):
            return self.getToken(PostgreSQLParser.CURRENT_DATE, 0)

        def CURRENT_P(self):
            return self.getToken(PostgreSQLParser.CURRENT_P, 0)

        def CURRENT_ROLE(self):
            return self.getToken(PostgreSQLParser.CURRENT_ROLE, 0)

        def CURRENT_SCHEMA(self):
            return self.getToken(PostgreSQLParser.CURRENT_SCHEMA, 0)

        def CURRENT_TIME(self):
            return self.getToken(PostgreSQLParser.CURRENT_TIME, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0)

        def CURRENT_USER(self):
            return self.getToken(PostgreSQLParser.CURRENT_USER, 0)

        def CURSOR(self):
            return self.getToken(PostgreSQLParser.CURSOR, 0)

        def CYCLE(self):
            return self.getToken(PostgreSQLParser.CYCLE, 0)

        def DATA_P(self):
            return self.getToken(PostgreSQLParser.DATA_P, 0)

        def DATABASE(self):
            return self.getToken(PostgreSQLParser.DATABASE, 0)

        def DEALLOCATE(self):
            return self.getToken(PostgreSQLParser.DEALLOCATE, 0)

        def DEC(self):
            return self.getToken(PostgreSQLParser.DEC, 0)

        def DECIMAL_P(self):
            return self.getToken(PostgreSQLParser.DECIMAL_P, 0)

        def DECLARE(self):
            return self.getToken(PostgreSQLParser.DECLARE, 0)

        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def DEFAULTS(self):
            return self.getToken(PostgreSQLParser.DEFAULTS, 0)

        def DEFERRABLE(self):
            return self.getToken(PostgreSQLParser.DEFERRABLE, 0)

        def DEFERRED(self):
            return self.getToken(PostgreSQLParser.DEFERRED, 0)

        def DEFINER(self):
            return self.getToken(PostgreSQLParser.DEFINER, 0)

        def DELETE_P(self):
            return self.getToken(PostgreSQLParser.DELETE_P, 0)

        def DELIMITER(self):
            return self.getToken(PostgreSQLParser.DELIMITER, 0)

        def DELIMITERS(self):
            return self.getToken(PostgreSQLParser.DELIMITERS, 0)

        def DEPENDS(self):
            return self.getToken(PostgreSQLParser.DEPENDS, 0)

        def DEPTH(self):
            return self.getToken(PostgreSQLParser.DEPTH, 0)

        def DESC(self):
            return self.getToken(PostgreSQLParser.DESC, 0)

        def DETACH(self):
            return self.getToken(PostgreSQLParser.DETACH, 0)

        def DICTIONARY(self):
            return self.getToken(PostgreSQLParser.DICTIONARY, 0)

        def DISABLE_P(self):
            return self.getToken(PostgreSQLParser.DISABLE_P, 0)

        def DISCARD(self):
            return self.getToken(PostgreSQLParser.DISCARD, 0)

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def DO(self):
            return self.getToken(PostgreSQLParser.DO, 0)

        def DOCUMENT_P(self):
            return self.getToken(PostgreSQLParser.DOCUMENT_P, 0)

        def DOMAIN_P(self):
            return self.getToken(PostgreSQLParser.DOMAIN_P, 0)

        def DOUBLE_P(self):
            return self.getToken(PostgreSQLParser.DOUBLE_P, 0)

        def DROP(self):
            return self.getToken(PostgreSQLParser.DROP, 0)

        def EACH(self):
            return self.getToken(PostgreSQLParser.EACH, 0)

        def ELSE(self):
            return self.getToken(PostgreSQLParser.ELSE, 0)

        def EMPTY_P(self):
            return self.getToken(PostgreSQLParser.EMPTY_P, 0)

        def ENABLE_P(self):
            return self.getToken(PostgreSQLParser.ENABLE_P, 0)

        def ENCODING(self):
            return self.getToken(PostgreSQLParser.ENCODING, 0)

        def ENCRYPTED(self):
            return self.getToken(PostgreSQLParser.ENCRYPTED, 0)

        def END_P(self):
            return self.getToken(PostgreSQLParser.END_P, 0)

        def ENUM_P(self):
            return self.getToken(PostgreSQLParser.ENUM_P, 0)

        def ERROR(self):
            return self.getToken(PostgreSQLParser.ERROR, 0)

        def ESCAPE(self):
            return self.getToken(PostgreSQLParser.ESCAPE, 0)

        def EVENT(self):
            return self.getToken(PostgreSQLParser.EVENT, 0)

        def EXCLUDE(self):
            return self.getToken(PostgreSQLParser.EXCLUDE, 0)

        def EXCLUDING(self):
            return self.getToken(PostgreSQLParser.EXCLUDING, 0)

        def EXCLUSIVE(self):
            return self.getToken(PostgreSQLParser.EXCLUSIVE, 0)

        def EXECUTE(self):
            return self.getToken(PostgreSQLParser.EXECUTE, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(PostgreSQLParser.EXPLAIN, 0)

        def EXPRESSION(self):
            return self.getToken(PostgreSQLParser.EXPRESSION, 0)

        def EXTENSION(self):
            return self.getToken(PostgreSQLParser.EXTENSION, 0)

        def EXTERNAL(self):
            return self.getToken(PostgreSQLParser.EXTERNAL, 0)

        def EXTRACT(self):
            return self.getToken(PostgreSQLParser.EXTRACT, 0)

        def FALSE_P(self):
            return self.getToken(PostgreSQLParser.FALSE_P, 0)

        def FAMILY(self):
            return self.getToken(PostgreSQLParser.FAMILY, 0)

        def FINALIZE(self):
            return self.getToken(PostgreSQLParser.FINALIZE, 0)

        def FIRST_P(self):
            return self.getToken(PostgreSQLParser.FIRST_P, 0)

        def FLOAT_P(self):
            return self.getToken(PostgreSQLParser.FLOAT_P, 0)

        def FOLLOWING(self):
            return self.getToken(PostgreSQLParser.FOLLOWING, 0)

        def FORCE(self):
            return self.getToken(PostgreSQLParser.FORCE, 0)

        def FOREIGN(self):
            return self.getToken(PostgreSQLParser.FOREIGN, 0)

        def FORMAT(self):
            return self.getToken(PostgreSQLParser.FORMAT, 0)

        def FORWARD(self):
            return self.getToken(PostgreSQLParser.FORWARD, 0)

        def FREEZE(self):
            return self.getToken(PostgreSQLParser.FREEZE, 0)

        def FULL(self):
            return self.getToken(PostgreSQLParser.FULL, 0)

        def FUNCTION(self):
            return self.getToken(PostgreSQLParser.FUNCTION, 0)

        def FUNCTIONS(self):
            return self.getToken(PostgreSQLParser.FUNCTIONS, 0)

        def GENERATED(self):
            return self.getToken(PostgreSQLParser.GENERATED, 0)

        def GLOBAL(self):
            return self.getToken(PostgreSQLParser.GLOBAL, 0)

        def GRANTED(self):
            return self.getToken(PostgreSQLParser.GRANTED, 0)

        def GREATEST(self):
            return self.getToken(PostgreSQLParser.GREATEST, 0)

        def GROUPING(self):
            return self.getToken(PostgreSQLParser.GROUPING, 0)

        def GROUPS(self):
            return self.getToken(PostgreSQLParser.GROUPS, 0)

        def HANDLER(self):
            return self.getToken(PostgreSQLParser.HANDLER, 0)

        def HEADER_P(self):
            return self.getToken(PostgreSQLParser.HEADER_P, 0)

        def HOLD(self):
            return self.getToken(PostgreSQLParser.HOLD, 0)

        def IDENTITY_P(self):
            return self.getToken(PostgreSQLParser.IDENTITY_P, 0)

        def IF_P(self):
            return self.getToken(PostgreSQLParser.IF_P, 0)

        def ILIKE(self):
            return self.getToken(PostgreSQLParser.ILIKE, 0)

        def IMMEDIATE(self):
            return self.getToken(PostgreSQLParser.IMMEDIATE, 0)

        def IMMUTABLE(self):
            return self.getToken(PostgreSQLParser.IMMUTABLE, 0)

        def IMPLICIT_P(self):
            return self.getToken(PostgreSQLParser.IMPLICIT_P, 0)

        def IMPORT_P(self):
            return self.getToken(PostgreSQLParser.IMPORT_P, 0)

        def IN_P(self):
            return self.getToken(PostgreSQLParser.IN_P, 0)

        def INCLUDE(self):
            return self.getToken(PostgreSQLParser.INCLUDE, 0)

        def INCLUDING(self):
            return self.getToken(PostgreSQLParser.INCLUDING, 0)

        def INCREMENT(self):
            return self.getToken(PostgreSQLParser.INCREMENT, 0)

        def INDENT(self):
            return self.getToken(PostgreSQLParser.INDENT, 0)

        def INDEX(self):
            return self.getToken(PostgreSQLParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(PostgreSQLParser.INDEXES, 0)

        def INHERIT(self):
            return self.getToken(PostgreSQLParser.INHERIT, 0)

        def INHERITS(self):
            return self.getToken(PostgreSQLParser.INHERITS, 0)

        def INITIALLY(self):
            return self.getToken(PostgreSQLParser.INITIALLY, 0)

        def INLINE_P(self):
            return self.getToken(PostgreSQLParser.INLINE_P, 0)

        def INNER_P(self):
            return self.getToken(PostgreSQLParser.INNER_P, 0)

        def INOUT(self):
            return self.getToken(PostgreSQLParser.INOUT, 0)

        def INPUT_P(self):
            return self.getToken(PostgreSQLParser.INPUT_P, 0)

        def INSENSITIVE(self):
            return self.getToken(PostgreSQLParser.INSENSITIVE, 0)

        def INSERT(self):
            return self.getToken(PostgreSQLParser.INSERT, 0)

        def INSTEAD(self):
            return self.getToken(PostgreSQLParser.INSTEAD, 0)

        def INT_P(self):
            return self.getToken(PostgreSQLParser.INT_P, 0)

        def INTEGER(self):
            return self.getToken(PostgreSQLParser.INTEGER, 0)

        def INTERVAL(self):
            return self.getToken(PostgreSQLParser.INTERVAL, 0)

        def INVOKER(self):
            return self.getToken(PostgreSQLParser.INVOKER, 0)

        def IS(self):
            return self.getToken(PostgreSQLParser.IS, 0)

        def ISOLATION(self):
            return self.getToken(PostgreSQLParser.ISOLATION, 0)

        def JOIN(self):
            return self.getToken(PostgreSQLParser.JOIN, 0)

        def JSON(self):
            return self.getToken(PostgreSQLParser.JSON, 0)

        def JSON_ARRAY(self):
            return self.getToken(PostgreSQLParser.JSON_ARRAY, 0)

        def JSON_ARRAYAGG(self):
            return self.getToken(PostgreSQLParser.JSON_ARRAYAGG, 0)

        def JSON_EXISTS(self):
            return self.getToken(PostgreSQLParser.JSON_EXISTS, 0)

        def JSON_OBJECT(self):
            return self.getToken(PostgreSQLParser.JSON_OBJECT, 0)

        def JSON_OBJECTAGG(self):
            return self.getToken(PostgreSQLParser.JSON_OBJECTAGG, 0)

        def JSON_QUERY(self):
            return self.getToken(PostgreSQLParser.JSON_QUERY, 0)

        def JSON_SCALAR(self):
            return self.getToken(PostgreSQLParser.JSON_SCALAR, 0)

        def JSON_SERIALIZE(self):
            return self.getToken(PostgreSQLParser.JSON_SERIALIZE, 0)

        def JSON_TABLE(self):
            return self.getToken(PostgreSQLParser.JSON_TABLE, 0)

        def JSON_VALUE(self):
            return self.getToken(PostgreSQLParser.JSON_VALUE, 0)

        def KEEP(self):
            return self.getToken(PostgreSQLParser.KEEP, 0)

        def KEY(self):
            return self.getToken(PostgreSQLParser.KEY, 0)

        def KEYS(self):
            return self.getToken(PostgreSQLParser.KEYS, 0)

        def LABEL(self):
            return self.getToken(PostgreSQLParser.LABEL, 0)

        def LANGUAGE(self):
            return self.getToken(PostgreSQLParser.LANGUAGE, 0)

        def LARGE_P(self):
            return self.getToken(PostgreSQLParser.LARGE_P, 0)

        def LAST_P(self):
            return self.getToken(PostgreSQLParser.LAST_P, 0)

        def LATERAL_P(self):
            return self.getToken(PostgreSQLParser.LATERAL_P, 0)

        def LEADING(self):
            return self.getToken(PostgreSQLParser.LEADING, 0)

        def LEAKPROOF(self):
            return self.getToken(PostgreSQLParser.LEAKPROOF, 0)

        def LEAST(self):
            return self.getToken(PostgreSQLParser.LEAST, 0)

        def LEFT(self):
            return self.getToken(PostgreSQLParser.LEFT, 0)

        def LEVEL(self):
            return self.getToken(PostgreSQLParser.LEVEL, 0)

        def LIKE(self):
            return self.getToken(PostgreSQLParser.LIKE, 0)

        def LISTEN(self):
            return self.getToken(PostgreSQLParser.LISTEN, 0)

        def LOAD(self):
            return self.getToken(PostgreSQLParser.LOAD, 0)

        def LOCAL(self):
            return self.getToken(PostgreSQLParser.LOCAL, 0)

        def LOCALTIME(self):
            return self.getToken(PostgreSQLParser.LOCALTIME, 0)

        def LOCALTIMESTAMP(self):
            return self.getToken(PostgreSQLParser.LOCALTIMESTAMP, 0)

        def LOCATION(self):
            return self.getToken(PostgreSQLParser.LOCATION, 0)

        def LOCK_P(self):
            return self.getToken(PostgreSQLParser.LOCK_P, 0)

        def LOCKED(self):
            return self.getToken(PostgreSQLParser.LOCKED, 0)

        def LOGGED(self):
            return self.getToken(PostgreSQLParser.LOGGED, 0)

        def MAPPING(self):
            return self.getToken(PostgreSQLParser.MAPPING, 0)

        def MATCH(self):
            return self.getToken(PostgreSQLParser.MATCH, 0)

        def MATCHED(self):
            return self.getToken(PostgreSQLParser.MATCHED, 0)

        def MATERIALIZED(self):
            return self.getToken(PostgreSQLParser.MATERIALIZED, 0)

        def MAXVALUE(self):
            return self.getToken(PostgreSQLParser.MAXVALUE, 0)

        def MERGE(self):
            return self.getToken(PostgreSQLParser.MERGE, 0)

        def MERGE_ACTION(self):
            return self.getToken(PostgreSQLParser.MERGE_ACTION, 0)

        def METHOD(self):
            return self.getToken(PostgreSQLParser.METHOD, 0)

        def MINVALUE(self):
            return self.getToken(PostgreSQLParser.MINVALUE, 0)

        def MODE(self):
            return self.getToken(PostgreSQLParser.MODE, 0)

        def MOVE(self):
            return self.getToken(PostgreSQLParser.MOVE, 0)

        def NAME_P(self):
            return self.getToken(PostgreSQLParser.NAME_P, 0)

        def NAMES(self):
            return self.getToken(PostgreSQLParser.NAMES, 0)

        def NATIONAL(self):
            return self.getToken(PostgreSQLParser.NATIONAL, 0)

        def NATURAL(self):
            return self.getToken(PostgreSQLParser.NATURAL, 0)

        def NCHAR(self):
            return self.getToken(PostgreSQLParser.NCHAR, 0)

        def NESTED(self):
            return self.getToken(PostgreSQLParser.NESTED, 0)

        def NEW(self):
            return self.getToken(PostgreSQLParser.NEW, 0)

        def NEXT(self):
            return self.getToken(PostgreSQLParser.NEXT, 0)

        def NFC(self):
            return self.getToken(PostgreSQLParser.NFC, 0)

        def NFD(self):
            return self.getToken(PostgreSQLParser.NFD, 0)

        def NFKC(self):
            return self.getToken(PostgreSQLParser.NFKC, 0)

        def NFKD(self):
            return self.getToken(PostgreSQLParser.NFKD, 0)

        def NO(self):
            return self.getToken(PostgreSQLParser.NO, 0)

        def NONE(self):
            return self.getToken(PostgreSQLParser.NONE, 0)

        def NORMALIZE(self):
            return self.getToken(PostgreSQLParser.NORMALIZE, 0)

        def NORMALIZED(self):
            return self.getToken(PostgreSQLParser.NORMALIZED, 0)

        def NOT(self):
            return self.getToken(PostgreSQLParser.NOT, 0)

        def NOTHING(self):
            return self.getToken(PostgreSQLParser.NOTHING, 0)

        def NOTIFY(self):
            return self.getToken(PostgreSQLParser.NOTIFY, 0)

        def NOWAIT(self):
            return self.getToken(PostgreSQLParser.NOWAIT, 0)

        def NULL_P(self):
            return self.getToken(PostgreSQLParser.NULL_P, 0)

        def NULLIF(self):
            return self.getToken(PostgreSQLParser.NULLIF, 0)

        def NULLS_P(self):
            return self.getToken(PostgreSQLParser.NULLS_P, 0)

        def NUMERIC(self):
            return self.getToken(PostgreSQLParser.NUMERIC, 0)

        def OBJECT_P(self):
            return self.getToken(PostgreSQLParser.OBJECT_P, 0)

        def OF(self):
            return self.getToken(PostgreSQLParser.OF, 0)

        def OFF(self):
            return self.getToken(PostgreSQLParser.OFF, 0)

        def OIDS(self):
            return self.getToken(PostgreSQLParser.OIDS, 0)

        def OLD(self):
            return self.getToken(PostgreSQLParser.OLD, 0)

        def OMIT(self):
            return self.getToken(PostgreSQLParser.OMIT, 0)

        def ONLY(self):
            return self.getToken(PostgreSQLParser.ONLY, 0)

        def OPERATOR(self):
            return self.getToken(PostgreSQLParser.OPERATOR, 0)

        def OPTION(self):
            return self.getToken(PostgreSQLParser.OPTION, 0)

        def OPTIONS(self):
            return self.getToken(PostgreSQLParser.OPTIONS, 0)

        def OR(self):
            return self.getToken(PostgreSQLParser.OR, 0)

        def ORDINALITY(self):
            return self.getToken(PostgreSQLParser.ORDINALITY, 0)

        def OTHERS(self):
            return self.getToken(PostgreSQLParser.OTHERS, 0)

        def OUT_P(self):
            return self.getToken(PostgreSQLParser.OUT_P, 0)

        def OUTER_P(self):
            return self.getToken(PostgreSQLParser.OUTER_P, 0)

        def OVERLAY(self):
            return self.getToken(PostgreSQLParser.OVERLAY, 0)

        def OVERRIDING(self):
            return self.getToken(PostgreSQLParser.OVERRIDING, 0)

        def OWNED(self):
            return self.getToken(PostgreSQLParser.OWNED, 0)

        def OWNER(self):
            return self.getToken(PostgreSQLParser.OWNER, 0)

        def PARALLEL(self):
            return self.getToken(PostgreSQLParser.PARALLEL, 0)

        def PARAMETER(self):
            return self.getToken(PostgreSQLParser.PARAMETER, 0)

        def PARSER(self):
            return self.getToken(PostgreSQLParser.PARSER, 0)

        def PARTIAL(self):
            return self.getToken(PostgreSQLParser.PARTIAL, 0)

        def PARTITION(self):
            return self.getToken(PostgreSQLParser.PARTITION, 0)

        def PASSING(self):
            return self.getToken(PostgreSQLParser.PASSING, 0)

        def PASSWORD(self):
            return self.getToken(PostgreSQLParser.PASSWORD, 0)

        def PATH(self):
            return self.getToken(PostgreSQLParser.PATH, 0)

        def PERIOD(self):
            return self.getToken(PostgreSQLParser.PERIOD, 0)

        def PLACING(self):
            return self.getToken(PostgreSQLParser.PLACING, 0)

        def PLAN(self):
            return self.getToken(PostgreSQLParser.PLAN, 0)

        def PLANS(self):
            return self.getToken(PostgreSQLParser.PLANS, 0)

        def POLICY(self):
            return self.getToken(PostgreSQLParser.POLICY, 0)

        def POSITION(self):
            return self.getToken(PostgreSQLParser.POSITION, 0)

        def PRECEDING(self):
            return self.getToken(PostgreSQLParser.PRECEDING, 0)

        def PREPARE(self):
            return self.getToken(PostgreSQLParser.PREPARE, 0)

        def PREPARED(self):
            return self.getToken(PostgreSQLParser.PREPARED, 0)

        def PRESERVE(self):
            return self.getToken(PostgreSQLParser.PRESERVE, 0)

        def PRIMARY(self):
            return self.getToken(PostgreSQLParser.PRIMARY, 0)

        def PRIOR(self):
            return self.getToken(PostgreSQLParser.PRIOR, 0)

        def PRIVILEGES(self):
            return self.getToken(PostgreSQLParser.PRIVILEGES, 0)

        def PROCEDURAL(self):
            return self.getToken(PostgreSQLParser.PROCEDURAL, 0)

        def PROCEDURE(self):
            return self.getToken(PostgreSQLParser.PROCEDURE, 0)

        def PROCEDURES(self):
            return self.getToken(PostgreSQLParser.PROCEDURES, 0)

        def PROGRAM(self):
            return self.getToken(PostgreSQLParser.PROGRAM, 0)

        def PUBLICATION(self):
            return self.getToken(PostgreSQLParser.PUBLICATION, 0)

        def QUOTE(self):
            return self.getToken(PostgreSQLParser.QUOTE, 0)

        def QUOTES(self):
            return self.getToken(PostgreSQLParser.QUOTES, 0)

        def RANGE(self):
            return self.getToken(PostgreSQLParser.RANGE, 0)

        def READ(self):
            return self.getToken(PostgreSQLParser.READ, 0)

        def REAL(self):
            return self.getToken(PostgreSQLParser.REAL, 0)

        def REASSIGN(self):
            return self.getToken(PostgreSQLParser.REASSIGN, 0)

        def RECURSIVE(self):
            return self.getToken(PostgreSQLParser.RECURSIVE, 0)

        def REF(self):
            return self.getToken(PostgreSQLParser.REF, 0)

        def REFERENCES(self):
            return self.getToken(PostgreSQLParser.REFERENCES, 0)

        def REFERENCING(self):
            return self.getToken(PostgreSQLParser.REFERENCING, 0)

        def REFRESH(self):
            return self.getToken(PostgreSQLParser.REFRESH, 0)

        def REINDEX(self):
            return self.getToken(PostgreSQLParser.REINDEX, 0)

        def RELATIVE_P(self):
            return self.getToken(PostgreSQLParser.RELATIVE_P, 0)

        def RELEASE(self):
            return self.getToken(PostgreSQLParser.RELEASE, 0)

        def RENAME(self):
            return self.getToken(PostgreSQLParser.RENAME, 0)

        def REPEATABLE(self):
            return self.getToken(PostgreSQLParser.REPEATABLE, 0)

        def REPLACE(self):
            return self.getToken(PostgreSQLParser.REPLACE, 0)

        def REPLICA(self):
            return self.getToken(PostgreSQLParser.REPLICA, 0)

        def RESET(self):
            return self.getToken(PostgreSQLParser.RESET, 0)

        def RESTART(self):
            return self.getToken(PostgreSQLParser.RESTART, 0)

        def RESTRICT(self):
            return self.getToken(PostgreSQLParser.RESTRICT, 0)

        def RETURN(self):
            return self.getToken(PostgreSQLParser.RETURN, 0)

        def RETURNS(self):
            return self.getToken(PostgreSQLParser.RETURNS, 0)

        def REVOKE(self):
            return self.getToken(PostgreSQLParser.REVOKE, 0)

        def RIGHT(self):
            return self.getToken(PostgreSQLParser.RIGHT, 0)

        def ROLE(self):
            return self.getToken(PostgreSQLParser.ROLE, 0)

        def ROLLBACK(self):
            return self.getToken(PostgreSQLParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(PostgreSQLParser.ROLLUP, 0)

        def ROUTINE(self):
            return self.getToken(PostgreSQLParser.ROUTINE, 0)

        def ROUTINES(self):
            return self.getToken(PostgreSQLParser.ROUTINES, 0)

        def ROW(self):
            return self.getToken(PostgreSQLParser.ROW, 0)

        def ROWS(self):
            return self.getToken(PostgreSQLParser.ROWS, 0)

        def RULE(self):
            return self.getToken(PostgreSQLParser.RULE, 0)

        def SAVEPOINT(self):
            return self.getToken(PostgreSQLParser.SAVEPOINT, 0)

        def SCALAR(self):
            return self.getToken(PostgreSQLParser.SCALAR, 0)

        def SCHEMA(self):
            return self.getToken(PostgreSQLParser.SCHEMA, 0)

        def SCHEMAS(self):
            return self.getToken(PostgreSQLParser.SCHEMAS, 0)

        def SCROLL(self):
            return self.getToken(PostgreSQLParser.SCROLL, 0)

        def SEARCH(self):
            return self.getToken(PostgreSQLParser.SEARCH, 0)

        def SECURITY(self):
            return self.getToken(PostgreSQLParser.SECURITY, 0)

        def SELECT(self):
            return self.getToken(PostgreSQLParser.SELECT, 0)

        def SEQUENCE(self):
            return self.getToken(PostgreSQLParser.SEQUENCE, 0)

        def SEQUENCES(self):
            return self.getToken(PostgreSQLParser.SEQUENCES, 0)

        def SERIALIZABLE(self):
            return self.getToken(PostgreSQLParser.SERIALIZABLE, 0)

        def SERVER(self):
            return self.getToken(PostgreSQLParser.SERVER, 0)

        def SESSION(self):
            return self.getToken(PostgreSQLParser.SESSION, 0)

        def SESSION_USER(self):
            return self.getToken(PostgreSQLParser.SESSION_USER, 0)

        def SET(self):
            return self.getToken(PostgreSQLParser.SET, 0)

        def SETOF(self):
            return self.getToken(PostgreSQLParser.SETOF, 0)

        def SETS(self):
            return self.getToken(PostgreSQLParser.SETS, 0)

        def SHARE(self):
            return self.getToken(PostgreSQLParser.SHARE, 0)

        def SHOW(self):
            return self.getToken(PostgreSQLParser.SHOW, 0)

        def SIMILAR(self):
            return self.getToken(PostgreSQLParser.SIMILAR, 0)

        def SIMPLE(self):
            return self.getToken(PostgreSQLParser.SIMPLE, 0)

        def SKIP_P(self):
            return self.getToken(PostgreSQLParser.SKIP_P, 0)

        def SMALLINT(self):
            return self.getToken(PostgreSQLParser.SMALLINT, 0)

        def SNAPSHOT(self):
            return self.getToken(PostgreSQLParser.SNAPSHOT, 0)

        def SOME(self):
            return self.getToken(PostgreSQLParser.SOME, 0)

        def SOURCE(self):
            return self.getToken(PostgreSQLParser.SOURCE, 0)

        def SQL_P(self):
            return self.getToken(PostgreSQLParser.SQL_P, 0)

        def STABLE(self):
            return self.getToken(PostgreSQLParser.STABLE, 0)

        def STANDALONE_P(self):
            return self.getToken(PostgreSQLParser.STANDALONE_P, 0)

        def START(self):
            return self.getToken(PostgreSQLParser.START, 0)

        def STATEMENT(self):
            return self.getToken(PostgreSQLParser.STATEMENT, 0)

        def STATISTICS(self):
            return self.getToken(PostgreSQLParser.STATISTICS, 0)

        def STDIN(self):
            return self.getToken(PostgreSQLParser.STDIN, 0)

        def STDOUT(self):
            return self.getToken(PostgreSQLParser.STDOUT, 0)

        def STORAGE(self):
            return self.getToken(PostgreSQLParser.STORAGE, 0)

        def STORED(self):
            return self.getToken(PostgreSQLParser.STORED, 0)

        def STRICT_P(self):
            return self.getToken(PostgreSQLParser.STRICT_P, 0)

        def STRING_P(self):
            return self.getToken(PostgreSQLParser.STRING_P, 0)

        def STRIP_P(self):
            return self.getToken(PostgreSQLParser.STRIP_P, 0)

        def SUBSCRIPTION(self):
            return self.getToken(PostgreSQLParser.SUBSCRIPTION, 0)

        def SUBSTRING(self):
            return self.getToken(PostgreSQLParser.SUBSTRING, 0)

        def SUPPORT(self):
            return self.getToken(PostgreSQLParser.SUPPORT, 0)

        def SYMMETRIC(self):
            return self.getToken(PostgreSQLParser.SYMMETRIC, 0)

        def SYSID(self):
            return self.getToken(PostgreSQLParser.SYSID, 0)

        def SYSTEM_P(self):
            return self.getToken(PostgreSQLParser.SYSTEM_P, 0)

        def SYSTEM_USER(self):
            return self.getToken(PostgreSQLParser.SYSTEM_USER, 0)

        def TABLE(self):
            return self.getToken(PostgreSQLParser.TABLE, 0)

        def TABLES(self):
            return self.getToken(PostgreSQLParser.TABLES, 0)

        def TABLESAMPLE(self):
            return self.getToken(PostgreSQLParser.TABLESAMPLE, 0)

        def TABLESPACE(self):
            return self.getToken(PostgreSQLParser.TABLESPACE, 0)

        def TARGET(self):
            return self.getToken(PostgreSQLParser.TARGET, 0)

        def TEMP(self):
            return self.getToken(PostgreSQLParser.TEMP, 0)

        def TEMPLATE(self):
            return self.getToken(PostgreSQLParser.TEMPLATE, 0)

        def TEMPORARY(self):
            return self.getToken(PostgreSQLParser.TEMPORARY, 0)

        def TEXT_P(self):
            return self.getToken(PostgreSQLParser.TEXT_P, 0)

        def THEN(self):
            return self.getToken(PostgreSQLParser.THEN, 0)

        def TIES(self):
            return self.getToken(PostgreSQLParser.TIES, 0)

        def TIME(self):
            return self.getToken(PostgreSQLParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(PostgreSQLParser.TIMESTAMP, 0)

        def TRAILING(self):
            return self.getToken(PostgreSQLParser.TRAILING, 0)

        def TRANSACTION(self):
            return self.getToken(PostgreSQLParser.TRANSACTION, 0)

        def TRANSFORM(self):
            return self.getToken(PostgreSQLParser.TRANSFORM, 0)

        def TREAT(self):
            return self.getToken(PostgreSQLParser.TREAT, 0)

        def TRIGGER(self):
            return self.getToken(PostgreSQLParser.TRIGGER, 0)

        def TRIM(self):
            return self.getToken(PostgreSQLParser.TRIM, 0)

        def TRUE_P(self):
            return self.getToken(PostgreSQLParser.TRUE_P, 0)

        def TRUNCATE(self):
            return self.getToken(PostgreSQLParser.TRUNCATE, 0)

        def TRUSTED(self):
            return self.getToken(PostgreSQLParser.TRUSTED, 0)

        def TYPE_P(self):
            return self.getToken(PostgreSQLParser.TYPE_P, 0)

        def TYPES_P(self):
            return self.getToken(PostgreSQLParser.TYPES_P, 0)

        def UESCAPE(self):
            return self.getToken(PostgreSQLParser.UESCAPE, 0)

        def UNBOUNDED(self):
            return self.getToken(PostgreSQLParser.UNBOUNDED, 0)

        def UNCOMMITTED(self):
            return self.getToken(PostgreSQLParser.UNCOMMITTED, 0)

        def UNCONDITIONAL(self):
            return self.getToken(PostgreSQLParser.UNCONDITIONAL, 0)

        def UNENCRYPTED(self):
            return self.getToken(PostgreSQLParser.UNENCRYPTED, 0)

        def UNIQUE(self):
            return self.getToken(PostgreSQLParser.UNIQUE, 0)

        def UNKNOWN(self):
            return self.getToken(PostgreSQLParser.UNKNOWN, 0)

        def UNLISTEN(self):
            return self.getToken(PostgreSQLParser.UNLISTEN, 0)

        def UNLOGGED(self):
            return self.getToken(PostgreSQLParser.UNLOGGED, 0)

        def UNTIL(self):
            return self.getToken(PostgreSQLParser.UNTIL, 0)

        def UPDATE(self):
            return self.getToken(PostgreSQLParser.UPDATE, 0)

        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def USING(self):
            return self.getToken(PostgreSQLParser.USING, 0)

        def VACUUM(self):
            return self.getToken(PostgreSQLParser.VACUUM, 0)

        def VALID(self):
            return self.getToken(PostgreSQLParser.VALID, 0)

        def VALIDATE(self):
            return self.getToken(PostgreSQLParser.VALIDATE, 0)

        def VALIDATOR(self):
            return self.getToken(PostgreSQLParser.VALIDATOR, 0)

        def VALUE_P(self):
            return self.getToken(PostgreSQLParser.VALUE_P, 0)

        def VALUES(self):
            return self.getToken(PostgreSQLParser.VALUES, 0)

        def VARCHAR(self):
            return self.getToken(PostgreSQLParser.VARCHAR, 0)

        def VARIADIC(self):
            return self.getToken(PostgreSQLParser.VARIADIC, 0)

        def VERBOSE(self):
            return self.getToken(PostgreSQLParser.VERBOSE, 0)

        def VERSION_P(self):
            return self.getToken(PostgreSQLParser.VERSION_P, 0)

        def VIEW(self):
            return self.getToken(PostgreSQLParser.VIEW, 0)

        def VIEWS(self):
            return self.getToken(PostgreSQLParser.VIEWS, 0)

        def VOLATILE(self):
            return self.getToken(PostgreSQLParser.VOLATILE, 0)

        def WHEN(self):
            return self.getToken(PostgreSQLParser.WHEN, 0)

        def WHITESPACE_P(self):
            return self.getToken(PostgreSQLParser.WHITESPACE_P, 0)

        def WORK(self):
            return self.getToken(PostgreSQLParser.WORK, 0)

        def WRAPPER(self):
            return self.getToken(PostgreSQLParser.WRAPPER, 0)

        def WRITE(self):
            return self.getToken(PostgreSQLParser.WRITE, 0)

        def XML_P(self):
            return self.getToken(PostgreSQLParser.XML_P, 0)

        def XMLATTRIBUTES(self):
            return self.getToken(PostgreSQLParser.XMLATTRIBUTES, 0)

        def XMLCONCAT(self):
            return self.getToken(PostgreSQLParser.XMLCONCAT, 0)

        def XMLELEMENT(self):
            return self.getToken(PostgreSQLParser.XMLELEMENT, 0)

        def XMLEXISTS(self):
            return self.getToken(PostgreSQLParser.XMLEXISTS, 0)

        def XMLFOREST(self):
            return self.getToken(PostgreSQLParser.XMLFOREST, 0)

        def XMLNAMESPACES(self):
            return self.getToken(PostgreSQLParser.XMLNAMESPACES, 0)

        def XMLPARSE(self):
            return self.getToken(PostgreSQLParser.XMLPARSE, 0)

        def XMLPI(self):
            return self.getToken(PostgreSQLParser.XMLPI, 0)

        def XMLROOT(self):
            return self.getToken(PostgreSQLParser.XMLROOT, 0)

        def XMLSERIALIZE(self):
            return self.getToken(PostgreSQLParser.XMLSERIALIZE, 0)

        def XMLTABLE(self):
            return self.getToken(PostgreSQLParser.XMLTABLE, 0)

        def YES_P(self):
            return self.getToken(PostgreSQLParser.YES_P, 0)

        def ZONE(self):
            return self.getToken(PostgreSQLParser.ZONE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bare_label_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBare_label_keyword" ):
                listener.enterBare_label_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBare_label_keyword" ):
                listener.exitBare_label_keyword(self)




    def bare_label_keyword(self):

        localctx = PostgreSQLParser.Bare_label_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1432, self.RULE_bare_label_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10489
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -1073741824) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2477318281427420681) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -55968850065) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -4194305) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & -309237645313) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & -68719480833) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & -288230789576916993) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & -16257) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 1100048596939) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colid(self):
            return self.getTypedRuleContext(PostgreSQLParser.ColidContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_any_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_identifier" ):
                listener.enterAny_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_identifier" ):
                listener.exitAny_identifier(self)




    def any_identifier(self):

        localctx = PostgreSQLParser.Any_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1434, self.RULE_any_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10491
            self.colid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(PostgreSQLParser.Identifier, 0)

        def uescape_(self):
            return self.getTypedRuleContext(PostgreSQLParser.Uescape_Context,0)


        def QuotedIdentifier(self):
            return self.getToken(PostgreSQLParser.QuotedIdentifier, 0)

        def UnicodeQuotedIdentifier(self):
            return self.getToken(PostgreSQLParser.UnicodeQuotedIdentifier, 0)

        def PLSQLVARIABLENAME(self):
            return self.getToken(PostgreSQLParser.PLSQLVARIABLENAME, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = PostgreSQLParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1436, self.RULE_identifier)
        try:
            self.state = 10500
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [554]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10493
                self.match(PostgreSQLParser.Identifier)
                self.state = 10495
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1044,self._ctx)
                if la_ == 1:
                    self.state = 10494
                    self.uescape_()


                pass
            elif token in [555]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10497
                self.match(PostgreSQLParser.QuotedIdentifier)
                pass
            elif token in [559]:
                self.enterOuterAlt(localctx, 3)
                self.state = 10498
                self.match(PostgreSQLParser.UnicodeQuotedIdentifier)
                pass
            elif token in [582]:
                self.enterOuterAlt(localctx, 4)
                self.state = 10499
                self.match(PostgreSQLParser.PLSQLVARIABLENAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[582] = self.a_expr_qual_sempred
        self._predicates[602] = self.b_expr_sempred
        self._predicates[665] = self.json_arguments_sempred
        self._predicates[678] = self.json_name_and_value_list_sempred
        self._predicates[682] = self.json_value_expr_list_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def a_expr_qual_sempred(self, localctx:A_expr_qualContext, predIndex:int):
            if predIndex == 0:
                return self.OnlyAcceptableOps()
         

    def b_expr_sempred(self, localctx:B_exprContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 1)
         

    def json_arguments_sempred(self, localctx:Json_argumentsContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 1)
         

    def json_name_and_value_list_sempred(self, localctx:Json_name_and_value_listContext, predIndex:int):
            if predIndex == 10:
                return self.precpred(self._ctx, 1)
         

    def json_value_expr_list_sempred(self, localctx:Json_value_expr_listContext, predIndex:int):
            if predIndex == 11:
                return self.precpred(self._ctx, 1)
         




